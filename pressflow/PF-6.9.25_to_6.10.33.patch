diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..5008ddf
Binary files /dev/null and b/.DS_Store differ
diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index 794cdb9..69d02fc 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,4 +1,12 @@
-// $Id: CHANGELOG.txt,v 1.253.2.22 2009/01/14 23:34:06 goba Exp $
+// $Id: CHANGELOG.txt,v 1.253.2.25 2009/02/25 21:02:36 goba Exp $
+
+Drupal 6.10, 2009-02-25
+----------------------
+- Fixed a security issue, (Local file inclusion on Windows),
+  see SA-CORE-2009-003
+- Fixed node_feed() so custom fields can show up in RSS feeds.
+- Improved PostgreSQL compatibility.
+- Fixed a variety of small bugs.
 
 Drupal 6.9, 2009-01-14
 ----------------------
@@ -11,9 +19,6 @@ Drupal 6.9, 2009-01-14
   changed for contributed modules, see http://drupal.org/node/322731.
 - Fixed a variety of small bugs.
 
-Drupal 6.9-dev, xxxx-xx-xx (development release)
-----------------------
-
 Drupal 6.8, 2008-12-11
 ----------------------
 - Removed a previous change incompatible with PHP 5.1.x and lower.
diff --git a/PRESSFLOW.txt b/PRESSFLOW.txt
index d98bf68..07fa04a 100644
--- a/PRESSFLOW.txt
+++ b/PRESSFLOW.txt
@@ -1 +1 @@
-6.9.25
+6.10.33
diff --git a/includes/actions.inc b/includes/actions.inc
index 946c939..3b22ac2 100644
--- a/includes/actions.inc
+++ b/includes/actions.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: actions.inc,v 1.8.2.6 2009/01/06 17:02:58 goba Exp $
+// $Id: actions.inc,v 1.8.2.7 2009/02/16 14:34:30 goba Exp $
 
 /**
  * @file
@@ -40,6 +40,7 @@
  *   performs the action, keyed on action ID.
  */
 function actions_do($action_ids, &$object, $context = NULL, $a1 = NULL, $a2 = NULL) {
+  // $stack tracks the number of recursive calls.
   static $stack;
   $stack++;
   if ($stack > variable_get('actions_max_stack', 35)) {
@@ -103,6 +104,7 @@ function actions_do($action_ids, &$object, $context = NULL, $a1 = NULL, $a2 = NU
       $result[$action_ids] = $action_ids($object, $context, $a1, $a2);
     }
   }
+  $stack--;
   return $result;
 }
 
diff --git a/includes/bootstrap.inc b/includes/bootstrap.inc
index a3876ae..1fc0249 100644
--- a/includes/bootstrap.inc
+++ b/includes/bootstrap.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: bootstrap.inc,v 1.206.2.9 2009/01/14 19:10:25 goba Exp $
+// $Id: bootstrap.inc,v 1.206.2.11 2009/02/25 13:49:54 dries Exp $
 
 /**
  * @file
@@ -132,6 +132,16 @@ define('LANGUAGE_NEGOTIATION_PATH', 2);
 define('LANGUAGE_NEGOTIATION_DOMAIN', 3);
 
 /**
+ * Language written left to right. Possible value of $language->direction.
+ */
+define('LANGUAGE_LTR', 0);
+
+/**
+ * Language written right to left. Possible value of $language->direction.
+ */
+define('LANGUAGE_RTL', 1);
+
+/**
  * Start the timer with the specified name. If you start and stop
  * the same timer multiple times, the measured intervals will be
  * accumulated.
@@ -288,7 +298,7 @@ function conf_init() {
   global $base_url, $base_path, $base_root;
 
   // Export the following settings.php variables to the global namespace
-  global $db_url, $db_prefix, $cookie_domain, $conf, $installed_profile, $update_free_access;
+  global $db_url, $db_slave_url, $db_prefix, $cookie_domain, $conf, $installed_profile, $update_free_access;
   $conf = array();
 
   if (isset($_SERVER['HTTP_HOST'])) {
@@ -526,9 +536,10 @@ function variable_del($name) {
   global $conf;
 
   db_query("DELETE FROM {variable} WHERE name = '%s'", $name);
-  cache_clear_all('variables', 'cache');
 
   unset($conf[$name]);
+
+  cache_set('variables', $conf);
 }
 
 
@@ -551,7 +562,7 @@ function page_get_cache($status_only = FALSE) {
   }
   $cache = NULL;
 
-  if (!$user->uid && $_SERVER['REQUEST_METHOD'] == 'GET' && count(drupal_set_message()) == 0) {
+  if (!$user->uid && $_SERVER['REQUEST_METHOD'] == 'GET' && count(drupal_set_message()) == 0 && $_SERVER['SERVER_SOFTWARE'] !== 'PHP CLI' && !isset($_COOKIE['NO_CACHE'])) {
     $cache = cache_get($base_root . request_uri(), 'cache_page');
 
     if (empty($cache)) {
@@ -626,7 +637,6 @@ function drupal_page_header() {
     setcookie('LOGGED_IN', 'Y', $_SERVER['REQUEST_TIME'] + ini_get('session.cookie_lifetime'), '/');
   }     
 
-  header("Expires: Sun, 11 Mar 1984 12:00:00 GMT");
   header("Last-Modified: ". gmdate("D, d M Y H:i:s") ." GMT");
   header("Cache-Control: store, no-cache, must-revalidate");
   header("Cache-Control: post-check=0, pre-check=0", FALSE);
@@ -649,9 +659,10 @@ function drupal_page_cache_header($cache) {
   if (variable_get('reverse_proxy', 0)) {
     // Optimize the headers for anonymous users when we have a reverse proxy such as Squid
     $lifetime = variable_get('cache_lifetime', 300);
-    header('Expires: ' . gmdate('D, d M Y H:i:s', $cache->created + $lifetime) . ' GMT');
-    $age = abs(REQUEST_TIME - $cache->created);
-    header('Cache-Control: public, max-age=' . max(0, $lifetime - $age));
+    header('Expires: Sun, 11 Mar 1985 12:00:00 GMT');
+    $age = abs($_SERVER['REQUEST_TIME'] - $cache->created);
+    header('Cache-Control: public, max-age=0');
+    header('Cache-Control: public, s-maxage=' . max(0, $lifetime - $age));
   }
   else {
     // See if the client has provided the required HTTP headers:
diff --git a/includes/common.inc b/includes/common.inc
index 0e5d7c2..bb6ecb2 100644
--- a/includes/common.inc
+++ b/includes/common.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: common.inc,v 1.756.2.42 2009/01/14 23:34:07 goba Exp $
+// $Id: common.inc,v 1.756.2.47 2009/02/25 21:02:36 goba Exp $
 
 /**
  * @file
@@ -1411,7 +1411,6 @@ function url($path = NULL, $options = array()) {
 
   global $base_url;
   static $script;
-  static $clean_url;
 
   if (!isset($script)) {
     // On some web servers, such as IIS, we can't omit "index.php". So, we
@@ -1420,11 +1419,6 @@ function url($path = NULL, $options = array()) {
     $script = (strpos($_SERVER['SERVER_SOFTWARE'], 'Apache') === FALSE) ? 'index.php' : '';
   }
 
-  // Cache the clean_url variable to improve performance.
-  if (!isset($clean_url)) {
-    $clean_url = (bool)variable_get('clean_url', '0');
-  }
-
   if (!isset($options['base_url'])) {
     // The base_url might be rewritten from the language rewrite in domain mode.
     $options['base_url'] = $base_url;
@@ -1450,7 +1444,7 @@ function url($path = NULL, $options = array()) {
   $prefix = empty($path) ? rtrim($options['prefix'], '/') : $options['prefix'];
   $path = drupal_urlencode($prefix . $path);
 
-  if ($clean_url) {
+  if (variable_get('clean_url', '0')) {
     // With Clean URLs.
     if ($options['query']) {
       return $base . $path .'?'. $options['query'] . $options['fragment'];
@@ -1539,6 +1533,8 @@ function drupal_attributes($attributes = array()) {
  *   an HTML string containing a link to the given path.
  */
 function l($text, $path, $options = array()) {
+  global $language;
+
   // Merge in defaults.
   $options += array(
       'attributes' => array(),
@@ -1546,7 +1542,8 @@ function l($text, $path, $options = array()) {
     );
 
   // Append active class.
-  if ($path == $_GET['q'] || ($path == '<front>' && drupal_is_front_page())) {
+  if (($path == $_GET['q'] || ($path == '<front>' && drupal_is_front_page())) &&
+      (empty($options['language']) || $options['language']->language == $language->language)) {
     if (isset($options['attributes']['class'])) {
       $options['attributes']['class'] .= ' active';
     }
@@ -1757,7 +1754,7 @@ function drupal_add_css($path = NULL, $type = 'module', $media = 'all', $preproc
     $css[$media][$type][$path] = $preprocess;
 
     // If the current language is RTL, add the CSS file with RTL overrides.
-    if (defined('LANGUAGE_RTL') && $language->direction == LANGUAGE_RTL) {
+    if ($language->direction == LANGUAGE_RTL) {
       $rtl_path = str_replace('.css', '-rtl.css', $path);
       if (file_exists($rtl_path)) {
         $css[$media][$type][$rtl_path] = $preprocess;
diff --git a/includes/database.inc b/includes/database.inc
index bbbbd6e..72e48ed 100644
--- a/includes/database.inc
+++ b/includes/database.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: database.inc,v 1.92.2.3 2008/10/20 09:13:04 goba Exp $
+// $Id: database.inc,v 1.92.2.4 2009/02/16 14:41:58 goba Exp $
 
 /**
  * @file
@@ -179,7 +179,7 @@ function db_set_active($name = 'default') {
   else {
     unset($active_slave_db);
   }
-  
+
   return $previous_name;
 }
 
@@ -517,7 +517,7 @@ function db_escape_table($string) {
  *
  *  - 'primary key': An array of one or more key column specifiers (see below)
  *    that form the primary key.
- *  - 'unique key': An associative array of unique keys ('keyname' =>
+ *  - 'unique keys': An associative array of unique keys ('keyname' =>
  *    specification).  Each specification is an array of one or more
  *    key column specifiers (see below) that form a unique key on the table.
  *  - 'indexes':  An associative array of indexes ('indexame' =>
diff --git a/includes/form.inc b/includes/form.inc
index 4da2390..fb1691e 100644
--- a/includes/form.inc
+++ b/includes/form.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: form.inc,v 1.265.2.17 2009/01/12 16:07:23 goba Exp $
+// $Id: form.inc,v 1.265.2.19 2009/02/22 18:12:46 goba Exp $
 
 /**
  * @defgroup forms Form builder functions
@@ -1169,7 +1169,12 @@ function form_type_image_button_value($form, $edit = FALSE) {
  */
 function form_type_checkbox_value($form, $edit = FALSE) {
   if ($edit !== FALSE) {
-    return !empty($edit) ? $form['#return_value'] : 0;
+    if (empty($form['#disabled'])) {
+      return !empty($edit) ? $form['#return_value'] : 0;
+    }
+    else {
+      return $form['#default_value'];
+    }
   }
 }
 
@@ -1533,7 +1538,7 @@ function theme_radio($element) {
   $output .= (check_plain($element['#value']) == $element['#return_value']) ? ' checked="checked" ' : ' ';
   $output .= drupal_attributes($element['#attributes']) .' />';
   if (!is_null($element['#title'])) {
-    $output = '<label class="option">'. $output .' '. $element['#title'] .'</label>';
+    $output = '<label class="option" for="'. $element['#id'] .'">'. $output .' '. $element['#title'] .'</label>';
   }
 
   unset($element['#title']);
@@ -1872,7 +1877,7 @@ function theme_checkbox($element) {
   $checkbox .= drupal_attributes($element['#attributes']) .' />';
 
   if (!is_null($element['#title'])) {
-    $checkbox = '<label class="option">'. $checkbox .' '. $element['#title'] .'</label>';
+    $checkbox = '<label class="option" for="'. $element['#id'] .'">'. $checkbox .' '. $element['#title'] .'</label>';
   }
 
   unset($element['#title']);
diff --git a/includes/install.inc b/includes/install.inc
index 1d5f5ac..17aa518 100644
--- a/includes/install.inc
+++ b/includes/install.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: install.inc,v 1.56.2.3 2008/08/14 09:26:43 dries Exp $
+// $Id: install.inc,v 1.56.2.4 2009/02/16 10:25:02 goba Exp $
 
 define('SCHEMA_UNINSTALLED', -1);
 define('SCHEMA_INSTALLED', 0);
@@ -281,7 +281,7 @@ function drupal_verify_profile($profile, $locale) {
 
   // Get a list of modules required by this profile.
   $function = $profile .'_profile_modules';
-  $module_list = array_merge(drupal_required_modules(), $function(), ($locale != 'en' ? array('locale') : array()));
+  $module_list = array_merge(drupal_required_modules(), $function(), ($locale != 'en' && !empty($locale) ? array('locale') : array()));
 
   // Get a list of modules that exist in Drupal's assorted subdirectories.
   $present_modules = array();
diff --git a/includes/menu.inc b/includes/menu.inc
index eb95127..29635e6 100644
--- a/includes/menu.inc
+++ b/includes/menu.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: menu.inc,v 1.255.2.27 2008/11/10 17:30:39 goba Exp $
+// $Id: menu.inc,v 1.255.2.28 2009/02/09 16:28:21 dries Exp $
 
 /**
  * @file
@@ -552,15 +552,18 @@ function _menu_item_localize(&$item, $map, $link_translate = FALSE) {
  *   a non existing node) then this function return FALSE.
  */
 function _menu_translate(&$router_item, $map, $to_arg = FALSE) {
+  if ($to_arg) {
+    // Fill in missing path elements, such as the current uid.
+    _menu_link_map_translate($map, $router_item['to_arg_functions']);
+  }
+  // The $path_map saves the pieces of the path as strings, while elements in
+  // $map may be replaced with loaded objects.
   $path_map = $map;
   if (!_menu_load_objects($router_item, $map)) {
     // An error occurred loading an object.
     $router_item['access'] = FALSE;
     return FALSE;
   }
-  if ($to_arg) {
-    _menu_link_map_translate($path_map, $router_item['to_arg_functions']);
-  }
 
   // Generate the link path for the page request or local tasks.
   $link_map = explode('/', $router_item['path']);
diff --git a/includes/module.inc b/includes/module.inc
index 22a8466..33bee08 100644
--- a/includes/module.inc
+++ b/includes/module.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: module.inc,v 1.115 2007/12/27 12:31:05 goba Exp $
+// $Id: module.inc,v 1.115.2.1 2009/02/16 10:32:10 goba Exp $
 
 /**
  * @file
@@ -48,8 +48,8 @@ function module_list($refresh = FALSE, $bootstrap = TRUE, $sort = FALSE, $fixed_
   static $list, $sorted_list;
 
   if ($refresh || $fixed_list) {
-    unset($sorted_list);
     $list = array();
+    $sorted_list = NULL;
     if ($fixed_list) {
       foreach ($fixed_list as $name => $module) {
         drupal_get_filename('module', $name, $module['filename']);
diff --git a/includes/pager.inc b/includes/pager.inc
index f88a35f..06435e4 100644
--- a/includes/pager.inc
+++ b/includes/pager.inc
@@ -69,10 +69,21 @@ function pager_query($query, $limit = 10, $element = 0, $count_query = NULL) {
   $pager_page_array = explode(',', $page);
 
   // We calculate the total of pages as ceil(items / limit).
-  $pager_total_items[$element] = db_result(db_query($count_query, $args));
+  if (isset($_SESSION['not_slavesafe']) && $_SESSION['not_slavesafe']) {
+    $pager_total_items[$element] = db_result(db_query($count_query, $args));
+  }
+  else {
+    $pager_total_items[$element] = db_result(db_query_slave($count_query, $args));
+  }
   $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
   $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));
-  return db_query_range($query, $args, $pager_page_array[$element] * $limit, $limit);
+  if (isset($_SESSION['not_slavesafe']) && $_SESSION['not_slavesafe']) {
+    unset($_SESSION['not_slavesafe']);
+    return db_query_range($query, $args, $pager_page_array[$element] * $limit, $limit);
+  }
+  else {
+    return db_query_range_slave($query, $args, $pager_page_array[$element] * $limit, $limit);
+  }
 }
 
 /**
diff --git a/includes/theme.inc b/includes/theme.inc
index 1765385..d3c2f20 100644
--- a/includes/theme.inc
+++ b/includes/theme.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: theme.inc,v 1.415.2.17 2008/12/10 21:09:05 goba Exp $
+// $Id: theme.inc,v 1.415.2.19 2009/02/25 21:02:16 goba Exp $
 
 /**
  * @file
@@ -1133,6 +1133,7 @@ function theme_status_messages($display = NULL) {
  *   A string containing an unordered list of links.
  */
 function theme_links($links, $attributes = array('class' => 'links')) {
+  global $language;
   $output = '';
 
   if (count($links) > 0) {
@@ -1151,7 +1152,8 @@ function theme_links($links, $attributes = array('class' => 'links')) {
       if ($i == $num_links) {
         $class .= ' last';
       }
-      if (isset($link['href']) && ($link['href'] == $_GET['q'] || ($link['href'] == '<front>' && drupal_is_front_page()))) {
+      if (isset($link['href']) && ($link['href'] == $_GET['q'] || ($link['href'] == '<front>' && drupal_is_front_page()))
+          && (empty($link['language']) || $link['language']->language == $language->language)) {
         $class .= ' active';
       }
       $output .= '<li'. drupal_attributes(array('class' => $class)) .'>';
@@ -1866,6 +1868,7 @@ function template_preprocess_page(&$variables) {
   $suggestion = 'page';
   $suggestions = array();
   while ($arg = arg($i++)) {
+    $arg = str_replace(array('/', '\\', '\0'), '', $arg);
     $suggestions[] = $suggestion .'-'. $arg;
     if (!is_numeric($arg)) {
       $suggestion .= '-'. $arg;
diff --git a/install.php b/install.php
index a097c90..c22bf96 100644
--- a/install.php
+++ b/install.php
@@ -1,5 +1,5 @@
 <?php
-// $Id: install.php,v 1.113.2.7 2008/10/22 16:31:37 goba Exp $
+// $Id: install.php,v 1.113.2.8 2009/02/25 11:47:36 goba Exp $
 
 require_once './includes/install.inc';
 
@@ -561,9 +561,11 @@ function install_select_locale($profilename) {
       }
     }
 
-    foreach ($locales as $locale) {
-      if ($_POST['locale'] == $locale->name) {
-        return $locale->name;
+    if (!empty($_POST['locale'])) {
+      foreach ($locales as $locale) {
+        if ($_POST['locale'] == $locale->name) {
+          return $locale->name;
+        }
       }
     }
 
diff --git a/misc/drupal.js b/misc/drupal.js
index 6c42b94..530c7e7 100644
--- a/misc/drupal.js
+++ b/misc/drupal.js
@@ -252,17 +252,17 @@ Drupal.getSelection = function (element) {
  */
 Drupal.ahahError = function(xmlhttp, uri) {
   if (xmlhttp.status == 200) {
-    if (jQuery.trim($(xmlhttp.responseText).text())) {
+    if (jQuery.trim(xmlhttp.responseText)) {
       var message = Drupal.t("An error occurred. \n@uri\n@text", {'@uri': uri, '@text': xmlhttp.responseText });
     }
     else {
-      var message = Drupal.t("An error occurred. \n@uri\n(no information available).", {'@uri': uri, '@text': xmlhttp.responseText });
+      var message = Drupal.t("An error occurred. \n@uri\n(no information available).", {'@uri': uri });
     }
   }
   else {
     var message = Drupal.t("An HTTP error @status occurred. \n@uri", {'@uri': uri, '@status': xmlhttp.status });
   }
-  return message;
+  return message.replace(/\n/g, '<br />');
 }
 
 // Global Killswitch on the <html> element
diff --git a/modules/aggregator/aggregator.info b/modules/aggregator/aggregator.info
index 5cd8b54..053055d 100644
--- a/modules/aggregator/aggregator.info
+++ b/modules/aggregator/aggregator.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/block/block.info b/modules/block/block.info
index 2a4e1d6..527c728 100644
--- a/modules/block/block.info
+++ b/modules/block/block.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/blog/blog.info b/modules/blog/blog.info
index 751cd43..86c8eb3 100644
--- a/modules/blog/blog.info
+++ b/modules/blog/blog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/blog/blog.module b/modules/blog/blog.module
index e11ca18..6e7d998 100644
--- a/modules/blog/blog.module
+++ b/modules/blog/blog.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: blog.module,v 1.297.2.3 2008/05/19 07:27:35 goba Exp $
+// $Id: blog.module,v 1.297.2.4 2009/02/25 12:21:53 goba Exp $
 
 /**
  * @file
@@ -49,7 +49,8 @@ function blog_user($type, &$edit, &$user) {
     $user->content['summary']['blog'] =  array(
       '#type' => 'user_profile_item',
       '#title' => t('Blog'),
-      '#value' => l(t('View recent blog entries'), "blog/$user->uid", array('attributes' => array('title' => t("Read @username's latest blog entries.", array('@username' => $user->name))))),
+      // l() escapes the attributes, so we should not escape !username here.
+      '#value' => l(t('View recent blog entries'), "blog/$user->uid", array('attributes' => array('title' => t("Read !username's latest blog entries.", array('!username' => $user->name))))),
       '#attributes' => array('class' => 'blog'),
     );
   }
@@ -104,8 +105,8 @@ function blog_form(&$node) {
  */
 function blog_view($node, $teaser = FALSE, $page = FALSE) {
   if ($page) {
-    // Breadcrumb navigation
-    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('Blogs'), 'blog'), l(t("@name's blog", array('@name' => $node->name)), 'blog/'. $node->uid)));
+    // Breadcrumb navigation. l() escapes the title, so we should not escape !name. 
+    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('Blogs'), 'blog'), l(t("!name's blog", array('!name' => $node->name)), 'blog/'. $node->uid)));
   }
   return node_prepare($node, $teaser);
 }
@@ -118,10 +119,11 @@ function blog_link($type, $node = NULL, $teaser = FALSE) {
 
   if ($type == 'node' && $node->type == 'blog') {
     if (arg(0) != 'blog' || arg(1) != $node->uid) {
+      // This goes to l() and therefore escapes !username in both the title and attributes.
       $links['blog_usernames_blog'] = array(
-        'title' => t("@username's blog", array('@username' => $node->name)),
+        'title' => t("!username's blog", array('!username' => $node->name)),
         'href' => "blog/$node->uid",
-        'attributes' => array('title' => t("Read @username's latest blog entries.", array('@username' => $node->name)))
+        'attributes' => array('title' => t("Read !username's latest blog entries.", array('!username' => $node->name)))
       );
     }
   }
diff --git a/modules/blogapi/blogapi.info b/modules/blogapi/blogapi.info
index 5ebf168..b62897d 100644
--- a/modules/blogapi/blogapi.info
+++ b/modules/blogapi/blogapi.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/book/book.info b/modules/book/book.info
index 4f36642..e6e7815 100644
--- a/modules/book/book.info
+++ b/modules/book/book.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/book/book.module b/modules/book/book.module
index 6fa42b2..9389b2f 100644
--- a/modules/book/book.module
+++ b/modules/book/book.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: book.module,v 1.454.2.5 2008/07/03 06:38:46 dries Exp $
+// $Id: book.module,v 1.454.2.6 2009/02/25 11:47:37 goba Exp $
 
 /**
  * @file
@@ -885,7 +885,7 @@ function template_preprocess_book_export_html(&$variables) {
   $variables['title'] = check_plain($variables['title']);
   $variables['base_url'] = $base_url;
   $variables['language'] = $language;
-  $variables['language_rtl'] = (defined('LANGUAGE_RTL') && $language->direction == LANGUAGE_RTL) ? TRUE : FALSE;
+  $variables['language_rtl'] = ($language->direction == LANGUAGE_RTL);
   $variables['head'] = drupal_get_html_head();
 }
 
diff --git a/modules/color/color.info b/modules/color/color.info
index c9f77f0..6b15d1b 100644
--- a/modules/color/color.info
+++ b/modules/color/color.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/color/color.module b/modules/color/color.module
index db73768..045fa45 100644
--- a/modules/color/color.module
+++ b/modules/color/color.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: color.module,v 1.39 2008/01/23 09:43:25 goba Exp $
+// $Id: color.module,v 1.39.2.1 2009/02/25 11:47:37 goba Exp $
 
 /**
  * Implementation of hook_help().
@@ -93,7 +93,7 @@ function _color_page_alter(&$vars) {
 
           // If the current language is RTL and the CSS file had an RTL variant,
           // pull out the non-colored and add rewritten RTL stylesheet.
-          if (defined('LANGUAGE_RTL') && $language->direction == LANGUAGE_RTL) {
+          if ($language->direction == LANGUAGE_RTL) {
             $rtl_old_path = str_replace('.css', '-rtl.css', $old_path);
             $rtl_color_path = str_replace('.css', '-rtl.css', $color_path);
             if (file_exists($rtl_color_path)) {
diff --git a/modules/comment/comment.info b/modules/comment/comment.info
index 3ab7e8b..6ff2108 100644
--- a/modules/comment/comment.info
+++ b/modules/comment/comment.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/contact/contact.info b/modules/contact/contact.info
index f96c492..1b7f2da 100644
--- a/modules/contact/contact.info
+++ b/modules/contact/contact.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/cookie_cache_bypass/cookie_cache_bypass.info b/modules/cookie_cache_bypass/cookie_cache_bypass.info
new file mode 100644
index 0000000..57240f2
--- /dev/null
+++ b/modules/cookie_cache_bypass/cookie_cache_bypass.info
@@ -0,0 +1,3 @@
+name = Cookie Cache Bypass
+description = Sets a cookie on form submission directing a reverse proxy to temporarily not serve cached pages for an anonymous user that just submitted content.
+core = 6.x
diff --git a/modules/cookie_cache_bypass/cookie_cache_bypass.module b/modules/cookie_cache_bypass/cookie_cache_bypass.module
new file mode 100644
index 0000000..1c54e32
--- /dev/null
+++ b/modules/cookie_cache_bypass/cookie_cache_bypass.module
@@ -0,0 +1,10 @@
+<?php
+
+function cookie_cache_bypass_form_alter(&$form, $form_state, $form_id) {
+  $form['#submit'][] = 'cookie_cache_bypass_submit';
+}
+
+function cookie_cache_bypass_submit() {
+  $lifetime = variable_get('cache_lifetime', 300);
+  setcookie('NO_CACHE', 'Y', $_SERVER['REQUEST_TIME'] + ($lifetime + 300), '/');
+}
diff --git a/modules/dblog/dblog.info b/modules/dblog/dblog.info
index 3ef82b1..5c31697 100644
--- a/modules/dblog/dblog.info
+++ b/modules/dblog/dblog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/filter/filter.info b/modules/filter/filter.info
index 4795370..19b6987 100644
--- a/modules/filter/filter.info
+++ b/modules/filter/filter.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/forum/forum.info b/modules/forum/forum.info
index 4bf30b2..c450515 100644
--- a/modules/forum/forum.info
+++ b/modules/forum/forum.info
@@ -7,8 +7,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/help/help.info b/modules/help/help.info
index a22ac79..1d237b4 100644
--- a/modules/help/help.info
+++ b/modules/help/help.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/locale/locale.info b/modules/locale/locale.info
index ab23679..0efb98e 100644
--- a/modules/locale/locale.info
+++ b/modules/locale/locale.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/locale/locale.module b/modules/locale/locale.module
index 5ecf0ba..1ad7576 100644
--- a/modules/locale/locale.module
+++ b/modules/locale/locale.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: locale.module,v 1.212.2.5 2008/10/20 09:31:06 goba Exp $
+// $Id: locale.module,v 1.212.2.6 2009/02/25 11:47:37 goba Exp $
 
 /**
  * @file
@@ -12,17 +12,6 @@
  *   Gettext portable object files are supported.
  */
 
-/**
- * Language written left to right. Possible value of $language->direction.
- */
-define('LANGUAGE_LTR', 0);
-
-/**
- * Language written right to left. Possible value of $language->direction.
- */
-define('LANGUAGE_RTL', 1);
-
-
 // ---------------------------------------------------------------------------------
 // Hook implementations
 
diff --git a/modules/menu/menu.admin.inc b/modules/menu/menu.admin.inc
index b49c4d7..f26e840 100644
--- a/modules/menu/menu.admin.inc
+++ b/modules/menu/menu.admin.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: menu.admin.inc,v 1.26.2.3 2008/02/11 15:12:53 goba Exp $
+// $Id: menu.admin.inc,v 1.26.2.4 2009/02/25 13:15:40 goba Exp $
 
 /**
  * @file
@@ -366,7 +366,7 @@ function menu_item_delete_submit($form, &$form_state) {
  * Process menu and menu item add/edit form submissions.
  */
 function menu_edit_item_submit($form, &$form_state) {
-  $item = $form_state['values']['menu'];
+  $item = &$form_state['values']['menu'];
 
   // The value of "hidden" is the opposite of the value
   // supplied by the "enabled" checkbox.
diff --git a/modules/menu/menu.info b/modules/menu/menu.info
index dac1748..4060db1 100644
--- a/modules/menu/menu.info
+++ b/modules/menu/menu.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/menu/menu.module b/modules/menu/menu.module
index 54f9801..497abbd 100644
--- a/modules/menu/menu.module
+++ b/modules/menu/menu.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: menu.module,v 1.157.2.3 2008/05/10 06:53:53 dries Exp $
+// $Id: menu.module,v 1.157.2.5 2009/02/25 13:15:40 goba Exp $
 
 /**
  * @file
@@ -163,11 +163,13 @@ function menu_theme() {
  */
 function menu_enable() {
   menu_rebuild();
-  $link = db_fetch_array(db_query("SELECT mlid AS plid, menu_name from {menu_links} WHERE link_path = 'admin/build/menu' AND module = 'system'"));
-  $link['router_path'] = 'admin/build/menu-customize/%';
-  $link['module'] = 'menu';
+  $base_link = db_fetch_array(db_query("SELECT mlid AS plid, menu_name from {menu_links} WHERE link_path = 'admin/build/menu' AND module = 'system'"));
+  $base_link['router_path'] = 'admin/build/menu-customize/%';
+  $base_link['module'] = 'menu';
   $result = db_query("SELECT * FROM {menu_custom}");
   while ($menu = db_fetch_array($result)) {
+    // $link is passed by reference to menu_link_save(), so we make a copy of $base_link.
+    $link = $base_link;
     $link['mlid'] = 0;
     $link['link_title'] = $menu['title'];
     $link['link_path'] = 'admin/build/menu-customize/'. $menu['menu_name'];
@@ -296,7 +298,7 @@ function menu_nodeapi(&$node, $op) {
     case 'insert':
     case 'update':
       if (isset($node->menu)) {
-        $item = $node->menu;
+        $item = &$node->menu;
         if (!empty($item['delete'])) {
           menu_link_delete($item['mlid']);
         }
diff --git a/modules/node/node.info b/modules/node/node.info
index 3517b1a..dd63c9f 100644
--- a/modules/node/node.info
+++ b/modules/node/node.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/node/node.module b/modules/node/node.module
index 0586aa0..d52f384 100644
--- a/modules/node/node.module
+++ b/modules/node/node.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: node.module,v 1.947.2.13 2009/01/14 23:34:07 goba Exp $
+// $Id: node.module,v 1.947.2.15 2009/02/16 14:39:40 goba Exp $
 
 /**
  * @file
@@ -743,10 +743,10 @@ function node_load($param = array(), $revision = NULL, $reset = NULL) {
   // No db_rewrite_sql is applied so as to get complete indexing for search.
   if ($revision) {
     array_unshift($arguments, $revision);
-    $node = db_fetch_object(db_query('SELECT '. $fields .' FROM {node} n INNER JOIN {users} u ON u.uid = n.uid INNER JOIN {node_revisions} r ON r.nid = n.nid AND r.vid = %d WHERE '. $cond, $arguments));
+    $node = db_fetch_object(db_query_slave('SELECT '. $fields .' FROM {node} n INNER JOIN {users} u ON u.uid = n.uid INNER JOIN {node_revisions} r ON r.nid = n.nid AND r.vid = %d WHERE '. $cond, $arguments));
   }
   else {
-    $node = db_fetch_object(db_query('SELECT '. $fields .' FROM {node} n INNER JOIN {users} u ON u.uid = n.uid INNER JOIN {node_revisions} r ON r.vid = n.vid WHERE '. $cond, $arguments));
+    $node = db_fetch_object(db_query_slave('SELECT '. $fields .' FROM {node} n INNER JOIN {users} u ON u.uid = n.uid INNER JOIN {node_revisions} r ON r.vid = n.vid WHERE '. $cond, $arguments));
   }
 
   if ($node && $node->nid) {
@@ -832,6 +832,7 @@ function node_submit($node) {
     }
     else {
       $node->teaser = '';
+      $node->format = 0;
     }
   }
 
@@ -1675,8 +1676,23 @@ function node_feed($nids = FALSE, $channel = array()) {
         $item = node_prepare($item, $teaser);
       }
 
-      // Allow modules to change $node->teaser before viewing.
+      // Allow modules to change $node->content before the node is rendered.
       node_invoke_nodeapi($item, 'view', $teaser, FALSE);
+
+      // Set the proper node property, then unset unused $node property so that a
+      // bad theme can not open a security hole.
+      $content = drupal_render($item->content);
+      if ($teaser) {
+        $item->teaser = $content;
+        unset($item->body);
+      }
+      else {
+        $item->body = $content;
+        unset($item->teaser);
+      }
+    
+      // Allow modules to modify the fully-built node.
+      node_invoke_nodeapi($item, 'alter', $teaser, FALSE);
     }
 
     // Allow modules to add additional item fields and/or modify $item
diff --git a/modules/openid/openid.info b/modules/openid/openid.info
index bece53e..96736f0 100644
--- a/modules/openid/openid.info
+++ b/modules/openid/openid.info
@@ -5,8 +5,8 @@ version = VERSION
 package = Core - optional
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/path/path.info b/modules/path/path.info
index 42a1711..e05299f 100644
--- a/modules/path/path.info
+++ b/modules/path/path.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/php/php.info b/modules/php/php.info
index 59b34dc..24873cf 100644
--- a/modules/php/php.info
+++ b/modules/php/php.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/ping/ping.info b/modules/ping/ping.info
index 603d20b..ba431eb 100644
--- a/modules/ping/ping.info
+++ b/modules/ping/ping.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/poll/poll.info b/modules/poll/poll.info
index fef456a..e757320 100644
--- a/modules/poll/poll.info
+++ b/modules/poll/poll.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/profile/profile.info b/modules/profile/profile.info
index ff79fca..d0a320b 100644
--- a/modules/profile/profile.info
+++ b/modules/profile/profile.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/search/search.info b/modules/search/search.info
index 47df322..cf170e4 100644
--- a/modules/search/search.info
+++ b/modules/search/search.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/search/search.module b/modules/search/search.module
index 22c9d0c..358899f 100644
--- a/modules/search/search.module
+++ b/modules/search/search.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: search.module,v 1.250.2.4 2008/09/17 06:42:20 goba Exp $
+// $Id: search.module,v 1.250.2.5 2009/02/25 16:17:40 goba Exp $
 
 /**
  * @file
@@ -637,7 +637,9 @@ function search_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
       while ($link = db_fetch_object($result)) {
         $output[] = $link->caption;
       }
-      return '<a>('. implode(', ', $output) .')</a>';
+      if (count($output)) {
+        return '<a>('. implode(', ', $output) .')</a>';
+      }
     // Reindex the node when it is updated.  The node is automatically indexed
     // when it is added, simply by being added to the node table.
     case 'update':
diff --git a/modules/simpletest/BACKPORT.txt b/modules/simpletest/BACKPORT.txt
new file mode 100644
index 0000000..b967731
--- /dev/null
+++ b/modules/simpletest/BACKPORT.txt
@@ -0,0 +1,53 @@
+$Id: BACKPORT.txt,v 1.1.2.5 2009/04/23 05:39:52 boombatower Exp $
+
+AUTHOR
+------
+Jimmy Berry ("boombatower", http://drupal.org/user/214218)
+
+PURPOSE
+-------
+This document describes the changes necessary to backport Drupal 7 core
+SimpleTest for Drupal 6. This record is useful when trying to backport new
+features from Drupal 7.
+
+CHANGES
+-------
+All changes are placed bellow the line they are changing and the original line
+is then commented out. This makes it easy to see what was done when merging
+later changes.
+
+The last backported core CVS ID for the file is listed just bellow the actual
+CVS ID with the prefix "Core: ".
+
+DrupalWebTestCase
+-----------------
+Document as described above.
+
+Error/Exception handling (simpletest.function.inc)
+---------------------------------------------
+The necessary core error/exception handling function from common.inc.
+
+SimpleTest module (simpletest.module)
+-------------------------------------
+  * simpletest_get_all_tests()
+  * simpletest_run_tests()
+  * _simpletest_batch_finished()
+  * simpletest_clean_database
+    - Added simpletest_get_like_tables()
+  * simpletest_clean_temporary_directory()
+  * simpletest_test_form()
+  * _drupal_decode_exception()
+  * Added hook_form_system_modules_alter()
+
+SimpleTest installer (simpletest.install)
+-----------------------------------------
+  * Added update hooks.
+  * Added requirements check for configuration file modifications.
+
+JavaScript (simpletest.js)
+--------------------------
+  * Changed function attach syntax in both behaviors.
+
+CLI script (run-tests.sh)
+-------------------------
+  * Backported database calls.
diff --git a/modules/simpletest/CHANGELOG.txt b/modules/simpletest/CHANGELOG.txt
index 05bf342..0c02b3e 100644
--- a/modules/simpletest/CHANGELOG.txt
+++ b/modules/simpletest/CHANGELOG.txt
@@ -1,8 +1,57 @@
-// $Id: CHANGELOG.txt,v 1.1.2.42 2008/10/22 23:18:15 boombatower Exp $
+// $Id: CHANGELOG.txt,v 1.1.2.80 2009/04/23 05:41:34 boombatower Exp $
 
-SimpleTest 6.x-2.6, xxxx-xx-xx (development version)
+SimpleTest 6.x-2.9, xxxx-xx-xx (development version)
 ------------------------------
 
+SimpleTest 6.x-2.8, 2009-04-23
+------------------------------
+- Bugs:
+   * #382334: drupalGetNodeByTitle uses node_load_multiple in 6.x.
+   * #385152: Clear user_access() cache.
+   * Change file in drupalGetTestFiles() to use ereg() format used in Drupal 6.
+   * #430512 by soxofaan: Drupal 7 style database code in run-tests.sh.
+   * #430682: backport: run-tests.sh does not work with non-default server port.
+- Changes:
+   * #346844: Clear language statics to remove locale module errors.
+   * #400296 by carlos8f: Use "SHOW TABLES" in simpletest_get_like_tables().
+   * #390232: Update 313902-2.patch to D6.10 misc/drupal.js
+   * #409372 by Dave Reid: Hide modules that have hidden = TRUE on admin/build/modules.
+   * #415864: Backport sample files.
+   * #400296: Revert: Use "SHOW TABLES" in simpletest_get_like_tables().
+   * #409294 by wlp1979: Add extra condition to getAssertionCall() for DrupalWebTestCaseCore.
+   * Merge DrupalWebTestCase change into DrupalWebTestCaseCore.
+   * Move "core" directory files into root.
+   * #442436: Full backport of Drupal 7 SimpleTest and common.inc functions.
+
+SimpleTest 6.x-2.7, 2009-02-16
+------------------------------
+- Bugs:
+   * #372697: Content type created but not  "appearing".
+   * #373722: Table {node_revision} doesn't exist
+- Changes:
+   * #370966: Ignore 1.x style tests.
+   * Format fix.
+   * #373172: Add curl requirement to documentation.
+
+SimpleTest 6.x-2.6, 2009-02-07
+------------------------------
+- Complete backport of Drupal 7.x SimpleTest module. (voids all backports).
+   * Added header to all relevant files.
+   * Updated INSTALL.txt.
+   * #369952: Clarify INSTALL.txt.
+   * Add drupalLogout() override.
+   * Add equivilent auto-clear user code.
+   * #359577: Add run-tests.sh to 6--2 branch.
+- Backports:
+   * #305150: Keep running tests checked.
+   * #313902: DX: Show fatal errors in tests. (Added to INSTALL.txt)
+   * #304940: SimpleTest shouldn't try to upload non files.
+   * #308186: cURL 7.18.2 and SimpleTest module bitterly despise one another. (again?)
+   * #330582: Retrieve HTTP response headers.
+   * #336043: Simpletest speedup: skip call to curlExec() in curlConnect().
+- Changes:
+   * #334679 by hass: improve update path from 5.x and 6.x-1.x to 6.x-2.x.
+
 SimpleTest 6.x-2.5, 2008-10-22
 ------------------------------
 - Backports:
diff --git a/modules/simpletest/INSTALL.txt b/modules/simpletest/INSTALL.txt
index 9b69145..d3e69d7 100644
--- a/modules/simpletest/INSTALL.txt
+++ b/modules/simpletest/INSTALL.txt
@@ -1,43 +1,53 @@
-$Id: INSTALL.txt,v 1.6.4.7 2008/10/12 22:53:33 boombatower Exp $
+$Id: INSTALL.txt,v 1.6.4.15 2009/03/23 03:36:21 boombatower Exp $
+
+AUTHOR
+------
+Jimmy Berry ("boombatower", http://drupal.org/user/214218)
+
+REQUIREMENTS
+------------
+The php-curl library is required for SimpleTest to function.
 
 INSTALLATION
 ------------
-1. Add the following code to the bottom of your sites settings.php file. Make
-   sure you remove the white-space from the left so that the module will
-   confirm that you have installed the code correctly. If you are running
-   Windows make sure you encode the file with the UNIX standard or the
-   code will not be detected.
+1. Add the following code to the bottom of your site's settings.php file. If
+   you are running Windows make sure you encode the file with the UNIX
+   standard.
 
    $GLOBALS['simpletest_installed'] = TRUE;
    if (preg_match("/^simpletest\d+$/", $_SERVER['HTTP_USER_AGENT'])) {
      $db_prefix = $_SERVER['HTTP_USER_AGENT'];
    }
-2. It is hightly recommonded, but not neccessary, that you add the following
+
+2. (Optional)
+   It is hightly recommonded, but not neccessary, that you add the following
    code to install.php at the beginning of install_main(). Should look like
    7.x branch of Drupal core.
 
    // The user agent header is used to pass a database prefix in the request when
-   // running tests.  However, for security reasons, it is imperative that no
+   // running tests. However, for security reasons, it is imperative that no
    // installation be permitted using such a prefix.
    if (preg_match("/^simpletest\d+$/", $_SERVER['HTTP_USER_AGENT'])) {
-     header('HTTP/1.1 403 Forbidden');
+     header($_SERVER['SERVER_PROTOCOL'] . ' 403 Forbidden');
      exit;
    }
-3. If there are any test modules they will be displayed on the admin modules
-   page (admin/build/modules) unless the following code is added to
-   modules/system/system.admin.inc in system_modules() just after:
-   "$files = module_rebuild_cache();".
-
-   // Remove hidden modules from display list.
-   foreach ($files as $filename => $file) {
-     if (!empty($file->info['hidden'])) {
-       unset($files[$filename]);
-     }
-   }
 
-3. Go to Administer >> Site building >> Modules (admin/build/modules) and
+3. (Optional)
+   Apply the "Show fatal errors in tests" batch to misc/drupal.js if you want
+   the reason for test failure to be displayed on the batch API screen. The
+   patch can be found at:
+   http://drupal.org/files/issues/simpletest_drupal.js_.patch.
+
+4. (Optional)
+   Move/Copy the run-tests.sh file into the Drupal scripts folder. The script
+   allows the tests to be run from the command line.
+
+5. Go to Administer >> Site building >> Modules (admin/build/modules) and
    enable the SimpleTest module.
-4. Go to Administer >> Site building >> Testing (admin/build/testing) to
+
+6. Go to Administer >> Site building >> Testing (admin/build/testing) to
    begin using the module.
-5. (Optional) Go to Administer >> Help >> SimpleTest (admin/help/simpletest)
+
+7. (Optional)
+   Go to Administer >> Help >> SimpleTest (admin/help/simpletest)
    for more information on how to use the SimpleTest module.
diff --git a/modules/simpletest/README.txt b/modules/simpletest/README.txt
index a6fcb45..f68512e 100644
--- a/modules/simpletest/README.txt
+++ b/modules/simpletest/README.txt
@@ -1,14 +1,29 @@
-$Id: README.txt,v 1.12.4.2 2008/08/15 16:42:21 boombatower Exp $
+$Id: README.txt,v 1.12.4.4 2009/03/28 03:35:17 boombatower Exp $
+
+AUTHOR
+------
+Jimmy Berry ("boombatower", http://drupal.org/user/214218)
+
+PROJECT PAGE
+------------
+If you need more information, have an issue, or feature request please
+visit the project page at: http://drupal.org/project/simpletest.
 
 DESCRIPTION
 -----------
-This mimics the Drupal 7 core simpletest module. The same format may be used in
-this module as in the core Drupal 7 version. Please use any documenation for
-the Drupal 7 version.
+SimpleTest 6.x-2.x is a backport of Drupal 7 core SimpleTest and has the same
+requirements as Drupal 7 SimpleTest.
+
+STATUS
+------
+Drupal 7 core SimpleTest developement is backported regularly. To find out when
+the code was last backport check the CHANGELOG.txt or version release date.
 
 ISSUES
 ------
-Any issues may be posted to the SimpleTest issue queue
-(http://drupal.org/project/issues/simpletest), but if they are feature requests
-or effect both the core version and the 6.x version then the issue will be
-moved into the core and committed there first.
+If you encounter issues please try and confirm they are Drupal 6 specifc. This
+module has only required changes made in order for it to function in Drupal 6.
+Any issues that are related to the Drupal 6 backport may be posted to:
+http://drupal.org/project/issues/simpletest, but any issues with API or general
+concerns should be posted to the SimpleTest core issue queue:
+http://tinyurl.com/simpletest-core.
diff --git a/modules/simpletest/drupal_web_test_case.php b/modules/simpletest/drupal_web_test_case.php
index 9b47c8f..06edf02 100644
--- a/modules/simpletest/drupal_web_test_case.php
+++ b/modules/simpletest/drupal_web_test_case.php
@@ -1,55 +1,165 @@
 <?php
-// $Id: drupal_web_test_case.php,v 1.2.2.3.2.19 2008/10/22 23:16:46 boombatower Exp $
+// $Id: drupal_web_test_case.php,v 1.2.2.3.2.37 2009/04/23 05:39:52 boombatower Exp $
+// Core: Id: drupal_web_test_case.php,v 1.96 2009/04/22 09:57:10 dries Exp
+/**
+ * @file
+ * Provide required modifications to Drupal 7 core DrupalWebTestCase in order
+ * for it to function properly in Drupal 6.
+ *
+ * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
+ */
+
+module_load_include('function.inc', 'simpletest');
 
 /**
  * Test case for typical Drupal tests.
  */
 class DrupalWebTestCase {
-  protected $_logged_in = FALSE;
-  protected $_content;
-  protected $plain_text;
-  protected $ch;
-  protected $elements;
-  // We do not reuse the cookies in further runs, so we do not need a file
-  // but we still need cookie handling, so we set the jar to NULL
-  protected $cookie_file = NULL;
-  // Overwrite this any time to supply cURL options as necessary,
-  // DrupalTestCase itself never sets this but always obeys whats set.
-  protected $curl_options = array();
-  protected $db_prefix_original;
-  protected $original_file_directory;
-
-  var $_results = array('#pass' => 0, '#fail' => 0, '#exception' => 0);
-  var $_assertions = array();
+
+  /**
+   * The test run ID.
+   *
+   * @var string
+   */
+  protected $testId;
+
+  /**
+   * The URL currently loaded in the internal browser.
+   *
+   * @var string
+   */
+  protected $url;
+
+  /**
+   * The handle of the current cURL connection.
+   *
+   * @var resource
+   */
+  protected $curlHandle;
+
+  /**
+   * The headers of the page currently loaded in the internal browser.
+   *
+   * @var Array
+   */
+  protected $headers;
+
+  /**
+   * The content of the page currently loaded in the internal browser.
+   *
+   * @var string
+   */
+  protected $content;
+
+  /**
+   * The content of the page currently loaded in the internal browser (plain text version).
+   *
+   * @var string
+   */
+  protected $plainTextContent;
+
+  /**
+   * The parsed version of the page.
+   *
+   * @var SimpleXMLElement
+   */
+  protected $elements = NULL;
+
+  /**
+   * The current user logged in using the internal browser.
+   *
+   * @var bool
+   */
+  protected $loggedInUser = FALSE;
+
+  /**
+   * The current cookie file used by cURL.
+   *
+   * We do not reuse the cookies in further runs, so we do not need a file
+   * but we still need cookie handling, so we set the jar to NULL.
+   */
+  protected $cookieFile = NULL;
+
+  /**
+   * Additional cURL options.
+   *
+   * DrupalWebTestCase itself never sets this but always obeys what is set.
+   */
+  protected $additionalCurlOptions = array();
+
+  /**
+   * The original database prefix, before it was changed for testing purposes.
+   *
+   * @var string
+   */
+  protected $originalPrefix = NULL;
+
+  /**
+   * The original file directory, before it was changed for testing purposes.
+   *
+   * @var string
+   */
+  protected $originalFileDirectory = NULL;
+
+  /**
+   * The original user, before it was changed to a clean uid = 1 for testing purposes.
+   *
+   * @var object
+   */
+  protected $originalUser = NULL;
+
+  /**
+   * Current results of this test case.
+   *
+   * @var Array
+   */
+  public $results = array(
+    '#pass' => 0,
+    '#fail' => 0,
+    '#exception' => 0,
+  );
+
+  /**
+   * Assertions thrown in that test case.
+   *
+   * @var Array
+   */
+  protected $assertions = array();
+
+  /**
+   * Time limit for the test.
+   */
+  protected $timeLimit = 180;
+
 
   /**
    * Constructor for DrupalWebTestCase.
    *
-   * @param @test_id
+   * @param $test_id
    *   Tests with the same id are reported together.
    */
-  function __construct($test_id = NULL) {
-    $this->test_id = $test_id;
+  public function __construct($test_id = NULL) {
+    $this->testId = $test_id;
   }
 
   /**
-   * This function stores the assert. Do not call directly.
+   * Internal helper: stores the assert.
    *
    * @param $status
-   *   Can be 'pass', 'fail', 'exception'. TRUE is a synonym for 'pass', FALSE
-   *   for 'fail'.
+   *   Can be 'pass', 'fail', 'exception'.
+   *   TRUE is a synonym for 'pass', FALSE for 'fail'.
    * @param $message
    *   The message string.
    * @param $group
-   *   WHich group this assert belongs to.
+   *   Which group this assert belongs to.
    * @param $caller
-   *   By default, the assert comes from a function which names start with
+   *   By default, the assert comes from a function whose name starts with
    *   'test'. Instead, you can specify where this assert originates from
    *   by passing in an associative array as $caller. Key 'file' is
    *   the name of the source file, 'line' is the line number and 'function'
    *   is the caller function itself.
    */
-  protected function _assert($status, $message = '', $group = 'Other', $caller = NULL) {
+  private function assert($status, $message = '', $group = 'Other', array $caller = NULL) {
     global $db_prefix;
 
     // Convert boolean status to string status.
@@ -58,7 +168,7 @@ class DrupalWebTestCase {
     }
 
     // Increment summary result counter.
-    $this->_results['#' . $status]++;
+    $this->results['#' . $status]++;
 
     // Get the function information about the call to the assertion method.
     if (!$caller) {
@@ -67,11 +177,11 @@ class DrupalWebTestCase {
 
     // Switch to non-testing database to store results in.
     $current_db_prefix = $db_prefix;
-    $db_prefix = $this->db_prefix_original;
+    $db_prefix = $this->originalPrefix;
 
     // Creation assertion array that can be displayed while tests are running.
-    $this->_assertions[] = $assertion = array(
-      'test_id' => $this->test_id,
+    $this->assertions[] = $assertion = array(
+      'test_id' => $this->testId,
       'test_class' => get_class($this),
       'status' => $status,
       'message' => $message,
@@ -82,11 +192,14 @@ class DrupalWebTestCase {
     );
 
     // Store assertion for display after the test has completed.
-    db_query("INSERT INTO {simpletest} (test_id, test_class, status, message, message_group, function, line, file) VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s')", array_values($assertion));
+//    db_insert('simpletest')->fields($assertion)->execute();
+    db_query("INSERT INTO {simpletest}
+              (test_id, test_class, status, message, message_group, function, line, file)
+              VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s')", array_values($assertion));
 
     // Return to testing prefix.
     $db_prefix = $current_db_prefix;
-    return $status;
+    return $status == 'pass' ? TRUE : FALSE;
   }
 
   /**
@@ -99,7 +212,7 @@ class DrupalWebTestCase {
     $backtrace = debug_backtrace();
 
     // The first element is the call. The second element is the caller.
-    // We skip calls that occured in one of the methods of DrupalWebTestCase
+    // We skip calls that occurred in one of the methods of DrupalWebTestCase
     // or in an assertion function.
     while (($caller = $backtrace[1]) &&
           ((isset($caller['class']) && $caller['class'] == 'DrupalWebTestCase') ||
@@ -121,10 +234,10 @@ class DrupalWebTestCase {
    * @param $group
    *   The type of assertion - examples are "Browser", "PHP".
    * @return
-   *   The status passed in.
+   *   TRUE if the assertion succeeded, FALSE otherwise.
    */
   protected function assertTrue($value, $message = '', $group = 'Other') {
-    return $this->_assert((bool) $value, $message ? $message : t('Value is TRUE'), $group);
+    return $this->assert((bool) $value, $message ? $message : t('Value is TRUE'), $group);
   }
 
   /**
@@ -137,10 +250,10 @@ class DrupalWebTestCase {
    * @param $group
    *   The type of assertion - examples are "Browser", "PHP".
    * @return
-   *   The status passed in.
+   *   TRUE if the assertion succeeded, FALSE otherwise.
    */
   protected function assertFalse($value, $message = '', $group = 'Other') {
-    return $this->_assert(!$value, $message ? $message : t('Value is FALSE'), $group);
+    return $this->assert(!$value, $message ? $message : t('Value is FALSE'), $group);
   }
 
   /**
@@ -153,10 +266,10 @@ class DrupalWebTestCase {
    * @param $group
    *   The type of assertion - examples are "Browser", "PHP".
    * @return
-   *   The status passed in.
+   *   TRUE if the assertion succeeded, FALSE otherwise.
    */
   protected function assertNull($value, $message = '', $group = 'Other') {
-    return $this->_assert(!isset($value), $message ? $message : t('Value is NULL'), $group);
+    return $this->assert(!isset($value), $message ? $message : t('Value is NULL'), $group);
   }
 
   /**
@@ -169,10 +282,10 @@ class DrupalWebTestCase {
    * @param $group
    *   The type of assertion - examples are "Browser", "PHP".
    * @return
-   *   The status passed in.
+   *   TRUE if the assertion succeeded, FALSE otherwise.
    */
   protected function assertNotNull($value, $message = '', $group = 'Other') {
-    return $this->_assert(isset($value), $message ? $message : t('Value is not NULL'), $group);
+    return $this->assert(isset($value), $message ? $message : t('Value is not NULL'), $group);
   }
 
   /**
@@ -187,10 +300,10 @@ class DrupalWebTestCase {
    * @param $group
    *   The type of assertion - examples are "Browser", "PHP".
    * @return
-   *   The status passed in.
+   *   TRUE if the assertion succeeded, FALSE otherwise.
    */
   protected function assertEqual($first, $second, $message = '', $group = 'Other') {
-    return $this->_assert($first == $second, $message ? $message : t('First value is equal to second value'), $group);
+    return $this->assert($first == $second, $message ? $message : t('First value is equal to second value'), $group);
   }
 
   /**
@@ -205,10 +318,10 @@ class DrupalWebTestCase {
    * @param $group
    *   The type of assertion - examples are "Browser", "PHP".
    * @return
-   *   The status passed in.
+   *   TRUE if the assertion succeeded, FALSE otherwise.
    */
   protected function assertNotEqual($first, $second, $message = '', $group = 'Other') {
-    return $this->_assert($first != $second, $message ? $message : t('First value is not equal to second value'), $group);
+    return $this->assert($first != $second, $message ? $message : t('First value is not equal to second value'), $group);
   }
 
   /**
@@ -223,10 +336,10 @@ class DrupalWebTestCase {
    * @param $group
    *   The type of assertion - examples are "Browser", "PHP".
    * @return
-   *   The status passed in.
+   *   TRUE if the assertion succeeded, FALSE otherwise.
    */
   protected function assertIdentical($first, $second, $message = '', $group = 'Other') {
-    return $this->_assert($first === $second, $message ? $message : t('First value is identical to second value'), $group);
+    return $this->assert($first === $second, $message ? $message : t('First value is identical to second value'), $group);
   }
 
   /**
@@ -241,10 +354,10 @@ class DrupalWebTestCase {
    * @param $group
    *   The type of assertion - examples are "Browser", "PHP".
    * @return
-   *   The status passed in.
+   *   TRUE if the assertion succeeded, FALSE otherwise.
    */
   protected function assertNotIdentical($first, $second, $message = '', $group = 'Other') {
-    return $this->_assert($first !== $second, $message ? $message : t('First value is not identical to second value'), $group);
+    return $this->assert($first !== $second, $message ? $message : t('First value is not identical to second value'), $group);
   }
 
   /**
@@ -258,7 +371,7 @@ class DrupalWebTestCase {
    *   TRUE.
    */
   protected function pass($message = NULL, $group = 'Other') {
-    return $this->_assert(TRUE, $message, $group);
+    return $this->assert(TRUE, $message, $group);
   }
 
   /**
@@ -272,7 +385,7 @@ class DrupalWebTestCase {
    *   FALSE.
    */
   protected function fail($message = NULL, $group = 'Other') {
-    return $this->_assert(FALSE, $message, $group);
+    return $this->assert(FALSE, $message, $group);
   }
 
   /**
@@ -284,15 +397,17 @@ class DrupalWebTestCase {
    *   The type of assertion - examples are "Browser", "PHP".
    * @param $caller
    *   The caller of the error.
+   * @return
+   *   FALSE.
    */
-  protected function error($message = '', $group = 'Other', $caller = NULL) {
-    return $this->_assert('exception', $message, $group, $caller);
+  protected function error($message = '', $group = 'Other', array $caller = NULL) {
+    return $this->assert('exception', $message, $group, $caller);
   }
 
   /**
    * Run all tests in this class.
    */
-  function run() {
+  public function run() {
     set_error_handler(array($this, 'errorHandler'));
     $methods = array();
     // Iterate through all the methods in this class.
@@ -310,17 +425,20 @@ class DrupalWebTestCase {
         $this->tearDown();
       }
     }
+    // Clear out the error messages and restore error handler.
+    drupal_get_messages();
     restore_error_handler();
   }
 
   /**
    * Handle errors.
    *
+   * Because this is registered in set_error_handler(), it has to be public.
    * @see set_error_handler
+   *
    */
-  function errorHandler($severity, $message, $file = NULL, $line = NULL) {
-    $severity = $severity & error_reporting();
-    if ($severity) {
+  public function errorHandler($severity, $message, $file = NULL, $line = NULL) {
+    if ($severity & error_reporting()) {
       $error_map = array(
         E_STRICT => 'Run-time notice',
         E_WARNING => 'Warning',
@@ -344,7 +462,7 @@ class DrupalWebTestCase {
    *
    * @see set_exception_handler
    */
-  function exceptionHandler($exception) {
+  protected function exceptionHandler($exception) {
     $backtrace = $exception->getTrace();
     // Push on top of the backtrace the call that generated the exception.
     array_unshift($backtrace, array(
@@ -355,19 +473,38 @@ class DrupalWebTestCase {
   }
 
   /**
+   * Get a node from the database based on its title.
+   *
+   * @param title
+   *   A node title, usually generated by $this->randomName().
+   *
+   * @return
+   *   A node object matching $title.
+   */
+  function drupalGetNodeByTitle($title) {
+//    $nodes = node_load_multiple(array(), array('title' => $title));
+//    // Load the first node returned from the database.
+//    $returned_node = reset($nodes);
+//    return $returned_node;
+    return node_load(array('title' => $title));
+  }
+
+  /**
    * Creates a node based on default settings.
    *
    * @param $settings
    *   An associative array of settings to change from the defaults, keys are
    *   node properties, for example 'body' => 'Hello, world!'.
-   * @return object Created node object.
+   * @return
+   *   Created node object.
    */
-  function drupalCreateNode($settings = array()) {
+  protected function drupalCreateNode($settings = array()) {
     // Populate defaults array
-    $defaults = array(
+    $settings += array(
       'body'      => $this->randomName(32),
       'title'     => $this->randomName(8),
       'comment'   => 2,
+//      'changed'   => REQUEST_TIME,
       'changed'   => time(),
       'format'    => FILTER_FORMAT_DEFAULT,
       'moderate'  => 0,
@@ -380,21 +517,34 @@ class DrupalWebTestCase {
       'revisions' => NULL,
       'taxonomy'  => NULL,
     );
-    $defaults['teaser'] = $defaults['body'];
-    // If we already have a node, we use the original node's created time, and this
-    if (isset($defaults['created'])) {
-      $defaults['date'] = format_date($defaults['created'], 'custom', 'Y-m-d H:i:s O');
+
+    // Use the original node's created time for existing nodes.
+    if (isset($settings['created']) && !isset($settings['date'])) {
+      $settings['date'] = format_date($settings['created'], 'custom', 'Y-m-d H:i:s O');
     }
-    if (empty($settings['uid'])) {
-      global $user;
-      $defaults['uid'] = $user->uid;
+
+    // Add the default teaser.
+    if (!isset($settings['teaser'])) {
+      $settings['teaser'] = $settings['body'];      
     }
-    $node = ($settings + $defaults);
-    $node = (object)$node;
 
+    // If the node's user uid is not specified manually, use the currently
+    // logged in user if available, or else the user running the test.
+    if (!isset($settings['uid'])) {
+      if ($this->loggedInUser) {
+        $settings['uid'] = $this->loggedInUser->uid;
+      }
+      else {
+        global $user;
+        $settings['uid'] = $user->uid;
+      }
+    }
+
+    $node = (object) $settings;
     node_save($node);
 
     // small hack to link revisions to our test user
+//    db_query('UPDATE {node_revision} SET uid = %d WHERE vid = %d', $node->uid, $node->vid);
     db_query('UPDATE {node_revisions} SET uid = %d WHERE vid = %d', $node->uid, $node->vid);
     return $node;
   }
@@ -408,7 +558,7 @@ class DrupalWebTestCase {
    * @return
    *   Created content type.
    */
-  function drupalCreateContentType($settings = array()) {
+  protected function drupalCreateContentType($settings = array()) {
     // find a non-existent random type name.
     do {
       $name = strtolower($this->randomName(3, 'type_'));
@@ -440,6 +590,7 @@ class DrupalWebTestCase {
 
     $saved_type = node_type_save($type);
     node_types_rebuild();
+    menu_rebuild(); // Drupal 6.
 
     $this->assertEqual($saved_type, SAVED_NEW, t('Created content type %type.', array('%type' => $type->type)));
 
@@ -459,20 +610,23 @@ class DrupalWebTestCase {
    * @return
    *   List of files that match filter.
    */
-  function drupalGetTestFiles($type, $size = NULL) {
+  protected function drupalGetTestFiles($type, $size = NULL) {
     $files = array();
 
     // Make sure type is valid.
     if (in_array($type, array('binary', 'html', 'image', 'javascript', 'php', 'sql', 'text'))) {
      // Use original file directory instead of one created during setUp().
-      $path = $this->original_file_directory . '/simpletest';
-      $files = file_scan_directory($path, $type . '\-.*');
+      $path = $this->originalFileDirectory . '/simpletest';
+//      $files = file_scan_directory($path, '/' . $type . '\-.*/');
+      $files = file_scan_directory($path, '' . $type . '\-.*');
 
       // If size is set then remove any files that are not of that size.
       if ($size !== NULL) {
         foreach ($files as $file) {
+//          $stats = stat($file->filepath);
           $stats = stat($file->filename);
           if ($stats['size'] != $size) {
+//            unset($files[$file->filepath]);
             unset($files[$file->filename]);
           }
         }
@@ -485,16 +639,16 @@ class DrupalWebTestCase {
   /**
    * Compare two files based on size and file name.
    */
-  function drupalCompareFiles($file1, $file2) {
-    // Determine which file is larger.
-    $compare_size = (filesize($file1->filename) > filesize($file2->filename));
-    if (!$compare_size) {
-      // Both files were the same size, so return whichever one is alphabetically greater.
-      return strnatcmp($file1->name, $file2->name);
+  protected function drupalCompareFiles($file1, $file2) {
+//    $compare_size = filesize($file1->filepath) - filesize($file2->filepath);
+    $compare_size = filesize($file1->filename) - filesize($file2->filename);
+    if ($compare_size) {
+      // Sort by file size.
+      return $compare_size;
     }
     else {
-      // Return TRUE if $file1 is larger than $file2.
-      return $compare_size;
+      // The files were the same size, so sort alphabetically.
+      return strnatcmp($file1->name, $file2->name);
     }
   }
 
@@ -508,7 +662,7 @@ class DrupalWebTestCase {
    * @return
    *   Randomly generated string.
    */
-  function randomName($number = 4, $prefix = 'simpletest_') {
+  public static function randomName($number = 4, $prefix = 'simpletest_') {
     $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_';
     for ($x = 0; $x < $number; $x++) {
       $prefix .= $chars{mt_rand(0, strlen($chars) - 1)};
@@ -529,7 +683,7 @@ class DrupalWebTestCase {
    *   A fully loaded user object with pass_raw property, or FALSE if account
    *   creation fails.
    */
-  function drupalCreateUser($permissions = NULL) {
+  protected function drupalCreateUser($permissions = NULL) {
     // Create a role with the given permission set.
     if (!($rid = $this->_drupalCreateRole($permissions))) {
       return FALSE;
@@ -563,7 +717,7 @@ class DrupalWebTestCase {
    * @return
    *   Role ID of newly created role, or FALSE if role creation failed.
    */
-  private function _drupalCreateRole($permissions = NULL) {
+  protected function _drupalCreateRole(array $permissions = NULL) {
     // Generate string version of permissions list.
     if ($permissions === NULL) {
       $permissions = array('access comments', 'access content', 'post comments', 'post comments without approval');
@@ -579,6 +733,14 @@ class DrupalWebTestCase {
     $role = db_fetch_object(db_query("SELECT * FROM {role} WHERE name = '%s'", $role_name));
     $this->assertTrue($role, t('Created role of name: @role_name, id: @rid', array('@role_name' => $role_name, '@rid' => (isset($role->rid) ? $role->rid : t('-n/a-')))), t('Role'));
     if ($role && !empty($role->rid)) {
+//      // Assign permissions to role and mark it for clean-up.
+//      foreach ($permissions as $permission_string) {
+//        db_query("INSERT INTO {role_permission} (rid, permission) VALUES (%d, '%s')", $role->rid, $permission_string);
+//      }
+//      $count = db_result(db_query("SELECT COUNT(*) FROM {role_permission} WHERE rid = %d", $role->rid));
+//      $this->assertTrue($count == count($permissions), t('Created permissions: @perms', array('@perms' => implode(', ', $permissions))), t('Role'));
+//      return $role->rid;
+
       // Assign permissions to role and mark it for clean-up.
       db_query("INSERT INTO {permission} (rid, perm) VALUES (%d, '%s')", $role->rid, implode(', ', $permissions));
       $perm = db_result(db_query("SELECT perm FROM {permission} WHERE rid = %d", $role->rid));
@@ -600,10 +762,11 @@ class DrupalWebTestCase {
    * @return
    *   TRUE or FALSE depending on whether the permissions are valid.
    */
-  private function checkPermissions(array $permissions, $reset = FALSE) {
+  protected function checkPermissions(array $permissions, $reset = FALSE) {
     static $available;
 
     if (!isset($available) || $reset) {
+//      $available = array_keys(module_invoke_all('perm'));
       $available = module_invoke_all('perm');
     }
 
@@ -618,25 +781,37 @@ class DrupalWebTestCase {
   }
 
   /**
-   * Logs in a user with the internal browser. If already logged in then logs the current
-   * user out before logging in the specified user. If no user is specified then a new
-   * user will be created and logged in.
+   * Log in a user with the internal browser.
+   *
+   * If a user is already logged in, then the current user is logged out before
+   * logging in the specified user.
+   *
+   * Please note that neither the global $user nor the passed in user object is
+   * populated with data of the logged in user. If you need full access to the
+   * user object after logging in, it must be updated manually. If you also need
+   * access to the plain-text password of the user (set by drupalCreateUser()),
+   * e.g. to login the same user again, then it must be re-assigned manually.
+   * For example:
+   * @code
+   *   // Create a user.
+   *   $account = $this->drupalCreateUser(array());
+   *   $this->drupalLogin($account);
+   *   // Load real user object.
+   *   $pass_raw = $account->pass_raw;
+   *   $account = user_load($account->uid);
+   *   $account->pass_raw = $pass_raw;
+   * @endcode
    *
    * @param $user
    *   User object representing the user to login.
-   * @return
-   *   User that was logged in. Useful if no user was passed in order to retrieve
-   *   the created user.
+   *
+   * @see drupalCreateUser()
    */
-  function drupalLogin($user = NULL) {
-    if ($this->_logged_in) {
+  protected function drupalLogin(stdClass $user) {
+    if ($this->loggedInUser) {
       $this->drupalLogout();
     }
 
-    if (!isset($user)) {
-      $user = $this->_drupalCreateRole();
-    }
-
     $edit = array(
       'name' => $user->name,
       'pass' => $user->pass_raw
@@ -647,16 +822,17 @@ class DrupalWebTestCase {
     $pass = $pass && $this->assertNoText(t('The username %name has been blocked.', array('%name' => $user->name)), t('No blocked message at login page'), t('User login'));
     $pass = $pass && $this->assertNoText(t('The name %name is a reserved username.', array('%name' => $user->name)), t('No reserved message at login page'), t('User login'));
 
-    $this->_logged_in = $pass;
-
-    return $user;
+    if ($pass) {
+      $this->loggedInUser = $user;
+    }
   }
 
   /*
    * Logs a user out of the internal browser, then check the login page to confirm logout.
    */
-  function drupalLogout() {
+  protected function drupalLogout() {
     // Make a request to the logout page.
+//    $this->drupalGet('user/logout');
     $this->drupalGet('logout');
 
     // Load the user page, the idea being if you were properly logged out you should be seeing a login screen.
@@ -664,7 +840,9 @@ class DrupalWebTestCase {
     $pass = $this->assertField('name', t('Username field found.'), t('Logout'));
     $pass = $pass && $this->assertField('pass', t('Password field found.'), t('Logout'));
 
-    $this->_logged_in = !$pass;
+    if ($pass) {
+      $this->loggedInUser = FALSE;
+    }
   }
 
   /**
@@ -677,45 +855,84 @@ class DrupalWebTestCase {
    * @param ...
    *   List of modules to enable for the duration of the test.
    */
-  function setUp() {
-    global $db_prefix;
+  protected function setUp() {
+    global $db_prefix, $user, $language; // $language (Drupal 6).
 
     // Store necessary current values before switching to prefixed database.
-    $this->db_prefix_original = $db_prefix;
+    $this->originalPrefix = $db_prefix;
     $clean_url_original = variable_get('clean_url', 0);
 
+    // Must reset locale here, since schema calls t().  (Drupal 6)
+    if (module_exists('locale')) {
+      $language = (object) array('language' => 'en', 'name' => 'English', 'native' => 'English', 'direction' => 0, 'enabled' => 1, 'plurals' => 0, 'formula' => '', 'domain' => '', 'prefix' => '', 'weight' => 0, 'javascript' => '');
+      locale(NULL, NULL, TRUE);
+    }
+
     // Generate temporary prefixed database to ensure that tests have a clean starting point.
+//    $db_prefix = Database::getConnection()->prefixTables('{simpletest' . mt_rand(1000, 1000000) . '}');
     $db_prefix = 'simpletest' . mt_rand(1000, 1000000);
 
+//    include_once DRUPAL_ROOT . '/includes/install.inc';
     include_once './includes/install.inc';
     drupal_install_system();
 
+//    $this->preloadRegistry();
+
     // Add the specified modules to the list of modules in the default profile.
     $args = func_get_args();
+//    $modules = array_unique(array_merge(drupal_get_profile_modules('default', 'en'), $args));
     $modules = array_unique(array_merge(drupal_verify_profile('default', 'en'), $args));
+//    drupal_install_modules($modules, TRUE);
     drupal_install_modules($modules);
 
+    // Because the schema is static cached, we need to flush
+    // it between each run. If we don't, then it will contain
+    // stale data for the previous run's database prefix and all
+    // calls to it will fail.
+    drupal_get_schema(NULL, TRUE);
+
     // Run default profile tasks.
     $task = 'profile';
     default_profile_tasks($task, '');
 
     // Rebuild caches.
-    menu_rebuild();
     actions_synchronize();
     _drupal_flush_css_js();
     $this->refreshVariables();
     $this->checkPermissions(array(), TRUE);
+    user_access(NULL, NULL, TRUE); // Drupal 6.
+
+    // Log in with a clean $user.
+    $this->originalUser = $user;
+//    drupal_save_session(FALSE);
+//    $user = user_load(1);
+    session_save_session(FALSE);
+    $user = user_load(array('uid' => 1));
 
     // Restore necessary variables.
     variable_set('install_profile', 'default');
     variable_set('install_task', 'profile-finished');
     variable_set('clean_url', $clean_url_original);
+    variable_set('site_mail', 'simpletest@example.com');
 
     // Use temporary files directory with the same prefix as database.
-    $this->original_file_directory = file_directory_path();
+    $this->originalFileDirectory = file_directory_path();
     variable_set('file_directory_path', file_directory_path() . '/' . $db_prefix);
     $directory = file_directory_path();
-    file_check_directory($directory, FILE_CREATE_DIRECTORY); // Create the files directory.
+    // Create the files directory.
+    file_check_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
+
+    set_time_limit($this->timeLimit);
+  }
+
+  /**
+   * This method is called by DrupalWebTestCase::setUp, and preloads the
+   * registry from the testing site to cut down on the time it takes to
+   * setup a clean environment for the current test run.
+   */
+  protected function preloadRegistry() {
+    db_query('INSERT INTO {registry} SELECT * FROM ' . $this->originalPrefix . 'registry');
+    db_query('INSERT INTO {registry_file} SELECT * FROM ' . $this->originalPrefix . 'registry_file');
   }
 
   /**
@@ -730,7 +947,7 @@ class DrupalWebTestCase {
    * This method clears the variables cache and loads a fresh copy from the database
    * to ensure that the most up-to-date set of variables is loaded.
    */
-  function refreshVariables() {
+  protected function refreshVariables() {
     global $conf;
     cache_clear_all('variables', 'cache');
     $conf = variable_init();
@@ -740,12 +957,13 @@ class DrupalWebTestCase {
    * Delete created files and temporary files directory, delete the tables created by setUp(),
    * and reset the database prefix.
    */
-  function tearDown() {
-    global $db_prefix;
+  protected function tearDown() {
+    global $db_prefix, $user;
     if (preg_match('/simpletest\d+/', $db_prefix)) {
       // Delete temporary files directory and reset files directory path.
+//      file_unmanaged_delete_recursive(file_directory_path());
       simpletest_clean_temporary_directory(file_directory_path());
-      variable_set('file_directory_path', $this->original_file_directory);
+      variable_set('file_directory_path', $this->originalFileDirectory);
 
       // Remove all prefixed tables (all the tables in the schema).
       $schema = drupal_get_schema(NULL, TRUE);
@@ -755,13 +973,31 @@ class DrupalWebTestCase {
       }
 
       // Return the database prefix to the original.
-      $db_prefix = $this->db_prefix_original;
+      $db_prefix = $this->originalPrefix;
 
-      // Ensure that the internal logged in variable is reset.
-      $this->_logged_in = FALSE;
+      // Return the user to the original one.
+      $user = $this->originalUser;
+//      drupal_save_session(TRUE);
+      session_save_session(TRUE);
 
-      // Reload module list to ensure that test module hooks aren't called after tests.
+      // Bring back default language. (Drupal 6)
+      if (module_exists('locale')) {
+        drupal_init_language();
+        locale(NULL, NULL, TRUE);
+      }
+
+      // Ensure that internal logged in variable and cURL options are reset.
+      $this->loggedInUser = FALSE;
+      $this->additionalCurlOptions = array();
+
+      // Reload module list and implementations to ensure that test module hooks
+      // aren't called after tests.
       module_list(TRUE);
+//      module_implements(MODULE_IMPLEMENTS_CLEAR_CACHE);
+      module_implements('', '', TRUE);
+
+      // Reset the Field API.
+//      field_cache_clear();
 
       // Rebuild caches.
       $this->refreshVariables();
@@ -772,26 +1008,28 @@ class DrupalWebTestCase {
   }
 
   /**
-   * Initializes the cURL connection and gets a session cookie.
+   * Initializes the cURL connection.
    *
-   * This function will add authentication headers as specified in
-   * simpletest_httpauth_username and simpletest_httpauth_pass variables.
-   * Also, see the description of $curl_options among the properties.
+   * This function will add authentication headers as specified in the
+   * simpletest_httpauth_username and simpletest_httpauth_pass variables. Also,
+   * see the description of $curl_options among the properties.
    */
-  protected function curlConnect() {
+  protected function curlInitialize() {
     global $base_url, $db_prefix;
-    if (!isset($this->ch)) {
-      $this->ch = curl_init();
-      $curl_options = $this->curl_options + array(
-        CURLOPT_COOKIEJAR => $this->cookie_file,
+    if (!isset($this->curlHandle)) {
+      $this->curlHandle = curl_init();
+      $curl_options = $this->additionalCurlOptions + array(
+        CURLOPT_COOKIEJAR => $this->cookieFile,
         CURLOPT_URL => $base_url,
         CURLOPT_FOLLOWLOCATION => TRUE,
+        CURLOPT_MAXREDIRS => 5,
         CURLOPT_RETURNTRANSFER => TRUE,
-        CURLOPT_SSL_VERIFYPEER => FALSE,
-		CURLOPT_SSL_VERIFYHOST => FALSE,
+        CURLOPT_SSL_VERIFYPEER => FALSE,  // Required to make the tests run on https://
+        CURLOPT_SSL_VERIFYHOST => FALSE,  // Required to make the tests run on https://
+        CURLOPT_HEADERFUNCTION => array(&$this, 'curlHeaderCallback'),
       );
-      if (preg_match('/simpletest\d+/', $db_prefix)) {
-        $curl_options[CURLOPT_USERAGENT] = $db_prefix;
+      if (preg_match('/simpletest\d+/', $db_prefix, $matches)) {
+        $curl_options[CURLOPT_USERAGENT] = $matches[0];
       }
       if (!isset($curl_options[CURLOPT_USERPWD]) && ($auth = variable_get('simpletest_httpauth_username', ''))) {
         if ($pass = variable_get('simpletest_httpauth_pass', '')) {
@@ -799,36 +1037,73 @@ class DrupalWebTestCase {
         }
         $curl_options[CURLOPT_USERPWD] = $auth;
       }
-      return $this->curlExec($curl_options);
+      curl_setopt_array($this->curlHandle, $this->additionalCurlOptions + $curl_options);
     }
   }
 
   /**
    * Performs a cURL exec with the specified options after calling curlConnect().
    *
-   * @param
-   *   $curl_options Custom cURL options.
+   * @param $curl_options
+   *   Custom cURL options.
    * @return
    *   Content returned from the exec.
    */
   protected function curlExec($curl_options) {
-    $this->curlConnect();
-    $url = empty($curl_options[CURLOPT_URL]) ? curl_getinfo($this->ch, CURLINFO_EFFECTIVE_URL) : $curl_options[CURLOPT_URL];
-    curl_setopt_array($this->ch, $this->curl_options + $curl_options);
-    $this->_content = curl_exec($this->ch);
-    $this->plain_text = FALSE;
-    $this->elements = FALSE;
-    $this->assertTrue($this->_content !== FALSE, t('!method to !url, response is !length bytes.', array('!method' => !empty($curl_options[CURLOPT_NOBODY]) ? 'HEAD' : (empty($curl_options[CURLOPT_POSTFIELDS]) ? 'GET' : 'POST'), '!url' => $url, '!length' => strlen($this->_content))), t('Browser'));
-    return $this->_content;
+    $this->curlInitialize();
+    $url = empty($curl_options[CURLOPT_URL]) ? curl_getinfo($this->curlHandle, CURLINFO_EFFECTIVE_URL) : $curl_options[CURLOPT_URL];
+    if (!empty($curl_options[CURLOPT_POST])) {
+      // This is a fix for the Curl library to prevent Expect: 100-continue
+      // headers in POST requests, that may cause unexpected HTTP response
+      // codes from some webservers (like lighttpd that returns a 417 error
+      // code). It is done by setting an empty "Expect" header field that is
+      // not overwritten by Curl.
+      $curl_options[CURLOPT_HTTPHEADER][] = 'Expect:';
+    }
+    curl_setopt_array($this->curlHandle, $this->additionalCurlOptions + $curl_options);
+    $this->headers = array();
+    $this->drupalSetContent(curl_exec($this->curlHandle), curl_getinfo($this->curlHandle, CURLINFO_EFFECTIVE_URL));
+    $message_vars = array(
+      '!method' => !empty($curl_options[CURLOPT_NOBODY]) ? 'HEAD' : (empty($curl_options[CURLOPT_POSTFIELDS]) ? 'GET' : 'POST'),
+      '@url' => $url,
+      '@status' => curl_getinfo($this->curlHandle, CURLINFO_HTTP_CODE),
+      '!length' => format_size(strlen($this->content))
+    );
+    $message = t('!method @url returned @status (!length).', $message_vars);
+    $this->assertTrue($this->content !== FALSE, $message, t('Browser'));
+    return $this->drupalGetContent();
+  }
+
+  /**
+   * Reads headers and registers errors received from the tested site.
+   *
+   * @see _drupal_log_error().
+   *
+   * @param $curlHandler
+   *   The cURL handler.
+   * @param $header
+   *   An header.
+   */
+  protected function curlHeaderCallback($curlHandler, $header) {
+    $this->headers[] = $header;
+    // Errors are being sent via X-Drupal-Assertion-* headers,
+    // generated by _drupal_log_error() in the exact form required
+    // by DrupalWebTestCase::error().
+    if (preg_match('/^X-Drupal-Assertion-[0-9]+: (.*)$/', $header, $matches)) {
+      // Call DrupalWebTestCase::error() with the parameters from the header.
+      call_user_func_array(array(&$this, 'error'), unserialize(urldecode($matches[1])));
+    }
+    // This is required by cURL.
+    return strlen($header);
   }
 
   /**
    * Close the cURL handler and unset the handler.
    */
   protected function curlClose() {
-    if (isset($this->ch)) {
-      curl_close($this->ch);
-      unset($this->ch);
+    if (isset($this->curlHandle)) {
+      curl_close($this->curlHandle);
+      unset($this->curlHandle);
     }
   }
 
@@ -840,9 +1115,9 @@ class DrupalWebTestCase {
    */
   protected function parse() {
     if (!$this->elements) {
-      // DOM can load HTML soup. But, HTML soup can throw warnings, supress
+      // DOM can load HTML soup. But, HTML soup can throw warnings, suppress
       // them.
-      @$htmlDom = DOMDocument::loadHTML($this->_content);
+      @$htmlDom = DOMDocument::loadHTML($this->content);
       if ($htmlDom) {
         $this->pass(t('Valid HTML found on "@path"', array('@path' => $this->getUrl())), t('Browser'));
         // It's much easier to work with simplexml than DOM, luckily enough
@@ -863,17 +1138,20 @@ class DrupalWebTestCase {
    * @param $path
    *   Drupal path or URL to load into internal browser
    * @param $options
-   *  Options to be forwarded to url().
+   *   Options to be forwarded to url().
+   * @param $headers
+   *   An array containing additional HTTP request headers, each formatted as
+   *   "name: value".
    * @return
-   *  The retrieved HTML string, also available as $this->drupalGetContent()
+   *   The retrieved HTML string, also available as $this->drupalGetContent()
    */
-  function drupalGet($path, $options = array()) {
+  protected function drupalGet($path, array $options = array(), array $headers = array()) {
     $options['absolute'] = TRUE;
 
-    // We re-using a CURL connection here.  If that connection still has certain
-    // options set, it might change the GET into a POST.  Make sure we clear out
+    // We re-using a CURL connection here. If that connection still has certain
+    // options set, it might change the GET into a POST. Make sure we clear out
     // previous options.
-    $out = $this->curlExec(array(CURLOPT_HTTPGET => TRUE, CURLOPT_URL => url($path, $options)));
+    $out = $this->curlExec(array(CURLOPT_HTTPGET => TRUE, CURLOPT_URL => url($path, $options), CURLOPT_NOBODY => FALSE, CURLOPT_HTTPHEADER => $headers));
     $this->refreshVariables(); // Ensure that any changes to variables in the other thread are picked up.
 
     // Replace original page output with new output from redirected page(s).
@@ -900,7 +1178,7 @@ class DrupalWebTestCase {
    *   $edit = array(...);
    *   $this->drupalPost(NULL, $edit, t('Save'));
    * @param  $edit
-   *   Field data in an assocative array. Changes the current input fields
+   *   Field data in an associative array. Changes the current input fields
    *   (where possible) to the values indicated. A checkbox can be set to
    *   TRUE to be checked and FALSE to be unchecked. Note that when a form
    *   contains file upload fields, other fields cannot start with the '@'
@@ -914,8 +1192,11 @@ class DrupalWebTestCase {
    *   Value of the submit button.
    * @param $options
    *   Options to be forwarded to url().
+   * @param $headers
+   *   An array containing additional HTTP request headers, each formatted as
+   *   "name: value".
    */
-  function drupalPost($path, $edit, $submit, $options = array()) {
+  protected function drupalPost($path, $edit, $submit, array $options = array(), array $headers = array()) {
     $submit_matches = FALSE;
     if (isset($path)) {
       $html = $this->drupalGet($path, $options);
@@ -940,7 +1221,10 @@ class DrupalWebTestCase {
             // is broken. This is a less than elegant workaround. Alternatives
             // are being explored at #253506.
             foreach ($upload as $key => $file) {
-              $post[$key] = '@' . realpath($file);
+              $file = realpath($file);
+              if ($file && is_file($file)) {
+                $post[$key] = '@' . $file;
+              }
             }
           }
           else {
@@ -952,7 +1236,7 @@ class DrupalWebTestCase {
             }
             $post = implode('&', $post);
           }
-          $out = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post, CURLOPT_HEADER => FALSE, CURLOPT_NOBODY => FALSE));
+          $out = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post, CURLOPT_HTTPHEADER => $headers));
           // Ensure that any changes to variables in the other thread are picked up.
           $this->refreshVariables();
 
@@ -980,11 +1264,12 @@ class DrupalWebTestCase {
    * @return
    *   Either the new page content or FALSE.
    */
-  private function checkForMetaRefresh() {
+  protected function checkForMetaRefresh() {
     if ($this->drupalGetContent() != '' && $this->parse()) {
       $refresh = $this->xpath('//meta[@http-equiv="Refresh"]');
       if (!empty($refresh)) {
-        // Parse the content attribute of the meta tag for the format: "[delay]: URL=[page_to_redirect_to]".
+        // Parse the content attribute of the meta tag for the format:
+        // "[delay]: URL=[page_to_redirect_to]".
         if (preg_match('/\d+;\s*URL=(?P<url>.*)/i', $refresh[0]['content'], $match)) {
           return $this->drupalGet($this->getAbsoluteUrl(decode_entities($match['url'])));
         }
@@ -1000,12 +1285,15 @@ class DrupalWebTestCase {
    *   Drupal path or URL to load into internal browser
    * @param $options
    *   Options to be forwarded to url().
+   * @param $headers
+   *   An array containing additional HTTP request headers, each formatted as
+   *   "name: value".
    * @return
    *   The retrieved headers, also available as $this->drupalGetContent()
    */
-  function drupalHead($path, $options = array()) {
+  protected function drupalHead($path, array $options = array(), array $headers = array()) {
     $options['absolute'] = TRUE;
-    $out = $this->curlExec(array(CURLOPT_HEADER => TRUE, CURLOPT_NOBODY => TRUE, CURLOPT_URL => url($path, $options)));
+    $out = $this->curlExec(array(CURLOPT_NOBODY => TRUE, CURLOPT_URL => url($path, $options), CURLOPT_HTTPHEADER => $headers));
     $this->refreshVariables(); // Ensure that any changes to variables in the other thread are picked up.
     return $out;
   }
@@ -1141,7 +1429,7 @@ class DrupalWebTestCase {
   }
 
   /**
-   * Peform an xpath search on the contents of the internal browser. The search
+   * Perform an xpath search on the contents of the internal browser. The search
    * is relative to the root element (HTML tag normally) of the page.
    *
    * @param $xpath
@@ -1151,7 +1439,7 @@ class DrupalWebTestCase {
    *   format and return values see the SimpleXML documentation.
    *   http://us.php.net/manual/function.simplexml-element-xpath.php
    */
-  public function xpath($xpath) {
+  protected function xpath($xpath) {
     if ($this->parse()) {
       return $this->elements->xpath($xpath);
     }
@@ -1166,7 +1454,7 @@ class DrupalWebTestCase {
    * @return
    *   Option elements in select.
    */
-  private function getAllOptions(SimpleXMLElement $element) {
+  protected function getAllOptions(SimpleXMLElement $element) {
     $options = array();
     // Add all options items.
     foreach ($element->option as $option) {
@@ -1195,10 +1483,10 @@ class DrupalWebTestCase {
    * @param $group
    *   The group this message belongs to, defaults to 'Other'.
    */
-  public function assertLink($label, $index = 0, $message = '', $group = 'Other') {
+  protected function assertLink($label, $index = 0, $message = '', $group = 'Other') {
     $links = $this->xpath('//a[text()="' . $label . '"]');
     $message = ($message ?  $message : t('Link with label "!label" found.', array('!label' => $label)));
-    $this->_assert(isset($links[$index]), $message, $group);
+    $this->assert(isset($links[$index]), $message, $group);
   }
 
   /**
@@ -1213,10 +1501,10 @@ class DrupalWebTestCase {
    * @param $group
    *   The group this message belongs to, defaults to 'Other'.
    */
-  public function assertNoLink($label, $message = '', $group = 'Other') {
+  protected function assertNoLink($label, $message = '', $group = 'Other') {
     $links = $this->xpath('//a[text()="' . $label . '"]');
     $message = ($message ?  $message : t('Link with label "!label" not found.', array('!label' => $label)));
-    $this->_assert(empty($links), $message, $group);
+    $this->assert(empty($links), $message, $group);
   }
 
   /**
@@ -1234,7 +1522,7 @@ class DrupalWebTestCase {
    * @return
    *   Page on success, or FALSE on failure.
    */
-  function clickLink($label, $index = 0) {
+  protected function clickLink($label, $index = 0) {
     $url_before = $this->getUrl();
     $urls = $this->xpath('//a[text()="' . $label . '"]');
 
@@ -1259,7 +1547,7 @@ class DrupalWebTestCase {
    * @return
    *   An absolute path.
    */
-  function getAbsoluteUrl($path) {
+  protected function getAbsoluteUrl($path) {
     $options = array('absolute' => TRUE);
     $parts = parse_url($path);
     // This is more crude than the menu_is_external but enough here.
@@ -1284,15 +1572,117 @@ class DrupalWebTestCase {
    * @return
    *   The current url.
    */
-  function getUrl() {
-    return curl_getinfo($this->ch, CURLINFO_EFFECTIVE_URL);
+  protected function getUrl() {
+    return $this->url;
+  }
+
+  /**
+   * Gets the HTTP response headers of the requested page. Normally we are only
+   * interested in the headers returned by the last request. However, if a page
+   * is redirected or HTTP authentication is in use, multiple requests will be
+   * required to retrieve the page. Headers from all requests may be requested
+   * by passing TRUE to this function.
+   *
+   * @param $all_requests
+   *   Boolean value specifying whether to return headers from all requests
+   *   instead of just the last request. Defaults to FALSE.
+   * @return
+   *   A name/value array if headers from only the last request are requested.
+   *   If headers from all requests are requested, an array of name/value
+   *   arrays, one for each request.
+   *
+   *   The pseudonym ":status" is used for the HTTP status line.
+   *
+   *   Values for duplicate headers are stored as a single comma-separated list.
+   */
+  protected function drupalGetHeaders($all_requests = FALSE) {
+    $request = 0;
+    $headers = array($request => array());
+    foreach ($this->headers as $header) {
+      $header = trim($header);
+      if ($header === '') {
+        $request++;
+      }
+      else {
+        if (strpos($header, 'HTTP/') === 0) {
+          $name = ':status';
+          $value = $header;
+        }
+        else {
+          list($name, $value) = explode(':', $header, 2);
+          $name = strtolower($name);
+        }
+        if (isset($headers[$request][$name])) {
+          $headers[$request][$name] .= ',' . trim($value);
+        }
+        else {
+          $headers[$request][$name] = trim($value);
+        }
+      }
+    }
+    if (!$all_requests) {
+      $headers = array_pop($headers);
+    }
+    return $headers;
+  }
+
+  /**
+   * Gets the value of an HTTP response header. If multiple requests were
+   * required to retrieve the page, only the headers from the last request will
+   * be checked by default. However, if TRUE is passed as the second argument,
+   * all requests will be processed from last to first until the header is
+   * found.
+   *
+   * @param $name
+   *   The name of the header to retrieve. Names are case-insensitive (see RFC
+   *   2616 section 4.2).
+   * @param $all_requests
+   *   Boolean value specifying whether to check all requests if the header is
+   *   not found in the last request. Defaults to FALSE.
+   * @return
+   *   The HTTP header value or FALSE if not found.
+   */
+  protected function drupalGetHeader($name, $all_requests = FALSE) {
+    $name = strtolower($name);
+    $header = FALSE;
+    if ($all_requests) {
+      foreach (array_reverse($this->drupalGetHeaders(TRUE)) as $headers) {
+        if (isset($headers[$name])) {
+          $header = $headers[$name];
+          break;
+        }
+      }
+    }
+    else {
+      $headers = $this->drupalGetHeaders();
+      if (isset($headers[$name])) {
+        $header = $headers[$name];
+      }
+    }
+    return $header;
   }
 
   /**
    * Gets the current raw HTML of requested page.
    */
-  function drupalGetContent() {
-    return $this->_content;
+  protected function drupalGetContent() {
+    return $this->content;
+  }
+
+  /**
+   * Sets the raw HTML content. This can be useful when a page has been fetched
+   * outside of the internal browser and assertions need to be made on the
+   * returned page.
+   *
+   * A good example would be when testing drupal_http_request(). After fetching
+   * the page the content can be set and page elements can be checked to ensure
+   * that the function worked properly.
+   */
+  protected function drupalSetContent($content, $url = 'internal:') {
+    $this->content = $content;
+    $this->url = $url;
+    $this->plainTextContent = FALSE;
+    $this->elements = FALSE;
   }
 
   /**
@@ -1300,7 +1690,7 @@ class DrupalWebTestCase {
    * refers to the raw HTML that the page generated.
    *
    * @param $raw
-   *  Raw (HTML) string to look for.
+   *   Raw (HTML) string to look for.
    * @param $message
    *   Message to display.
    * @param $group
@@ -1308,8 +1698,8 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertRaw($raw, $message = '%s found', $group = 'Other') {
-    return $this->_assert(strpos($this->_content, $raw) !== FALSE, $message, $group);
+  protected function assertRaw($raw, $message = '%s found', $group = 'Other') {
+    return $this->assert(strpos($this->content, $raw) !== FALSE, $message, $group);
   }
 
   /**
@@ -1325,17 +1715,17 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertNoRaw($raw, $message = '%s found', $group = 'Other') {
-    return $this->_assert(strpos($this->_content, $raw) === FALSE, $message, $group);
+  protected function assertNoRaw($raw, $message = '%s found', $group = 'Other') {
+    return $this->assert(strpos($this->content, $raw) === FALSE, $message, $group);
   }
 
   /**
    * Pass if the text IS found on the text version of the page. The text version
-   * is the equivilent of what a user would see when viewing through a web browser.
+   * is the equivalent of what a user would see when viewing through a web browser.
    * In other words the HTML has been filtered out of the contents.
    *
    * @param $text
-   *  Plain text to look for.
+   *   Plain text to look for.
    * @param $message
    *   Message to display.
    * @param $group
@@ -1343,13 +1733,13 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertText($text, $message = '', $group = 'Other') {
+  protected function assertText($text, $message = '', $group = 'Other') {
     return $this->assertTextHelper($text, $message, $group, FALSE);
   }
 
   /**
    * Pass if the text is NOT found on the text version of the page. The text version
-   * is the equivilent of what a user would see when viewing through a web browser.
+   * is the equivalent of what a user would see when viewing through a web browser.
    * In other words the HTML has been filtered out of the contents.
    *
    * @param $text
@@ -1361,7 +1751,7 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertNoText($text, $message = '', $group = 'Other') {
+  protected function assertNoText($text, $message = '', $group = 'Other') {
     return $this->assertTextHelper($text, $message, $group, TRUE);
   }
 
@@ -1382,13 +1772,85 @@ class DrupalWebTestCase {
    *   TRUE on pass, FALSE on fail.
    */
   protected function assertTextHelper($text, $message, $group, $not_exists) {
-    if ($this->plain_text === FALSE) {
-      $this->plain_text = filter_xss($this->_content, array());
+    if ($this->plainTextContent === FALSE) {
+      $this->plainTextContent = filter_xss($this->content, array());
     }
     if (!$message) {
       $message = '"' . $text . '"' . ($not_exists ? ' not found' : ' found');
     }
-    return $this->_assert($not_exists == (strpos($this->plain_text, $text) === FALSE), $message, $group);
+    return $this->assert($not_exists == (strpos($this->plainTextContent, $text) === FALSE), $message, $group);
+  }
+
+  /**
+   * Pass if the text is found ONLY ONCE on the text version of the page.
+   *
+   * The text version is the equivalent of what a user would see when viewing
+   * through a web browser. In other words the HTML has been filtered out of
+   * the contents.
+   *
+   * @param $text
+   *   Plain text to look for.
+   * @param $message
+   *   Message to display.
+   * @param $group
+   *   The group this message belongs to, defaults to 'Other'.
+   * @return
+   *   TRUE on pass, FALSE on fail.
+   */
+  protected function assertUniqueText($text, $message = '', $group = 'Other') {
+    return $this->assertUniqueTextHelper($text, $message, $group, TRUE);
+  }
+
+  /**
+   * Pass if the text is found MORE THAN ONCE on the text version of the page.
+   *
+   * The text version is the equivalent of what a user would see when viewing
+   * through a web browser. In other words the HTML has been filtered out of
+   * the contents.
+   *
+   * @param $text
+   *   Plain text to look for.
+   * @param $message
+   *   Message to display.
+   * @param $group
+   *   The group this message belongs to, defaults to 'Other'.
+   * @return
+   *   TRUE on pass, FALSE on fail.
+   */
+  protected function assertNoUniqueText($text, $message = '', $group = 'Other') {
+    return $this->assertUniqueTextHelper($text, $message, $group, FALSE);
+  }
+
+  /**
+   * Helper for assertUniqueText and assertNoUniqueText.
+   *
+   * It is not recommended to call this function directly.
+   *
+   * @param $text
+   *   Plain text to look for.
+   * @param $message
+   *   Message to display.
+   * @param $group
+   *   The group this message belongs to.
+   * @param $be_unique
+   *   TRUE if this text should be found only once, FALSE if it should be found more than once.
+   * @return
+   *   TRUE on pass, FALSE on fail.
+   */
+  protected function assertUniqueTextHelper($text, $message, $group, $be_unique) {
+    if ($this->plainTextContent === FALSE) {
+      $this->plainTextContent = filter_xss($this->content, array());
+    }
+    if (!$message) {
+      $message = '"' . $text . '"'. ($be_unique ? ' found only once' : ' found more than once');
+    }
+    $first_occurance = strpos($this->plainTextContent, $text);
+    if ($first_occurance === FALSE) {
+      return $this->assert(FALSE, $message, $group);
+    }
+    $offset = $first_occurance + strlen($text);
+    $second_occurance = strpos($this->plainTextContent, $text, $offset);
+    return $this->assert($be_unique == ($second_occurance === FALSE), $message, $group);
   }
 
   /**
@@ -1403,8 +1865,8 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertPattern($pattern, $message = 'Pattern %s found', $group = 'Other') {
-    return $this->_assert((bool) preg_match($pattern, $this->drupalGetContent()), $message, $group);
+  protected function assertPattern($pattern, $message = 'Pattern %s found', $group = 'Other') {
+    return $this->assert((bool) preg_match($pattern, $this->drupalGetContent()), $message, $group);
   }
 
   /**
@@ -1419,15 +1881,15 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertNoPattern($pattern, $message = 'Pattern %s not found', $group = 'Other') {
-    return $this->_assert(!preg_match($pattern, $this->drupalGetContent()), $message, $group);
+  protected function assertNoPattern($pattern, $message = 'Pattern %s not found', $group = 'Other') {
+    return $this->assert(!preg_match($pattern, $this->drupalGetContent()), $message, $group);
   }
 
   /**
    * Pass if the page title is the given string.
    *
    * @param $title
-   *  The string the title should be.
+   *   The string the title should be.
    * @param $message
    *   Message to display.
    * @param $group
@@ -1435,8 +1897,24 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertTitle($title, $message, $group = 'Other') {
-    return $this->_assert($this->xpath('//title[text()="' . $title . '"]') !== FALSE, $message, $group);
+  protected function assertTitle($title, $message, $group = 'Other') {
+    return $this->assertEqual(current($this->xpath('//title')), $title, $message, $group);
+  }
+
+  /**
+   * Pass if the page title is not the given string.
+   *
+   * @param $title
+   *   The string the title should not be.
+   * @param $message
+   *   Message to display.
+   * @param $group
+   *   The group this message belongs to.
+   * @return
+   *   TRUE on pass, FALSE on fail.
+   */
+  protected function assertNoTitle($title, $message, $group = 'Other') {
+    return $this->assertNotEqual(current($this->xpath('//title')), $title, $message, $group);
   }
 
   /**
@@ -1453,7 +1931,7 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertFieldByXPath($xpath, $value, $message, $group = 'Other') {
+  protected function assertFieldByXPath($xpath, $value, $message, $group = 'Other') {
     $fields = $this->xpath($xpath);
 
     // If value specified then check array for match.
@@ -1466,7 +1944,7 @@ class DrupalWebTestCase {
             // Input element with correct value.
             $found = TRUE;
           }
-          else if (isset($field->option)) {
+          elseif (isset($field->option)) {
             // Select element found.
             if ($this->getSelectedItem($field) == $value) {
               $found = TRUE;
@@ -1479,7 +1957,7 @@ class DrupalWebTestCase {
               }
             }
           }
-          else if (isset($field[0]) && $field[0] == $value) {
+          elseif ((string) $field == $value) {
             // Text area with correct text.
             $found = TRUE;
           }
@@ -1497,12 +1975,12 @@ class DrupalWebTestCase {
    * @return
    *   The selected value or FALSE.
    */
-  function getSelectedItem(SimpleXMLElement $element) {
+  protected function getSelectedItem(SimpleXMLElement $element) {
     foreach ($element->children() as $item) {
       if (isset($item['selected'])) {
         return $item['value'];
       }
-      else if ($item->getName() == 'optgroup') {
+      elseif ($item->getName() == 'optgroup') {
         if ($value = $this->getSelectedItem($item)) {
           return $value;
         }
@@ -1525,7 +2003,7 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertNoFieldByXPath($xpath, $value, $message, $group = 'Other') {
+  protected function assertNoFieldByXPath($xpath, $value, $message, $group = 'Other') {
     $fields = $this->xpath($xpath);
 
     // If value specified then check array for match.
@@ -1557,8 +2035,8 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertFieldByName($name, $value = '', $message = '') {
-    return $this->assertFieldByXPath($this->_constructFieldXpath('name', $name), $value, $message ? $message : t('Found field by name @name', array('@name' => $name)), t('Browser'));
+  protected function assertFieldByName($name, $value = '', $message = '') {
+    return $this->assertFieldByXPath($this->constructFieldXpath('name', $name), $value, $message ? $message : t('Found field by name @name', array('@name' => $name)), t('Browser'));
   }
 
   /**
@@ -1575,15 +2053,15 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertNoFieldByName($name, $value = '', $message = '') {
-    return $this->assertNoFieldByXPath($this->_constructFieldXpath('name', $name), $value, $message ? $message : t('Did not find field by name @name', array('@name' => $name)), t('Browser'));
+  protected function assertNoFieldByName($name, $value = '', $message = '') {
+    return $this->assertNoFieldByXPath($this->constructFieldXpath('name', $name), $value, $message ? $message : t('Did not find field by name @name', array('@name' => $name)), t('Browser'));
   }
 
   /**
    * Assert that a field exists in the current page with the given id and value.
    *
    * @param $id
-   *  Id of field to assert.
+   *   Id of field to assert.
    * @param $value
    *   Value of the field to assert.
    * @param $message
@@ -1593,15 +2071,15 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertFieldById($id, $value = '', $message = '') {
-    return $this->assertFieldByXPath($this->_constructFieldXpath('id', $id), $value, $message ? $message : t('Found field by id @id', array('@id' => $id)), t('Browser'));
+  protected function assertFieldById($id, $value = '', $message = '') {
+    return $this->assertFieldByXPath($this->constructFieldXpath('id', $id), $value, $message ? $message : t('Found field by id @id', array('@id' => $id)), t('Browser'));
   }
 
   /**
    * Assert that a field does not exist with the given id and value.
    *
    * @param $id
-   *  Id of field to assert.
+   *   Id of field to assert.
    * @param $value
    *   Value of the field to assert.
    * @param $message
@@ -1611,15 +2089,15 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertNoFieldById($id, $value = '', $message = '') {
-    return $this->assertNoFieldByXPath($this->_constructFieldXpath('id', $id), $value, $message ? $message : t('Did not find field by id @id', array('@id' => $id)), t('Browser'));
+  protected function assertNoFieldById($id, $value = '', $message = '') {
+    return $this->assertNoFieldByXPath($this->constructFieldXpath('id', $id), $value, $message ? $message : t('Did not find field by id @id', array('@id' => $id)), t('Browser'));
   }
 
   /**
    * Assert that a field exists with the given name or id.
    *
    * @param $field
-   *  Name or id of field to assert.
+   *   Name or id of field to assert.
    * @param $message
    *   Message to display.
    * @param $group
@@ -1627,15 +2105,15 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertField($field, $message = '', $group = 'Other') {
-    return $this->assertFieldByXPath($this->_constructFieldXpath('name', $field) . '|' . $this->_constructFieldXpath('id', $field), '', $message, $group);
+  protected function assertField($field, $message = '', $group = 'Other') {
+    return $this->assertFieldByXPath($this->constructFieldXpath('name', $field) . '|' . $this->constructFieldXpath('id', $field), '', $message, $group);
   }
 
   /**
    * Assert that a field does not exist with the given name or id.
    *
    * @param $field
-   *  Name or id of field to assert.
+   *   Name or id of field to assert.
    * @param $message
    *   Message to display.
    * @param $group
@@ -1643,21 +2121,21 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  function assertNoField($field, $message = '', $group = 'Other') {
-    return $this->assertNoFieldByXPath($this->_constructFieldXpath('name', $field) . '|' . $this->_constructFieldXpath('id', $field), '', $message, $group);
+  protected function assertNoField($field, $message = '', $group = 'Other') {
+    return $this->assertNoFieldByXPath($this->constructFieldXpath('name', $field) . '|' . $this->constructFieldXpath('id', $field), '', $message, $group);
   }
 
   /**
-   * Construct an XPath for the given set of attributes and value.
+   * Helper function: construct an XPath for the given set of attributes and value.
    *
    * @param $attribute
-   *  Field attributes.
+   *   Field attributes.
    * @param $value
-   *  Value of field.
+   *   Value of field.
    * @return
-   *  XPath for specified values.
+   *   XPath for specified values.
    */
-  function _constructFieldXpath($attribute, $value) {
+  protected function constructFieldXpath($attribute, $value) {
     return '//textarea[@' . $attribute . '="' . $value . '"]|//input[@' . $attribute . '="' . $value . '"]|//select[@' . $attribute . '="' . $value . '"]';
   }
 
@@ -1665,54 +2143,16 @@ class DrupalWebTestCase {
    * Assert the page responds with the specified response code.
    *
    * @param $code
-   *   Reponse code. For example 200 is a successful page request. For a list
+   *   Response code. For example 200 is a successful page request. For a list
    *   of all codes see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html.
    * @param $message
    *   Message to display.
    * @return
    *   Assertion result.
    */
-  function assertResponse($code, $message = '') {
-    $curl_code = curl_getinfo($this->ch, CURLINFO_HTTP_CODE);
+  protected function assertResponse($code, $message = '') {
+    $curl_code = curl_getinfo($this->curlHandle, CURLINFO_HTTP_CODE);
     $match = is_array($code) ? in_array($curl_code, $code) : $curl_code == $code;
     return $this->assertTrue($match, $message ? $message : t('HTTP response expected !code, actual !curl_code', array('!code' => $code, '!curl_code' => $curl_code)), t('Browser'));
   }
 }
-
-/*
- * From common.inc in Drupal 7.
- */
-
-/**
- * Gets the last caller (file name and line of the call, function in which the call originated) from a backtrace.
- *
- * @param $backtrace
- *  A standard PHP backtrace.
- * @return
- *  An associative array with keys 'file', 'line' and 'function'.
- */
-function _drupal_get_last_caller($backtrace) {
-  // Errors that occur inside PHP internal functions
-  // do not generate information about file and line.
-  while ($backtrace && !isset($backtrace[0]['line'])) {
-    array_shift($backtrace);
-  }
-
-  // The first trace is the call itself.
-  // It gives us the line and the file of the last call.
-  $call = $backtrace[0];
-
-  // The second call give us the function where the call originated.
-  if (isset($backtrace[1])) {
-    if (isset($backtrace[1]['class'])) {
-      $call['function'] = $backtrace[1]['class'] . $backtrace[1]['type'] . $backtrace[1]['function'] . '()';
-    }
-    else {
-      $call['function'] = $backtrace[1]['function'] . '()';
-    }
-  }
-  else {
-    $call['function'] = 'main()';
-  }
-  return $call;
-}
diff --git a/modules/simpletest/files/README.txt b/modules/simpletest/files/README.txt
index 97c1817..835850b 100644
--- a/modules/simpletest/files/README.txt
+++ b/modules/simpletest/files/README.txt
@@ -1,5 +1,5 @@
-$Id: README.txt,v 1.1.2.1 2008/08/06 01:41:06 boombatower Exp $
+$Id: README.txt,v 1.1.2.2 2009/03/28 03:27:26 boombatower Exp $
 
 These files are use in some tests that upload files or other operations were
 a file is useful. These files are copied to the files directory as specified
-in the site settings. Other tests files are generated in order to save space.
+in the site settings. Other tests files are generated in order to save space.
\ No newline at end of file
diff --git a/modules/simpletest/files/html-1.txt b/modules/simpletest/files/html-1.txt
index 95c2896..494470d 100644
--- a/modules/simpletest/files/html-1.txt
+++ b/modules/simpletest/files/html-1.txt
@@ -1 +1 @@
-<h1>SimpleTest HTML</h1>
+<h1>SimpleTest HTML</h1>
\ No newline at end of file
diff --git a/modules/simpletest/files/html-2.html b/modules/simpletest/files/html-2.html
index 95c2896..494470d 100644
--- a/modules/simpletest/files/html-2.html
+++ b/modules/simpletest/files/html-2.html
@@ -1 +1 @@
-<h1>SimpleTest HTML</h1>
+<h1>SimpleTest HTML</h1>
\ No newline at end of file
diff --git a/modules/simpletest/files/image-1.png b/modules/simpletest/files/image-1.png
index 43692de..f2aac98 100644
Binary files a/modules/simpletest/files/image-1.png and b/modules/simpletest/files/image-1.png differ
diff --git a/modules/simpletest/files/image-2.jpg b/modules/simpletest/files/image-2.jpg
index 34458ab..645c76b 100644
Binary files a/modules/simpletest/files/image-2.jpg and b/modules/simpletest/files/image-2.jpg differ
diff --git a/modules/simpletest/files/image-test.gif b/modules/simpletest/files/image-test.gif
new file mode 100644
index 0000000..432990b
Binary files /dev/null and b/modules/simpletest/files/image-test.gif differ
diff --git a/modules/simpletest/files/image-test.jpg b/modules/simpletest/files/image-test.jpg
new file mode 100644
index 0000000..8fe1e01
Binary files /dev/null and b/modules/simpletest/files/image-test.jpg differ
diff --git a/modules/simpletest/files/image-test.png b/modules/simpletest/files/image-test.png
new file mode 100644
index 0000000..6ac818f
Binary files /dev/null and b/modules/simpletest/files/image-test.png differ
diff --git a/modules/simpletest/files/javascript-1.txt b/modules/simpletest/files/javascript-1.txt
index efd44fd..e0206ba 100644
--- a/modules/simpletest/files/javascript-1.txt
+++ b/modules/simpletest/files/javascript-1.txt
@@ -1,3 +1,3 @@
 <script>
 alert('SimpleTest PHP was executed!');
-</script>
+</script>
\ No newline at end of file
diff --git a/modules/simpletest/files/javascript-2.script b/modules/simpletest/files/javascript-2.script
index efd44fd..e0206ba 100644
--- a/modules/simpletest/files/javascript-2.script
+++ b/modules/simpletest/files/javascript-2.script
@@ -1,3 +1,3 @@
 <script>
 alert('SimpleTest PHP was executed!');
-</script>
+</script>
\ No newline at end of file
diff --git a/modules/simpletest/files/php-1.txt b/modules/simpletest/files/php-1.txt
index 52788b6..dc8e642 100644
--- a/modules/simpletest/files/php-1.txt
+++ b/modules/simpletest/files/php-1.txt
@@ -1,3 +1,3 @@
 <?php
 print 'SimpleTest PHP was executed!';
-?>
+?>
\ No newline at end of file
diff --git a/modules/simpletest/files/php-2.php b/modules/simpletest/files/php-2.php
index 52788b6..dc8e642 100644
--- a/modules/simpletest/files/php-2.php
+++ b/modules/simpletest/files/php-2.php
@@ -1,3 +1,3 @@
 <?php
 print 'SimpleTest PHP was executed!';
-?>
+?>
\ No newline at end of file
diff --git a/modules/simpletest/files/sql-1.txt b/modules/simpletest/files/sql-1.txt
index 24f5e27..22017e9 100644
--- a/modules/simpletest/files/sql-1.txt
+++ b/modules/simpletest/files/sql-1.txt
@@ -1 +1 @@
-SELECT invalid_field FROM {invalid_table}
+SELECT invalid_field FROM {invalid_table}
\ No newline at end of file
diff --git a/modules/simpletest/files/sql-2.sql b/modules/simpletest/files/sql-2.sql
index 24f5e27..22017e9 100644
--- a/modules/simpletest/files/sql-2.sql
+++ b/modules/simpletest/files/sql-2.sql
@@ -1 +1 @@
-SELECT invalid_field FROM {invalid_table}
+SELECT invalid_field FROM {invalid_table}
\ No newline at end of file
diff --git a/modules/simpletest/run-tests.sh b/modules/simpletest/run-tests.sh
new file mode 100755
index 0000000..12d0d18
--- /dev/null
+++ b/modules/simpletest/run-tests.sh
@@ -0,0 +1,569 @@
+<?php
+// $Id: run-tests.sh,v 1.1.2.4 2009/04/23 05:39:52 boombatower Exp $
+// Core: Id: run-tests.sh,v 1.26 2009/04/13 12:23:26 dries Exp
+/**
+ * @file
+ * Backport of Drupal 7 run-tests.sh with modifications, see BACKPORT.txt.
+ * This file must be placed in the Drupal scripts folder in order for it to
+ * work properly.
+ *
+ * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
+ */
+
+define('SIMPLETEST_SCRIPT_COLOR_PASS', 32); // Green.
+define('SIMPLETEST_SCRIPT_COLOR_FAIL', 31); // Red.
+define('SIMPLETEST_SCRIPT_COLOR_EXCEPTION', 33); // Brown.
+
+// Set defaults and get overrides.
+list($args, $count) = simpletest_script_parse_args();
+
+simpletest_script_init();
+
+if ($args['help'] || $count == 0) {
+  simpletest_script_help();
+  exit;
+}
+
+if ($args['execute-batch']) {
+  simpletest_script_execute_batch();
+}
+
+// Bootstrap to perform initial validation or other operations.
+drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
+if (!module_exists('simpletest')) {
+  simpletest_script_print_error("The simpletest module must be enabled before this script can run.");
+  exit;
+}
+
+if ($args['clean']) {
+  // Clean up left-over times and directories.
+  simpletest_clean_environment();
+  echo "\nEnvironment cleaned.\n";
+
+  // Get the status messages and print them.
+  $messages = array_pop(drupal_get_messages('status'));
+  foreach($messages as $text) {
+    echo " - " . $text . "\n";
+  }
+  exit;
+}
+
+// Load SimpleTest files.
+$all_tests = simpletest_get_all_tests();
+$groups = simpletest_categorize_tests($all_tests);
+$test_list = array();
+
+if ($args['list']) {
+  // Display all available tests.
+  echo "\nAvailable test groups & classes\n";
+  echo   "-------------------------------\n\n";
+  foreach ($groups as $group => $tests) {
+    echo $group . "\n";
+    foreach ($tests as $class_name => $info) {
+      echo " - " . $info['name'] . ' (' . $class_name . ')' . "\n";
+    }
+  }
+  exit;
+}
+
+$test_list = simpletest_script_get_test_list();
+
+// If not in 'safe mode', increase the maximum execution time.
+if (!ini_get('safe_mode')) {
+  set_time_limit(0);
+}
+
+simpletest_script_reporter_init();
+
+// Setup database for test results.
+//$test_id = db_insert('simpletest_test_id')->useDefaults(array('test_id'))->execute();
+db_query('INSERT INTO {simpletest_test_id} VALUES (default)');
+$test_id = db_last_insert_id('simpletest_test_id', 'test_id');
+
+// Execute tests.
+simpletest_script_command($args['concurrency'], $test_id, implode(",", $test_list));
+
+// Display results before database is cleared.
+simpletest_script_reporter_display_results();
+
+// Cleanup our test results.
+simpletest_clean_results_table($test_id);
+
+/**
+ * Print help text.
+ */
+function simpletest_script_help() {
+  global $args;
+
+  echo <<<EOF
+
+Run Drupal tests from the shell.
+
+Usage:        {$args['script']} [OPTIONS] <tests>
+Example:      {$args['script']} Profile
+
+All arguments are long options.
+
+  --help      Print this page.
+
+  --list      Display all available test groups.
+
+  --clean     Cleans up database tables or directories from previous, failed,
+              tests and then exits (no tests are run).
+
+  --url       Immediately preceeds a URL to set the host and path. You will
+              need this parameter if Drupal is in a subdirectory on your
+              localhost and you have not set \$base_url in settings.php.
+
+  --php       The absolute path to the PHP executable. Usually not needed.
+
+  --concurrency [num]
+
+              Run tests in parallel, up to [num] tests at a time. This requires
+              the Process Control Extension (PCNTL) to be compiled in PHP, not
+              supported under Windows.
+
+  --all       Run all available tests.
+
+  --class     Run tests identified by specific class names, instead of group names.
+
+  --file      Run tests identified by specific file names, instead of group names.
+              Specify the path and the extension (i.e. 'modules/user/user.test').
+
+  --color     Output the results with color highlighting.
+
+  --verbose   Output detailed assertion messages in addition to summary.
+
+  <test1>[,<test2>[,<test3> ...]]
+
+              One or more tests to be run. By default, these are interpreted
+              as the names of test groups as shown at ?q=admin/build/testing.
+              These group names typically correspond to module names like "User"
+              or "Profile" or "System", but there is also a group "XML-RPC".
+              If --class is specified then these are interpreted as the names of
+              specific test classes whose test methods will be run. Tests must
+              be separated by commas. Ignored if --all is specified.
+
+To run this script you will normally invoke it from the root directory of your
+Drupal installation as the webserver user (differs per configuration), or root:
+
+sudo -u [wwwrun|www-data|etc] php ./scripts/{$args['script']}
+  --url http://example.com/ --all
+sudo -u [wwwrun|www-data|etc] php ./scripts/{$args['script']}
+  --url http://example.com/ --class UploadTestCase
+\n
+EOF;
+}
+
+/**
+ * Parse execution argument and ensure that all are valid.
+ *
+ * @return The list of arguments.
+ */
+function simpletest_script_parse_args() {
+  // Set default values.
+  $args = array(
+    'script' => '',
+    'help' => FALSE,
+    'list' => FALSE,
+    'clean' => FALSE,
+    'url' => '',
+    'php' => '',
+    'concurrency' => 1,
+    'all' => FALSE,
+    'class' => FALSE,
+    'file' => FALSE,
+    'color' => FALSE,
+    'verbose' => FALSE,
+    'test_names' => array(),
+    // Used internally.
+    'test-id' => NULL,
+    'execute-batch' => FALSE
+  );
+
+  // Override with set values.
+  $args['script'] = basename(array_shift($_SERVER['argv']));
+
+  $count = 0;
+  while ($arg = array_shift($_SERVER['argv'])) {
+    if (preg_match('/--(\S+)/', $arg, $matches)) {
+      // Argument found.
+      if (array_key_exists($matches[1], $args)) {
+        // Argument found in list.
+        $previous_arg = $matches[1];
+        if (is_bool($args[$previous_arg])) {
+          $args[$matches[1]] = TRUE;
+        }
+        else {
+          $args[$matches[1]] = array_shift($_SERVER['argv']);
+        }
+        // Clear extraneous values.
+        $args['test_names'] = array();
+        $count++;
+      }
+      else {
+        // Argument not found in list.
+        simpletest_script_print_error("Unknown argument '$arg'.");
+        exit;
+      }
+    }
+    else {
+      // Values found without an argument should be test names.
+      $args['test_names'] += explode(',', $arg);
+      $count++;
+    }
+  }
+
+  // Validate the concurrency argument
+  if (!is_numeric($args['concurrency']) || $args['concurrency'] <= 0) {
+    simpletest_script_print_error("--concurrency must be a strictly positive integer.");
+    exit;
+  }
+  elseif ($args['concurrency'] > 1 && !function_exists('pcntl_fork')) {
+    simpletest_script_print_error("Parallel test execution requires the Process Control extension to be compiled in PHP. Please see http://php.net/manual/en/intro.pcntl.php for more information.");
+    exit;
+  }
+
+  return array($args, $count);
+}
+
+/**
+ * Initialize script variables and perform general setup requirements.
+ */
+function simpletest_script_init() {
+  global $args, $php;
+
+  $host = 'localhost';
+  $path = '';
+  // Determine location of php command automatically, unless a command line argument is supplied.
+  if (!empty($args['php'])) {
+    $php = $args['php'];
+  }
+  elseif (!empty($_ENV['_'])) {
+    // '_' is an environment variable set by the shell. It contains the command that was executed.
+    $php = $_ENV['_'];
+  }
+  elseif (!empty($_ENV['SUDO_COMMAND'])) {
+    // 'SUDO_COMMAND' is an environment variable set by the sudo program.
+    // Extract only the PHP interpreter, not the rest of the command.
+    list($php, ) = explode(' ', $_ENV['SUDO_COMMAND'], 2);
+  }
+  else {
+    simpletest_script_print_error('Unable to automatically determine the path to the PHP interpreter. Please supply the --php command line argument.');
+    simpletest_script_help();
+    exit();
+  }
+
+  // Get url from arguments.
+  if (!empty($args['url'])) {
+    $parsed_url = parse_url($args['url']);
+    $host = $parsed_url['host'] . (isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '');
+    $path = $parsed_url['path'];
+  }
+
+  $_SERVER['HTTP_HOST'] = $host;
+  $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
+  $_SERVER['SERVER_ADDR'] = '127.0.0.1';
+  $_SERVER['SERVER_SOFTWARE'] = 'Apache';
+  $_SERVER['SERVER_NAME'] = 'localhost';
+  $_SERVER['REQUEST_URI'] = $path .'/';
+  $_SERVER['REQUEST_METHOD'] = 'GET';
+  $_SERVER['SCRIPT_NAME'] = $path .'/index.php';
+  $_SERVER['PHP_SELF'] = $path .'/index.php';
+  $_SERVER['HTTP_USER_AGENT'] = 'Drupal command line';
+
+  chdir(realpath(dirname(__FILE__) . '/..'));
+  define('DRUPAL_ROOT', getcwd());
+  require_once DRUPAL_ROOT . '/includes/bootstrap.inc';
+}
+
+/**
+ * Execute a batch of tests.
+ */
+function simpletest_script_execute_batch() {
+  global $args;
+
+  if (is_null($args['test-id'])) {
+    simpletest_script_print_error("--execute-batch should not be called interactively.");
+    exit;
+  }
+  if ($args['concurrency'] == 1) {
+    // Fallback to mono-threaded execution.
+    if (count($args['test_names']) > 1) {
+      foreach ($args['test_names'] as $test_class) {
+        // Execute each test in its separate Drupal environment.
+        simpletest_script_command(1, $args['test-id'], $test_class);
+      }
+      exit;
+    }
+    else {
+      // Execute an individual test.
+      $test_class = array_shift($args['test_names']);
+      drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
+      simpletest_script_run_one_test($args['test-id'], $test_class);
+      exit;
+    }
+  }
+  else {
+    // Multi-threaded execution.
+    $children = array();
+    while (!empty($args['test_names']) || !empty($children)) {
+      // Fork children safely since Drupal is not bootstrapped yet.
+      while (count($children) < $args['concurrency']) {
+        if (empty($args['test_names'])) break;
+
+        $child = array();
+        $child['test_class'] = $test_class = array_shift($args['test_names']);
+        $child['pid'] = pcntl_fork();
+        if (!$child['pid']) {
+          // This is the child process, bootstrap and execute the test.
+          drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
+          simpletest_script_run_one_test($args['test-id'], $test_class);
+          exit;
+        }
+        else {
+          // Register our new child.
+          $children[] = $child;
+        }
+      }
+
+      // Wait for children every 200ms.
+      usleep(200000);
+
+      // Check if some children finished.
+      foreach ($children as $cid => $child) {
+        if (pcntl_waitpid($child['pid'], $status, WUNTRACED | WNOHANG)) {
+          // This particular child exited.
+          unset($children[$cid]);
+        }
+      }
+    }
+    exit;
+  }
+}
+
+/**
+ * Run a single test (assume a Drupal bootstrapped environment).
+ */
+function simpletest_script_run_one_test($test_id, $test_class) {
+  simpletest_get_all_tests();
+  $test = new $test_class($test_id);
+  $test->run();
+  $info = $test->getInfo();
+
+  $status = ((isset($test->results['#fail']) && $test->results['#fail'] > 0)
+           || (isset($test->results['#exception']) && $test->results['#exception'] > 0) ? 'fail' : 'pass');
+  simpletest_script_print($info['name'] . ' ' . _simpletest_format_summary_line($test->results) . "\n", simpletest_script_color_code($status));
+}
+
+/**
+ * Execute a command to run batch of tests in separate process.
+ */
+function simpletest_script_command($concurrency, $test_id, $tests) {
+  global $args, $php;
+
+  $command = "$php ./scripts/{$args['script']} --url {$args['url']}";
+  if ($args['color']) {
+    $command .= ' --color';
+  }
+  $command .= " --php " . escapeshellarg($php) . " --concurrency $concurrency --test-id $test_id --execute-batch $tests";
+  passthru($command);
+}
+
+/**
+ * Get list of tests based on arguments. If --all specified then
+ * returns all available tests, otherwise reads list of tests.
+ *
+ * Will print error and exit if no valid tests were found.
+ *
+ * @return List of tests.
+ */
+function simpletest_script_get_test_list() {
+  global $args, $all_tests, $groups;
+
+  $test_list = array();
+  if ($args['all']) {
+    $test_list = $all_tests;
+  }
+  else {
+    if ($args['class']) {
+      // Check for valid class names.
+      foreach ($args['test_names'] as $class_name) {
+        if (in_array($class_name, $all_tests)) {
+          $test_list[] = $class_name;
+        }
+      }
+    }
+    elseif ($args['file']) {
+      $files = array();
+      foreach ($args['test_names'] as $file) {
+        $files[realpath($file)] = 1;
+      }
+
+      // Check for valid class names.
+      foreach ($all_tests as $class_name => $info) {
+        $refclass = new ReflectionClass($class_name);
+        $file = $refclass->getFileName();
+        if (isset($files[$file])) {
+          $test_list[] = $class_name;
+        }
+      }
+    }
+    else {
+      // Check for valid group names and get all valid classes in group.
+      foreach ($args['test_names'] as $group_name) {
+        if (isset($groups[$group_name])) {
+          foreach($groups[$group_name] as $class_name => $info) {
+            $test_list[] = $class_name;
+          }
+        }
+      }
+    }
+  }
+
+  if (empty($test_list)) {
+    simpletest_script_print_error('No valid tests were specified.');
+    exit;
+  }
+  return $test_list;
+}
+
+/**
+ * Initialize the reporter.
+ */
+function simpletest_script_reporter_init() {
+  global $args, $all_tests, $test_list;
+
+  echo "\n";
+  echo "Drupal test run\n";
+  echo "---------------\n";
+  echo "\n";
+
+  // Tell the user about what tests are to be run.
+  if ($args['all']) {
+    echo "All tests will run.\n\n";
+  }
+  else {
+    echo "Tests to be run:\n";
+    foreach ($test_list as $class_name) {
+      $info = call_user_func(array($class_name, 'getInfo'));
+      echo " - " . $info['name'] . ' (' . $class_name . ')' . "\n";
+    }
+    echo "\n";
+  }
+
+  echo "Test run started: " . format_date($_SERVER['REQUEST_TIME'], 'long') . "\n";
+  timer_start('run-tests');
+  echo "\n";
+
+  echo "Test summary:\n";
+  echo "-------------\n";
+  echo "\n";
+}
+
+/**
+ * Display test results.
+ */
+function simpletest_script_reporter_display_results() {
+  global $args, $test_id, $results_map;
+
+  echo "\n";
+  $end = timer_stop('run-tests');
+  echo "Test run duration: " . format_interval($end['time'] / 1000);
+  echo "\n";
+
+  if ($args['verbose']) {
+    // Report results.
+    echo "Detailed test results:\n";
+    echo "----------------------\n";
+    echo "\n";
+
+    $results_map = array(
+      'pass' => 'Pass',
+      'fail' => 'Fail',
+      'exception' => 'Exception'
+    );
+
+//    $results = db_query("SELECT * FROM {simpletest} WHERE test_id = :test_id ORDER BY test_class, message_id", array(':test_id' => $test_id));
+    $results = db_query("SELECT * FROM {simpletest} WHERE test_id = %d ORDER BY test_class, message_id", $test_id);
+
+    $test_class = '';
+//    foreach ($results as $result) {
+    while ($result = db_fetch_object($results)) {
+      if (isset($results_map[$result->status])) {
+        if ($result->test_class != $test_class) {
+          // Display test class every time results are for new test class.
+          echo "\n\n---- $result->test_class ----\n\n\n";
+          $test_class = $result->test_class;
+        }
+
+        simpletest_script_format_result($result);
+      }
+    }
+  }
+}
+
+/**
+ * Format the result so that it fits within the default 80 character
+ * terminal size.
+ *
+ * @param $result The result object to format.
+ */
+function simpletest_script_format_result($result) {
+  global $results_map, $color;
+
+  $summary = sprintf("%-10.10s %-10.10s %-30.30s %-5.5s %-20.20s\n",
+    $results_map[$result->status], $result->message_group, basename($result->file), $result->line, $result->caller);
+
+  simpletest_script_print($summary, simpletest_script_color_code($result->status));
+
+  $lines = explode("\n", wordwrap(trim(strip_tags($result->message)), 76));
+  foreach ($lines as $line) {
+    echo "    $line\n";
+  }
+}
+
+/**
+ * Print error message prefixed with "  ERROR: " and displayed in fail color
+ * if color output is enabled.
+ *
+ * @param $message The message to print.
+ */
+function simpletest_script_print_error($message) {
+  simpletest_script_print("  ERROR: $message\n", SIMPLETEST_SCRIPT_COLOR_FAIL);
+}
+
+/**
+ * Print a message to the console, if color is enabled then the specified
+ * color code will be used.
+ *
+ * @param $message The message to print.
+ * @param $color_code The color code to use for coloring.
+ */
+function simpletest_script_print($message, $color_code) {
+  global $args;
+  if ($args['color']) {
+    echo "\033[" . $color_code . "m" . $message . "\033[0m";
+  }
+  else {
+    echo $message;
+  }
+}
+
+/**
+ * Get the color code associated with the specified status.
+ *
+ * @param $status The status string to get code for.
+ * @return Color code.
+ */
+function simpletest_script_color_code($status) {
+  switch ($status) {
+    case 'pass':
+      return SIMPLETEST_SCRIPT_COLOR_PASS;
+    case 'fail':
+      return SIMPLETEST_SCRIPT_COLOR_FAIL;
+    case 'exception':
+      return SIMPLETEST_SCRIPT_COLOR_EXCEPTION;
+  }
+  return 0; // Default formatting.
+}
diff --git a/modules/simpletest/simpletest.css b/modules/simpletest/simpletest.css
index cd50d08..4c3c6cf 100644
--- a/modules/simpletest/simpletest.css
+++ b/modules/simpletest/simpletest.css
@@ -1,32 +1,38 @@
-/* $Id: simpletest.css,v 1.1.6.2 2008/09/18 20:34:16 boombatower Exp $ */
+/* $Id: simpletest.css,v 1.1.6.3 2009/02/08 02:35:39 boombatower Exp $ */
 
 /* Addon for the simpletest module */
 #simpletest {
 }
+
 /* Test Table */
 #simpletest-form-table th.select-all {
   width: 50px;
 }
+
 th.simpletest_test {
   width: 160px;
 }
 
 table#simpletest-form-table tr td {
-  background-color: white !important;
+  background-color: white;
   color: #494949;
 }
 
 table#simpletest-form-table tr.simpletest-group td {
-  background-color: #EDF5FA !important;
+  background-color: #EDF5FA;
   color: #494949;
 }
 
+div.message > div.item-list {
+  font-weight: normal;
+}
+
 div.simpletest-pass {
   color: #33a333;
 }
 
-div.simpletest-fail {
-  color: #a30000;
+.simpletest-fail {
+  color: #981010;
 }
 
 tr.simpletest-pass.odd {
diff --git a/modules/simpletest/simpletest.function.inc b/modules/simpletest/simpletest.function.inc
new file mode 100644
index 0000000..14bb5c3
--- /dev/null
+++ b/modules/simpletest/simpletest.function.inc
@@ -0,0 +1,218 @@
+<?php
+// $Id: simpletest.function.inc,v 1.1.2.2 2009/04/23 05:39:51 boombatower Exp $
+// Core: Id: common.inc,v 1.878 2009/04/22 09:45:02 dries Exp
+/**
+ * @file
+ * Provide backported function from Drupal 7 core required by SimpleTest.
+ *
+ * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
+ */
+
+/*
+ * From common.inc.
+ */
+
+// Set the Drupal custom error handler.
+set_error_handler('_drupal_error_handler');
+set_exception_handler('_drupal_exception_handler');
+
+/**
+ * Custom PHP error handler.
+ *
+ * @param $error_level
+ *   The level of the error raised.
+ * @param $message
+ *   The error message.
+ * @param $filename
+ *   The filename that the error was raised in.
+ * @param $line
+ *   The line number the error was raised at.
+ * @param $context
+ *   An array that points to the active symbol table at the point the error occurred.
+ */
+function _drupal_error_handler($error_level, $message, $filename, $line, $context) {
+  if ($error_level & error_reporting()) {
+    // All these constants are documented at http://php.net/manual/en/errorfunc.constants.php
+    $types = array(
+      E_ERROR => 'Error',
+      E_WARNING => 'Warning',
+      E_PARSE => 'Parse error',
+      E_NOTICE => 'Notice',
+      E_CORE_ERROR => 'Core error',
+      E_CORE_WARNING => 'Core warning',
+      E_COMPILE_ERROR => 'Compile error',
+      E_COMPILE_WARNING => 'Compile warning',
+      E_USER_ERROR => 'User error',
+      E_USER_WARNING => 'User warning',
+      E_USER_NOTICE => 'User notice',
+      E_STRICT => 'Strict warning',
+      E_RECOVERABLE_ERROR => 'Recoverable fatal error'
+    );
+    $backtrace = debug_backtrace();
+
+    $caller = _drupal_get_last_caller(debug_backtrace());
+
+    // We treat recoverable errors as fatal.
+    _drupal_log_error(array(
+      '%type' => isset($types[$error_level]) ? $types[$error_level] : 'Unknown error',
+      '%message' => $message,
+      '%function' => $caller['function'],
+      '%file' => $caller['file'],
+      '%line' => $caller['line'],
+    ), $error_level == E_RECOVERABLE_ERROR);
+  }
+}
+
+/**
+ * Custom PHP exception handler.
+ *
+ * Uncaught exceptions are those not enclosed in a try/catch block. They are
+ * always fatal: the execution of the script will stop as soon as the exception
+ * handler exits.
+ *
+ * @param $exception
+ *   The exception object that was thrown.
+ */
+function _drupal_exception_handler($exception) {
+  // Log the message to the watchdog and return an error page to the user.
+  _drupal_log_error(_drupal_decode_exception($exception), TRUE);
+}
+
+/**
+ * Decode an exception, especially to retrive the correct caller.
+ *
+ * @param $exception
+ *   The exception object that was thrown.
+ * @return An error in the format expected by _drupal_log_error().
+ */
+function _drupal_decode_exception($exception) {
+  $backtrace = $exception->getTrace();
+  // Add the line throwing the exception to the backtrace.
+  array_unshift($backtrace, array('line' => $exception->getLine(), 'file' => $exception->getFile()));
+
+  // For PDOException errors, we try to return the initial caller,
+  // skipping internal functions of the database layer.
+  if ($exception instanceof PDOException) {
+    // The first element in the stack is the call, the second element gives us the caller.
+    // We skip calls that occurred in one of the classes of the database layer
+    // or in one of its global functions.
+//    $db_functions = array('db_query', 'pager_query', 'db_query_range', 'db_query_temporary', 'update_sql');
+    $db_functions = array('db_query', '_db_query', 'pager_query', 'db_query_range', 'db_query_temporary', 'update_sql');
+    while (!empty($backtrace[1]) && ($caller = $backtrace[1]) &&
+         ((isset($caller['class']) && (strpos($caller['class'], 'Query') !== FALSE || strpos($caller['class'], 'Database') !== FALSE)) ||
+         in_array($caller['function'], $db_functions))) {
+      // We remove that call.
+      array_shift($backtrace);
+    }
+  }
+  $caller = _drupal_get_last_caller($backtrace);
+
+  return array(
+    '%type' => get_class($exception),
+    '%message' => $exception->getMessage(),
+    '%function' => $caller['function'],
+    '%file' => $caller['file'],
+    '%line' => $caller['line'],
+  );
+}
+
+/**
+ * Log a PHP error or exception, display an error page in fatal cases.
+ *
+ * @param $error
+ *   An array with the following keys: %type, %message, %function, %file, %line.
+ * @param $fatal
+ *   TRUE if the error is fatal.
+ */
+function _drupal_log_error($error, $fatal = FALSE) {
+  // Initialize a maintenance theme early if the boostrap was not complete.
+  // Do it early because drupal_set_message() triggers an init_theme().
+  if ($fatal && (drupal_get_bootstrap_phase() != DRUPAL_BOOTSTRAP_FULL)) {
+    unset($GLOBALS['theme']);
+    if (!defined('MAINTENANCE_MODE')) {
+      define('MAINTENANCE_MODE', 'error');
+    }
+    drupal_maintenance_theme();
+  }
+
+  // When running inside the testing framework, we relay the errors
+  // to the tested site by the way of HTTP headers.
+  if (preg_match("/^simpletest\d+/", $_SERVER['HTTP_USER_AGENT']) && !headers_sent() && (!defined('SIMPLETEST_COLLECT_ERRORS') || SIMPLETEST_COLLECT_ERRORS)) {
+    static $number = 0;
+    $assertion = array(
+      $error['%message'],
+      $error['%type'],
+      array(
+        'function' => $error['%function'],
+        'file' => $error['%file'],
+        'line' => $error['%line'],
+      ),
+    );
+    header('X-Drupal-Assertion-' . $number . ': ' . rawurlencode(serialize($assertion)));
+    $number++;
+  }
+
+  // Force display of error messages in update.php or if the proper error
+  // reporting level is set.
+  $error_level = variable_get('error_level', 2);
+  if ($error_level == 2 || ($error_level == 1 && $error['%type'] != 'Notice') || (defined('MAINTENANCE_MODE') && MAINTENANCE_MODE == 'update')) {
+    drupal_set_message(t('%type: %message in %function (line %line of %file).', $error), 'error');
+  }
+
+  try {
+    watchdog('php', '%type: %message in %function (line %line of %file).', $error, WATCHDOG_ERROR);
+  }
+  catch (Exception $e) {
+    $new_error = _drupal_decode_exception($e);
+    drupal_set_message(t('%type: %message in %function (line %line of %file).', $new_error), 'error');
+  }
+
+  if ($fatal) {
+    drupal_set_header('503 Service unavailable');
+    drupal_set_title(t('Error'));
+    if (!defined('MAINTENANCE_MODE') && drupal_get_bootstrap_phase() == DRUPAL_BOOTSTRAP_FULL) {
+      // To conserve CPU and bandwidth, omit the blocks.
+      $page = drupal_get_page(t('The website encountered an unexpected error. Please try again later.'));
+      $page['#show_blocks'] = FALSE;
+      print drupal_render_page($page);
+    }
+    else {
+      print theme('maintenance_page', t('The website encountered an unexpected error. Please try again later.'), FALSE);
+    }
+    exit;
+  }
+}
+
+/**
+ * Gets the last caller from a backtrace.
+ *
+ * @param $backtrace
+ *   A standard PHP backtrace.
+ * @return
+ *   An associative array with keys 'file', 'line' and 'function'.
+ */
+function _drupal_get_last_caller($backtrace) {
+  // Errors that occur inside PHP internal functions
+  // do not generate information about file and line.
+  while ($backtrace && !isset($backtrace[0]['line'])) {
+    array_shift($backtrace);
+  }
+
+  // The first trace is the call itself.
+  // It gives us the line and the file of the last call.
+  $call = $backtrace[0];
+
+  // The second call give us the function where the call originated.
+  if (isset($backtrace[1])) {
+    if (isset($backtrace[1]['class'])) {
+      $call['function'] = $backtrace[1]['class'] . $backtrace[1]['type'] . $backtrace[1]['function'] . '()';
+    }
+    else {
+      $call['function'] = $backtrace[1]['function'] . '()';
+    }
+  }
+  else {
+    $call['function'] = 'main()';
+  }
+  return $call;
+}
diff --git a/modules/simpletest/simpletest.info b/modules/simpletest/simpletest.info
index 796dd7d..3c909d4 100644
--- a/modules/simpletest/simpletest.info
+++ b/modules/simpletest/simpletest.info
@@ -1,13 +1,15 @@
-; $Id: simpletest.info,v 1.4.2.2.2.2 2008/10/22 23:04:50 boombatower Exp $
+; $Id: simpletest.info,v 1.4.2.2.2.4 2009/04/23 05:39:51 boombatower Exp $
 name = "SimpleTest"
 description = "Provides a framework for unit and functional testing."
-package = Other
-core = 6.x
-PHP = 5.x
+package = Development
+version = VERSION
+core = 7.x
+files[] = simpletest.module
+files[] = simpletest.install
 
-; Information added by drupal.org packaging script on 2008-10-22
-version = "6.x-2.5"
+; Information added by drupal.org packaging script on 2009-04-23
+version = "6.x-2.8"
 core = "6.x"
 project = "simpletest"
-datestamp = "1224717920"
+datestamp = "1240465894"
 
diff --git a/modules/simpletest/simpletest.install b/modules/simpletest/simpletest.install
index 15bb699..7a90353 100644
--- a/modules/simpletest/simpletest.install
+++ b/modules/simpletest/simpletest.install
@@ -1,5 +1,12 @@
 <?php
-// $Id: simpletest.install,v 1.4.2.3.2.12 2008/09/23 04:53:40 boombatower Exp $
+// $Id: simpletest.install,v 1.4.2.3.2.16 2009/04/23 05:39:52 boombatower Exp $
+// Core: Id: simpletest.install,v 1.17 2009/03/29 23:14:53 webchick Exp
+/**
+ * @file
+ * Backport of Drupal 7 simpletest.install with modifications, see BACKPORT.txt.
+ *
+ * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
+ */
 
 /**
  * Implementation of hook_install().
@@ -28,12 +35,13 @@ function simpletest_install() {
     }
 
     // Copy other test files for consistency.
-    $files = file_scan_directory($path, '(html|image|javascript|php|sql)-.*');
+    $files = file_scan_directory($path, '/(html|image|javascript|php|sql)-.*/');
     if (count($files) == 0) {
       $original = drupal_get_path('module', 'simpletest') . '/files';
-      $files = file_scan_directory($original, '(html|image|javascript|php|sql)-.*');
+      $files = file_scan_directory($original, '/(html|image|javascript|php|sql)-.*/');
       foreach ($files as $file) {
-        file_copy($file->filename, $path . '/' . $file->basename);
+//        file_unmanaged_copy($file->filepath, $path);
+        file_unmanaged_copy($file->filename, $path . '/' . $file->basename);
       }
       $generated = TRUE;
     }
@@ -92,6 +100,8 @@ function simpletest_get_file_count($directory, $filename) {
  * Implementation of hook_uninstall().
  */
 function simpletest_uninstall() {
+  simpletest_clean_environment();
+
   variable_del('simpletest_httpauth');
   variable_del('simpletest_httpauth_username');
   variable_del('simpletest_httpauth_pass');
@@ -107,26 +117,27 @@ function simpletest_requirements($phase) {
   $t = get_t();
 
   $has_curl = function_exists('curl_init');
+  $has_domdocument = class_exists('DOMDocument');
 
-  switch ($phase) {
-    case 'runtime':
-      $requirements['simpletest_curl'] = array(
-        'title' => $t('cURL'),
-        'value' => $has_curl ? $t('Enabled') : $t('Not found'),
-        'severity' => $has_curl ? REQUIREMENT_OK : REQUIREMENT_ERROR,
-      );
-      break;
-    case 'install':
-      if (!$has_curl) {
-        $requirements['simpletest_curl'] = array(
-          'title' => $t('cURL'),
-          'severity' => REQUIREMENT_ERROR,
-          'description' => $t('Simpletest could not be installed because the PHP <a href="!curl_url">cURL</a> library is not available.', array('!curl_url' => 'http://php.net/manual/en/curl.setup.php')),
-        );
-      }
-      break;
+  $requirements['curl'] = array(
+    'title' => $t('cURL'),
+    'value' => $has_curl ? $t('Enabled') : $t('Not found'),
+  );
+  if (!$has_curl) {
+    $requirements['curl']['severity'] = REQUIREMENT_ERROR;
+    $requirements['curl']['description'] = $t('Simpletest could not be installed because the PHP <a href="@curl_url">cURL</a> library is not available.', array('@curl_url' => 'http://php.net/manual/en/curl.setup.php'));
   }
 
+  $requirements['php_domdocument'] = array(
+    'title' => $t('PHP DOMDocument class'),
+    'value' => $has_domdocument ? $t('Enabled') : $t('Not found'),
+  );
+  if (!$has_domdocument) {
+    $requirements['php_domdocument']['severity'] = REQUIREMENT_ERROR;
+    $requirements['php_domdocument']['description'] =t('SimpleTest requires the DOMDocument class to be available. Please check the configure command at the <a href="@link-phpinfo">PHP info page</a>.', array('@link-phpinfo' => url('admin/reports/status/php')));
+  }
+
+  // Drupal 6.
   // Check that the global variable is defined signifying that the code was inserted correctly.
   if (isset($GLOBALS['simpletest_installed'])) {
      $requirements['simpletest_settings'] = array(
@@ -152,64 +163,64 @@ function simpletest_requirements($phase) {
 
 function simpletest_schema() {
   $schema['simpletest'] = array(
-    'description' => t('Stores simpletest messages'),
+    'description' => 'Stores simpletest messages',
     'fields' => array(
       'message_id'  => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique simpletest message ID.'),
+        'description' => 'Primary Key: Unique simpletest message ID.',
       ),
       'test_id' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Test ID, messages belonging to the same ID are reported together'),
+        'description' => 'Test ID, messages belonging to the same ID are reported together',
       ),
       'test_class' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The name of the class that created this message.'),
+        'description' => 'The name of the class that created this message.',
       ),
       'status' => array(
         'type' => 'varchar',
         'length' => 9,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Message status. Core understands pass, fail, exception.'),
+        'description' => 'Message status. Core understands pass, fail, exception.',
       ),
       'message' => array(
         'type' => 'text',
         'not null' => TRUE,
-        'description' => t('The message itself.'),
+        'description' => 'The message itself.',
       ),
       'message_group' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The message group this message belongs to. For example: warning, browser, user.'),
+        'description' => 'The message group this message belongs to. For example: warning, browser, user.',
       ),
       'function' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Name of the assertion function or method that created this message.'),
+        'description' => 'Name of the assertion function or method that created this message.',
       ),
       'line' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Line number on which the function is called.'),
+        'description' => 'Line number on which the function is called.',
       ),
       'file' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Name of the file where the function is called.'),
+        'description' => 'Name of the file where the function is called.',
       ),
     ),
     'primary key' => array('message_id'),
@@ -218,13 +229,13 @@ function simpletest_schema() {
     ),
   );
   $schema['simpletest_test_id'] = array(
-    'description' => t('Stores simpletest test IDs, used to auto-incrament the test ID so that a fresh test ID is used.'),
+    'description' => 'Stores simpletest test IDs, used to auto-incrament the test ID so that a fresh test ID is used.',
     'fields' => array(
       'test_id'  => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique simpletest ID used to group test results together. Each time a set of tests
-                            are run a new test ID is used.'),
+        'description' => 'Primary Key: Unique simpletest ID used to group test results together. Each time a set of tests
+                            are run a new test ID is used.',
       ),
     ),
     'primary key' => array('test_id'),
@@ -233,12 +244,120 @@ function simpletest_schema() {
 }
 
 /**
- * Correct column name.
+ * Upgrade simpletest 5.x-1.x and 6.x-1.x to 6.x-2.1 release.
+ * 
+ * Note: This does not fix the update_7000 bug introduced in 6.x-2.1 release.
  */
 function simpletest_update_6000() {
   $ret = array();
   $schema = array();
 
+  // Check for files directory.
+  $path = file_directory_path() . '/simpletest';
+  if (file_check_directory($path, FILE_CREATE_DIRECTORY)) {
+    // Generate binary and text test files.
+    $generated = FALSE;
+    if (simpletest_get_file_count($path, 'binary') == 0) {
+      $lines = array(64, 1024);
+      foreach ($lines as $line) {
+        simpletest_generate_file('binary', 64, $line, 'binary');
+      }
+      $generated = TRUE;
+    }
+
+    if (simpletest_get_file_count($path, 'text') == 0) {
+      $lines = array(16, 256, 1024, 2048, 20480);
+      foreach ($lines as $line) {
+        simpletest_generate_file('text', 64, $line);
+      }
+      $generated = TRUE;
+    }
+
+    // Copy other test files for consistency.
+    $files = file_scan_directory($path, '(html|image|javascript|php|sql)-.*');
+    if (count($files) == 0) {
+      $original = drupal_get_path('module', 'simpletest') . '/files';
+      $files = file_scan_directory($original, '(html|image|javascript|php|sql)-.*');
+      foreach ($files as $file) {
+        file_copy($file->filename, $path . '/' . $file->basename);
+      }
+      $generated = TRUE;
+    }
+
+    if ($generated) {
+      $ret[] = array('success' => TRUE, 'query' => 'Extra test files generated.');
+    }
+  }
+
+  // Install 6.x-2.1 schema.
+  $schema['simpletest'] = array(
+    'description' => t('Stores simpletest messages'),
+    'fields' => array(
+      'message_id'  => array(
+        'type' => 'serial',
+        'not null' => TRUE,
+        'description' => t('Primary Key: Unique simpletest message ID.'),
+      ),
+      'test_id' => array(
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+        'description' => t('Test ID, messages belonging to the same ID are reported together'),
+      ),
+      'test_class' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+        'description' => t('The name of the class that created this message.'),
+      ),
+      'status' => array(
+        'type' => 'varchar',
+        'length' => 9,
+        'not null' => TRUE,
+        'default' => '',
+        'description' => t('Message status. Core understands pass, fail, exception.'),
+      ),
+      'message' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+        'description' => t('The message itself.'),
+      ),
+      'message_group' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+        'description' => t('The message group this message belongs to. For example: warning, browser, user.'),
+      ),
+      'caller' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+        'description' => t('Name of the caller function or method that created this message.'),
+      ),
+      'line' => array(
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+        'description' => t('Line number on which the function is called.'),
+      ),
+      'file' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+        'description' => t('Name of the file where the function is called.'),
+      ),
+    ),
+    'primary key' => array('message_id'),
+    'indexes' => array(
+      'reporter' => array('test_class', 'message_id'),
+    ),
+  );
   $schema['simpletest_test_id'] = array(
     'description' => t('Stores simpletest test IDs, used to auto-incrament the test ID so that a fresh test ID is used.'),
     'fields' => array(
@@ -252,11 +371,13 @@ function simpletest_update_6000() {
     'primary key' => array('test_id')
   );
 
-  // Clear test results to prevent conflict.
-  db_query('DELETE FROM {simpletest}');
+  // Install non-existent tables.
+  db_create_table($ret, 'simpletest', $schema['simpletest']);
 
-  // Replace old table with new to make sure primary keys and such are fixed.
-  db_drop_table($ret, 'simpletest_test_id');
+  // Drop table to make sure field 'test_id' and primary key is fixed (6.x-2.1 bug fixed in 6.x-2.2).
+  if (db_table_exists('simpletest_test_id')) {
+    db_drop_table($ret, 'simpletest_test_id');
+  }
   db_create_table($ret, 'simpletest_test_id', $schema['simpletest_test_id']);
 
   return $ret;
@@ -300,7 +421,6 @@ function simpletest_update_6002() {
   // Clear test results to prevent odd results.
   db_query('DELETE FROM {simpletest}');
 
-
   db_drop_field($ret, 'simpletest', 'caller');
   db_add_field($ret, 'simpletest', 'function', $schema);
 
diff --git a/modules/simpletest/simpletest.js b/modules/simpletest/simpletest.js
index 1cd07ef..38a3a4b 100644
--- a/modules/simpletest/simpletest.js
+++ b/modules/simpletest/simpletest.js
@@ -1,75 +1,103 @@
-// $Id: simpletest.js,v 1.2.4.3 2008/10/09 05:05:15 boombatower Exp $
+// $Id: simpletest.js,v 1.2.4.4 2009/02/08 02:35:39 boombatower Exp $
 
 /**
  * Add the cool table collapsing on the testing overview page.
  */
+//Drupal.behaviors.simpleTestMenuCollapse = {
+//  attach: function() {
 Drupal.behaviors.simpleTestMenuCollapse = function() {
-  // Adds expand-collapse functionality.
-  $('div.simpletest-image').each(function() {
-    direction = Drupal.settings.simpleTest[$(this).attr('id')].imageDirection;
-    $(this).html(Drupal.settings.simpleTest.images[direction]);
-  });
-  $('div.simpletest-image').click(function() {
-    // Toggle all of the trs.
-    if (!Drupal.settings.simpleTest[$(this).attr('id')].clickActive) {
-      Drupal.settings.simpleTest[$(this).attr('id')].clickActive = true;
-      var trs = $(this).parents('tbody').children().filter('.' + Drupal.settings.simpleTest[$(this).attr('id')].testClass), trs_formatted = [], direction = Drupal.settings.simpleTest[$(this).attr('id')].imageDirection, self = $(this);
-      for (var i = 0; i < trs.length; i++) {
-        trs_formatted.push(trs[i]);
+    var timeout = null;
+    // Adds expand-collapse functionality.
+    $('div.simpletest-image').each(function() {
+      direction = Drupal.settings.simpleTest[$(this).attr('id')].imageDirection;
+      $(this).html(Drupal.settings.simpleTest.images[direction]);
+    });
+
+    // Adds group toggling functionality to arrow images.
+    $('div.simpletest-image').click(function() {
+      var trs = $(this).parents('tbody').children('.' + Drupal.settings.simpleTest[this.id].testClass);
+      var direction = Drupal.settings.simpleTest[this.id].imageDirection;
+      var row = direction ? trs.size() - 1 : 0;
+
+      // If clicked in the middle of expanding a group, stop so we can switch directions.
+      if (timeout) {
+        clearTimeout(timeout);
       }
-      var toggleTrs = function(trs, action, action2) {
-        tr = trs[action]();
-        if (tr) {
-          $(tr)[action2](1, function() {
-            toggleTrs(trs, action, action2);
-          });
+
+      // Function to toggle an individual row according to the current direction.
+      // We set a timeout of 20 ms until the next row will be shown/hidden to
+      // create a sliding effect.
+      function rowToggle() {
+        if (direction) {
+          if (row >= 0) {
+            $(trs[row]).hide();
+            row--;
+            timeout = setTimeout(rowToggle, 20);
+          }
         }
         else {
-          Drupal.settings.simpleTest[self.attr('id')].clickActive = false;
+          if (row < trs.size()) {
+            $(trs[row]).removeClass('js-hide').show();
+            row++;
+            timeout = setTimeout(rowToggle, 20);
+          }
         }
       }
-      toggleTrs(trs_formatted, (direction ? 'pop' : 'shift'), (direction ? 'fadeOut' : 'fadeIn'));
-      Drupal.settings.simpleTest[$(this).attr('id')].imageDirection = !direction;
-      $(this).html(Drupal.settings.simpleTest.images[(direction? 0 : 1)]);
-    }
-  });
-}
+
+      // Kick-off the toggling upon a new click.
+      rowToggle();
+
+      // Toggle the arrow image next to the test group title.
+      $(this).html(Drupal.settings.simpleTest.images[(direction ? 0 : 1)]);
+      Drupal.settings.simpleTest[this.id].imageDirection = !direction;
+
+    });
+//  }
+};
 
 /**
  * Select/deselect all the inner checkboxes when the outer checkboxes are
  * selected/deselected.
  */
+//Drupal.behaviors.simpleTestSelectAll = {
+//  attach: function() {
 Drupal.behaviors.simpleTestSelectAll = function() {
-  $('td.simpletest-select-all').each(function() {
-    var checkboxes = Drupal.settings.simpleTest['simpletest-test-group-'+ $(this).attr('id')].testNames, totalCheckboxes = 0,
-      checkbox = $('<input type="checkbox" class="form-checkbox" id="'+ $(this).attr('id') +'-select-all" />').change(function() {
-      var checked = !!($(this).attr('checked'));
-      for (var i = 0; i < checkboxes.length; i++) {
-        $('#'+ checkboxes[i]).attr('checked', checked);
-      }
-      self.data('simpletest-checked-tests', (checked ? checkboxes.length : 0));
-    }).data('simpletest-checked-tests', 0);
-    var self = $(this);
-    for (var i = 0; i < checkboxes.length; i++) {
-      if ($('#' + checkboxes[i]).change(function() {
-        if (checkbox.attr('checked') == 'checked') {
-          checkbox.attr('checked', '');
-        }
-        var data = (!self.data('simpletest-checked-tests') ? 0 : self.data('simpletest-checked-tests')) + (!!($(this).attr('checked')) ? 1 : -1);
-        self.data('simpletest-checked-tests', data);
-        if (data == checkboxes.length) {
-          checkbox.attr('checked', 'checked');
+    $('td.simpletest-select-all').each(function() {
+      var testCheckboxes = Drupal.settings.simpleTest['simpletest-test-group-' + $(this).attr('id')].testNames;
+      var groupCheckbox = $('<input type="checkbox" class="form-checkbox" id="' + $(this).attr('id') + '-select-all" />');
+
+      // Each time a single-test checkbox is checked or unchecked, make sure
+      // that the associated group checkbox gets the right state too.
+      var updateGroupCheckbox = function() {
+        var checkedTests = 0;
+        for (var i = 0; i < testCheckboxes.length; i++) {
+          $('#' + testCheckboxes[i]).each(function() {
+            if (($(this).attr('checked'))) {
+              checkedTests++;
+            }
+          });
         }
-        else {
-          checkbox.removeAttr('checked');
+        $(groupCheckbox).attr('checked', (checkedTests == testCheckboxes.length));
+      }
+
+      // Have the single-test checkboxes follow the group checkbox.
+      groupCheckbox.change(function() {
+        var checked = !!($(this).attr('checked'));
+        for (var i = 0; i < testCheckboxes.length; i++) {
+          $('#'+ testCheckboxes[i]).attr('checked', checked);
         }
-      }).attr('checked') == 'checked') {
-        totalCheckboxes++;
+      });
+
+      // Have the group checkbox follow the single-test checkboxes.
+      for (var i = 0; i < testCheckboxes.length; i++) {
+        $('#' + testCheckboxes[i]).change(function() {
+          updateGroupCheckbox();
+        });
       }
-    }
-    if (totalCheckboxes == checkboxes.length) {
-      $(checkbox).attr('checked', 'checked');
-    }
-    $(this).append(checkbox);
-  });
-};
\ No newline at end of file
+
+      // Initialize status for the group checkbox correctly.
+      updateGroupCheckbox();
+      $(this).append(groupCheckbox);
+    });
+//  }
+};
diff --git a/modules/simpletest/simpletest.module b/modules/simpletest/simpletest.module
index 323916c..64d77f6 100644
--- a/modules/simpletest/simpletest.module
+++ b/modules/simpletest/simpletest.module
@@ -1,7 +1,12 @@
 <?php
-// $Id: simpletest.module,v 1.33.2.4.2.9 2008/10/22 23:14:51 boombatower Exp $
-
-//require_once drupal_get_path('module', 'simpletest') . '/drupal_test_case.php';
+// $Id: simpletest.module,v 1.33.2.4.2.17 2009/04/23 05:39:52 boombatower Exp $
+// Core: Id: simpletest.module,v 1.39 2009/03/31 01:49:53 webchick Exp
+/**
+ * @file
+ * Backport of Drupal 7 simpletest.module with modifications, see BACKPORT.txt.
+ *
+ * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
+ */
 
 /**
  * Implementation of hook_help().
@@ -36,11 +41,17 @@ function simpletest_menu() {
  * Implementation of hook_perm().
  */
 function simpletest_perm() {
+//  return array(
+//    'administer unit tests' => array(
+//      'title' => t('Administer unit tests'),
+//      'description' => t('Manage and run automated testing. %warning', array('%warning' => t('Warning: Give to trusted roles only; this permission has security implications.'))),
+//    ),
+//  );
   return array('administer unit tests');
 }
 
 /**
- * Implemenation of hook_theme().
+ * Implementation of hook_theme().
  */
 function simpletest_theme() {
   return array(
@@ -57,13 +68,13 @@ function simpletest_theme() {
  * Menu callback for both running tests and listing possible tests
  */
 function simpletest_test_form() {
-  global $db_prefix, $db_prefix_original;
-
   $form = array();
 
   // List out all tests in groups for selection.
   $uncategorized_tests = simpletest_get_all_tests();
   $tests = simpletest_categorize_tests($uncategorized_tests);
+  $selected_tests = array();
+
   if (isset($_SESSION['test_id'])) {
     // Select all results using the active test ID used to group them.
     $results = db_query("SELECT * FROM {simpletest} WHERE test_id = %d ORDER BY test_class, message_id", $_SESSION['test_id']);
@@ -86,8 +97,9 @@ function simpletest_test_form() {
     $header = array(t('Message'), t('Group'), t('Filename'), t('Line'), t('Function'), array('colspan' => 2, 'data' => t('Status')));
     while ($result = db_fetch_object($results)) {
       $class = $result->test_class;
-      $info = $uncategorized_tests[$class]->getInfo();
+      $info = call_user_func(array($class, 'getInfo'));
       $group = $info['group'];
+      $selected_tests[$group][$class] = TRUE;
       if (!isset($group_summary[$group])) {
         $group_summary[$group] = $summary;
       }
@@ -119,17 +131,14 @@ function simpletest_test_form() {
     }
 
     // Clear test results.
-    if (variable_get('simpletest_clear_results', TRUE)) {
-      db_query('DELETE FROM {simpletest} WHERE test_id = %d', $_SESSION['test_id']);
-      db_query('DELETE FROM {simpletest_test_id} WHERE test_id = %d', $_SESSION['test_id']);
-    }
+    simpletest_clean_results_table($_SESSION['test_id']);
     unset($_SESSION['test_id']);
 
     $all_ok = TRUE;
     foreach ($form['results'] as $group => &$elements) {
       $group_ok = TRUE;
       foreach ($elements as $class => &$element) {
-        $info = $uncategorized_tests[$class]->getInfo();
+        $info = call_user_func(array($class, 'getInfo'));
         $ok = $element['summary']['#fail'] + $element['summary']['#exception'] == 0;
         $element += array(
           '#type' => 'fieldset',
@@ -137,6 +146,7 @@ function simpletest_test_form() {
           '#collapsed' => $ok,
           '#description' => $info['description'],
         );
+//        $element['result_table']['#markup'] = theme('table', $header, $element['result_table']['#rows']);
         $element['result_table']['#value'] = theme('table', $header, $element['result_table']['#rows']);
         $element['summary']['#ok'] = $ok;
         $group_ok = $group_ok && $ok;
@@ -162,15 +172,20 @@ function simpletest_test_form() {
     '#theme' => 'simpletest_test_table'
     );
   foreach ($tests as $group_name => $test_group) {
-    foreach ($test_group as $test) {
-      $test_info = $test->getInfo();
-      $test_class = get_class($test);
-      $form['tests']['table'][$group_name][$test_class] = array(
+    $form['tests']['table'][$group_name] = array(
+      '#collapsed' => TRUE,
+    );
+    foreach ($test_group as $class => $info) {
+      $is_selected = isset($selected_tests[$group_name][$class]);
+      $form['tests']['table'][$group_name][$class] = array(
         '#type' => 'checkbox',
-        '#title' => $test_info['name'],
-        '#default_value' => 0,
-        '#description' => $test_info['description'],
+        '#title' => $info['name'],
+        '#default_value' => $is_selected,
+        '#description' => $info['description'],
       );
+      if ($is_selected) {
+        $form['tests']['table'][$group_name]['#collapsed'] = FALSE;
+      }
     }
   }
 
@@ -196,22 +211,22 @@ function simpletest_test_form() {
 }
 
 function theme_simpletest_test_table($table) {
-  drupal_add_css(drupal_get_path('module', 'simpletest') . '/simpletest.css', 'module');
-  drupal_add_js(drupal_get_path('module', 'simpletest') . '/simpletest.js', 'module');
+  drupal_add_css(drupal_get_path('module', 'simpletest') . '/simpletest.css');
+  drupal_add_js(drupal_get_path('module', 'simpletest') . '/simpletest.js');
 
   // Create header for test selection table.
   $header = array(
-  theme('table_select_header_cell'),
-  array('data' => t('Test'), 'class' => 'simpletest_test'),
-  array('data' => t('Description'), 'class' => 'simpletest_description'),
+    theme('table_select_header_cell'),
+    array('data' => t('Test'), 'class' => 'simpletest_test'),
+    array('data' => t('Description'), 'class' => 'simpletest_description'),
   );
 
   // Define the images used to expand/collapse the test groups.
   $js = array(
     'images' => array(
-  theme('image', 'misc/menu-collapsed.png', 'Expand', 'Expand'),
-  theme('image', 'misc/menu-expanded.png', 'Collapsed', 'Collapsed'),
-  ),
+      theme('image', 'misc/menu-collapsed.png', 'Expand', 'Expand'),
+      theme('image', 'misc/menu-expanded.png', 'Collapsed', 'Collapsed'),
+    ),
   );
 
   // Go through each test group and create a row.
@@ -220,10 +235,15 @@ function theme_simpletest_test_table($table) {
     $element = &$table[$key];
     $row = array();
 
-    // Make the class name safe for output on the pace by replacing all
+    // Make the class name safe for output on the page by replacing all
     // non-word/decimal characters with a dash (-).
     $test_class = strtolower(trim(preg_replace("/[^\w\d]/", "-", $key)));
 
+    // Select the right "expand"/"collapse" image, depending on whether the
+    // category is expanded (at least one test selected) or not.
+    $collapsed = !empty($element['#collapsed']);
+    $image_index = $collapsed ? 0 : 1;
+
     // Place-holder for checkboxes to select group of tests.
     $row[] = array('id' => $test_class, 'class' => 'simpletest-select-all');
 
@@ -238,7 +258,12 @@ function theme_simpletest_test_table($table) {
       $rows[] = array('data' => $row, 'class' => 'simpletest-group');
 
       // Add individual tests to group.
-      $current_js = array('testClass' => $test_class . '-test', 'testNames' => array(), 'imageDirection' => 0, 'clickActive' => FALSE);
+      $current_js = array(
+        'testClass' => $test_class . '-test',
+        'testNames' => array(),
+        'imageDirection' => $image_index,
+        'clickActive' => FALSE,
+      );
       foreach (element_children($element) as $test_name) {
         $test = $element[$test_name];
         $row = array();
@@ -258,7 +283,7 @@ function theme_simpletest_test_table($table) {
         $row[] = drupal_render($test);
         $row[] = theme('indentation', 1) . '<label for="edit-' . $test_name . '">' . $title . '</label>';
         $row[] = '<div class="description">' . $description . '</div>';
-        $rows[] = array('data' => $row, 'class' => $test_class . '-test js-hide');
+        $rows[] = array('data' => $row, 'class' => $test_class . '-test' . ($collapsed ? ' js-hide' : ''));
       }
       $js['simpletest-test-group-'. $test_class] = $current_js;
       unset($table[$key]);
@@ -271,7 +296,19 @@ function theme_simpletest_test_table($table) {
     return '<strong>' . t('No tests to display.') . '</strong>';
   }
   else {
-    return theme('table', $header, $rows, array('id' => 'simpletest-form-table'));;
+    return theme('table', $header, $rows, array('id' => 'simpletest-form-table'));
+  }
+}
+
+/**
+ * Implementation of hook_js_alter().
+ */
+function simpletest_js_alter(&$javascript) {
+  // Since SimpleTest is a special use case for the table select, stick the
+  // SimpleTest JavaScript above the table select.
+  $simpletest = drupal_get_path('module', 'simpletest') . '/simpletest.js';
+  if (array_key_exists($simpletest, $javascript) && array_key_exists('misc/tableselect.js', $javascript)) {
+    $javascript[$simpletest]['weight'] = $javascript['misc/tableselect.js']['weight'] - 1;
   }
 }
 
@@ -280,7 +317,7 @@ function theme_simpletest_result_summary($form, $text = NULL) {
 }
 
 function _simpletest_format_summary_line($summary) {
-  return t('@pass, @fail, @exception', array(
+  return t('@pass, @fail, and @exception', array(
     '@pass' => format_plural(isset($summary['#pass']) ? $summary['#pass'] : 0, '1 pass', '@count passes'),
     '@fail' => format_plural(isset($summary['#fail']) ? $summary['#fail'] : 0, '1 fail', '@count fails'),
     '@exception' => format_plural(isset($summary['#exception']) ? $summary['#exception'] : 0, '1 exception', '@count exceptions'),
@@ -310,21 +347,26 @@ function simpletest_test_form_submit($form, &$form_state) {
 }
 
 /**
- * Actually runs tests
+ * Actually runs tests.
+ *
  * @param $test_list
  *   List of tests to run.
  * @param $reporter
  *   Which reporter to use. Allowed values are: text, xml, html and drupal,
  *   drupal being the default.
- * @param $batch_mode
- *   Whether to use the batch API or not.
  */
-function simpletest_run_tests($test_list, $reporter = 'drupal', $batch_mode = FALSE) {
-  global $db_prefix, $db_prefix_original;
+function simpletest_run_tests($test_list, $reporter = 'drupal') {
   cache_clear_all();
+//  $test_id = db_insert('simpletest_test_id')->useDefaults(array('test_id'))->execute();
   db_query('INSERT INTO {simpletest_test_id} VALUES (default)');
   $test_id = db_last_insert_id('simpletest_test_id', 'test_id');
 
+  // Get the info for the first test being run.
+  $first_test = array_shift($test_list);
+  $first_instance = new $first_test();
+  array_unshift($test_list, $first_test);
+  $info = $first_instance->getInfo();
+
   $batch = array(
     'title' => t('Running SimpleTests'),
     'operations' => array(
@@ -332,9 +374,9 @@ function simpletest_run_tests($test_list, $reporter = 'drupal', $batch_mode = FA
     ),
     'finished' => '_simpletest_batch_finished',
     'redirect' => 'admin/build/testing',
-    'progress_message' => t('Processing tests.'),
+    'progress_message' => '',
     'css' => array(drupal_get_path('module', 'simpletest') . '/simpletest.css'),
-    'init_message' => t('SimpleTest is initializing...') . ' ' . format_plural(count($test_list), "one test case will run.", "@count test cases will run."),
+    'init_message' => t('Processing test @num of @max - %test.', array('%test' => $info['name'], '@num' => '1', '@max' => count($test_list))),
   );
   batch_set($batch);
   // Normally, the forms portion of the batch API takes care of calling
@@ -375,19 +417,18 @@ function _simpletest_batch_operation($test_list_init, $test_id, &$context) {
   $info = $test->getInfo();
 
   // Gather results and compose the report.
-  $test_results[$test_class] = $test->_results;
+  $test_results[$test_class] = $test->results;
   foreach ($test_results[$test_class] as $key => $value) {
     $test_results[$key] += $value;
   }
   $test_results[$test_class]['#name'] = $info['name'];
   $items = array();
   foreach (element_children($test_results) as $class) {
-    $items[] = '<div class="simpletest-' . ($test_results[$class]['#fail'] + $test_results[$class]['#exception'] ? 'fail' : 'pass') . '">' . t('@name: @summary', array('@name' => $test_results[$class]['#name'], '@summary' => _simpletest_format_summary_line($test_results[$class]))) . '</div>';
+    array_unshift($items, '<div class="simpletest-' . ($test_results[$class]['#fail'] + $test_results[$class]['#exception'] ? 'fail' : 'pass') . '">' . t('@name: @summary', array('@name' => $test_results[$class]['#name'], '@summary' => _simpletest_format_summary_line($test_results[$class]))) . '</div>');
   }
-  $message = t('Processed test @num of @max - %test.', array('%test' => $info['name'], '@num' => $max - $size, '@max' => $max));
-  $message .= theme('item_list', $items);
-  $context['message'] = $message;
-  // TODO: Do we want a summary of all?
+  $context['message'] = t('Processed test @num of @max - %test.', array('%test' => $info['name'], '@num' => $max - $size, '@max' => $max));
+  $context['message'] .= '<div class="simpletest-' . ($test_results['#fail'] + $test_results['#exception'] ? 'fail' : 'pass') . '">Overall results: ' . _simpletest_format_summary_line($test_results) . '</div>';
+  $context['message'] .= theme('item_list', $items);
 
   // Save working values for the next iteration.
   $context['sandbox']['tests'] = $test_list;
@@ -399,10 +440,15 @@ function _simpletest_batch_operation($test_list_init, $test_id, &$context) {
   $context['finished'] = 1 - $size / $max;
 }
 
+//function _simpletest_batch_finished($success, $results, $operations, $elapsed) {
 function _simpletest_batch_finished($success, $results, $operations) {
-  $_SESSION['test_id'] = $results['test_id'];
+  if (isset($results['test_id'])) {
+//    drupal_set_session('test_id', $results['test_id']);
+    $_SESSION['test_id'] = $results['test_id'];
+  }
   if ($success) {
-    drupal_set_message(t('The tests have finished running.'));
+//    drupal_set_message(t('The tests finished in @elapsed.', array('@elapsed' => $elapsed)));
+    drupal_set_message(t('The tests finished.'));
   }
   else {
     drupal_set_message(t('The tests did not successfully finish.'), 'error');
@@ -419,6 +465,7 @@ function _simpletest_batch_finished($success, $results, $operations) {
 function simpletest_get_all_tests() {
   static $formatted_classes;
   if (!isset($formatted_classes)) {
+//    require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'simpletest') . '/drupal_web_test_case.php';
     require_once drupal_get_path('module', 'simpletest') . '/drupal_web_test_case.php';
     $files = array();
     foreach (array_keys(module_rebuild_cache()) as $module) {
@@ -430,7 +477,9 @@ function simpletest_get_all_tests() {
 
       $tests_directory = $module_path . '/tests';
       if (is_dir($tests_directory)) {
+//        foreach (file_scan_directory($tests_directory, '/\.test$/') as $file) {
         foreach (file_scan_directory($tests_directory, '\.test$') as $file) {
+          // Drupal 6: Ignore 1.x style tests.
           if (!preg_match('/class\s+.*?\s+extends\s+DrupalTestCase/', file_get_contents($file->filename))) {
             // Ignore tests using the old format.
             $files[] = $file->filename;
@@ -439,27 +488,24 @@ function simpletest_get_all_tests() {
       }
     }
 
-    foreach (file_scan_directory('includes/tests', '\.test$') as $file) {
-      $files[] = $file->filename;
-    }
-
     $existing_classes = get_declared_classes();
     foreach ($files as $file) {
-      include_once($file);
+//      include_once DRUPAL_ROOT . '/' . $file;
+      include_once $file;
     }
     $classes = array_values(array_diff(get_declared_classes(), $existing_classes));
     $formatted_classes = array();
     foreach ($classes as $key => $class) {
-      if (method_exists($class, 'getInfo')) {
-        $formatted_classes[$class] = new $class;
+      if (!method_exists($class, 'getInfo')) {
+        unset($classes[$key]);
       }
     }
   }
-  if (count($formatted_classes) == 0) {
+  if (count($classes) == 0) {
     drupal_set_message('No test cases found.', 'error');
     return FALSE;
   }
-  return $formatted_classes;
+  return $classes;
 }
 
 /**
@@ -471,9 +517,9 @@ function simpletest_get_all_tests() {
  */
 function simpletest_categorize_tests($tests) {
   $groups = array();
-  foreach ($tests as $test => $instance) {
-    $info = $instance->getInfo();
-    $groups[$info['group']][$test] = $instance;
+  foreach ($tests as $test) {
+    $info = call_user_func(array($test, 'getInfo'));
+    $groups[$info['group']][$test] = $info;
   }
   uksort($groups, 'strnatcasecmp');
   return $groups;
@@ -485,18 +531,24 @@ function simpletest_categorize_tests($tests) {
 function simpletest_clean_environment() {
   simpletest_clean_database();
   simpletest_clean_temporary_directories();
-  simpletest_clean_results_table();
+  $count = simpletest_clean_results_table();
+  drupal_set_message(t('Removed @count test results.', array('@count' => $count)));
 }
 
 /**
- * Removed prefixed talbes from the database that are left over from crashed tests.
+ * Removed prefixed tables from the database that are left over from crashed tests.
  */
 function simpletest_clean_database() {
+//  $tables = db_find_tables(Database::getConnection()->prefixTables('{simpletest}') . '%');
   $tables = simpletest_get_like_tables();
-
+  $schema = drupal_get_schema_unprocessed('simpletest');
   $ret = array();
-  foreach ($tables as $table) {
-    db_drop_table($ret, $table);
+  foreach (array_diff_key($tables, $schema) as $table) {
+    // Strip the prefix and skip tables without digits following "simpletest",
+    // e.g. {simpletest_test_id}.
+    if (preg_match('/simpletest\d+.*/', $table, $matches)) {
+      db_drop_table($ret, $matches[0]);
+    }
   }
 
   if (count($ret) > 0) {
@@ -508,7 +560,7 @@ function simpletest_clean_database() {
 }
 
 /**
- * Find all tables that are like the specified base table name.
+ * Find all tables that are like the specified base table name. (Drupal 6)
  *
  * @param string $base_table Base table name.
  * @param boolean $count Return the table count instead of list of tables.
@@ -516,22 +568,18 @@ function simpletest_clean_database() {
  */
 function simpletest_get_like_tables($base_table = 'simpletest', $count = FALSE) {
   global $db_url, $db_prefix;
-  $url = parse_url($db_url);
+  $url = parse_url(is_array($db_url) ? $db_url['default'] : $db_url);
   $database = substr($url['path'], 1);
-  $select = $count ? 'COUNT(table_name)' : 'table_name';
-  $result = db_query("SELECT $select FROM information_schema.tables WHERE table_schema = '$database' AND table_name LIKE '$db_prefix$base_table%'");
+  $result = db_query("SELECT table_name FROM information_schema.tables WHERE table_schema = '$database' AND table_name LIKE '$db_prefix$base_table%'");
   $schema = drupal_get_schema_unprocessed('simpletest');
 
-  if ($count) {
-    return db_result($result);
-  }
   $tables = array();
   while ($table = db_result($result)) {
     if (!isset($schema[$table])) {
       $tables[] = $table;
     }
   }
-  return $tables;
+  return ($count) ? count($tables) : $tables;
 }
 
 /**
@@ -557,7 +605,7 @@ function simpletest_clean_temporary_directories() {
 }
 
 /**
- * Remove all files from specified firectory and then remove directory.
+ * Remove all files from specified directory and then remove directory. (Drupal 6)
  *
  * @param string $path Directory path.
  */
@@ -570,7 +618,8 @@ function simpletest_clean_temporary_directory($path) {
         simpletest_clean_temporary_directory($file_path);
       }
       else {
-        file_delete($file_path);
+//        file_unmanaged_delete($file_path);
+        unlink($file_path);
       }
     }
   }
@@ -578,16 +627,58 @@ function simpletest_clean_temporary_directory($path) {
 }
 
 /**
- * Clear the test results tables.
+ * Clear the test result tables.
+ *
+ * @param $test_id
+ *   Test ID to remove results for, or NULL to remove all results.
+ * @return
+ *   The number of results removed or FALSE.
  */
-function simpletest_clean_results_table() {
+function simpletest_clean_results_table($test_id = NULL) {
   if (variable_get('simpletest_clear_results', TRUE)) {
-    $count = db_result(db_query('SELECT COUNT(test_id) FROM {simpletest_test_id}'));
+    if ($test_id) {
+//      $count = db_result(db_query('SELECT COUNT(test_id) FROM {simpletest_test_id} WHERE test_id = :test_id', array(':test_id' => $test_id)));
+      $count = db_result(db_query('SELECT COUNT(test_id) FROM {simpletest_test_id} WHERE test_id = %d', $test_id));
+
+//      db_delete("simpletest")
+//        ->condition('test_id', $test_id)
+//        ->execute();
+//      db_delete("simpletest_test_id")
+//        ->condition('test_id', $test_id)
+//        ->execute();
+      db_query("DELETE FROM {simpletest} WHERE test_id = %d", $test_id);
+      db_query("DELETE FROM {simpletest_test_id} WHERE test_id = %d", $test_id);
+    }
+    else {
+      $count = db_result(db_query('SELECT COUNT(test_id) FROM {simpletest_test_id}'));
+
+      // Clear test results.
+//      db_delete("simpletest")->execute();
+//      db_delete("simpletest_test_id")->execute();
+      db_query('DELETE FROM {simpletest}');
+      db_query('DELETE FROM {simpletest_test_id}');
+    }
 
-    // Clear test results.
-    db_query('DELETE FROM {simpletest}');
-    db_query('DELETE FROM {simpletest_test_id}');
+    return $count;
+  }
+  return FALSE;
+}
 
-    drupal_set_message(t('Removed @count test results.', array('@count' => $count)));
+/**
+ * Implementation of hook_form_FORM_ID_alter(): system_modules. (Drupal 6)
+ *
+ * Hide modules that have 'hidden = TRUE' in their .info files.
+ */
+function simpletest_form_system_modules_alter(&$form, $form_state) {
+  foreach ($form['validation_modules']['#value'] as $filename => $file) {
+    if (!empty($file->info['hidden'])) {
+      unset($form['name'][$filename]);
+      unset($form['version'][$filename]);
+      unset($form['description'][$filename]);
+      unset($form['status']['#options'][$filename]);
+      unset($form['throttle']['#options'][$filename]);
+      unset($form['validation_modules']['#value'][$filename]);
+    }
   }
 }
+
diff --git a/modules/simpletest/simpletest.test b/modules/simpletest/simpletest.test
index 4ea6536..bc63c5f 100644
--- a/modules/simpletest/simpletest.test
+++ b/modules/simpletest/simpletest.test
@@ -1,22 +1,26 @@
 <?php
-// $Id: simpletest.test,v 1.1.2.5 2008/09/16 02:59:53 boombatower Exp $
-
-class SimpleTestTestCase extends DrupalWebTestCase {
+// $Id: simpletest.test,v 1.1.2.11 2009/04/23 05:39:51 boombatower Exp $
+// Core: Id: simpletest.test,v 1.17 2009/03/31 01:49:53 webchick Exp
+/**
+ * @file
+ * Backport of Drupal 7 simpletest.test with modifications, see BACKPORT.txt.
+ *
+ * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
+ */
+
+class SimpleTestFunctionalTest extends DrupalWebTestCase {
   /**
    * The results array that has been parsed by getTestResults().
    */
-  protected $results;
+  protected $childTestResults;
 
   /**
    * Store the test ID from each test run for comparison, to ensure they are
-   * incramenting.
+   * incrementing.
    */
   protected $test_ids = array();
 
-  /**
-   * Implementation of getInfo().
-   */
-  function getInfo() {
+  public static function getInfo() {
     return array(
       'name' => t('SimpleTest functionality'),
       'description' => t('Test SimpleTest\'s web interface: check that the intended tests were
@@ -27,9 +31,6 @@ class SimpleTestTestCase extends DrupalWebTestCase {
     );
   }
 
-  /**
-   * Implementation of setUp().
-   */
   function setUp() {
     if (!$this->inCURL()) {
       parent::setUp('simpletest');
@@ -50,13 +51,24 @@ class SimpleTestTestCase extends DrupalWebTestCase {
     global $conf;
     if (!$this->inCURL()) {
       $this->drupalGet('node');
+      $this->assertTrue($this->drupalGetHeader('Date'), t('An HTTP header was received.'));
       $this->assertTitle(variable_get('site_name', 'Drupal'), t('Site title matches.'));
+      $this->assertNoTitle('Foo', t('Site title does not match.'));
       // Make sure that we are locked out of the installer when prefixing
       // using the user-agent header. This is an important security check.
       global $base_url;
 
       $this->drupalGet($base_url . '/install.php', array('external' => TRUE));
       $this->assertResponse(403, 'Cannot access install.php with a "simpletest" user-agent header.');
+
+      $this->drupalLogin($this->drupalCreateUser());
+      $headers = $this->drupalGetHeaders(TRUE);
+      $this->assertEqual(count($headers), 2, t('There was one intermediate request.'));
+      $this->assertTrue(strpos($headers[0][':status'], '302') !== FALSE, t('Intermediate response code was 302.'));
+      $this->assertFalse(empty($headers[0]['location']), t('Intermediate request contained a Location header.'));
+      $this->assertEqual($this->getUrl(), $headers[0]['location'], t('HTTP redirect was followed'));
+      $this->assertFalse($this->drupalGetHeader('Location'), t('Headers from intermediate request were reset.'));
+      $this->assertResponse(200, t('Response code from intermediate request was reset.'));
     }
   }
 
@@ -75,13 +87,14 @@ class SimpleTestTestCase extends DrupalWebTestCase {
       $this->stubTest();
     }
     else {
+
       // Run twice so test_ids can be accumulated.
       for ($i = 0; $i < 2; $i++) {
         // Run this test from web interface.
         $this->drupalGet('admin/build/testing');
 
         $edit = array();
-        $edit['SimpleTestTestCase'] = TRUE;
+        $edit['SimpleTestFunctionalTest'] = TRUE;
         $this->drupalPost(NULL, $edit, t('Run tests'));
 
         // Parse results and confirm that they are correct.
@@ -105,14 +118,14 @@ class SimpleTestTestCase extends DrupalWebTestCase {
     $this->drupalCreateUser(array($this->valid_permission));
     $this->drupalCreateUser(array($this->invalid_permission));
 
-    $this->pass(t('Test ID is @id.', array('@id' => $this->test_id)));
+    $this->pass(t('Test ID is @id.', array('@id' => $this->testId)));
 
     // Generates a warning.
     $i = 1 / 0;
 
     // Call an assert function specific to that class.
     $this->assertNothing();
-    
+
     // Generates a warning inside a PHP function.
     array_key_exists(NULL, NULL);
   }
@@ -128,20 +141,22 @@ class SimpleTestTestCase extends DrupalWebTestCase {
    * Confirm that the stub test produced the desired results.
    */
   function confirmStubTestResults() {
-    $this->assertAssertion($this->pass, 'Other', 'Pass', 'simpletest.test', 'SimpleTestTestCase->stubTest()');
-    $this->assertAssertion($this->fail, 'Other', 'Fail', 'simpletest.test', 'SimpleTestTestCase->stubTest()');
+    $this->assertAssertion($this->pass, 'Other', 'Pass', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
+    $this->assertAssertion($this->fail, 'Other', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
 
-    $this->assertAssertion(t('Created permissions: @perms', array('@perms' => $this->valid_permission)), 'Role', 'Pass', 'simpletest.test', 'SimpleTestTestCase->stubTest()');
-    $this->assertAssertion(t('Invalid permission %permission.', array('%permission' => $this->invalid_permission)), 'Role', 'Fail', 'simpletest.test', 'SimpleTestTestCase->stubTest()');
+    $this->assertAssertion(t('Created permissions: @perms', array('@perms' => $this->valid_permission)), 'Role', 'Pass', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
+    $this->assertAssertion(t('Invalid permission %permission.', array('%permission' => $this->invalid_permission)), 'Role', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
 
     // Check that a warning is catched by simpletest.
-    $this->assertAssertion('Division by zero', 'Warning', 'Fail', 'simpletest.test', 'SimpleTestTestCase->stubTest()');
+    $this->assertAssertion('Division by zero', 'Warning', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
 
     // Check that the backtracing code works for specific assert function.
-    $this->assertAssertion('This is nothing.', 'Other', 'Pass', 'simpletest.test', 'SimpleTestTestCase->stubTest()');
+    $this->assertAssertion('This is nothing.', 'Other', 'Pass', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
 
     // Check that errors that occur inside PHP internal functions are correctly reported.
-    $this->assertAssertion('The second argument should be either an array or an object', 'Warning', 'Fail', 'simpletest.test', 'SimpleTestTestCase->stubTest()');
+    // The exact error message differs between PHP versions so we check only
+    // the function name 'array_key_exists'.
+    $this->assertAssertion('array_key_exists', 'Warning', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
 
     $this->test_ids[] = $test_id = $this->getTestIdFromResults();
     $this->assertTrue($test_id, t('Found test ID in results.'));
@@ -151,7 +166,7 @@ class SimpleTestTestCase extends DrupalWebTestCase {
    * Fetch the test id from the test results.
    */
   function getTestIdFromResults() {
-    foreach($this->results['assertions'] as $assertion) {
+    foreach($this->childTestResults['assertions'] as $assertion) {
       if (preg_match('@^Test ID is ([0-9]*)\.$@', $assertion['message'], $matches)) {
         return $matches[1];
       }
@@ -173,7 +188,7 @@ class SimpleTestTestCase extends DrupalWebTestCase {
   function assertAssertion($message, $type, $status, $file, $function) {
     $message = trim(strip_tags($message));
     $found = FALSE;
-    foreach ($this->results['assertions'] as $assertion) {
+    foreach ($this->childTestResults['assertions'] as $assertion) {
       if ((strpos($assertion['message'], $message) !== FALSE) &&
           $assertion['type'] == $type &&
           $assertion['status'] == $status &&
@@ -213,7 +228,7 @@ class SimpleTestTestCase extends DrupalWebTestCase {
         }
       }
     }
-    $this->results = $results;
+    $this->childTestResults = $results;
   }
 
   /**
@@ -255,4 +270,21 @@ class SimpleTestTestCase extends DrupalWebTestCase {
   function inCURL() {
     return preg_match("/^simpletest\d+/", $_SERVER['HTTP_USER_AGENT']);
   }
+
+  /*
+   * Drupal 6.
+   */
+
+  function testUserAccess()
+  {
+    $user = $this->drupalCreateUser(array('administer unit tests'));
+    $this->assertTrue(user_access('administer unit tests', $user), 'user_access() check successfull.');
+  }
+
+  function testUserAccessCache()
+  {
+    $user = $this->drupalCreateUser(array('administer nodes'));
+    $this->assertTrue(user_access('administer nodes', $user), 'user_access() cache has been cleaned');
+
+  }
 }
diff --git a/modules/simpletest/tests/block.test b/modules/simpletest/tests/block.test
index 65673e1..a1374ff 100644
--- a/modules/simpletest/tests/block.test
+++ b/modules/simpletest/tests/block.test
@@ -1,11 +1,17 @@
 <?php
-// $Id: block.test,v 1.1.2.1 2008/05/28 04:31:37 boombatower Exp $
+// $Id: block.test,v 1.1.2.1.2.2 2009/04/23 05:39:52 boombatower Exp $
+/**
+ * @file
+ * Backport of Drupal 7 block.test with modifications, see BACKPORT.txt.
+ *
+ * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
+ */
 
 class BlockTestCase extends DrupalWebTestCase {
   /**
    * Implementation of getInfo().
    */
-  function getInfo() {
+  public static function getInfo() {
     return array(
       'name' => t('Block functionality'),
       'description' => t('Add, edit and delete custom block. Configure and move a module-defined block.'),
diff --git a/modules/simpletest/tests/bootstrap.test b/modules/simpletest/tests/bootstrap.test
deleted file mode 100644
index 93ebf5a..0000000
--- a/modules/simpletest/tests/bootstrap.test
+++ /dev/null
@@ -1,239 +0,0 @@
-<?php
-/**
- * @file Provides test for patches to bootstrap.inc
- */
-
-
-/**
- * Test changes to variable_set().
- */
-class BootstrapVariableSet extends DrupalWebTestCase {
-  private $varName   = 'pressflow_test_var_set';
-  private $varValue  = 'The value for the test variable';
-  private $varUpdate = 'The update value for the test variable';
-  
-  /**
-   * Provides information about this test.
-   *
-   * @return array An array of test information.
-   */
-  function getInfo() {
-    return array(
-      'name'  => 'variable_get()',
-      'desc'  => t('Tests patches made to variable_get().'),
-      'group' => 'Pressflow',
-    );
-  }
-
-
-  /**
-   * Insert a new variable and confirm that it can be retrieved regardless
-   * of the case of the characters in the name.
-   */
-  function testInsertNew() {
-    variable_set($this->varName, $this->varValue);
-    $value = variable_get($this->varName, '');
-    
-    $msg = t('Insert new (@orig) and get with same case (@new).', 
-             array('@orig' => $this->varName, '@new' => $name));
-    $this->assertEqual($this->varValue, $value, $msg);
-
-    // Mangle the case of the variable name.
-    $name  = pressflow_tests_fuzz_case($this->varName);
-    $value = variable_get($name, '');
-    
-    $msg = t('Insert new (@orig) and get with different case (@new).', 
-             array('@orig' => $this->varName, '@new' => $name));
-    // NOTE: This test can't pass due to how Drupal deals with case on variable names.
-    //$this->assertEqual($this->varValue, $value, $msg);
-  }
-
-
-  /**
-   * Initialize the test.
-   */
-  function setUp() {
-    parent::setUp();
-    variable_del($this->varName);
-  }
-
-
-  /**
-   * Clean up after running the test.
-   */
-  function tearDown() {
-    variable_del($this->varName);
-    parent::tearDown();
-  }
-}
-
-
-/**
- * Shuffle the case of the alphabetic characters in the given string. The
- * algorithm used, picks a certain number of random character in the given
- * string and reverses the case of those characters.
- *
- * TODO: Move this function somewhere better.
- *
- * @param string $text The text to case-shuffle.
- *
- * @return string The case-shuffled text.
- */
-function pressflow_tests_fuzz_case($text) {
-  $text = strtolower($text);
-
-  for ($i = 0; $i < strlen($text); $i++) {
-    if (preg_match('/[a-z]/', $text[$i]) > 0) {
-      if (rand(0, 1) == 1) {
-        $text[$i] = strtoupper($text[$i]);
-      }
-    }
-  }
-
-  return $text;
-}
-
-/**
- * Force the variables to reset from the database.
- *
- * TODO: Move this function somewhere better.
- */
-function pressflow_tests_reset_vars() {
-  global $conf;
-
-  cache_clear_all('variables', 'cache');
-  $vars = variable_init();
-
-  //------------------------------------------------------------------------
-  // Create a list of lowercase keys.
-  $temp  = array_keys($var);
-  $names = array();
-
-  foreach ($temp as $key) {
-    $names[] = strtolower($key);
-  }
-
-  //------------------------------------------------------------------------
-  // Unset any variable whose name equals (ingoring case) a database backed
-  // variable name
-  $conf_keys = array_keys($conf);
-  foreach ($conf_keys as $key) {
-    $low_key = strtolower($key);
-    if (array_search($low_key, $names) !== FALSE) {
-      unset($conf[$key]);
-    }
-  }
-
-  //------------------------------------------------------------------------
-  // Set the reloaded variables.
-  foreach ($vars as $key => $value) {
-    $conf[$key] = $value;
-  }
-}
-
-
-/**
- * Tests changes to drupal_is_denied().
- */
-class BootstrapIsDenied extends DrupalWebTestCase {
-  /** Stores the IDs of the access rules that are created so we can clean
-   *  up when we're done. */
-  private $accessID = array();
-  
-  /** The access rules that will be created. */
-  private $accessRules = array(
-    array('mask' => '127.10.%',      'type' => 'host', 'status' => 1),
-    array('mask' => '64.122.5.%',    'type' => 'host', 'status' => 0),
-    array('mask' => '%@example.com', 'type' => 'mail', 'status' => 1),
-    array('mask' => '%@hotmail.com', 'type' => 'mail', 'status' => 0),
-    array('mask' => 'George',        'type' => 'user', 'status' => 1),
-    array('mask' => 'George%',       'type' => 'user', 'status' => 0),
-  );
-
-  /** These should allow access. */
-  private $shouldPass = array(
-    '127.10.1.255'           => 'host',
-    '65.122.5.2'             => 'host',
-    'sampleuser@example.com' => 'mail',
-    'google@yahoo.com'       => 'mail',
-    'George'                 => 'user',
-    'Frank'                  => 'user',
-  );
-
-  /** These should prevent access. */
-  private $shouldFail = array(
-    '64.122.5.22' => 'host',
-    'herbert@hotmail.com' => 'mail',
-    'George Wells' => 'user',
-  );
-  
-  
-  /**
-   * Provides information about this test.
-   *
-   * @return array An array of test information.
-   */
-  function getInfo() {
-    return array(
-      'name' => 'drupal_is_denied()',
-      'desc' => t('Tests patches made to drupal_is_denied().'),
-      'group' => 'Pressflow',
-    );
-  }
-
-
-  /**
-   * Test the allowed access rules.
-   */
-  function testDrupalIsDeniedAllows() {
-    foreach ($this->shouldPass as $mask => $type) {
-      $remask = pressflow_tests_fuzz_case($mask);
-      $result = drupal_is_denied($type, $remask);
-      
-      $msg = t('Check allowed mask: @mask with type @type - %s',
-               array('@mask' => $remask, '@type' => $type));
-      
-      $this->assertFalse($result, $msg);
-    }
-  }
-  
-  /**
-   * Test the denied access rules.
-   */
-  function testDrupalIsDeniedDenials() {
-    foreach ($this->shouldFail as $mask => $type) {
-      $remask = pressflow_tests_fuzz_case($mask);
-      $result = drupal_is_denied($type, $remask);
-      
-      $msg = t('Check blocked mask: @mask with type @type - %s',
-               array('@mask' => $remask, '@type' => $type));
-      
-      $this->assertTrue($result, $msg);
-    }
-  }
-
-  /**
-   * Create some rules to test against.
-   */
-  function setUp() {
-    parent::setUp();
-    foreach ($this->accessRules as $rule) {
-      db_query('INSERT INTO {access} (mask, type, status) VALUES ("%s", "%s", %d)',
-               $rule['mask'], $rule['type'], $rule['status']);
-      $aid = db_last_insert_id('access', 'aid');
-      $this->accessID[] = $aid;
-    }  
-  }
-
-
-  /**
-   * Clean up after ourselves.
-   */
-  function tearDown() {
-    foreach ($this->accessID as $aid) {
-      db_query('DELETE FROM {access} WHERE aid = %d', $aid);
-    }
-    
-    parent::tearDown();
-  }
-}
diff --git a/modules/simpletest/tests/cache.test b/modules/simpletest/tests/cache.test
deleted file mode 100644
index 3842592..0000000
--- a/modules/simpletest/tests/cache.test
+++ /dev/null
@@ -1,51 +0,0 @@
-<?php
-/**
- * @file Provides test for patches to cache.inc
- */
-
-/**
- * Test changes to cache_set().
- */
-class CacheSetTest extends DrupalWebTestCase {
-
-  private $cacheName = 'test_cache_set_id';
-  private $cacheValue = 'initial test value';
-
-  /**
-   * Provides information about this test.
-   *
-   * @return array An array of test information.
-   */
-  function getInfo() {
-    return array(
-      'name'  => 'cache_set()',
-      'desc'  => t('Tests patches made to cache_set().'),
-      'group' => 'Pressflow',
-    );
-  }  
-
-
-  /**
-   * Test cache set functionality.
-   */
-  function testCacheSet() {
-    cache_set($this->cacheName, $this->cacheValue);
-    $retrieved = cache_get($this->cacheName);
-    if ($retrieved) {
-      $value = $retrieved->data;
-    }
-    
-    $this->assertEqual($this->cacheValue, $value,
-                       t('Cache set/retrieve with identical name.'));
-    
-    $retrieved = cache_get(pressflow_tests_fuzz_case($this->cacheName));
-    if ($retrieved) {
-      $value = $retrieved->data;
-    }
-
-    $this->assertEqual($retrieved->data, $this->cacheValue,
-                       t('Cache set/retrieve with mixed case name.'));
-  }
-
-}
-
diff --git a/modules/simpletest/tests/comments.test b/modules/simpletest/tests/comments.test
deleted file mode 100644
index 34871a3..0000000
--- a/modules/simpletest/tests/comments.test
+++ /dev/null
@@ -1,119 +0,0 @@
-<?php
-/**
- * @file Provides test for changes to comment.module
- */
- 
- 
-/**
- * Test changes to comment_validate().
- */
-class CommentValidateTest extends DrupalWebTestCase {
-  private $testNode     = NULL;
-  private $oldPerms     = '';
-  private $changedPerms = FALSE;
-  private $anonymous    = NULL;
-  private $preview      = NULL;
-
-
-  /**
-   * Provides information about this test.
-   *
-   * @return array An array of test information.
-   */
-  function getInfo() {
-    return array(
-      'name'  => t('Anonymous comment'),
-      'desc'  => t('Verify that an anonymous user with the same name as a registered user cannot submit a comment of that name regardless of case.'),
-      'group' => 'Pressflow',
-    );
-  }
-
-
-  /**
-   * Initialize the test.
-   */
-  function setUp() {
-    parent::setUp('comment');
-
-    $this->testNode = $this->drupalCreateNode(array('type' => 'story'));
-    
-    // Backup the permissions for anonymous users
-    $this->oldPerms = db_result(db_query('SELECT perm FROM {permission} WHERE rid = 1'));
-    
-    // If permissions don't include 'post comments', add it
-    if (strpos($this->oldPerms, 'post comments') === FALSE) {
-      $newPerm = $this->oldPerms . ', access comments, post comments, post comments without approval';
-      $this->changedPerms = TRUE;
-      db_query("UPDATE {permission} SET perm = '%s' WHERE rid = 1", $newPerm);
-    }
-    
-    // Settings for comments should require contact info.
-    $this->anonymous = variable_get('comment_anonymous', NULL);
-    variable_set('comment_anonymous', COMMENT_ANONYMOUS_MUST_CONTACT);
-    
-    // Do not require a preview.
-    $this->preview = variable_get('comment_preview', NULL);
-    variable_set('comment_preview', COMMENT_PREVIEW_OPTIONAL);
-  }
-  
-  
-  /**
-   * Clean up after ourselves.
-   */
-  function tearDown() {
-    // Restore permissions.
-    if ($this->changedPerms) {
-      db_query("UPDATE {permission} SET perm = '%s' WHERE rid = 1", $this->oldPerms);
-    }
-    
-    // Restore the anonymous setting.
-    if ($this->anonymous !== NULL) {
-      variable_set('comment_anonymous', $this->anonymous);
-    }
-    else {
-      variable_del('comment_anonymous');
-    }
-
-    // Restore the preview setting.
-    if ($this->preivew !== NULL) {
-      variable_set('comment_preview', $this->preview);
-    }
-    else {
-      variable_del('comment_preview');
-    }
-
-    parent::tearDown();
-  }
-  
-  
-  /**
-   * Verify that a comment cannot be added with a name that belongs to a
-   * registered user.
-   */
-  function testCommentAdd() {
-    $this->assertTrue(user_access('access comments', user_load(0)), 'Anonymous user has access to comments.');
-  
-    $user_one = user_load(array('uid' => 1));
-    $name     = pressflow_tests_fuzz_case($user_one->name);
-
-    $this->assertTrue(node_load($this->testNode->nid), t('Node created.'));
-
-    $this->drupalGet('comment/reply/' . $this->testNode->nid);
-    $this->assertResponse(200);
-    
-    // TODO: Fix the remaining tests.
-    return;
-    
-    $this->assertText(t('to post comments'));
-    
-    $this->assertText(t('Your name'), 'Test for comment form.');
-    
-    $edit = array();
-    $edit['name'] = $name;
-    $edit['mail'] = 'david@example.com';
-    $edit['comment'] = 'Comment body text';
-    
-    $result = $this->drupalPost(NULL, $edit, t('Post comment'));
-    $this->assertText(t('The name you used belongs to a registered user'), 'Test for name warning message.');
-  }
-}
diff --git a/modules/simpletest/tests/path.test b/modules/simpletest/tests/path.test
deleted file mode 100644
index 475d5a2..0000000
--- a/modules/simpletest/tests/path.test
+++ /dev/null
@@ -1,73 +0,0 @@
-<?php
-/**
- * @file Provides test for patches to path.inc
- */
-
-
-/**
- * Test changes to drupal_lookup_path().
- */
-class DrupalLookupPathTest extends DrupalTestCase {
-  private $testPath  = NULL;
-  private $testAlias = 'test/lookup/path/test';
-  private $testNode  = NULL;
-
-  /**
-   * Initialize the test.
-   */
-  function setUp() {
-    parent::setUp();
-    $this->drupalModuleEnable('path');
-    
-    $this->testNode = $this->drupalCreateNode();
-    $this->testPath = 'node/' . $this->testNode->nid;
-
-    path_set_alias($this->testPath, $this->testAlias);
-    drupal_clear_path_cache();
-  }
-
-
-  /**
-   * Clean up after ourselves.
-   */
-  function tearDown() {
-    db_query("DELETE FROM {url_alias} WHERE dst = '%s'", $this->testAlias);
-    parent::tearDown();
-  }
-
-
-  /**
-   * Provides information about this test.
-   *
-   * @return array An array of test information.
-   */
-  function get_info() {
-    return array(
-      'name'  => t('path.inc drupal_lookup_path Test'),
-      'desc'  => t('Tests patches made to drupal_lookup_path().'),
-      'group' => 'Pressflow Core',
-    );
-  }
-
-
-  /**
-   * Confirm that the path can be retrieved by alias.
-   */
-  function testLookupByAlias() {
-    $src = drupal_get_normal_path($this->testAlias);
-    $msg = t('Lookup by alias. Expected @expect got @got : %s',
-             array('@expect' => $this->testPath, '@got' => $src));
-    $this->assertEqual($src, $this->testPath, $msg);
-  }
-
-
-  /**
-   * Confirm that the path can be retrieved by source.
-   */
-  function testLookupBySource() {
-    $alias = drupal_get_path_alias($this->testPath);
-    $msg = t('Lookup by source. Expected @expect got @got : %s',
-             array('@expect' => $this->testAlias, '@got' => $alias));
-    $this->assertEqual($alias, $this->testAlias, 'Lookup path by source: %s');
-  }
-}
diff --git a/modules/simpletest/tests/profile.test b/modules/simpletest/tests/profile.test
deleted file mode 100644
index 753abeb..0000000
--- a/modules/simpletest/tests/profile.test
+++ /dev/null
@@ -1,101 +0,0 @@
-<?php
-/**
- * @file Test for profile.module auto complete function patch.
- */
-
-
-/**
- * Test changes to profile_autocomplete().
- */
-class ProfileAutocompleteTest extends DrupalTestCase {
-  private $field_id;
-  private $fields = array(
-    'profile_auto_complete_test_fav_color'       => 'Preferences',
-    'profile_auto_complete_test_last_conviction' => 'Personal History',
-    'profile_auto_complete_test_parole_date'     => 'Personal History',
-    'profile_auto_complete_test_favorite_sport'  => 'Activities',
-    'profile_auto_complete_test_fav_transit'     => 'Preferences',
-  );
-  
-  private $values = array('Red', 'Orange', 'Yellow', 'Green', 'Blue', 
-                          'Violet', 'Indigo', 'Brown', 'Grey', 'Black',
-                          'Aqua', 'Cyan', 'Avocado', 'Salmon', 
-                          'Burnt Sienna', 'Burnt Umbra', 'Red Ochre',
-                          'Blue-Green');
-
-  /**
-   * Provides information about this test.
-   *
-   * @return array An array of test information.
-   */
-  function get_info() {
-    return array(
-      'name'  => t('profile.module autocomplete test'),
-      'desc'  => t('Verify that autocompletes return correct data regardless of case.'),
-      'group' => 'Pressflow Core',
-    );
-  }
-
-
-  /**
-   * Initialize the test.
-   */
-  function setUp() {
-    parent::setUp();
-    $this->drupalModuleEnable('profile');
-    
-    // Create several fake fields with categories.
-    foreach ($this->fields as $name => $category) {
-      db_query("INSERT INTO {profile_fields} (title, name, category, autocomplete) VALUES ('%s', '%s', '%s', 1)", $name, $name, $category);
-    }
-    
-    // Create some values for the favorite color field.
-    $this->field_id = db_result(db_query("SELECT fid FROM {profile_fields} WHERE name='profile_auto_complete_test_fav_color'"));
-    
-    foreach ($this->values as $value) {
-      db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, 1, '%s')", $this->field_id, $value);
-    }
-  }
-
-
-  /**
-   * Clean up after ourselves.
-   */
-  function tearDown() {
-    // Delete the values for the fake field
-    db_query('DELETE FROM {profile_values} WHERE fid = %d', $this->field_id);
-    
-    // Delete the fake fields
-    db_query("DELETE FROM {profile_fields} WHERE name LIKE 'profile_auto_complete_test_%%'");
-  
-    parent::tearDown();
-  }
-
-
-  /**
-   * Test that field values auto-complete works regardless of case.
-   */
-  function test_profile_autocomplete() {
-    $js = $this->drupalGet(url('profile/autocomplete/' . $this->field_id . '/bL', NULL, NULL, TRUE));
-    $dummy = array();
-    $count = preg_match_all('/\:/', $js, $dummy);
-    
-    $this->assertEqual($count, 3, 'Returned item count: %s');
-  }
-
-
-  /**
-   * Test that category auto-complete works regardless of case.
-   */
-  function test_profile_admin_settings_autocomplete() {
-    $user = $this->drupalCreateUserRolePerm(array('administer users'));
-    $this->drupalLoginUser($user);
-    
-    $js    = $this->drupalGet(url('admin/user/profile/autocomplete/p', NULL, NULL, TRUE));
-    $dummy = array();
-    $count = preg_match_all('/\:/', $js, $dummy);
-    
-    $this->assertEqual($count, 2, 'Returned item count: %s');
-  }
-
-}
diff --git a/modules/simpletest/tests/taxonomy.test b/modules/simpletest/tests/taxonomy.test
deleted file mode 100644
index 3a60aea..0000000
--- a/modules/simpletest/tests/taxonomy.test
+++ /dev/null
@@ -1,104 +0,0 @@
-<?php
-/**
- * @file Test the changes to the taxonomy module
- */
- 
-/**
- * Test changes to taxonomy.
- */
-class TaxonomyModuleTest extends DrupalTestCase {
-  private $vocab_name = 'pressflow_taxonomy_test_vocab';
-  private $terms = array('Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 
-                         'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 
-                         'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 
-                         'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega');
-  private $vid;
-  
-  
-  /**
-   * Provides information about this test.
-   *
-   * @return array An array of test information.
-   */
-  function get_info() {
-    return array(
-      'name'  => t('taxonomy.module autocomplete test'),
-      'desc'  => t('Verify LOWER patch for taxonomy module.'),
-      'group' => 'Pressflow Core',
-    );
-  }
-
-
-  /**
-   * Initialize the test.
-   */
-  function setUp() {
-    parent::setUp();
-    $this->drupalModuleEnable('taxonomy');
-    
-    // Create a vocabulary to work witrh.
-    $voc = array(
-      'vid'         => NULL,
-      'name'        => $this->vocab_name,
-      'description' => '',
-      'help'        => '',
-      'multiple'    => 0,
-      'required'    => 0,
-      'hierarchy'   => 0,
-      'relations'   => 0,
-      'tags'        => 0,
-      'weight'      => 0,
-    );
-    
-    taxonomy_save_vocabulary($voc);
-    $this->vid = $voc['vid'];
-    
-    // Add some terms to the vocabulary.
-    foreach ($this->terms as $name) {
-      $term = array(
-        'tid'         => NULL,
-        'name'        => $name,
-        'description' => '',
-        'vid'         => $this->vid,
-        'weight'      => 0,
-        'relations'   => NULL,
-        'synonyms'    => NULL,
-      );
-      taxonomy_save_term($term);
-    }
-  }
-
-
-  /**
-   * Clean up after ourselves.
-   */
-  function tearDown() {
-    taxonomy_del_vocabulary($this->vid);
-    
-    parent::tearDown();
-  }
-
-
-  /**
-   * Verify that a term is returned regardless of the case of the name.
-   */
-  function test_taxonomy_get_term_by_name() {
-    $name    = pressflow_tests_fuzz_case('omicron');
-    $results = taxonomy_get_term_by_name($name);
-        
-    $this->assertNotEqual(count($results), 0, "Search for {$name} found results %s");
-  }
-
-
-  /**
-   * Verify that autocomplete works regardless of case.
-   */
-  function test_taxonomy_autocomplete() {
-    $js    = $this->drupalGet(url('taxonomy/autocomplete/' . $this->vid . '/OMI', NULL, NULL, TRUE));
-    $dummy = array();
-    $count = preg_match_all('/\:/', $js, $dummy);
-    
-    $this->assertEqual($count, 1, 'Found autocomplete term: %s');
-  }
-
-}
diff --git a/modules/simpletest/tests/user.test b/modules/simpletest/tests/user.test
deleted file mode 100644
index 927ca66..0000000
--- a/modules/simpletest/tests/user.test
+++ /dev/null
@@ -1,84 +0,0 @@
-<?php
-/**
- * @file test the user module changes
- */
- 
-/**
- * Test changes to user.
- */
-class UserModuleTest extends DrupalTestCase {
-  private $dummyUser = NULL;
-
-  /**
-   * Provides information about this test.
-   *
-   * @return array An array of test information.
-   */
-  function get_info() {
-    return array(
-      'name'  => t('user.module test'),
-      'desc'  => t('Verify LOWER patch for user module.'),
-      'group' => 'Pressflow Core',
-    );
-  }
-
-  /**
-   * Initialize the test.
-   */
-  function setUp() {
-    parent::setUp();
-    
-    $this->dummyUser = $this->drupalCreateUserRolePerm();
-  }
-
-
-  /**
-   * Clean up after ourselves.
-   */
-  function tearDown() { 
-    parent::tearDown();
-  }
-
-
-  /**
-   * Verify that a user can be loaded regardless of name case.
-   */
-  function test_user_load() {
-    $name = pressflow_tests_fuzz_case($this->dummyUser->name);
-    $result = user_load(array('name' => $name));
-    $this->assertEqual($this->dummyUser->uid, $result->uid, 'User ID matched. %s');
-  }
-
-
-  /**
-   * Verify that user remains blocked regardless of name case.
-   */
-  function test_user_is_blocked() {
-    user_save($this->dummyUser, array('status' => 0));
-    $name = pressflow_tests_fuzz_case($this->dummyUser->name);
-    $this->assertTrue((bool)user_is_blocked($name), 'User blocked %s');
-    
-    // Unblock the user, and test again.
-    user_save($this->dummyUser, array('status' => 1));
-    $name = pressflow_tests_fuzz_case($this->dummyUser->name);
-    $this->assertFalse((bool)user_is_blocked($name), 'User blocked %s');
-  }
-
-
-  /**
-   * Verify that a user cannot be given the same name as another user with
-   * just variance in case.
-   */
-  function test__user_edit_validate() {
-    $user = $this->drupalCreateUserRolePerm(array('change own username'));
-    $this->drupalLoginUser($user);
-    $this->drupalGet(url('user/' . $user->uid . '/edit', NULL, NULL, TRUE));
-    
-    $this->assertWantedRaw(t('Your preferred username'), 'User edit form.');
-    $this->setFieldById('edit-name', pressflow_tests_fuzz_case($this->dummyUser->name));
-    
-    $result = $this->clickSubmit(t('Submit'));
-    $this->assertWantedRaw(t('is already taken'), 'Test for name warning message. %s');
-  }
-
-}
diff --git a/modules/statistics/statistics.info b/modules/statistics/statistics.info
index bc945a2..d654b6c 100644
--- a/modules/statistics/statistics.info
+++ b/modules/statistics/statistics.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/syslog/syslog.info b/modules/syslog/syslog.info
index f7c67d2..0799538 100644
--- a/modules/syslog/syslog.info
+++ b/modules/syslog/syslog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/system/system.admin.inc b/modules/system/system.admin.inc
index 8bc0039..92b213d 100644
--- a/modules/system/system.admin.inc
+++ b/modules/system/system.admin.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: system.admin.inc,v 1.63.2.6 2009/01/06 13:33:24 dries Exp $
+// $Id: system.admin.inc,v 1.63.2.7 2009/02/25 11:38:41 goba Exp $
 
 /**
  * @file
@@ -1733,7 +1733,7 @@ function system_run_cron() {
  * Menu callback: return information about PHP.
  */
 function system_php() {
-  phpinfo(INFO_GENERAL | INFO_CONFIGURATION);
+  phpinfo();
   exit();
 }
 
diff --git a/modules/system/system.info b/modules/system/system.info
index 86fc002..72b040f 100644
--- a/modules/system/system.info
+++ b/modules/system/system.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/system/system.install b/modules/system/system.install
index 8fca02e..581fc9c 100644
--- a/modules/system/system.install
+++ b/modules/system/system.install
@@ -1,5 +1,5 @@
 <?php
-// $Id: system.install,v 1.238.2.8 2009/01/14 21:36:16 goba Exp $
+// $Id: system.install,v 1.238.2.12 2009/02/25 14:02:46 goba Exp $
 
 /**
  * Test and report Drupal installation requirements.
@@ -64,10 +64,10 @@ function system_requirements($phase) {
   $memory_limit = ini_get('memory_limit');
   $requirements['php_memory_limit'] = array(
     'title' => $t('PHP memory limit'),
-    'value' => $memory_limit,
+    'value' => $memory_limit == -1 ? t('-1 (Unlimited)') : $memory_limit,
   );
 
-  if ($memory_limit && parse_size($memory_limit) < parse_size(DRUPAL_MINIMUM_PHP_MEMORY_LIMIT)) {
+  if ($memory_limit && $memory_limit != -1 && parse_size($memory_limit) < parse_size(DRUPAL_MINIMUM_PHP_MEMORY_LIMIT)) {
     $description = '';
     if ($phase == 'install') {
       $description = $t('Consider increasing your PHP memory limit to %memory_minimum_limit to help prevent errors in the installation process.', array('%memory_minimum_limit' => DRUPAL_MINIMUM_PHP_MEMORY_LIMIT));
@@ -1095,7 +1095,7 @@ function system_schema() {
       ),
     'unique keys' => array('dst_language' => array('dst', 'language')),
     'primary key' => array('pid'),
-    'indexes' => array('src' => array('src')),
+    'indexes' => array('src_language' => array('src', 'language')),
     );
 
   return $schema;
@@ -1161,7 +1161,7 @@ function system_update_6001() {
   db_add_primary_key($ret, 'term_node', array('vid', 'tid', 'nid'));
   db_add_index($ret, 'term_node', 'vid', array('vid'));
 
-  db_query('UPDATE {term_node} t SET vid = (SELECT vid FROM {node} n WHERE t.nid = n.nid)');
+  db_query('UPDATE {term_node} SET vid = (SELECT vid FROM {node} n WHERE {term_node}.nid = n.nid)');
   return $ret;
 }
 
@@ -1802,6 +1802,10 @@ function system_update_6021() {
         $item['router_path'] = $item['path'];
         $item['updated'] = FALSE;
       }
+      if ($item['description']) {
+        $item['options']['attributes']['title'] = $item['description'];
+      }      
+      
       // Save the link.
       menu_link_save($item);
       $_SESSION['menu_item_map'][$item['mid']] = array('mlid' => $item['mlid'], 'menu_name' => $item['menu_name']);
@@ -2534,6 +2538,16 @@ function system_update_6048() {
 
 
 /**
+ * Replace src index on the {url_alias} table with src, language.
+ */
+function system_update_6049() {
+  $ret = array();
+  db_drop_index($ret, 'url_alias', 'src');
+  db_add_index($ret, 'url_alias', 'src_language', array('src', 'language'));
+  return $ret;
+}
+
+/**
  * @} End of "defgroup updates-5.x-to-6.x"
  * The next series of updates should start at 7000.
  */
diff --git a/modules/system/system.module b/modules/system/system.module
index 2f017ca..ce8da75 100644
--- a/modules/system/system.module
+++ b/modules/system/system.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: system.module,v 1.585.2.30 2009/01/14 23:34:07 goba Exp $
+// $Id: system.module,v 1.585.2.32 2009/02/25 21:02:37 goba Exp $
 
 /**
  * @file
@@ -9,7 +9,7 @@
 /**
  * The current system version.
  */
-define('VERSION', '6.9');
+define('VERSION', '6.10');
 
 /**
  * Core API compatibility.
diff --git a/modules/taxonomy/taxonomy.admin.inc b/modules/taxonomy/taxonomy.admin.inc
index af425de..fa688f8 100644
--- a/modules/taxonomy/taxonomy.admin.inc
+++ b/modules/taxonomy/taxonomy.admin.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: taxonomy.admin.inc,v 1.22.2.2 2008/10/08 14:23:59 goba Exp $
+// $Id: taxonomy.admin.inc,v 1.22.2.3 2009/02/25 12:53:24 goba Exp $
 
 /**
  * @file
@@ -279,7 +279,7 @@ function taxonomy_overview_terms(&$form_state, $vocabulary) {
     // We are not calling taxonomy_get_tree because that might fail with a big
     // number of tags in the freetagging vocabulary.
     $results = pager_query(db_rewrite_sql('SELECT t.*, h.parent FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE t.vid = %d ORDER BY weight, name', 't', 'tid'), $page_increment, 0, NULL, $vocabulary->vid);
-    $total_entries = db_query(db_rewrite_sql('SELECT count(*) FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE t.vid = %d'), $page_increment, 0, NULL, $vocabulary->vid);
+    $total_entries = db_query(db_rewrite_sql('SELECT count(*) FROM {term_data} t INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE t.vid = %d', 't', 'tid'), $page_increment, 0, NULL, $vocabulary->vid);
     while ($term = db_fetch_object($results)) {
       $key = 'tid:'. $term->tid .':0';
       $current_page[$key] = $term;
diff --git a/modules/taxonomy/taxonomy.info b/modules/taxonomy/taxonomy.info
index 99fb744..8d01b12 100644
--- a/modules/taxonomy/taxonomy.info
+++ b/modules/taxonomy/taxonomy.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/taxonomy/taxonomy.module b/modules/taxonomy/taxonomy.module
index 9b11c67..6dfb92f 100644
--- a/modules/taxonomy/taxonomy.module
+++ b/modules/taxonomy/taxonomy.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: taxonomy.module,v 1.414.2.5 2008/09/17 12:55:37 goba Exp $
+// $Id: taxonomy.module,v 1.414.2.6 2009/02/16 10:44:09 goba Exp $
 
 /**
  * @file
@@ -527,7 +527,7 @@ function taxonomy_form_alter(&$form, $form_state, $form_id) {
           '#default_value' => $typed_string,
           '#autocomplete_path' => 'taxonomy/autocomplete/'. $vocabulary->vid,
           '#weight' => $vocabulary->weight,
-          '#maxlength' => 255,
+          '#maxlength' => 1024,
         );
       }
       else {
diff --git a/modules/throttle/throttle.info b/modules/throttle/throttle.info
index 746784e..5879300 100644
--- a/modules/throttle/throttle.info
+++ b/modules/throttle/throttle.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/tracker/tracker.info b/modules/tracker/tracker.info
index 50f7a06..49db2f2 100644
--- a/modules/tracker/tracker.info
+++ b/modules/tracker/tracker.info
@@ -6,8 +6,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/translation/translation.info b/modules/translation/translation.info
index d079a84..86b9e9f 100644
--- a/modules/translation/translation.info
+++ b/modules/translation/translation.info
@@ -6,8 +6,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/trigger/trigger.info b/modules/trigger/trigger.info
index 93cd399..f9d172a 100644
--- a/modules/trigger/trigger.info
+++ b/modules/trigger/trigger.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/update/update.info b/modules/update/update.info
index 37c3027..b73bee8 100644
--- a/modules/update/update.info
+++ b/modules/update/update.info
@@ -5,8 +5,8 @@ version = VERSION
 package = Core - optional
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/upload/upload.info b/modules/upload/upload.info
index 1fab09e..48fb119 100644
--- a/modules/upload/upload.info
+++ b/modules/upload/upload.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/user/user.info b/modules/user/user.info
index 2204578..4044d91 100644
--- a/modules/user/user.info
+++ b/modules/user/user.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/modules/user/user.module b/modules/user/user.module
index c59538a..6480887 100644
--- a/modules/user/user.module
+++ b/modules/user/user.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: user.module,v 1.892.2.11 2009/01/14 23:34:08 goba Exp $
+// $Id: user.module,v 1.892.2.12 2009/02/25 13:57:04 goba Exp $
 
 /**
  * @file
@@ -626,15 +626,15 @@ function user_user($type, &$edit, &$account, $category = NULL) {
   }
   if ($type == 'form' && $category == 'account') {
     $form_state = array();
-    return user_edit_form($form_state, arg(1), $edit);
+    return user_edit_form($form_state, (isset($account->uid) ? $account->uid : FALSE), $edit);
   }
 
   if ($type == 'validate' && $category == 'account') {
-    return _user_edit_validate(arg(1), $edit);
+    return _user_edit_validate((isset($account->uid) ? $account->uid : FALSE), $edit);
   }
 
   if ($type == 'submit' && $category == 'account') {
-    return _user_edit_submit(arg(1), $edit);
+    return _user_edit_submit((isset($account->uid) ? $account->uid : FALSE), $edit);
   }
 
   if ($type == 'categories') {
@@ -1445,7 +1445,8 @@ function user_edit_form(&$form_state, $uid, $edit, $register = FALSE) {
     '#title' => t('Account information'),
     '#weight' => -10,
   );
-  if (user_access('change own username') || $admin || $register) {
+  // Only show name field when: registration page; or user is editing own account and can change username; or an admin user.
+  if ($register || ($GLOBALS['user']->uid == $uid && user_access('change own username')) || $admin) {
     $form['account']['name'] = array('#type' => 'textfield',
       '#title' => t('Username'),
       '#default_value' => $edit['name'],
@@ -1547,9 +1548,8 @@ function user_edit_form(&$form_state, $uid, $edit, $register = FALSE) {
 }
 
 function _user_edit_validate($uid, &$edit) {
-  $user = user_load(array('uid' => $uid));
-  // Validate the username:
-  if (user_access('change own username') || user_access('administer users') || !$user->uid) {
+  // Validate the username when: new user account; or user is editing own account and can change username; or an admin user.
+  if (!$uid || ($GLOBALS['user']->uid == $uid && user_access('change own username')) || user_access('administer users')) {
     if ($error = user_validate_name($edit['name'])) {
       form_set_error('name', $error);
     }
@@ -1574,11 +1574,11 @@ function _user_edit_validate($uid, &$edit) {
 }
 
 function _user_edit_submit($uid, &$edit) {
-  $user = user_load(array('uid' => $uid));
+  $account = user_load($uid);
   // Delete picture if requested, and if no replacement picture was given.
   if (!empty($edit['picture_delete'])) {
-    if ($user->picture && file_exists($user->picture)) {
-      file_delete($user->picture);
+    if ($account->picture && file_exists($account->picture)) {
+      file_delete($account->picture);
     }
     $edit['picture'] = '';
   }
diff --git a/scripts/run-tests.sh b/scripts/run-tests.sh
old mode 100644
new mode 100755
index 1b64a4e..12d0d18
--- a/scripts/run-tests.sh
+++ b/scripts/run-tests.sh
@@ -1,8 +1,13 @@
 <?php
-// $Id: run-tests.sh,v 1.15 2008/10/29 03:00:38 dries Exp $
+// $Id: run-tests.sh,v 1.1.2.4 2009/04/23 05:39:52 boombatower Exp $
+// Core: Id: run-tests.sh,v 1.26 2009/04/13 12:23:26 dries Exp
 /**
  * @file
- * This script runs Drupal tests from command line.
+ * Backport of Drupal 7 run-tests.sh with modifications, see BACKPORT.txt.
+ * This file must be placed in the Drupal scripts folder in order for it to
+ * work properly.
+ *
+ * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
  */
 
 define('SIMPLETEST_SCRIPT_COLOR_PASS', 32); // Green.
@@ -23,7 +28,7 @@ if ($args['execute-batch']) {
   simpletest_script_execute_batch();
 }
 
-// Bootstrap to perform initial validation or other opperations.
+// Bootstrap to perform initial validation or other operations.
 drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
 if (!module_exists('simpletest')) {
   simpletest_script_print_error("The simpletest module must be enabled before this script can run.");
@@ -49,13 +54,12 @@ $groups = simpletest_categorize_tests($all_tests);
 $test_list = array();
 
 if ($args['list']) {
-  // Display all availabe tests.
+  // Display all available tests.
   echo "\nAvailable test groups & classes\n";
   echo   "-------------------------------\n\n";
   foreach ($groups as $group => $tests) {
     echo $group . "\n";
-    foreach ($tests as $class_name => $instance) {
-      $info = $instance->getInfo();
+    foreach ($tests as $class_name => $info) {
       echo " - " . $info['name'] . ' (' . $class_name . ')' . "\n";
     }
   }
@@ -72,6 +76,7 @@ if (!ini_get('safe_mode')) {
 simpletest_script_reporter_init();
 
 // Setup database for test results.
+//$test_id = db_insert('simpletest_test_id')->useDefaults(array('test_id'))->execute();
 db_query('INSERT INTO {simpletest_test_id} VALUES (default)');
 $test_id = db_last_insert_id('simpletest_test_id', 'test_id');
 
@@ -82,9 +87,7 @@ simpletest_script_command($args['concurrency'], $test_id, implode(",", $test_lis
 simpletest_script_reporter_display_results();
 
 // Cleanup our test results.
-db_query("DELETE FROM {simpletest} WHERE test_id = %d", $test_id);
-
-
+simpletest_clean_results_table($test_id);
 
 /**
  * Print help text.
@@ -124,27 +127,30 @@ All arguments are long options.
 
   --class     Run tests identified by specific class names, instead of group names.
 
-  --file      Run tests identifiled by specific file names, instead of group names.
+  --file      Run tests identified by specific file names, instead of group names.
               Specify the path and the extension (i.e. 'modules/user/user.test').
 
-  --color     Output the rusults with color highlighting.
+  --color     Output the results with color highlighting.
 
   --verbose   Output detailed assertion messages in addition to summary.
 
   <test1>[,<test2>[,<test3> ...]]
 
-              One or more tests to be run.  By default, these are interpreted
+              One or more tests to be run. By default, these are interpreted
               as the names of test groups as shown at ?q=admin/build/testing.
               These group names typically correspond to module names like "User"
               or "Profile" or "System", but there is also a group "XML-RPC".
               If --class is specified then these are interpreted as the names of
-              specific test classes whose test methods will be run.  Tests must
-              be separated by commas.  Ignored if --all is specified.
+              specific test classes whose test methods will be run. Tests must
+              be separated by commas. Ignored if --all is specified.
 
 To run this script you will normally invoke it from the root directory of your
-Drupal installation as the webserver user, or root, with
+Drupal installation as the webserver user (differs per configuration), or root:
 
-php  ./scripts/{$args['script']}
+sudo -u [wwwrun|www-data|etc] php ./scripts/{$args['script']}
+  --url http://example.com/ --all
+sudo -u [wwwrun|www-data|etc] php ./scripts/{$args['script']}
+  --url http://example.com/ --class UploadTestCase
 \n
 EOF;
 }
@@ -191,7 +197,7 @@ function simpletest_script_parse_args() {
         else {
           $args[$matches[1]] = array_shift($_SERVER['argv']);
         }
-        // Clear an extrenious values.
+        // Clear extraneous values.
         $args['test_names'] = array();
         $count++;
       }
@@ -204,6 +210,7 @@ function simpletest_script_parse_args() {
     else {
       // Values found without an argument should be test names.
       $args['test_names'] += explode(',', $arg);
+      $count++;
     }
   }
 
@@ -228,7 +235,7 @@ function simpletest_script_init() {
 
   $host = 'localhost';
   $path = '';
-  // Determine location of php command automatically, unless a comamnd line argument is supplied.
+  // Determine location of php command automatically, unless a command line argument is supplied.
   if (!empty($args['php'])) {
     $php = $args['php'];
   }
@@ -243,13 +250,14 @@ function simpletest_script_init() {
   }
   else {
     simpletest_script_print_error('Unable to automatically determine the path to the PHP interpreter. Please supply the --php command line argument.');
+    simpletest_script_help();
     exit();
   }
 
   // Get url from arguments.
   if (!empty($args['url'])) {
     $parsed_url = parse_url($args['url']);
-    $host = $parsed_url['host'];
+    $host = $parsed_url['host'] . (isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '');
     $path = $parsed_url['path'];
   }
 
@@ -335,7 +343,7 @@ function simpletest_script_execute_batch() {
 }
 
 /**
- * Run a single test (assume a Drupal bootstrapped environnement).
+ * Run a single test (assume a Drupal bootstrapped environment).
  */
 function simpletest_script_run_one_test($test_id, $test_class) {
   simpletest_get_all_tests();
@@ -343,9 +351,9 @@ function simpletest_script_run_one_test($test_id, $test_class) {
   $test->run();
   $info = $test->getInfo();
 
-  $status = ((isset($test->_results['#fail']) && $test->_results['#fail'] > 0)
-           || (isset($test->_results['#exception']) && $test->_results['#exception'] > 0) ? 'fail' : 'pass');
-  simpletest_script_print($info['name'] . ' ' . _simpletest_format_summary_line($test->_results) . "\n", simpletest_script_color_code($status));
+  $status = ((isset($test->results['#fail']) && $test->results['#fail'] > 0)
+           || (isset($test->results['#exception']) && $test->results['#exception'] > 0) ? 'fail' : 'pass');
+  simpletest_script_print($info['name'] . ' ' . _simpletest_format_summary_line($test->results) . "\n", simpletest_script_color_code($status));
 }
 
 /**
@@ -363,7 +371,7 @@ function simpletest_script_command($concurrency, $test_id, $tests) {
 }
 
 /**
- * Get list of tests based on arguments. If --all specfied then
+ * Get list of tests based on arguments. If --all specified then
  * returns all available tests, otherwise reads list of tests.
  *
  * Will print error and exit if no valid tests were found.
@@ -375,13 +383,13 @@ function simpletest_script_get_test_list() {
 
   $test_list = array();
   if ($args['all']) {
-    $test_list = array_keys($all_tests);
+    $test_list = $all_tests;
   }
   else {
     if ($args['class']) {
       // Check for valid class names.
       foreach ($args['test_names'] as $class_name) {
-        if (isset($all_tests[$class_name])) {
+        if (in_array($class_name, $all_tests)) {
           $test_list[] = $class_name;
         }
       }
@@ -393,7 +401,7 @@ function simpletest_script_get_test_list() {
       }
 
       // Check for valid class names.
-      foreach ($all_tests as $class_name => $instance) {
+      foreach ($all_tests as $class_name => $info) {
         $refclass = new ReflectionClass($class_name);
         $file = $refclass->getFileName();
         if (isset($files[$file])) {
@@ -405,7 +413,7 @@ function simpletest_script_get_test_list() {
       // Check for valid group names and get all valid classes in group.
       foreach ($args['test_names'] as $group_name) {
         if (isset($groups[$group_name])) {
-          foreach($groups[$group_name] as $class_name => $instance) {
+          foreach($groups[$group_name] as $class_name => $info) {
             $test_list[] = $class_name;
           }
         }
@@ -438,7 +446,7 @@ function simpletest_script_reporter_init() {
   else {
     echo "Tests to be run:\n";
     foreach ($test_list as $class_name) {
-      $info = $all_tests[$class_name]->getInfo();
+      $info = call_user_func(array($class_name, 'getInfo'));
       echo " - " . $info['name'] . ' (' . $class_name . ')' . "\n";
     }
     echo "\n";
@@ -476,9 +484,12 @@ function simpletest_script_reporter_display_results() {
       'exception' => 'Exception'
     );
 
+//    $results = db_query("SELECT * FROM {simpletest} WHERE test_id = :test_id ORDER BY test_class, message_id", array(':test_id' => $test_id));
     $results = db_query("SELECT * FROM {simpletest} WHERE test_id = %d ORDER BY test_class, message_id", $test_id);
+
     $test_class = '';
-    while($result = db_fetch_object($results)) {
+//    foreach ($results as $result) {
+    while ($result = db_fetch_object($results)) {
       if (isset($results_map[$result->status])) {
         if ($result->test_class != $test_class) {
           // Display test class every time results are for new test class.
diff --git a/sites/default/default.settings.php b/sites/default/default.settings.php
index 16da648..460e07f 100644
--- a/sites/default/default.settings.php
+++ b/sites/default/default.settings.php
@@ -248,6 +248,6 @@ ini_set('url_rewriter.tags',        '');
 # );
 
 $GLOBALS['simpletest_installed'] = TRUE;
-   if (preg_match("/^simpletest\d+$/", $_SERVER['HTTP_USER_AGENT'])) {
-     $db_prefix = $_SERVER['HTTP_USER_AGENT'];
-   }
+if (preg_match("/^simpletest\d+$/", $_SERVER['HTTP_USER_AGENT'])) {
+  $db_prefix = $_SERVER['HTTP_USER_AGENT'];
+}
diff --git a/themes/bluemarine/bluemarine.info b/themes/bluemarine/bluemarine.info
index 1cee712..8a392bb 100644
--- a/themes/bluemarine/bluemarine.info
+++ b/themes/bluemarine/bluemarine.info
@@ -5,8 +5,8 @@ version = VERSION
 core = 6.x
 engine = phptemplate
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/themes/chameleon/chameleon.info b/themes/chameleon/chameleon.info
index ce33227..121bac7 100644
--- a/themes/chameleon/chameleon.info
+++ b/themes/chameleon/chameleon.info
@@ -12,8 +12,8 @@ stylesheets[all][] = common.css
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/themes/chameleon/marvin/marvin.info b/themes/chameleon/marvin/marvin.info
index 2079179..30c46ef 100644
--- a/themes/chameleon/marvin/marvin.info
+++ b/themes/chameleon/marvin/marvin.info
@@ -7,8 +7,8 @@ version = VERSION
 core = 6.x
 base theme = chameleon
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/themes/garland/garland.info b/themes/garland/garland.info
index 21b907a..d23b8e6 100644
--- a/themes/garland/garland.info
+++ b/themes/garland/garland.info
@@ -7,8 +7,8 @@ engine = phptemplate
 stylesheets[all][] = style.css
 stylesheets[print][] = print.css
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/themes/garland/minnelli/minnelli.info b/themes/garland/minnelli/minnelli.info
index ebf275f..59d4afe 100644
--- a/themes/garland/minnelli/minnelli.info
+++ b/themes/garland/minnelli/minnelli.info
@@ -6,8 +6,8 @@ core = 6.x
 base theme = garland
 stylesheets[all][] = minnelli.css
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
diff --git a/themes/garland/template.php b/themes/garland/template.php
index 1c7faf2..c3f3b43 100644
--- a/themes/garland/template.php
+++ b/themes/garland/template.php
@@ -1,5 +1,5 @@
 <?php
-// $Id: template.php,v 1.16 2007/10/11 09:51:29 goba Exp $
+// $Id: template.php,v 1.16.2.1 2009/02/25 11:47:37 goba Exp $
 
 /**
  * Sets the body-tag class attribute.
@@ -94,7 +94,7 @@ function phptemplate_get_ie_styles() {
   global $language;
 
   $iecss = '<link type="text/css" rel="stylesheet" media="all" href="'. base_path() . path_to_theme() .'/fix-ie.css" />';
-  if (defined('LANGUAGE_RTL') && $language->direction == LANGUAGE_RTL) {
+  if ($language->direction == LANGUAGE_RTL) {
     $iecss .= '<style type="text/css" media="all">@import "'. base_path() . path_to_theme() .'/fix-ie-rtl.css";</style>';
   }
 
diff --git a/themes/pushbutton/pushbutton.info b/themes/pushbutton/pushbutton.info
index e237af6..c82ca7a 100644
--- a/themes/pushbutton/pushbutton.info
+++ b/themes/pushbutton/pushbutton.info
@@ -5,8 +5,8 @@ version = VERSION
 core = 6.x
 engine = phptemplate
 
-; Information added by drupal.org packaging script on 2009-01-14
-version = "6.9"
+; Information added by drupal.org packaging script on 2009-02-25
+version = "6.10"
 project = "drupal"
-datestamp = "1231976413"
+datestamp = "1235596218"
 
