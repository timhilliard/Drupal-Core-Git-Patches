diff --git a/.htaccess b/.htaccess
index 3994bd2..28e147d 100644
--- a/.htaccess
+++ b/.htaccess
@@ -66,10 +66,14 @@ DirectoryIndex index.php
   # Cache all files for 2 weeks after access (A).
   ExpiresDefault A1209600
 
-  <Files index.php>
-    # Caching headers for dynamically generated pages are set from PHP.
+  <FilesMatch \.php$>
+    # Do not allow PHP scripts to be cached unless they explicitly send cache
+    # headers themselves. Otherwise all scripts would have to overwrite the
+    # headers set by mod_expires if they want another caching behavior. This may
+    # fail if an error occurs early in the bootstrap process, and it may cause
+    # problems if a non-Drupal PHP file is installed in a subdirectory.
     ExpiresActive Off
-  </Files>
+  </FilesMatch>
 </IfModule>
 
 # Various rewrite rules.
@@ -109,4 +113,4 @@ DirectoryIndex index.php
   RewriteRule ^(.*)$ index.php?q=$1 [L,QSA]
 </IfModule>
 
-# $Id: .htaccess,v 1.90.2.3 2008/12/10 20:04:08 goba Exp $
+# $Id: .htaccess,v 1.90.2.4 2009/12/07 12:00:40 goba Exp $
diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index d7cac16..81b7dd8 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,4 +1,9 @@
-// $Id: CHANGELOG.txt,v 1.253.2.33 2009/09/16 19:34:13 goba Exp $
+// $Id: CHANGELOG.txt,v 1.253.2.35 2009/12/16 20:47:10 goba Exp $
+
+Drupal 6.15, 2009-12-16
+----------------------
+- Fixed security issues (Cross site scripting), see SA-CORE-2009-009.
+- Fixed a variety of other bugs.
 
 Drupal 6.14, 2009-09-16
 ----------------------
@@ -89,7 +94,7 @@ Drupal 6.3, 2008-07-09
 - Fixed Views compatibility issues (Views for Drupal 6 requires Drupal 6.3+).
 - Fixed a variety of small bugs.
 
-Drupal 6.2, 2008-04-09 
+Drupal 6.2, 2008-04-09
 ----------------------
 - Fixed a variety of small bugs.
 - Fixed a security issue (Access bypasses), see SA-2008-026.
@@ -201,6 +206,11 @@ Drupal 6.0, 2008-02-13
 - Removed old system updates. Updates from Drupal versions prior to 5.x will
   require upgrading to 5.x before upgrading to 6.x.
 
+Drupal 5.21, 2009-12-16
+-----------------------
+- Fixed a security issue (Cross site scripting), see SA-CORE-2009-009.
+- Fixed a variety of small bugs.
+
 Drupal 5.20, 2009-09-16
 -----------------------
 - Avoid security problems resulting from writing Drupal 6-style menu declarations.
@@ -242,7 +252,7 @@ Drupal 5.13, 2008-12-10
 -----------------------
 - fixed a variety of small bugs.
 - fixed security issues, (Cross site request forgery and Cross site scripting), see SA-2008-073
-- updated robots.txt and .htaccess to match current file use. 
+- updated robots.txt and .htaccess to match current file use.
 
 Drupal 5.12, 2008-10-22
 -----------------------
diff --git a/PRESSFLOW.txt b/PRESSFLOW.txt
index e843163..93b8c36 100644
--- a/PRESSFLOW.txt
+++ b/PRESSFLOW.txt
@@ -1 +1 @@
-6.14.64
+6.15.73
diff --git a/includes/actions.inc b/includes/actions.inc
index 7f6b677..3d13339 100644
--- a/includes/actions.inc
+++ b/includes/actions.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: actions.inc,v 1.8.2.9 2009/08/10 10:39:49 goba Exp $
+// $Id: actions.inc,v 1.8.2.10 2009/11/06 08:14:05 goba Exp $
 
 /**
  * @file
@@ -167,17 +167,21 @@ function actions_list($reset = FALSE) {
 }
 
 /**
- * Retrieve all action instances from the database.
+ * Retrieves all action instances from the database.
  *
- * Compare with actions_list() which gathers actions by
- * invoking hook_action_info(). The two are synchronized
- * by visiting /admin/build/actions (when actions.module is
- * enabled) which runs actions_synchronize().
+ * Compare with actions_list(), which gathers actions by invoking
+ * hook_action_info(). The actions returned by this function and the actions
+ * returned by actions_list() are partially synchronized. Non-configurable
+ * actions from hook_action_info() implementations are put into the database
+ * when actions_synchronize() is called, which happens when
+ * admin/settings/actions is visited. Configurable actions are not added to
+ * the database until they are configured in the user interface, in which case
+ * a database row is created for each configuration of each action.
  *
  * @return
- *   Associative array keyed by action ID. Each value is
- *   an associative array with keys 'callback', 'description',
- *   'type' and 'configurable'.
+ *   Associative array keyed by action ID. Each value is an
+ *   associative array with keys 'callback', 'description', 'type' and
+ *   'configurable'.
  */
 function actions_get_all_actions() {
   $actions = array();
diff --git a/includes/bootstrap.inc b/includes/bootstrap.inc
index 4a54763..103f272 100644
--- a/includes/bootstrap.inc
+++ b/includes/bootstrap.inc
@@ -479,17 +479,27 @@ function drupal_get_filename($type, $name, $filename = NULL) {
  * with variable_set() as well as those explicitly specified in the configuration
  * file.
  */
-function variable_init($conf = array()) {
+function variable_init($conf = array(), $regenerate = FALSE) {
   // NOTE: caching the variables improves performance by 20% when serving cached pages.
-  if ($cached = cache_get('variables', 'cache')) {
+  if (!$regenerate && $cached = cache_get('variables', 'cache')) {
     $variables = $cached->data;
   }
   else {
-    $result = db_query('SELECT * FROM {variable}');
-    while ($variable = db_fetch_object($result)) {
-      $variables[$variable->name] = unserialize($variable->value);
+    if (lock_acquire('variable_cache_regenerate')) {
+      $result = db_query('SELECT * FROM {variable}');
+      while ($variable = db_fetch_object($result)) {
+        $variables[$variable->name] = unserialize($variable->value);
+      }
+      cache_set('variables', $variables);
+      lock_release('variable_cache_regenerate');
+    }
+    else {
+      // Wait for another request that is already doing this work.
+      lock_wait('variable_cache_regenerate');
+
+      // Run the function again.
+      return variable_init($conf, $regenerate);
     }
-    cache_set('variables', $variables);
   }
 
   foreach ($conf as $name => $value) {
@@ -537,9 +547,9 @@ function variable_set($name, $value) {
     @db_query("INSERT INTO {variable} (name, value) VALUES ('%s', '%s')", $name, $serialized_value);
   }
 
-  cache_clear_all('variables', 'cache');
-
   $conf[$name] = $value;
+
+  variable_cache_rebuild();
 }
 
 /**
@@ -557,9 +567,19 @@ function variable_del($name) {
 
   unset($conf[$name]);
 
-  cache_set('variables', $conf);
+  variable_cache_rebuild();
 }
 
+/**
+ * Schedules a rebuild of the variable cache on shutdown.
+ */
+function variable_cache_rebuild() {
+  static $shutdown_registered = FALSE;
+  if (!$shutdown_registered) {
+    register_shutdown_function('variable_init', array(), TRUE);
+    $shutdown_registered = TRUE;
+  }
+}
 
 /**
  * Retrieve the current page from the cache.
@@ -1309,6 +1329,9 @@ function _drupal_bootstrap($phase) {
       break;
 
     case DRUPAL_BOOTSTRAP_LATE_PAGE_CACHE:
+      require_once variable_get('lock_inc', './includes/lock.inc');
+      lock_init();
+
       // Initialize configuration variables, using values from settings.php if available.
       $conf = variable_init(isset($conf) ? $conf : array());
 
@@ -1488,19 +1511,19 @@ function ip_address() {
     // Only use parts of the X-Forwarded-For (XFF) header that have followed a trusted route.
     // Specifically, identify the leftmost IP address in the XFF header that is not one of ours.
     // An XFF header is: X-Forwarded-For: client1, proxy1, proxy2
-    if (isset($_SERVER['HTTP_X_FORWARDED_FOR']) && variable_get('reverse_proxy', 0)) {
+    if (isset($_SERVER['HTTP_' . variable_get('x_forwarded_for_header', 'X_FORWARDED_FOR')]) && variable_get('reverse_proxy', 0)) {
       // Load trusted reverse proxy server IPs.
       $reverse_proxy_addresses = variable_get('reverse_proxy_addresses', array());
       
       // Turn XFF header into an array.
-      $forwarded = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);
-      
-      // Tack direct client IP onto end of forwarded array.
-      $forwarded[] = $ip_address;
+      $forwarded = explode(',', $_SERVER['HTTP_' . variable_get('x_forwarded_for_header', 'X_FORWARDED_FOR')]);
       
       // Trim the forwarded IPs; they may have been delimited by commas and spaces.
       $forwarded = array_map('trim', $forwarded);
 
+      // Tack direct client IP onto end of forwarded array.
+      $forwarded[] = $ip_address;
+
       // Eliminate all trusted IPs.
       $untrusted = array_diff($forwarded, $reverse_proxy_addresses);
       
diff --git a/includes/cache.inc b/includes/cache.inc
index 545f7e2..d08a485 100644
--- a/includes/cache.inc
+++ b/includes/cache.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: cache.inc,v 1.17.2.3 2009/08/10 10:43:55 goba Exp $
+// $Id: cache.inc,v 1.17.2.4 2009/12/16 17:30:00 goba Exp $
 
 /**
  * Return data from the persistent cache. Data may be stored as either plain text or as serialized data.
@@ -169,7 +169,7 @@ function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {
   else {
     if ($wildcard) {
       if ($cid == '*') {
-        db_query("DELETE FROM {". $table ."}");
+        db_query("TRUNCATE TABLE {". $table ."}");
       }
       else {
         db_query("DELETE FROM {". $table ."} WHERE cid LIKE '%s%%'", $cid);
diff --git a/includes/common.inc b/includes/common.inc
index 65182c9..85b4f2c 100644
--- a/includes/common.inc
+++ b/includes/common.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: common.inc,v 1.756.2.69 2009/09/16 19:34:14 goba Exp $
+// $Id: common.inc,v 1.756.2.74 2009/12/16 20:47:10 goba Exp $
 
 /**
  * @file
@@ -610,7 +610,7 @@ function drupal_error_handler($errno, $message, $filename, $line, $context) {
     return;
   }
 
-  if ($errno & (E_ALL ^ E_NOTICE ^ E_DEPRECATED)) {
+  if ($errno & (E_ALL ^ E_DEPRECATED ^ E_NOTICE)) {
     $types = array(1 => 'error', 2 => 'warning', 4 => 'parse error', 8 => 'notice', 16 => 'core error', 32 => 'core warning', 64 => 'compile error', 128 => 'compile warning', 256 => 'user error', 512 => 'user warning', 1024 => 'user notice', 2048 => 'strict warning', 4096 => 'recoverable fatal error');
 
     // For database errors, we want the line number/file name of the place that
@@ -1103,7 +1103,7 @@ function format_xml_elements($array) {
           $output .= drupal_attributes($value['attributes']);
         }
 
-        if ($value['value'] != '') {
+        if (isset($value['value']) && $value['value'] != '') {
           $output .= '>'. (is_array($value['value']) ? format_xml_elements($value['value']) : check_plain($value['value'])) .'</'. $value['key'] .">\n";
         }
         else {
@@ -2007,8 +2007,7 @@ function drupal_load_stylesheet($file, $optimize = NULL) {
       // Perform some safe CSS optimizations.
       $contents = preg_replace('<
         \s*([@{}:;,]|\)\s|\s\()\s* |  # Remove whitespace around separators, but keep space around parentheses.
-        /\*([^*\\\\]|\*(?!/))+\*/ |   # Remove comments that are not CSS hacks.
-        [\n\r]                        # Remove line breaks.
+        /\*([^*\\\\]|\*(?!/))+\*/     # Remove comments that are not CSS hacks.
         >x', '\1', $contents);
     }
 
diff --git a/includes/form.inc b/includes/form.inc
index db1d77c..f08601a 100644
--- a/includes/form.inc
+++ b/includes/form.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: form.inc,v 1.265.2.28 2009/09/16 17:54:19 goba Exp $
+// $Id: form.inc,v 1.265.2.31 2009/12/07 15:54:52 goba Exp $
 
 /**
  * @defgroup forms Form builder functions
@@ -48,7 +48,7 @@
 
 /**
  * Retrieves a form from a constructor function, or from the cache if
- * the form was built in a previous page-load. The form is then passesed
+ * the form was built in a previous page-load. The form is then passed
  * on for processing, after and rendered for display if necessary.
  *
  * @param $form_id
@@ -276,7 +276,8 @@ function form_get_cache($form_build_id, &$form_state) {
  * $form_state = array();
  * $form_state['values']['name'] = 'robo-user';
  * $form_state['values']['mail'] = 'robouser@example.com';
- * $form_state['values']['pass'] = 'password';
+ * $form_state['values']['pass']['pass1'] = 'password';
+ * $form_state['values']['pass']['pass2'] = 'password';
  * $form_state['values']['op'] = t('Create new account');
  * drupal_execute('user_register', $form_state);
  *
@@ -2314,12 +2315,18 @@ function form_clean_id($id = NULL, $flush = FALSE) {
  *     array('my_function_2', array()),
  *   ),
  *   'finished' => 'my_finished_callback',
+ *   'file' => 'path_to_file_containing_myfunctions',
  * );
  * batch_set($batch);
  * // only needed if not inside a form _submit handler :
  * batch_process();
  * @endcode
  *
+ * Note: if the batch 'title', 'init_message', 'progress_message', or
+ * 'error_message' could contain any user input, it is the responsibility of
+ * the code calling batch_set() to sanitize them first with a function like
+ * check_plain() or filter_xss().
+ *
  * Sample batch operations:
  * @code
  * // Simple and artificial: load a node of a given type for a given user
@@ -2387,38 +2394,37 @@ function form_clean_id($id = NULL, $flush = FALSE) {
  */
 
 /**
- * Open a new batch.
+ * Opens a new batch.
  *
  * @param $batch
- *   An array defining the batch. The following keys can be used:
- *     'operations': an array of function calls to be performed.
- *        Example:
- *        @code
- *        array(
- *          array('my_function_1', array($arg1)),
- *          array('my_function_2', array($arg2_1, $arg2_2)),
- *        )
- *        @endcode
- *     All the other values below are optional.
- *     batch_init() provides default values for the messages.
- *     'title': title for the progress page.
- *       Defaults to t('Processing').
- *     'init_message': message displayed while the processing is initialized.
- *       Defaults to t('Initializing.').
- *     'progress_message': message displayed while processing the batch.
- *       Available placeholders are @current, @remaining, @total and @percent.
- *       Defaults to t('Remaining @remaining of @total.').
- *     'error_message': message displayed if an error occurred while processing
- *       the batch.
- *       Defaults to t('An error has occurred.').
- *     'finished': the name of a function to be executed after the batch has
- *       completed. This should be used to perform any result massaging that
- *       may be needed, and possibly save data in $_SESSION for display after
- *       final page redirection.
- *     'file': the path to the file containing the definitions of the
- *       'operations' and 'finished' functions, for instance if they don't
- *       reside in the original '.module' file. The path should be relative to
- *       the base_path(), and thus should be built using drupal_get_path().
+ *   An array defining the batch. The following keys can be used -- only
+ *   'operations' is required, and batch_init() provides default values for
+ *   the messages.
+ *   - 'operations': Array of function calls to be performed.
+ *     Example:
+ *     @code
+ *     array(
+ *       array('my_function_1', array($arg1)),
+ *       array('my_function_2', array($arg2_1, $arg2_2)),
+ *     )
+ *     @endcode
+ *   - 'title': Title for the progress page. Only safe strings should be passed.
+ *     Defaults to t('Processing').
+ *   - 'init_message': Message displayed while the processing is initialized.
+ *     Defaults to t('Initializing.').
+ *   - 'progress_message': Message displayed while processing the batch.
+ *     Available placeholders are @current, @remaining, @total, @percentage,
+ *     @estimate and @elapsed. Defaults to t('Completed @current of @total.').
+ *   - 'error_message': Message displayed if an error occurred while processing
+ *     the batch. Defaults to t('An error has occurred.').
+ *   - 'finished': Name of a function to be executed after the batch has
+ *     completed. This should be used to perform any result massaging that
+ *     may be needed, and possibly save data in $_SESSION for display after
+ *     final page redirection.
+ *   - 'file': Path to the file containing the definitions of the
+ *     'operations' and 'finished' functions, for instance if they don't
+ *     reside in the main .module file. The path should be relative to
+ *     base_path(), and thus should be built using drupal_get_path().
  *
  * Operations are added as new batch sets. Batch sets are used to ensure
  * clean code independence, ensuring that several batches submitted by
@@ -2473,7 +2479,7 @@ function batch_set($batch_definition) {
 }
 
 /**
- * Process the batch.
+ * Processes the batch.
  *
  * Unless the batch has been marked with 'progressive' = FALSE, the function
  * issues a drupal_goto and thus ends page execution.
@@ -2540,7 +2546,7 @@ function batch_process($redirect = NULL, $url = NULL) {
 }
 
 /**
- * Retrieve the current batch.
+ * Retrieves the current batch.
  */
 function &batch_get() {
   static $batch = array();
diff --git a/includes/lock.inc b/includes/lock.inc
new file mode 100644
index 0000000..24b5db2
--- /dev/null
+++ b/includes/lock.inc
@@ -0,0 +1,267 @@
+<?php
+// $Id$
+
+/**
+ * @file
+ * A database-mediated implementation of a locking mechanism.
+ */
+
+/**
+ * @defgroup lock Functions to coordinate long-running operations across requests.
+ * @{
+ * In most environments, multiple Drupal page requests (a.k.a. threads or
+ * processes) will execute in parallel. This leads to potential conflicts or
+ * race conditions when two requests execute the same code at the same time. A
+ * common example of this is a rebuild like menu_rebuild() where we invoke many
+ * hook implementations to get and process data from all active modules, and
+ * then delete the current data in the database to insert the new afterwards.
+ *
+ * This is a cooperative, advisory lock system. Any long-running operation
+ * that could potentially be attempted in parallel by multiple requests should
+ * try to acquire a lock before proceeding. By obtaiing a lock, one request
+ * notifies any other requests that a specific opertation is in progress which
+ * must not be executed in parallel.
+ *
+ * To use this API, pick a unique name for the lock. A sensible choice is the
+ * name of the function performing the operation. A very simple example use of
+ * this API:
+ * @code
+ * function mymodule_long_operation() {
+ *   if (lock_acquire('mymodule_long_operation')) {
+ *     // Do the long operation here.
+ *     // ...
+ *     lock_release('mymodule_long_operation');
+ *   }
+ * }
+ * @endcode
+ *
+ * If a function acquires a lock it should always release it when the
+ * operation is complete by calling lock_release(), as in the example.
+ *
+ * A function that has acquired a lock may attempt to renew a lock (extend the
+ * duration of the lock) by calling lock_acquire() again during the operation.
+ * Failure to renew a lock is indicative that another request has acquired
+ * the lock, and that the current operation may need to be aborted.
+ *
+ * If a function fails to acquire a lock it may either immediately return, or
+ * it may call lock_wait() if the rest of the current page request requires
+ * that the operation in question be complete.  After lock_wait() returns,
+ * the function may again attempt to acquire the lock, or may simply allow the
+ * page request to proceed on the  assumption that a parallel request completed
+ * the operation.
+ *
+ * lock_acquire() and lock_wait() will automatically break (delete) a lock
+ * whose duration has exceeded the timeout specified when it was acquired.
+ *
+ * A function that has acquired a lock may attempt to renew a lock (extend the
+ * duration of the lock) by calling lock_acquire() again during the operation.
+ * Failure to renew a lock is indicative that another request has acquired
+ * the lock, and that the current operation may need to be aborted.
+ *
+ * Alternative implementations of this API (such as APC) may be substituted
+ * by setting the 'lock_inc' variable to an alternate include filepath.  Since
+ * this is an API intended to support alternative implementations, code using
+ * this API should never rely upon specific implementation details (for example
+ * no code should look for or directly modify a lock in the {pf_semaphore} table).
+ */
+
+/**
+ * Initialize the locking system.
+ */
+function lock_init() {
+  global $locks;
+
+  $locks = array();
+}
+
+/**
+ * Helper function to get this request's unique id.
+ */
+function _lock_id() {
+  static $lock_id;
+
+  if (!isset($lock_id)) {
+    // Assign a unique id.
+    $lock_id = uniqid(mt_rand(), TRUE);
+    // We only register a shutdown function if a lock is used.
+    register_shutdown_function('lock_release_all', $lock_id);
+  }
+  return $lock_id;
+}
+
+/**
+ * Acquire (or renew) a lock, but do not block if it fails.
+ *
+ * @param $name
+ *   The name of the lock.
+ * @param $timeout
+ *   A number of seconds (float) before the lock expires.
+ * @return
+ *   TRUE if the lock was acquired, FALSE if it failed.
+ */
+function lock_acquire($name, $timeout = 30.0) {
+  global $locks;
+
+  // Just return TRUE if the supporting module is not enabled.
+  if (!_lock_table_exists()) {
+    return TRUE;
+  }
+
+  // Insure that the timeout is at least 1 ms.
+  $timeout = max($timeout, 0.001);
+  list($usec, $sec) = explode(' ', microtime());
+  $expire = (float)$usec + (float)$sec + $timeout;
+  if (isset($locks[$name])) {
+    // Try to extend the expiration of a lock we already acquired.
+    if (!db_result(db_query("UPDATE {pf_semaphore} SET expire = %f WHERE name = '%s' AND value = '%s'", $expire, $name, _lock_id()))) {
+      // The lock was broken.
+      unset($locks[$name]);
+    }
+  }
+  else {
+    // Optimistically try to acquire the lock, then retry once if it fails.
+    // The first time through the loop cannot be a retry.
+    $retry = FALSE;
+    // We always want to do this code at least once.
+    do {
+      if (@db_query("INSERT INTO {pf_semaphore} (name, value, expire) VALUES ('%s', '%s', %f)", $name, _lock_id(), $expire)) {
+        // We track all acquired locks in the global variable.
+        $locks[$name] = TRUE;
+        // We never need to try again.
+        $retry = FALSE;
+      }
+      else {
+        // Suppress the error. If this is our first pass through the loop,
+        // then $retry is FALSE. In this case, the insert must have failed
+        // meaning some other request acquired the lock but did not release it.
+        // We decide whether to retry by checking lock_may_be_available()
+        // Since this will break the lock in case it is expired.
+        $retry = $retry ? FALSE : lock_may_be_available($name);
+      }
+      // We only retry in case the first attempt failed, but we then broke
+      // an expired lock.
+    } while ($retry);
+  }
+  return isset($locks[$name]);
+}
+
+/**
+ * Check if lock acquired by a different process may be available.
+ *
+ * If an existing lock has expired, it is removed.
+ *
+ * @param $name
+ *   The name of the lock.
+ * @return
+ *   TRUE if there is no lock or it was removed, FALSE otherwise.
+ */
+function lock_may_be_available($name) {
+  // Just return TRUE if the supporting module is not enabled.
+  if (!_lock_table_exists()) {
+    return TRUE;
+  }
+
+  $lock = db_fetch_array(db_query("SELECT expire, value FROM {pf_semaphore} WHERE name = '%s'", $name));
+  if (!$lock) {
+    return TRUE;
+  }
+  $expire = (float) $lock['expire'];
+  list($usec, $sec) = explode(' ', microtime());
+  $now = (float)$usec + (float)$sec;
+  if ($now > $lock['expire']) {
+    // We check two conditions to prevent a race condition where another
+    // request acquired the lock and set a new expire time.  We add a small
+    // number to $expire to avoid errors with float to string conversion.
+    db_query("DELETE FROM {pf_semaphore} WHERE name = '%s' AND value = '%s' AND expire <= %f", $name, $lock['value'], 0.0001 + $expire);
+    return (bool)db_affected_rows();
+  }
+  return FALSE;
+}
+
+/**
+ * Wait for a lock to be available.
+ *
+ * This function may be called in a request that fails to acquire a desired
+ * lock. This will block further execution until the lock is available or the
+ * specified delay in seconds is reached.  This should not be used with locks
+ * that are acquired very frequently, since the lock is likely to be acquired
+ * again by a different request during the sleep().
+ *
+ * @param $name
+ *   The name of the lock.
+ * @param $delay
+ *   The maximum number of seconds to wait, as an integer.
+ * @return
+ *   TRUE if the lock holds, FALSE if it is available.
+ */
+function lock_wait($name, $delay = 30) {
+
+  while ($delay--) {
+    // This function should only be called by a request that failed to get a
+    // lock, so we sleep first to give the parallel request a chance to finish
+    // and release the lock.
+    sleep(1);
+    if (lock_may_be_available($name)) {
+      // No longer need to wait.
+      return FALSE;
+    }
+  }
+  // The caller must still wait longer to get the lock.
+  return TRUE;
+}
+
+/**
+ * Release a lock previously acquired by lock_acquire().
+ *
+ * This will release the named lock if it is still held by the current request.
+ *
+ * @param $name
+ *   The name of the lock.
+ */
+function lock_release($name) {
+  // Just return if the supporting module is not enabled.
+  if (!_lock_table_exists()) {
+    return;
+  }
+
+  global $locks;
+
+  unset($locks[$name]);
+  db_query("DELETE FROM {pf_semaphore} WHERE name = '%s' AND value = '%s'", $name, _lock_id());
+}
+
+/**
+ * Release all previously acquired locks.
+ */
+function lock_release_all($lock_id = NULL) {
+  // Just return if the supporting module is not enabled.
+  if (!_lock_table_exists()) {
+    return;
+  }
+
+  global $locks;
+
+  $locks = array();
+  if (empty($lock_id)) {
+    $lock_id = _lock_id();
+  }
+
+  db_query("DELETE FROM {pf_semaphore} WHERE value = '%s'", _lock_id());
+}
+
+/**
+ * Detemine if the table has been installed.
+ */
+function _lock_table_exists() {
+  static $exists = NULL;
+  
+  if (!isset($exists)) {
+    $exists = db_table_exists('pf_semaphore');
+  }
+  
+  return $exists;
+}
+
+/**
+ * @} End of "defgroup locks".
+ */
diff --git a/includes/menu.inc b/includes/menu.inc
index 7ab59ba..feda028 100644
--- a/includes/menu.inc
+++ b/includes/menu.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: menu.inc,v 1.255.2.31 2009/04/27 12:50:13 goba Exp $
+// $Id: menu.inc,v 1.255.2.32 2009/10/06 11:59:05 goba Exp $
 
 /**
  * @file
@@ -1503,7 +1503,25 @@ function menu_set_active_item($path) {
 }
 
 /**
- * Set (or get) the active trail for the current page - the path to root in the menu tree.
+ * Sets or gets the active trail (path to root menu root) of the current page.
+ *
+ * @param $new_trail
+ *   Menu trail to set, or NULL to use previously-set or calculated trail. If
+ *   supplying a trail, use the same format as the return value (see below).
+ * @return
+ *   Path to menu root of the current page, as an array of menu link items,
+ *   starting with the site's home page. Each link item is an associative array
+ *   with the following components:
+ *   - 'title': Title of the item.
+ *   - 'href': Drupal path of the item.
+ *   - 'localized_options': Options for passing into the l() function.
+ *   - 'type': A menu type constant, such as MENU_DEFAULT_LOCAL_TASK, or 0 to
+ *     indicate it's not really in the menu (used for the home page item).
+ *   If $new_trail is supplied, the value is saved in a static variable and
+ *   returned. If $new_trail is not supplied, and there is a saved value from
+ *   a previous call, the saved value is returned. If $new_trail is not supplied
+ *   and there is no saved value, the path to the current page is calculated,
+ *   saved as the static value, and returned.
  */
 function menu_set_active_trail($new_trail = NULL) {
   static $trail;
@@ -1566,7 +1584,9 @@ function menu_set_active_trail($new_trail = NULL) {
 }
 
 /**
- * Get the active trail for the current page - the path to root in the menu tree.
+ * Gets the active trail (path to root menu root) of the current page.
+ *
+ * See menu_set_active_trail() for details of return value.
  */
 function menu_get_active_trail() {
   return menu_set_active_trail();
@@ -1669,15 +1689,34 @@ function menu_cache_clear_all() {
  * is different and leaves stale data in the menu tables.
  */
 function menu_rebuild() {
-  variable_del('menu_rebuild_needed');
+  if (!lock_acquire('menu_rebuild')) {
+    // Wait for another request that is already doing this work.
+    // We choose to block here since otherwise the router item may not 
+    // be avaiable in menu_execute_active_handler() resulting in a 404.
+    lock_wait('menu_rebuild');
+    return FALSE;
+  }
+
+  // Encapsulate the rebuild in a transaction.
+  db_query('BEGIN');
+
   $menu = menu_router_build(TRUE);
   _menu_navigation_links_rebuild($menu);
   // Clear the menu, page and block caches.
   menu_cache_clear_all();
   _menu_clear_page_cache();
+  
   if (defined('MAINTENANCE_MODE')) {
     variable_set('menu_rebuild_needed', TRUE);
   }
+  else {
+    variable_del('menu_rebuild_needed');
+  }
+  lock_release('menu_rebuild');
+  
+  db_query('COMMIT');
+  
+  return TRUE;
 }
 
 /**
diff --git a/includes/module.inc b/includes/module.inc
index 33bee08..06b9d40 100644
--- a/includes/module.inc
+++ b/includes/module.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: module.inc,v 1.115.2.1 2009/02/16 10:32:10 goba Exp $
+// $Id: module.inc,v 1.115.2.3 2009/11/16 17:17:35 goba Exp $
 
 /**
  * @file
@@ -243,13 +243,25 @@ function module_load_install($module) {
 
 /**
  * Load a module include file.
+ * 
+ * Examples:
+ * @code
+ *   // Load node.admin.inc from the node module.
+ *   module_load_include('inc', 'node', 'node.admin');
+ *   // Load content_types.inc from the node module.
+ *   module_load_include('inc', 'node', 'content_types');  
+ * @endcode
+ * 
+ * Do not use this function to load an install file. Use module_load_install()
+ * instead.
  *
  * @param $type
  *   The include file's type (file extension).
  * @param $module
  *   The module to which the include file belongs.
  * @param $name
- *   Optionally, specify the file name. If not set, the module's name is used.
+ *   Optionally, specify the base file name (without the $type extension). 
+ *   If not set, $module is used.
  */
 function module_load_include($type, $module, $name = NULL) {
   if (empty($name)) {
@@ -356,19 +368,19 @@ function module_disable($module_list) {
  * Allow modules to interact with the Drupal core.
  *
  * Drupal's module system is based on the concept of "hooks". A hook is a PHP
- * function that is named foo_bar(), where "foo" is the name of the module (whose
- * filename is thus foo.module) and "bar" is the name of the hook. Each hook has
- * a defined set of parameters and a specified result type.
+ * function that is named foo_bar(), where "foo" is the name of the module
+ * (whose filename is thus foo.module) and "bar" is the name of the hook. Each
+ * hook has a defined set of parameters and a specified result type.
  *
- * To extend Drupal, a module need simply implement a hook. When Drupal wishes to
- * allow intervention from modules, it determines which modules implement a hook
- * and call that hook in all enabled modules that implement it.
+ * To extend Drupal, a module need simply implement a hook. When Drupal wishes
+ * to allow intervention from modules, it determines which modules implement a
+ * hook and calls that hook in all enabled modules that implement it.
  *
  * The available hooks to implement are explained here in the Hooks section of
  * the developer documentation. The string "hook" is used as a placeholder for
- * the module name is the hook definitions. For example, if the module file is
- * called example.module, then hook_help() as implemented by that module would be
- * defined as example_help().
+ * the module name in the hook definitions. For example, if the module file is
+ * called example.module, then hook_help() as implemented by that module would
+ * be defined as example_help().
  */
 
 /**
diff --git a/includes/path.inc b/includes/path.inc
index e9c2279..9150d41 100644
--- a/includes/path.inc
+++ b/includes/path.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: path.inc,v 1.19.2.1 2008/10/13 21:06:41 dries Exp $
+// $Id: path.inc,v 1.19.2.2 2009/12/16 17:35:11 goba Exp $
 
 /**
  * @file
@@ -25,7 +25,8 @@ function drupal_init_path() {
 /**
  * Given an alias, return its Drupal system URL if one exists. Given a Drupal
  * system URL return one of its aliases if such a one exists. Otherwise,
- * return FALSE.
+ * return FALSE. This function is a hook and modules can impliment lookup_path 
+ * to override the core behavior.
  *
  * @param $action
  *   One of the following values:
@@ -42,8 +43,52 @@ function drupal_init_path() {
  * @return
  *   Either a Drupal system path, an aliased path, or FALSE if no path was
  *   found.
+ *  
  */
 function drupal_lookup_path($action, $path = '', $path_language = '') {
+  static $hook_module;
+  
+  if (!isset($hook_module)) {
+    $modules = module_implements('lookup_path');
+    if (count($modules) > 0) {
+      $hook_module = $modules[0];
+    } else {
+      $hook_module = FALSE;
+    }
+  }
+
+  if ($hook_module !== FALSE) {
+    $retval = module_invoke($hook_module, 'lookup_path', $action, $path, $path_language);
+  } else {
+    $retval = _drupal_lookup_path_direct($action, $path, $path_language);
+  }
+  return $retval;
+}
+
+/**
+ * Internal function: The base path alias functionality as provided by Core.
+ *
+ * Given an alias, return its Drupal system URL if one exists. Given a Drupal
+ * system URL return one of its aliases if such a one exists. Otherwise,
+ * return FALSE.
+ *
+ * @param $action
+ *   One of the following values:
+ *   - wipe: delete the alias cache.
+ *   - alias: return an alias for a given Drupal system path (if one exists).
+ *   - source: return the Drupal system URL for a path alias (if one exists).
+ * @param $path
+ *   The path to investigate for corresponding aliases or system URLs.
+ * @param $path_language
+ *   Optional language code to search the path with. Defaults to the page language.
+ *   If there's no path defined for that language it will search paths without
+ *   language.
+ *
+ * @return
+ *   Either a Drupal system path, an aliased path, or FALSE if no path was
+ *   found.
+ */
+function _drupal_lookup_path_direct($action, $path = '', $path_language = '') {
   global $language;
   // $map is an array with language keys, holding arrays of Drupal paths to alias relations
   static $map = array(), $no_src = array(), $has_paths;
@@ -231,7 +276,7 @@ function drupal_is_front_page() {
  *   String containing a set of patterns separated by \n, \r or \r\n.
  *
  * @return
- *   Boolean value: TRUE if the path matches a pattern, FALSE otherwise.
+ *   1 if there is a match, 0 if there is not a match.
  */
 function drupal_match_path($path, $patterns) {
   static $regexps;
diff --git a/includes/xmlrpcs.inc b/includes/xmlrpcs.inc
index f0d4279..38b60b5 100644
--- a/includes/xmlrpcs.inc
+++ b/includes/xmlrpcs.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: xmlrpcs.inc,v 1.24.2.1 2008/04/28 10:04:52 dries Exp $
+// $Id: xmlrpcs.inc,v 1.24.2.3 2009/12/07 11:36:28 goba Exp $
 
 /**
  * The main entry point for XML-RPC requests.
@@ -64,10 +64,13 @@ function xmlrpc_server($callbacks) {
   if ($xmlrpc_server->message->messagetype != 'methodCall') {
     xmlrpc_server_error(-32600, t('Server error. Invalid XML-RPC. Request must be a methodCall.'));
   }
+  if (!isset($xmlrpc_server->message->params)) {
+    $xmlrpc_server->message->params = array();
+  }
   xmlrpc_server_set($xmlrpc_server);
   $result = xmlrpc_server_call($xmlrpc_server, $xmlrpc_server->message->methodname, $xmlrpc_server->message->params);
 
-  if ($result->is_error) {
+  if (is_object($result) && !empty($result->is_error)) {
     xmlrpc_server_error($result);
   }
   // Encode the result
diff --git a/modules/aggregator/aggregator.info b/modules/aggregator/aggregator.info
index accbdd8..db486b4 100644
--- a/modules/aggregator/aggregator.info
+++ b/modules/aggregator/aggregator.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/block/block.info b/modules/block/block.info
index 0149613..10a2614 100644
--- a/modules/block/block.info
+++ b/modules/block/block.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/block/block.module b/modules/block/block.module
index 4c78664..79720a8 100644
--- a/modules/block/block.module
+++ b/modules/block/block.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: block.module,v 1.299.2.3 2008/06/24 14:40:08 goba Exp $
+// $Id: block.module,v 1.299.2.4 2009/10/06 12:13:01 goba Exp $
 
 /**
  * @file
@@ -298,6 +298,19 @@ function _block_rehash() {
   return $blocks;
 }
 
+/**
+ * Returns information from database about a user-created (custom) block.
+ *
+ * @param $bid
+ *   ID of the block to get information for.
+ * @return
+ *   Associative array of information stored in the database for this block.
+ *   Array keys:
+ *   - bid: Block ID.
+ *   - info: Block description.
+ *   - body: Block contents.
+ *   - format: Filter ID of the filter format for the body.
+ */
 function block_box_get($bid) {
   return db_fetch_array(db_query("SELECT * FROM {boxes} WHERE bid = %d", $bid));
 }
@@ -336,6 +349,19 @@ function block_box_form($edit = array()) {
   return $form;
 }
 
+/**
+ * Saves a user-created block in the database.
+ *
+ * @param $edit
+ *   Associative array of fields to save. Array keys:
+ *   - info: Block description.
+ *   - body: Block contents.
+ *   - format: Filter ID of the filter format for the body.
+ * @param $delta
+ *   Block ID of the block to save.
+ * @return
+ *   Always returns TRUE.
+ */
 function block_box_save($edit, $delta) {
   if (!filter_access($edit['format'])) {
     $edit['format'] = FILTER_FORMAT_DEFAULT;
diff --git a/modules/blog/blog.info b/modules/blog/blog.info
index c53f346..1bfc74d 100644
--- a/modules/blog/blog.info
+++ b/modules/blog/blog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/blogapi/blogapi.info b/modules/blogapi/blogapi.info
index f956a10..535be06 100644
--- a/modules/blogapi/blogapi.info
+++ b/modules/blogapi/blogapi.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/book/book.info b/modules/book/book.info
index 8bc45d5..b78cb45 100644
--- a/modules/book/book.info
+++ b/modules/book/book.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/color/color.info b/modules/color/color.info
index 7f5f0b0..56066a7 100644
--- a/modules/color/color.info
+++ b/modules/color/color.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/comment/comment.info b/modules/comment/comment.info
index 1ae2c9f..353fc95 100644
--- a/modules/comment/comment.info
+++ b/modules/comment/comment.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/contact/contact.admin.inc b/modules/contact/contact.admin.inc
index 315fd4b..32cafcf 100644
--- a/modules/contact/contact.admin.inc
+++ b/modules/contact/contact.admin.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: contact.admin.inc,v 1.3 2007/11/09 07:55:13 dries Exp $
+// $Id: contact.admin.inc,v 1.3.2.1 2009/12/16 20:47:10 goba Exp $
 
 /**
  * @file
@@ -13,7 +13,7 @@ function contact_admin_categories() {
   $result = db_query('SELECT cid, category, recipients, selected FROM {contact} ORDER BY weight, category');
   $rows = array();
   while ($category = db_fetch_object($result)) {
-    $rows[] = array($category->category, $category->recipients, ($category->selected ? t('Yes') : t('No')), l(t('edit'), 'admin/build/contact/edit/'. $category->cid), l(t('delete'), 'admin/build/contact/delete/'. $category->cid));
+    $rows[] = array(check_plain($category->category), check_plain($category->recipients), ($category->selected ? t('Yes') : t('No')), l(t('edit'), 'admin/build/contact/edit/'. $category->cid), l(t('delete'), 'admin/build/contact/delete/'. $category->cid));
   }
   $header = array(t('Category'), t('Recipients'), t('Selected'), array('data' => t('Operations'), 'colspan' => 2));
 
diff --git a/modules/contact/contact.info b/modules/contact/contact.info
index cd969c9..ea92703 100644
--- a/modules/contact/contact.info
+++ b/modules/contact/contact.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/contact/contact.module b/modules/contact/contact.module
index 4774ff5..03e4cd5 100644
--- a/modules/contact/contact.module
+++ b/modules/contact/contact.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: contact.module,v 1.103.2.1 2008/04/09 21:11:46 goba Exp $
+// $Id: contact.module,v 1.103.2.2 2009/11/06 07:36:34 goba Exp $
 
 /**
  * @file
@@ -110,19 +110,39 @@ function contact_menu() {
 }
 
 /**
- * Determine if a user can access to the contact tab.
+ * Menu access callback for a user's personal contact form.
+ *
+ * @param $account
+ *   A user account object.
+ * @return
+ *   TRUE if the current user has access to the requested user's contact form,
+ *   or FALSE otherwise.
  */
 function _contact_user_tab_access($account) {
   global $user;
-  if (!isset($account->contact)) {
-    $account->contact = FALSE;
+
+  // Anonymous users cannot use or have contact forms.
+  if (!$user->uid || !$account->uid) {
+    return FALSE;
   }
-  return
-    $account && $user->uid &&
-    (
-      ($user->uid != $account->uid && $account->contact) ||
-      user_access('administer users')
-    );
+
+  // User administrators should always have access to personal contact forms.
+  if (user_access('administer users')) {
+    return TRUE;
+  }
+
+  // Users may not contact themselves.
+  if ($user->uid == $account->uid) {
+    return FALSE;
+  }
+
+  // If the requested user has disabled their contact form, or this preference
+  // has not yet been saved, do not allow users to contact them.
+  if (empty($account->contact)) {
+    return FALSE;
+  }
+
+  return TRUE;
 }
 
 /**
diff --git a/modules/cookie_cache_bypass/cookie_cache_bypass.info b/modules/cookie_cache_bypass/cookie_cache_bypass.info
index 57240f2..4dd0f20 100644
--- a/modules/cookie_cache_bypass/cookie_cache_bypass.info
+++ b/modules/cookie_cache_bypass/cookie_cache_bypass.info
@@ -1,3 +1,4 @@
-name = Cookie Cache Bypass
+name = Cookie cache bypass
 description = Sets a cookie on form submission directing a reverse proxy to temporarily not serve cached pages for an anonymous user that just submitted content.
 core = 6.x
+package = Pressflow
diff --git a/modules/dblog/dblog.info b/modules/dblog/dblog.info
index 2eb888d..bc478e3 100644
--- a/modules/dblog/dblog.info
+++ b/modules/dblog/dblog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/filter/filter.info b/modules/filter/filter.info
index ec5ed11..2c10135 100644
--- a/modules/filter/filter.info
+++ b/modules/filter/filter.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/forum/forum.info b/modules/forum/forum.info
index 6f6695a..de224be 100644
--- a/modules/forum/forum.info
+++ b/modules/forum/forum.info
@@ -7,8 +7,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/help/help.info b/modules/help/help.info
index 130e17b..7b798e2 100644
--- a/modules/help/help.info
+++ b/modules/help/help.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/locale/locale.info b/modules/locale/locale.info
index 91ad57d..3f6a28e 100644
--- a/modules/locale/locale.info
+++ b/modules/locale/locale.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/locale/locale.module b/modules/locale/locale.module
index 1ad7576..936bedd 100644
--- a/modules/locale/locale.module
+++ b/modules/locale/locale.module
@@ -345,7 +345,7 @@ function locale($string = NULL, $langcode = NULL, $reset = FALSE) {
       if ($cache = cache_get('locale:'. $langcode, 'cache')) {
         $locale_t[$langcode] = $cache->data;
       }
-      else {
+      elseif (lock_acquire('locale_cache_' . $langcode)) {
         // Refresh database stored cache of translations for given language.
         // We only store short strings used in current version, to improve
         // performance and consume less memory.
@@ -354,6 +354,7 @@ function locale($string = NULL, $langcode = NULL, $reset = FALSE) {
           $locale_t[$langcode][$data->source] = (empty($data->translation) ? TRUE : $data->translation);
         }
         cache_set('locale:'. $langcode, $locale_t[$langcode]);
+        lock_release('locale_cache_' . $langcode);
       }
     }
   }
diff --git a/modules/lock/lock.info b/modules/lock/lock.info
new file mode 100644
index 0000000..499ae9d
--- /dev/null
+++ b/modules/lock/lock.info
@@ -0,0 +1,4 @@
+name = Database locking support
+description = Installs the semaphore table to support the bundled, database-backed locking API.
+core = 6.x
+package = Pressflow
diff --git a/modules/lock/lock.install b/modules/lock/lock.install
new file mode 100644
index 0000000..05f5a47
--- /dev/null
+++ b/modules/lock/lock.install
@@ -0,0 +1,38 @@
+<?php
+
+function lock_install() {
+  drupal_install_schema('lock');
+}
+
+function lock_uninstall() {
+  drupal_uninstall_schema('lock');
+}
+
+function lock_schema() {
+  $schema = array();
+  $schema['pf_semaphore'] = array(
+    'description' => 'Table for holding semaphores, locks, flags, etc. that cannot be stored as variables since they must not be cached.',
+    'fields' => array(
+      'name' => array(
+        'description' => 'Unique lock name.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => ''),
+      'value' => array(
+        'description' => 'Unique request ID.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => ''),
+      'expire' => array(
+        'description' => 'Expiration microtimestamp.',
+        'type' => 'float',
+        'size' => 'big',
+        'not null' => TRUE),
+      ),
+    'indexes' => array('expire' => array('expire')),
+    'primary key' => array('name'),
+  );
+  return $schema;
+}
diff --git a/modules/lock/lock.module b/modules/lock/lock.module
new file mode 100644
index 0000000..92c2352
--- /dev/null
+++ b/modules/lock/lock.module
@@ -0,0 +1,5 @@
+<?php
+
+// In order to keep the Pressflow implementation similar
+// to the proposed Drupal 6 backport, this module only
+// exists to manage the semaphore table for lock.inc.
diff --git a/modules/menu/menu.admin.inc b/modules/menu/menu.admin.inc
index f26e840..14eafa8 100644
--- a/modules/menu/menu.admin.inc
+++ b/modules/menu/menu.admin.inc
@@ -1,9 +1,9 @@
 <?php
-// $Id: menu.admin.inc,v 1.26.2.4 2009/02/25 13:15:40 goba Exp $
+// $Id: menu.admin.inc,v 1.26.2.6 2009/12/16 20:47:10 goba Exp $
 
 /**
  * @file
- * Administrative page callbaks for menu module.
+ * Administrative page callbacks for menu module.
  */
 
 /**
@@ -15,6 +15,7 @@ function menu_overview_page() {
   while ($menu = db_fetch_array($result)) {
     $menu['href'] = 'admin/build/menu-customize/'. $menu['menu_name'];
     $menu['localized_options'] = array();
+    $menu['description'] = filter_xss_admin($menu['description']);
     $content[] = $menu;
   }
   return theme('admin_block_content', $content);
diff --git a/modules/menu/menu.info b/modules/menu/menu.info
index 86a281e..015e52f 100644
--- a/modules/menu/menu.info
+++ b/modules/menu/menu.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/node/node.info b/modules/node/node.info
index 110371c..9617a3b 100644
--- a/modules/node/node.info
+++ b/modules/node/node.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/node/node.module b/modules/node/node.module
index f6a6678..8a4bb9a 100644
--- a/modules/node/node.module
+++ b/modules/node/node.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: node.module,v 1.947.2.18 2009/09/16 18:21:06 goba Exp $
+// $Id: node.module,v 1.947.2.19 2009/09/23 09:09:30 goba Exp $
 
 /**
  * @file
diff --git a/modules/openid/openid.inc b/modules/openid/openid.inc
index d8456be..d0d9876 100644
--- a/modules/openid/openid.inc
+++ b/modules/openid/openid.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: openid.inc,v 1.8.2.1 2009/09/16 17:58:24 goba Exp $
+// $Id: openid.inc,v 1.8.2.2 2009/12/16 17:54:55 goba Exp $
 
 /**
  * @file
@@ -75,7 +75,7 @@ function openid_redirect_form(&$form_state, $url, $message) {
  */
 function _openid_is_xri($identifier) {
   // Strip the xri:// scheme from the identifier if present.
-  if (stripos($identifier, 'xri://') !== FALSE) {
+  if (strpos(strtolower($identifier), 'xri://') !== FALSE) {
     $identifier = substr($identifier, 6);
   }
 
diff --git a/modules/openid/openid.info b/modules/openid/openid.info
index 494415e..c7f36b9 100644
--- a/modules/openid/openid.info
+++ b/modules/openid/openid.info
@@ -5,8 +5,8 @@ version = VERSION
 package = Core - optional
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/openid/openid.module b/modules/openid/openid.module
index 2444589..b27f201 100644
--- a/modules/openid/openid.module
+++ b/modules/openid/openid.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: openid.module,v 1.19.2.8 2009/09/16 19:34:14 goba Exp $
+// $Id: openid.module,v 1.19.2.9 2009/12/07 12:52:22 goba Exp $
 
 /**
  * @file
@@ -125,6 +125,12 @@ function openid_form_alter(&$form, $form_state, $form_id) {
       $form['pass']['#value'] = user_password();
     }
     $form['auth_openid'] = array('#type' => 'hidden', '#value' => $_SESSION['openid']['values']['auth_openid']);
+    $form['openid_display'] = array(
+      '#type' => 'item',
+      '#title' => t('Your OpenID'),
+      '#description' => t('This OpenID will be attached to your account after registration.'),
+      '#value' => check_plain($_SESSION['openid']['values']['auth_openid']),
+    );
   }
   return $form;
 }
@@ -394,19 +400,34 @@ function openid_authentication($response) {
   elseif (variable_get('user_register', 1)) {
     // Register new user
     $form_state['redirect'] = NULL;
-    $form_state['values']['name'] = (empty($response['openid.sreg.nickname'])) ? $identity : $response['openid.sreg.nickname'];
+    $form_state['values']['name'] = (empty($response['openid.sreg.nickname'])) ? '' : $response['openid.sreg.nickname'];
     $form_state['values']['mail'] = (empty($response['openid.sreg.email'])) ? '' : $response['openid.sreg.email'];
     $form_state['values']['pass']  = user_password();
     $form_state['values']['status'] = variable_get('user_register', 1) == 1;
     $form_state['values']['response'] = $response;
     $form_state['values']['auth_openid'] = $identity;
-    $form = drupal_retrieve_form('user_register', $form_state);
-    drupal_prepare_form('user_register', $form, $form_state);
-    drupal_validate_form('user_register', $form, $form_state);
-    if (form_get_errors()) {
+
+    if (empty($response['openid.sreg.email']) && empty($response['openid.sreg.nickname'])) {
+      drupal_set_message(t('Please complete the registration by filling out the form below. If you already have an account, you can <a href="@login">log in</a> now and add your OpenID under "My account".', array('@login' => url('user/login'))), 'warning');
+      $success = FALSE;
+    }
+    else {
+      $form = drupal_retrieve_form('user_register', $form_state);
+      drupal_prepare_form('user_register', $form, $form_state);
+      drupal_validate_form('user_register', $form, $form_state);
+      $success = !form_get_errors();
+      if (!$success) {
+        drupal_set_message(t('Account registration using the information provided by your OpenID provider failed due to the reasons listed below. Please complete the registration by filling out the form below. If you already have an account, you can <a href="@login">log in</a> now and add your OpenID under "My account".', array('@login' => url('user/login'))), 'warning');
+        // Append form validation errors below the above warning.
+        $messages = drupal_get_messages('error');
+        foreach ($messages['error'] as $message) {
+          drupal_set_message( $message, 'error');
+        }
+      }
+    }
+    if (!$success) {
       // We were unable to register a valid new user, redirect to standard
       // user/register and prefill with the values we received.
-      drupal_set_message(t('OpenID registration failed for the reasons listed. You may register now, or if you already have an account you can <a href="@login">log in</a> now and add your OpenID under "My Account"', array('@login' => url('user/login'))), 'error');
       $_SESSION['openid']['values'] = $form_state['values'];
       // We'll want to redirect back to the same place.
       $destination = drupal_get_destination();
diff --git a/modules/path/path.info b/modules/path/path.info
index 981e0cb..48111cd 100644
--- a/modules/path/path.info
+++ b/modules/path/path.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/path_alias_cache/path_alias_cache.info b/modules/path_alias_cache/path_alias_cache.info
new file mode 100644
index 0000000..aa5a265
--- /dev/null
+++ b/modules/path_alias_cache/path_alias_cache.info
@@ -0,0 +1,4 @@
+name = Path alias cache
+description = A path alias implementation which adds a cache to the core version.
+core = 6.x
+package = Pressflow
diff --git a/modules/path_alias_cache/path_alias_cache.install b/modules/path_alias_cache/path_alias_cache.install
new file mode 100644
index 0000000..c175f0e
--- /dev/null
+++ b/modules/path_alias_cache/path_alias_cache.install
@@ -0,0 +1,26 @@
+<?php
+
+/**
+ * Implementation of hook_install().
+ */
+function path_alias_cache_install() {
+  // Create tables.
+  drupal_install_schema('path_alias_cache');
+}
+
+/**
+ * Implementation of hook_uninstall().
+ */
+function path_alias_cache_uninstall() {
+  // Remove tables.
+  drupal_uninstall_schema('path_alias_cache');
+}
+
+/**
+ * Implementation of hook_schema().
+ */
+function path_alias_cache_schema() {
+  $schema['cache_path'] = drupal_get_schema_unprocessed('system', 'cache');
+  return $schema;
+}
+
diff --git a/modules/path_alias_cache/path_alias_cache.module b/modules/path_alias_cache/path_alias_cache.module
new file mode 100644
index 0000000..6859c83
--- /dev/null
+++ b/modules/path_alias_cache/path_alias_cache.module
@@ -0,0 +1,199 @@
+<?php
+
+/*
+ * Implementation of hook_lookup_path
+ *
+ * This version of lookup_path is almost exactly what is in core, but adds a cache table.
+ *
+ */
+function path_alias_cache_lookup_path($action, $path = '', $path_language = '') {
+  global $language;
+  $cache = &path_alias_cache_static(__FUNCTION__, array(
+    'map' => array(),
+    'no_src' => array(),
+    'whitelist' => NULL,
+    'system_paths' => array(),
+    'no_aliases' => array(),
+    'first_call' => TRUE,
+  ));
+
+  // Retrieve the path alias whitelist.
+  if (!isset($cache['whitelist'])) {
+    if ($cached = cache_get('path_alias_whitelist', 'cache_path')) {
+      $cache['whitelist'] = $cached->data;
+    } else {
+      $cache['whitelist'] = path_alias_cache_path_alias_whitelist_rebuild();
+    }
+  }
+
+  $path_language = $path_language ? $path_language : $language->language;
+
+  if ($action == 'wipe') {
+    $cache = array();
+    $cache['whitelist'] = path_alias_cache_path_alias_whitelist_rebuild();
+  }
+  elseif ($cache['whitelist'] && $path != '') {
+    if ($action == 'alias') {
+      // During the first call to path_alias_cache_lookup_path() per language, load the
+      // expected system paths for the page from cache.
+      if (!empty($cache['first_call'])) {
+        $cache['first_call'] = FALSE;
+
+        if (!isset($cache['map'][$path_language]) || !is_array($cache['map'][$path_language])) {
+          $cache['map'][$path_language] = array();
+        }
+        // Load system paths from cache.
+        $cid = $_GET['q'];
+        if ($cached = cache_get($cid, 'cache_path')) {
+          $cache['system_paths'] = $cached->data;
+          // Now fetch the aliases corresponding to these system paths.
+          // We order by ASC and overwrite array keys to ensure the correct
+          // alias is used when there are multiple aliases per path.
+          $placeholders = db_placeholders($cache['system_paths'], 'varchar');
+          $result = db_query("SELECT src, dst FROM {url_alias} WHERE src IN($placeholders) AND language IN('%s', '') ORDER BY language ASC", $cache['system_paths'], $path_language);
+          while ($record = db_fetch_object($result)) {
+            if (!isset($cache['map'][$path_language][$record->src])) {
+              $cache['map'][$path_language][$record->src] = $record->dst;
+            }
+          }
+          // Keep a record of paths with no alias to avoid querying twice.
+          $cache['no_aliases'][$path_language] = array_flip(array_diff_key($cache['system_paths'], array_keys($cache['map'][$path_language])));
+        }
+      }
+      // If the alias has already been loaded, return it.
+      if (isset($cache['map'][$path_language][$path])) {
+        return $cache['map'][$path_language][$path];
+      }
+      // Check the path whitelist, if the top_level part before the first "/"
+      // is not in the list, then there is no need to do anything further,
+      // it is not in the database.
+      elseif (!isset($cache['whitelist'][strtok($path, '/')])) {
+        return FALSE;
+      }
+      // For system paths which were not cached, query aliases individually.
+      else if (!isset($cache['no_aliases'][$path_language][$path])) {
+        // Get the most fitting result falling back with alias without language
+        $alias = db_result(db_query("SELECT dst FROM {url_alias} WHERE src = '%s' AND language IN('%s', '') ORDER BY language DESC", $path, $path_language));
+        $cache['map'][$path_language][$path] = $alias;
+        return $alias;
+      }
+    }
+    // Check no_src for this $path in case we've already determined that there
+    // isn't a path that has this alias
+    elseif ($action == 'source' && !isset($cache['no_src'][$path_language][$path])) {
+      // Look for the value $path within the cached map
+      $src = '';
+      if (!isset($cache['map'][$path_language]) || !($src = array_search($path, $cache['map'][$path_language]))) {
+        // Get the most fitting result falling back with alias without language
+        if ($src = db_result(db_query("SELECT src FROM {url_alias} WHERE dst = '%s' AND language IN('%s', '') ORDER BY language DESC", $path, $path_language))) {
+          $cache['map'][$path_language][$src] = $path;
+        }
+        else {
+          // We can't record anything into map because we do not have a valid
+          // index and there is no need because we have not learned anything
+          // about any Drupal path. Thus cache to no_src.
+          $cache['no_src'][$path_language][$path] = TRUE;
+        }
+      }
+      return $src;
+    }
+  }
+
+  return FALSE;
+}
+
+/**
+ * Implementation of hook_exit
+ * We use this to cache the paths on a page, for later requests.
+ */
+function path_alias_cache_exit() {
+  path_alias_cache_cache_system_paths();
+}
+
+/**
+ * Cache system paths for a page.
+ *
+ * Cache an array of the system paths available on each page. We assume
+ * that aliases will be needed for the majority of these paths during
+ * subsequent requests, and load them in a single query during
+ * drupal_lookup_path().
+ */
+function path_alias_cache_cache_system_paths() {
+  // Check if the system paths for this page were loaded from cache in this
+  // request to avoid writing to cache on every request.
+  $cache = &path_alias_cache_static('path_alias_cache_lookup_path', array());
+  if (!$cache['system_paths']) {
+    // Generate a cache ID (cid) specifically for this page.
+    $cid = $_GET['q'];
+    // The static $map array used by drupal_lookup_path() includes all
+    // system paths for the page request.
+    if (is_array($cache['map']) && $paths = current($cache['map'])) {
+      $data = array_keys($paths);
+      $expire = $_SERVER['REQUEST_TIME'] + variable_get('cache_lifetime', 0);
+      cache_set($cid, $data, 'cache_path', $expire);
+    }
+  }
+}
+
+
+/**
+ * Central static variable storage.
+ *
+ * @param $name
+ *   Globally unique name for the variable. For a function with only one static,
+ *   variable, the function name (e.g. via the PHP magic __FUNCTION__ constant)
+ *   is recommended. For a function with multiple static variables add a
+ *   distinguishing suffix to the function name for each one.
+ * @param $default_value
+ *   Optional default value.
+ * @param $reset
+ *   TRUE to reset a specific named variable, or all variables if $name is NULL.
+ *   Resetting every variable should only be used, for example, for running
+ *   unit tests with a clean environment. Should be used only though via
+ *   function drupal_static_reset().
+ *
+ * @return
+ *   Returns a variable by reference if $reset is FALSE.
+ */
+function &path_alias_cache_static($name, $default_value = NULL, $reset = FALSE) {
+  static $data = array();
+
+  // Reset a single value, or all values.
+  if ($reset) {
+    if (isset($name)) {
+      unset($data[$name]);
+    }
+    else {
+      $data = array();
+    }
+    // We must return a reference to a variable.
+    $dummy = NULL;
+    return $dummy;
+  }
+
+  if (!isset($data[$name])) {
+    $data[$name] = $default_value;
+  }
+
+  return $data[$name];
+}
+
+/**
+ * Rebuild the path alias white list.
+ *
+ * @return
+ *   An array containing a white list of path aliases.
+ */
+function path_alias_cache_path_alias_whitelist_rebuild() {
+  // For each alias in the database, get the top level component of the system
+  // path it corresponds to. This is the portion of the path before the first "/"
+  // if present, otherwise the whole path itself.
+  $whitelist = array();
+  $result = db_query("SELECT SUBSTRING_INDEX(src, '/', 1) AS path FROM {url_alias} GROUP BY path");
+  while ($row = db_fetch_object($result)) {
+    $whitelist[$row->path] = TRUE;
+  }
+  cache_set('path_alias_whitelist', $whitelist, 'cache_path');
+  return $whitelist;
+}
+
diff --git a/modules/php/php.info b/modules/php/php.info
index 73631ce..4b91de7 100644
--- a/modules/php/php.info
+++ b/modules/php/php.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/ping/ping.info b/modules/ping/ping.info
index e494d93..c30624e 100644
--- a/modules/ping/ping.info
+++ b/modules/ping/ping.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/ping/ping.module b/modules/ping/ping.module
index 3dcb52c..cca981a 100644
--- a/modules/ping/ping.module
+++ b/modules/ping/ping.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: ping.module,v 1.52 2007/12/19 17:45:42 goba Exp $
+// $Id: ping.module,v 1.52.2.1 2009/11/06 07:46:22 goba Exp $
 
 /**
  * @file
@@ -28,7 +28,9 @@ function ping_cron() {
   global $base_url;
 
   if (variable_get('site_name', 0)) {
-    if (db_result(db_query("SELECT COUNT(*) FROM {node} WHERE status = 1 AND (created > '". variable_get('cron_last', time()) ."' OR changed > '". variable_get('cron_last', time()) ."')"))) {
+    $cron_last = variable_get('cron_last', time());
+    // Query changed first since usually changed >= created.
+    if (db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1 AND changed > %d', $cron_last)) || db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1 AND created > %d', $cron_last))) {
       _ping_notify(variable_get('site_name', ''), $base_url);
     }
   }
diff --git a/modules/poll/poll.info b/modules/poll/poll.info
index 405d7db..e7f12dc 100644
--- a/modules/poll/poll.info
+++ b/modules/poll/poll.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/profile/profile.info b/modules/profile/profile.info
index 6cc9df4..08c9a96 100644
--- a/modules/profile/profile.info
+++ b/modules/profile/profile.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/search/search.info b/modules/search/search.info
index bde85d7..62f81ed 100644
--- a/modules/search/search.info
+++ b/modules/search/search.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/search/search.module b/modules/search/search.module
index a0e2394..db54e5f 100644
--- a/modules/search/search.module
+++ b/modules/search/search.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: search.module,v 1.250.2.7 2009/09/14 14:55:09 goba Exp $
+// $Id: search.module,v 1.250.2.8 2009/12/07 15:44:33 goba Exp $
 
 /**
  * @file
@@ -1072,7 +1072,6 @@ function search_box(&$form_state, $form_id) {
   );
   $form['submit'] = array('#type' => 'submit', '#value' => t('Search'));
   $form['#submit'][] = 'search_box_form_submit';
-  $form['#validate'][] = 'search_box_form_validate';
 
   return $form;
 }
diff --git a/modules/statistics/statistics.info b/modules/statistics/statistics.info
index db6a8eb..cf30ab2 100644
--- a/modules/statistics/statistics.info
+++ b/modules/statistics/statistics.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/syslog/syslog.info b/modules/syslog/syslog.info
index 84ef53d..93e91b5 100644
--- a/modules/syslog/syslog.info
+++ b/modules/syslog/syslog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/system/system.info b/modules/system/system.info
index 69b6c00..2ee8d28 100644
--- a/modules/system/system.info
+++ b/modules/system/system.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/system/system.install b/modules/system/system.install
index 557992a..c498a9f 100644
--- a/modules/system/system.install
+++ b/modules/system/system.install
@@ -1,5 +1,5 @@
 <?php
-// $Id: system.install,v 1.238.2.18 2009/09/14 13:59:58 goba Exp $
+// $Id: system.install,v 1.238.2.19 2009/11/06 08:39:46 goba Exp $
 
 /**
  * Test and report Drupal installation requirements.
@@ -358,6 +358,11 @@ function system_install() {
     drupal_install_schema($module);
   }
 
+  // Clear out module list and hook implementation statics before calling
+  // system_theme_data().
+  module_list(TRUE, FALSE);
+  module_implements('', FALSE, TRUE);
+
   // Load system theme data appropriately.
   system_theme_data();
 
diff --git a/modules/system/system.module b/modules/system/system.module
index 3156b67..12b37ff 100644
--- a/modules/system/system.module
+++ b/modules/system/system.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: system.module,v 1.585.2.44 2009/09/16 19:34:14 goba Exp $
+// $Id: system.module,v 1.585.2.47 2009/12/16 20:47:10 goba Exp $
 
 /**
  * @file
@@ -9,7 +9,7 @@
 /**
  * The current system version.
  */
-define('VERSION', '6.14');
+define('VERSION', '6.15');
 
 /**
  * Core API compatibility.
@@ -643,7 +643,7 @@ function system_admin_menu_block($item) {
     }
     // Prepare for sorting as in function _menu_tree_check_access().
     // The weight is offset so it is always positive, with a uniform 5-digits.
-    $content[(50000 + $item['weight']) .' '. $item['title'] .' '. $item['mlid']] = $item;
+    $content[(50000 + $item['weight']) .' '. drupal_strtolower($item['title']) .' '. $item['mlid']] = $item;
   }
   ksort($content);
   return $content;
diff --git a/modules/taxonomy/taxonomy.info b/modules/taxonomy/taxonomy.info
index 16168ac..dbe0823 100644
--- a/modules/taxonomy/taxonomy.info
+++ b/modules/taxonomy/taxonomy.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/throttle/throttle.info b/modules/throttle/throttle.info
index e3e4a3e..a10b653 100644
--- a/modules/throttle/throttle.info
+++ b/modules/throttle/throttle.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/tracker/tracker.info b/modules/tracker/tracker.info
index a485a75..d3b04db 100644
--- a/modules/tracker/tracker.info
+++ b/modules/tracker/tracker.info
@@ -6,8 +6,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/translation/translation.info b/modules/translation/translation.info
index 4d1d9cc..371ba50 100644
--- a/modules/translation/translation.info
+++ b/modules/translation/translation.info
@@ -6,8 +6,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/trigger/trigger.info b/modules/trigger/trigger.info
index 6acfafe..a1aeddb 100644
--- a/modules/trigger/trigger.info
+++ b/modules/trigger/trigger.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/update/update.compare.inc b/modules/update/update.compare.inc
index 8c99b7a..7aa1d61 100644
--- a/modules/update/update.compare.inc
+++ b/modules/update/update.compare.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: update.compare.inc,v 1.8.2.5 2009/06/09 11:08:32 goba Exp $
+// $Id: update.compare.inc,v 1.8.2.7 2009/11/06 07:26:21 goba Exp $
 
 /**
  * @file
@@ -52,7 +52,22 @@ function update_get_projects() {
  */
 function _update_process_info_list(&$projects, $list, $project_type) {
   foreach ($list as $file) {
-    if (empty($file->status)) {
+    // A disabled base theme of an enabled sub-theme still has all of its code
+    // run by the sub-theme, so we include it in our "enabled" projects list.
+    if (!$file->status && !empty($file->sub_themes)) {
+      foreach ($file->sub_themes as $key => $name) {
+        // Build a list of enabled sub-themes.
+        if ($list[$key]->status) {
+          $file->enabled_sub_themes[$key] = $name;
+        }
+      }
+      // If there are no enabled subthemes, we should ingore this theme and go
+      // on to the next one.
+      if (empty($file->enabled_sub_themes)) {
+        continue;
+      }
+    }
+    elseif (empty($file->status)) {
       // Skip disabled modules or themes.
       continue;
     }
@@ -84,21 +99,45 @@ function _update_process_info_list(&$projects, $list, $project_type) {
       $file->info['_info_file_ctime'] = filectime($info_filename);
     }
 
+    if (!isset($file->info['datestamp'])) {
+      $file->info['datestamp'] = 0;
+    }
+
     $project_name = $file->info['project'];
+
+    // Add a list of sub-themes that "depend on" the project and a list of base
+    // themes that are "required by" the project.
+    if ($project_name == 'drupal') {
+      // Drupal core is always required, so this extra info would be noise.
+      $sub_themes = array();
+      $base_themes = array();
+    }
+    else {
+      // Add list of enabled sub-themes.
+      $sub_themes = !empty($file->enabled_sub_themes) ? $file->enabled_sub_themes : array();
+      // Add list of base themes.
+      $base_themes = !empty($file->base_themes) ? $file->base_themes : array();
+    }
+
     if (!isset($projects[$project_name])) {
       // Only process this if we haven't done this project, since a single
       // project can have multiple modules or themes.
       $projects[$project_name] = array(
         'name' => $project_name,
         'info' => $file->info,
-        'datestamp' => isset($file->info['datestamp']) ? $file->info['datestamp'] : 0,
+        'datestamp' => $file->info['datestamp'],
         'includes' => array($file->name => $file->info['name']),
         'project_type' => $project_name == 'drupal' ? 'core' : $project_type,
+        'sub_themes' => $sub_themes,
+        'base_themes' => $base_themes,
       );
     }
     else {
       $projects[$project_name]['includes'][$file->name] = $file->info['name'];
       $projects[$project_name]['info']['_info_file_ctime'] = max($projects[$project_name]['info']['_info_file_ctime'], $file->info['_info_file_ctime']);
+      $projects[$project_name]['datestamp'] = max($projects[$project_name]['datestamp'], $file->info['datestamp']);
+      $projects[$project_name]['sub_themes'] = array_merge($projects[$project_name]['sub_themes'], $sub_themes);
+      $projects[$project_name]['base_themes'] = array_merge($projects[$project_name]['base_themes'], $base_themes);
     }
   }
 }
diff --git a/modules/update/update.info b/modules/update/update.info
index 8d7bd25..beef4b3 100644
--- a/modules/update/update.info
+++ b/modules/update/update.info
@@ -5,8 +5,8 @@ version = VERSION
 package = Core - optional
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/update/update.module b/modules/update/update.module
index c464737..ce6d7ce 100644
--- a/modules/update/update.module
+++ b/modules/update/update.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: update.module,v 1.17.2.5 2009/06/09 11:08:32 goba Exp $
+// $Id: update.module,v 1.17.2.6 2009/12/16 17:30:00 goba Exp $
 
 /**
  * @file
@@ -557,7 +557,7 @@ function _update_cache_set($cid, $data, $expire) {
   }
 }
 
-/** 
+/**
  * Retrieve data from the private update status cache table.
  *
  * @param $cid
@@ -585,7 +585,7 @@ function _update_cache_get($cid) {
  */
 function _update_cache_clear($cid = NULL) {
   if (empty($cid)) {
-    db_query("DELETE FROM {cache_update}");
+    db_query("TRUNCATE TABLE {cache_update}");
   }
   else {
     db_query("DELETE FROM {cache_update} WHERE cid = '%s'", $cid);
diff --git a/modules/update/update.report.inc b/modules/update/update.report.inc
index 58d5c07..147d978 100644
--- a/modules/update/update.report.inc
+++ b/modules/update/update.report.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: update.report.inc,v 1.10.2.4 2009/06/09 11:08:32 goba Exp $
+// $Id: update.report.inc,v 1.10.2.6 2009/11/06 07:26:21 goba Exp $
 
 /**
  * @file
@@ -183,12 +183,33 @@ function theme_update_report($data) {
     $row .= t('Includes: %includes', array('%includes' => implode(', ', $project['includes'])));
     $row .= "</div>\n";
 
+    if (!empty($project['base_themes'])) {
+      $row .= '<div class="basethemes">';
+      sort($project['base_themes']);
+      // We use !dependencies and manually call theme('placeholder') here to
+      // avoid breakding the D6 string freeze. This identical string is
+      // already in modules/system/system.admin.inc.
+      $row .= t('Depends on: !dependencies', array('!dependencies' => theme('placeholder', implode(', ', $project['base_themes']))));
+      $row .= "</div>\n";
+    }
+
+    if (!empty($project['sub_themes'])) {
+      $row .= '<div class="subthemes">';
+      sort($project['sub_themes']);
+      // We use !required and manually call theme('placeholder') here to avoid
+      // breakding the D6 string freeze. This identical string is already in
+      // modules/system/system.admin.inc.
+      $row .= t('Required by: !required', array('!required' => theme('placeholder', implode(', ', $project['sub_themes']))));
+      $row .= "</div>\n";
+    }
+
     $row .= "</div>\n"; // info div.
 
     if (!isset($rows[$project['project_type']])) {
       $rows[$project['project_type']] = array();
     }
-    $rows[$project['project_type']][] = array(
+    $row_key = isset($project['title']) ? drupal_strtolower($project['title']) : drupal_strtolower($project['name']);
+    $rows[$project['project_type']][$row_key] = array(
       'class' => $class,
       'data' => array($row),
     );
@@ -203,6 +224,7 @@ function theme_update_report($data) {
   );
   foreach ($project_types as $type_name => $type_label) {
     if (!empty($rows[$type_name])) {
+      ksort($rows[$type_name]);
       $output .= "\n<h3>". $type_label ."</h3>\n";
       $output .= theme('table', $header, $rows[$type_name], array('class' => 'update'));
     }
diff --git a/modules/upload/upload.info b/modules/upload/upload.info
index aa88f72..5e32619 100644
--- a/modules/upload/upload.info
+++ b/modules/upload/upload.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/user/user-profile.tpl.php b/modules/user/user-profile.tpl.php
index 3317e6e..d7e6d2c 100644
--- a/modules/user/user-profile.tpl.php
+++ b/modules/user/user-profile.tpl.php
@@ -1,5 +1,5 @@
 <?php
-// $Id: user-profile.tpl.php,v 1.2.2.1 2008/10/15 13:52:04 dries Exp $
+// $Id: user-profile.tpl.php,v 1.2.2.2 2009/10/06 11:50:06 goba Exp $
 
 /**
  * @file user-profile.tpl.php
@@ -25,21 +25,19 @@
  * markup for the group.
  *
  * To check for all available data within $profile, use the code below.
- *
  * @code
  *   print '<pre>'. check_plain(print_r($profile, 1)) .'</pre>';
  * @endcode
  *
- * @see user-profile-category.tpl.php
- *   Where the html is handled for the group.
- * @see user-profile-field.tpl.php
- *   Where the html is handled for each item in the group.
- *
  * Available variables:
  *   - $user_profile: All user profile data. Ready for print.
  *   - $profile: Keyed array of profile categories and their items or other data
  *     provided by modules.
  *
+ * @see user-profile-category.tpl.php
+ *   Where the html is handled for the group.
+ * @see user-profile-item.tpl.php
+ *   Where the html is handled for each item in the group.
  * @see template_preprocess_user_profile()
  */
 ?>
diff --git a/modules/user/user.info b/modules/user/user.info
index 1fbeaa9..f0558a8 100644
--- a/modules/user/user.info
+++ b/modules/user/user.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/modules/user/user.module b/modules/user/user.module
index f7a728b..da989cd 100644
--- a/modules/user/user.module
+++ b/modules/user/user.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: user.module,v 1.892.2.18 2009/09/16 17:54:19 goba Exp $
+// $Id: user.module,v 1.892.2.19 2009/11/06 07:36:34 goba Exp $
 
 /**
  * @file
@@ -1117,12 +1117,30 @@ function user_menu() {
   return $items;
 }
 
+/**
+ * Implementation of hook_init().
+ */
 function user_init() {
   drupal_add_css(drupal_get_path('module', 'user') .'/user.css', 'module');
 }
 
-function user_uid_optional_load($arg) {
-  return user_load(isset($arg) ? $arg : $GLOBALS['user']->uid);
+/**
+ * Load either a specified or the current user account.
+ *
+ * @param $uid
+ *   An optional user ID of the user to load. If not provided, the current
+ *   user's ID will be used.
+ * @return
+ *   A fully-loaded $user object upon successful user load, FALSE if user
+ *   cannot be loaded.
+ *
+ * @see user_load()
+ */
+function user_uid_optional_load($uid = NULL) {
+  if (!isset($uid)) {
+    $uid = $GLOBALS['user']->uid;
+  }
+  return user_load($uid);
 }
 
 /**
diff --git a/modules/user/user.pages.inc b/modules/user/user.pages.inc
index a71023f..361b9cd 100644
--- a/modules/user/user.pages.inc
+++ b/modules/user/user.pages.inc
@@ -146,12 +146,13 @@ function user_logout() {
 
   watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
 
-  // Destroy the current session, and reset $user to the anonymous user.
-  session_destroy();
   // Only variables can be passed by reference workaround.
   $null = NULL;
   user_module_invoke('logout', $null, $user);
 
+  // Destroy the current session, and reset $user to the anonymous user.
+  session_destroy();
+
   // Load the anonymous user
   $user = drupal_anonymous_user();
 
diff --git a/themes/bluemarine/bluemarine.info b/themes/bluemarine/bluemarine.info
index 2fc380d..ef8098e 100644
--- a/themes/bluemarine/bluemarine.info
+++ b/themes/bluemarine/bluemarine.info
@@ -5,8 +5,8 @@ version = VERSION
 core = 6.x
 engine = phptemplate
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/themes/bluemarine/logo.png b/themes/bluemarine/logo.png
old mode 100644
new mode 100755
diff --git a/themes/chameleon/chameleon.info b/themes/chameleon/chameleon.info
index 2e86cb8..461dc8c 100644
--- a/themes/chameleon/chameleon.info
+++ b/themes/chameleon/chameleon.info
@@ -12,8 +12,8 @@ stylesheets[all][] = common.css
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/themes/chameleon/logo.png b/themes/chameleon/logo.png
old mode 100644
new mode 100755
diff --git a/themes/chameleon/marvin/logo.png b/themes/chameleon/marvin/logo.png
old mode 100644
new mode 100755
diff --git a/themes/chameleon/marvin/marvin.info b/themes/chameleon/marvin/marvin.info
index 912f7df..79b2965 100644
--- a/themes/chameleon/marvin/marvin.info
+++ b/themes/chameleon/marvin/marvin.info
@@ -7,8 +7,8 @@ version = VERSION
 core = 6.x
 base theme = chameleon
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/themes/garland/garland.info b/themes/garland/garland.info
index 473f804..c42c0c2 100644
--- a/themes/garland/garland.info
+++ b/themes/garland/garland.info
@@ -7,8 +7,8 @@ engine = phptemplate
 stylesheets[all][] = style.css
 stylesheets[print][] = print.css
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/themes/garland/minnelli/minnelli.info b/themes/garland/minnelli/minnelli.info
index 4f9839b..586eb20 100644
--- a/themes/garland/minnelli/minnelli.info
+++ b/themes/garland/minnelli/minnelli.info
@@ -6,8 +6,8 @@ core = 6.x
 base theme = garland
 stylesheets[all][] = minnelli.css
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
diff --git a/themes/pushbutton/logo-active.jpg b/themes/pushbutton/logo-active.jpg
old mode 100644
new mode 100755
diff --git a/themes/pushbutton/logo-background.jpg b/themes/pushbutton/logo-background.jpg
old mode 100644
new mode 100755
diff --git a/themes/pushbutton/logo-hover.jpg b/themes/pushbutton/logo-hover.jpg
old mode 100644
new mode 100755
diff --git a/themes/pushbutton/logo.png b/themes/pushbutton/logo.png
old mode 100644
new mode 100755
diff --git a/themes/pushbutton/pushbutton.info b/themes/pushbutton/pushbutton.info
index 4bf1760..a5f9000 100644
--- a/themes/pushbutton/pushbutton.info
+++ b/themes/pushbutton/pushbutton.info
@@ -5,8 +5,8 @@ version = VERSION
 core = 6.x
 engine = phptemplate
 
-; Information added by drupal.org packaging script on 2009-09-16
-version = "6.14"
+; Information added by drupal.org packaging script on 2009-12-16
+version = "6.15"
 project = "drupal"
-datestamp = "1253130027"
+datestamp = "1260996916"
 
