diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index 99e4e54..8a24504 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,4 +1,10 @@
-// $Id: CHANGELOG.txt,v 1.253.2.29 2009/05/13 19:11:04 goba Exp $
+// $Id: CHANGELOG.txt,v 1.253.2.31 2009/07/01 20:51:55 goba Exp $
+
+Drupal 6.13, 2009-07-01
+----------------------
+- Fixed security issues (Cross site scripting, Input format access bypass and
+  Password leakage in URL), see SA-CORE-2009-007.
+- Fixed a variety of small bugs.
 
 Drupal 6.12, 2009-05-13
 ----------------------
@@ -186,6 +192,11 @@ Drupal 6.0, 2008-02-13
 - Removed old system updates. Updates from Drupal versions prior to 5.x will
   require upgrading to 5.x before upgrading to 6.x.
 
+Drupal 5.19, 2009-07-01
+-----------------------
+- Fixed security issues (Cross site scripting and Password leakage in URL), see SA-CORE-2009-007.
+- Fixed a variety of small bugs.
+
 Drupal 5.18, 2009-05-13
 ----------------------
 - Fixed security issues (Cross site scripting), see SA-CORE-2009-006.
diff --git a/PRESSFLOW.txt b/PRESSFLOW.txt
index 79294a7..6d48a23 100644
--- a/PRESSFLOW.txt
+++ b/PRESSFLOW.txt
@@ -1 +1 @@
-6.12.40
+6.13.49
diff --git a/includes/bootstrap.inc b/includes/bootstrap.inc
index d0c93dd..cb92fbc 100644
--- a/includes/bootstrap.inc
+++ b/includes/bootstrap.inc
@@ -389,6 +389,10 @@ function conf_init() {
   if (count(explode('.', $cookie_domain)) > 2 && !is_numeric(str_replace('.', '', $cookie_domain))) {
     ini_set('session.cookie_domain', $cookie_domain);
   }
+
+  // Use httponly session cookies.
+  ini_set('session.cookie_httponly', '1');
+
   session_name('SESS'. md5($session_name));
 }
 
@@ -557,7 +561,7 @@ function variable_del($name) {
 function page_get_cache() {
   global $user, $base_root;
 
-  if (page_is_cacheable()) {
+  if (drupal_page_is_cacheable()) {
     $cache = cache_get($base_root . request_uri(), 'cache_page');
 
     // Unserialize the cached page headers
@@ -571,14 +575,14 @@ function page_get_cache() {
   }
 }
 
-function page_is_cacheable($force = NULL) {
+function drupal_page_is_cacheable($force = NULL) {
   static $forced_cache = TRUE;
   if (isset($force)) {
     $forced_cache = $force;
   }
 
   $result = $forced_cache
-    && !drupal_session_is_started()
+    && !drupal_session_started()
     && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'HEAD')
     && !count(drupal_get_messages(NULL, FALSE))
     && $_SERVER['SERVER_SOFTWARE'] !== 'PHP CLI';
@@ -651,6 +655,18 @@ function drupal_set_header($name = NULL, $value = NULL, $append = FALSE) {
   if (!isset($name)) {
     return $headers;
   }
+  
+  // Support the Drupal 6 header API
+  if (!isset($value)) {
+    if (strpos($name, ':') !== FALSE) {
+      $parts = explode(':', $name);
+      $name = trim($parts[0]);
+      $value = trim($parts[1]);
+    }
+  }
+  if (substr($name, 0, 7) == 'HTTP/1.') {
+    $name = substr($name, 9);
+  }
 
   // Save status codes using the special key ":status".
   if (preg_match('/^\d{3} /', $name)) {
@@ -829,7 +845,7 @@ function drupal_page_cache_header(stdClass $cache) {
   // not bother caching the page in a public proxy, because the cached copy
   // will only be served to that particular user due to Vary: Cookie, unless
   // the Vary header has been replaced or unset in hook_boot() (see below).
-  $max_age = variable_get('cache', CACHE_NONE) == CACHE_AGGRESSIVE && (!isset($_COOKIE[session_name()]) || isset($hook_boot_headers['vary'])) ? variable_get('page_cache_max_age', 0) : 0;
+  $max_age = variable_get('cache', CACHE_DISABLED) == CACHE_AGGRESSIVE && (!isset($_COOKIE[session_name()]) || isset($hook_boot_headers['vary'])) ? variable_get('page_cache_max_age', 0) : 0;
   $default_headers['Cache-Control'] = 'public, max-age=' . $max_age;
 
   // Entity tag should change if the output changes.
@@ -1189,7 +1205,7 @@ function drupal_bootstrap($phase) {
 }
 
 function _drupal_bootstrap($phase) {
-  global $conf, $user;
+  global $conf, $user, $db_prefix;
 
   switch ($phase) {
 
@@ -1215,6 +1231,18 @@ function _drupal_bootstrap($phase) {
       break;
 
     case DRUPAL_BOOTSTRAP_DATABASE:
+      // The user agent header is used to pass a database prefix in the request when
+      // running tests. However, for security reasons, it is imperative that we
+      // validate we ourselves made the request.
+      $GLOBALS['simpletest_installed'] = TRUE;
+      if (isset($_SERVER['HTTP_USER_AGENT']) && (strpos($_SERVER['HTTP_USER_AGENT'], "simpletest") !== FALSE) && !drupal_valid_test_ua($_SERVER['HTTP_USER_AGENT'])) {
+        header($_SERVER['SERVER_PROTOCOL'] . ' 403 Forbidden');
+        exit;
+      }
+      if (isset($_SERVER['HTTP_USER_AGENT']) && preg_match("/^(simpletest\d+);/", $_SERVER['HTTP_USER_AGENT'], $matches)) {
+        $db_prefix .= $matches[1];
+      }
+
       // Initialize the default database.
       require_once './includes/database.inc';
       db_set_active();
@@ -1231,21 +1259,7 @@ function _drupal_bootstrap($phase) {
 
     case DRUPAL_BOOTSTRAP_SESSION:
       require_once variable_get('session_inc', './includes/session.inc');
-      session_set_save_handler('sess_open', 'sess_close', 'sess_read', 'sess_write', 'sess_destroy_sid', 'sess_gc');
-      // If a session cookie exists, initialize the session. Otherwise the
-      // session is only started on demand in drupal_session_start(), making
-      // anonymous users not use a session cookie unless something is stored in
-      // $_SESSION. This allows HTTP proxies to cache anonymous pageviews.
-      if (isset($_COOKIE[session_name()])) {
-        drupal_session_start();
-      }
-      else {
-        $user = drupal_anonymous_user();
-      }
-
-      // Register a shutdown handler to decide if we need to register a session.
-      register_shutdown_function('drupal_session_write');
-
+      drupal_session_initialize();
       break;
 
     case DRUPAL_BOOTSTRAP_LATE_PAGE_CACHE:
@@ -1280,7 +1294,7 @@ function _drupal_bootstrap($phase) {
         exit;
       }
   
-      if (!$cache && page_is_cacheable()) {
+      if (!$cache && drupal_page_is_cacheable()) {
         header('X-Drupal-Cache: MISS');
       }
 
@@ -1431,3 +1445,176 @@ function ip_address() {
 
   return $ip_address;
 }
+
+/**
+ * Initialize the session handler, starting a session if needed.
+ */
+function drupal_session_initialize() {
+  global $user;
+   
+  session_set_save_handler('sess_open', 'sess_close', 'sess_read', 'sess_write', 'sess_destroy_sid', 'sess_gc');
+ 
+  if (isset($_COOKIE[session_name()])) {
+    // If a session cookie exists, initialize the session. Otherwise the
+    // session is only started on demand in drupal_session_commit(), making
+    // anonymous users not use a session cookie unless something is stored in
+    // $_SESSION. This allows HTTP proxies to cache anonymous pageviews.
+    drupal_session_start();
+    if (!empty($user->uid) || !empty($_SESSION)) {
+      drupal_page_is_cacheable(FALSE);
+    }
+  }
+  else {
+    // Set a session identifier for this request. This is necessary because
+    // we lazyly start sessions at the end of this request, and some
+    // processes (like drupal_get_token()) needs to know the future
+    // session ID in advance.
+    $user = drupal_anonymous_user();
+    session_id(md5(uniqid('', TRUE)));
+  }
+}
+
+/**
+ * Forcefully start a session, preserving already set session data.
+ */
+function drupal_session_start() {
+  if (!drupal_session_started()) {
+    // Save current session data before starting it, as PHP will destroy it.
+    $session_data = isset($_SESSION) ? $_SESSION : NULL;
+    session_start();
+    drupal_session_started(TRUE);
+    // Restore session data.
+    if (!empty($session_data)) {
+      $_SESSION += $session_data;
+    }
+  }
+}
+
+/**
+ * Commit the current session, if necessary.
+ *
+ * If an anonymous user already has an empty session, destroy it.
+ */
+function drupal_session_commit() {
+  global $user;
+
+  if (empty($user->uid) && empty($_SESSION)) {
+    if (drupal_session_started() && drupal_save_session()) {
+      // Destroy empty anonymous sessions.
+      session_destroy();
+    }
+  }
+  else if (drupal_save_session()) {
+    if (!drupal_session_started()) {
+      drupal_session_start();
+    }
+    // Write the session data.
+    session_write_close();
+  }
+}
+
+/**
+ * Return whether a session has been started.
+ */  
+function drupal_session_started($set = NULL) {
+  static $session_started = FALSE;
+  if (isset($set)) {
+    $session_started = $set;
+  }
+  return $session_started && session_id();
+}
+
+/**
+ * Called when an anonymous user becomes authenticated or vice-versa.
+ */
+function drupal_session_regenerate() {
+  global $user;
+
+  // Set the session cookie "httponly" flag to reduce the risk of session
+  // stealing via XSS.
+  extract(session_get_cookie_params());
+
+  if (version_compare(PHP_VERSION, '5.2.0') === 1) {
+    session_set_cookie_params($lifetime, $path, $domain, $secure, TRUE);
+  }
+  else {
+    session_set_cookie_params($lifetime, $path, $domain, $secure);
+  }
+
+  if (drupal_session_started()) {
+    $old_session_id = session_id();
+    session_regenerate_id();
+  }
+  else {
+    // Start the session when it doesn't exist yet.
+    // Preserve the logged in user, as it will be reset to anonymous
+    // by _sess_read.
+    $account = $user;
+    drupal_session_start();
+    $user = $account;
+  }
+
+  if (isset($old_session_id)) {
+    db_query('UPDATE {sessions} SET sid = "%s" WHERE sid = "%s"', session_id(), $old_session_id);
+  }
+}
+
+/**
+ * Determine whether to save session data of the current request.
+ *
+ * This function allows the caller to temporarily disable writing of
+ * session data, should the request end while performing potentially
+ * dangerous operations, such as manipulating the global $user object.
+ * See http://drupal.org/node/218104 for usage.
+ *
+ * @param $status
+ *   Disables writing of session data when FALSE, (re-)enables
+ *   writing when TRUE.
+ * @return
+ *   FALSE if writing session data has been disabled. Otherwise, TRUE.
+ */
+function drupal_save_session($status = NULL) {
+  static $save_session = TRUE;
+  if (isset($status)) {
+    $save_session = $status;
+  }
+  return $save_session;
+}
+
+/**
+ * Validate the HMAC and timestamp of a user agent header from simpletest.
+ */
+function drupal_valid_test_ua($user_agent) {
+  global $db_url;
+
+  list($prefix, $time, $salt, $hmac) = explode(';', $user_agent);
+  $check_string =  $prefix . ';' . $time . ';' . $salt;
+  // We use the database credentials from settings.php to make the HMAC key, since
+  // the database is not yet initialized and we can't access any Drupal variables.
+  // The file properties add more entropy not easily accessible to others.
+  $filepath = './includes/bootstrap.inc';
+  $key = sha1(serialize($db_url) . filectime($filepath) . fileinode($filepath), TRUE);
+  // The HMAC must match.
+  return $hmac == base64_encode(hash_hmac('sha1', $check_string, $key, TRUE));
+}
+
+/**
+ * Generate a user agent string with a HMAC and timestamp for simpletest.
+ */
+function drupal_generate_test_ua($prefix) {
+//  global $dbatabases;
+  global $db_url;
+  static $key;
+
+  if (!isset($key)) {
+    // We use the database credentials to make the HMAC key, since we
+    // check the HMAC before the database is initialized. filectime()
+    // and fileinode() are not easily determined from remote.
+    $filepath = './includes/bootstrap.inc';
+    $key = sha1(serialize($db_url) . filectime($filepath) . fileinode($filepath), TRUE);
+  }
+   // Generate a moderately secure HMAC based on the database credentials.
+   $salt = uniqid('', TRUE);
+   $check_string = $prefix . ';' . time() . ';' . $salt;
+   return  $check_string . ';' . base64_encode(hash_hmac('sha1', $check_string, $key, TRUE));
+}
diff --git a/includes/cache.inc b/includes/cache.inc
index 50faf6d..ab6fd1f 100644
--- a/includes/cache.inc
+++ b/includes/cache.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: cache.inc,v 1.17.2.1 2009/04/27 14:23:58 goba Exp $
+// $Id: cache.inc,v 1.17.2.2 2009/05/26 08:10:33 goba Exp $
 
 /**
  * Return data from the persistent cache. Data may be stored as either plain text or as serialized data.
@@ -155,7 +155,7 @@ function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {
         variable_set('cache_flush_'. $table, time());
       }
       else if (time() > ($cache_flush + variable_get('cache_lifetime', 0))) {
-        // Clear the cache for everyone, cache_flush_delay seconds have
+        // Clear the cache for everyone, cache_lifetime seconds have
         // passed since the first request to clear the cache.
         db_query("DELETE FROM {". $table ."} WHERE expire != %d AND expire < %d", CACHE_PERMANENT, time());
         variable_set('cache_flush_'. $table, 0);
diff --git a/includes/common.inc b/includes/common.inc
index a73532f..87e4f96 100644
--- a/includes/common.inc
+++ b/includes/common.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: common.inc,v 1.756.2.52 2009/05/13 19:11:04 goba Exp $
+// $Id: common.inc,v 1.756.2.57 2009/07/01 20:51:55 goba Exp $
 
 /**
  * @file
@@ -316,7 +316,7 @@ function drupal_goto($path = '', $query = NULL, $fragment = NULL, $http_response
 
   // Even though session_write_close() is registered as a shutdown function,
   // we need all session data written to the database before redirecting.
-  drupal_session_write();
+  drupal_session_commit();
 
   header('Location: '. $url, TRUE, $http_response_code);
 
@@ -476,6 +476,16 @@ function drupal_http_request($url, $headers = array(), $method = 'GET', $data =
     $defaults['Authorization'] = 'Authorization: Basic '. base64_encode($uri['user'] . (!empty($uri['pass']) ? ":". $uri['pass'] : ''));
   }
 
+  // If the database prefix is being used by SimpleTest to run the tests in a copied
+  // database then set the user-agent header to the database prefix so that any
+  // calls to other Drupal pages will run the SimpleTest prefixed database. The
+  // user-agent is used to ensure that multiple testing sessions running at the
+  // same time won't interfere with each other as they would if the database
+  // prefix were stored statically in a file or database variable.
+  if (preg_match("/simpletest\d+/", $GLOBALS['db_prefix'], $matches)) {
+    $defaults['User-Agent'] = 'User-Agent: ' . $matches[0];
+  }
+
   foreach ($headers as $header => $value) {
     $defaults[$header] = $header .': '. $value;
   }
@@ -1564,7 +1574,7 @@ function drupal_page_footer() {
   global $user;
 
   // Write the session, and open one if needed.
-  drupal_session_write();
+  drupal_session_commit();
 
   if (variable_get('cache', CACHE_DISABLED) != CACHE_DISABLED) {
     page_set_cache();
@@ -1844,7 +1854,9 @@ function drupal_get_css($css = NULL) {
     }
 
     if ($is_writable && $preprocess_css) {
-      $filename = md5(serialize($types) . $query_string) .'.css';
+      // Prefix filename to prevent blocking by firewalls which reject files
+      // starting with "ad*".
+      $filename = 'css_'. md5(serialize($types) . $query_string) .'.css';
       $preprocess_file = drupal_build_css_cache($types, $filename);
       $output .= '<link type="text/css" rel="stylesheet" media="'. $media .'" href="'. base_path() . $preprocess_file .'" />'."\n";
     }
@@ -2192,7 +2204,9 @@ function drupal_get_js($scope = 'header', $javascript = NULL) {
 
   // Aggregate any remaining JS files that haven't already been output.
   if ($is_writable && $preprocess_js && count($files) > 0) {
-    $filename = md5(serialize($files) . $query_string) .'.js';
+    // Prefix filename to prevent blocking by firewalls which reject files
+    // starting with "ad*".
+    $filename = 'js_'. md5(serialize($files) . $query_string) .'.js';
     $preprocess_file = drupal_build_js_cache($files, $filename);
     $preprocessed .= '<script type="text/javascript" src="'. base_path() . $preprocess_file .'"></script>'."\n";
   }
@@ -2527,6 +2541,15 @@ function _drupal_bootstrap_full() {
   unicode_check();
   // Undo magic quotes
   fix_gpc_magic();
+
+  if (isset($_SERVER['HTTP_USER_AGENT']) && strpos($_SERVER['HTTP_USER_AGENT'], 'simpletest') !== FALSE) {
+    // Valid SimpleTest user-agent, log fatal errors to test specific file
+    // directory. The user-agent is validated in DRUPAL_BOOTSTRAP_DATABASE
+    // phase so as long as it is a SimpleTest user-agent it is valid.
+    ini_set('log_errors', 1);
+    ini_set('error_log', file_directory_path() . '/error.log');
+  }
+
   // Load all enabled modules
   module_load_all();
   // Let all modules take action before menu system handles the request
@@ -2552,7 +2575,7 @@ function _drupal_bootstrap_full() {
 function page_set_cache() {
   global $user, $base_root;
 
-  if (page_is_cacheable()) {
+  if (drupal_page_is_cacheable()) {
     $cache_page = TRUE;
 
     $cache_lifetime = variable_get('page_cache_lifetime', 0);
@@ -3651,9 +3674,269 @@ function drupal_flush_all_caches() {
 function _drupal_flush_css_js() {
   $string_history = variable_get('css_js_query_string', '00000000000000000000');
   $new_character = $string_history[0];
-  $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
+  // Not including 'q' to allow certain JavaScripts to re-use query string.
+  $characters = 'abcdefghijklmnoprstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
   while (strpos($string_history, $new_character) !== FALSE) {
     $new_character = $characters[mt_rand(0, strlen($characters) - 1)];
   }
   variable_set('css_js_query_string', $new_character . substr($string_history, 0, 19));
 }
+
+/**
+ * Error reporting level: display no errors.
+ */
+define('ERROR_REPORTING_HIDE', 0);
+
+/**
+ * Error reporting level: display errors and warnings.
+ */
+define('ERROR_REPORTING_DISPLAY_SOME', 1);
+
+/**
+ * Error reporting level: display all messages.
+ */
+define('ERROR_REPORTING_DISPLAY_ALL', 2);
+
+/**
+ * Custom PHP error handler.
+ *
+ * @param $error_level
+ *   The level of the error raised.
+ * @param $message
+ *   The error message.
+ * @param $filename
+ *   The filename that the error was raised in.
+ * @param $line
+ *   The line number the error was raised at.
+ * @param $context
+ *   An array that points to the active symbol table at the point the error occurred.
+ */
+function _drupal_error_handler($error_level, $message, $filename, $line, $context) {
+  if ($error_level & error_reporting()) {
+    // All these constants are documented at http://php.net/manual/en/errorfunc.constants.php
+    $types = array(
+      E_ERROR => 'Error',
+      E_WARNING => 'Warning',
+      E_PARSE => 'Parse error',
+      E_NOTICE => 'Notice',
+      E_CORE_ERROR => 'Core error',
+      E_CORE_WARNING => 'Core warning',
+      E_COMPILE_ERROR => 'Compile error',
+      E_COMPILE_WARNING => 'Compile warning',
+      E_USER_ERROR => 'User error',
+      E_USER_WARNING => 'User warning',
+      E_USER_NOTICE => 'User notice',
+      E_STRICT => 'Strict warning',
+      E_RECOVERABLE_ERROR => 'Recoverable fatal error'
+    );
+    $caller = _drupal_get_last_caller(debug_backtrace());
+
+    // We treat recoverable errors as fatal.
+    _drupal_log_error(array(
+      '%type' => isset($types[$error_level]) ? $types[$error_level] : 'Unknown error',
+      '%message' => $message,
+      '%function' => $caller['function'],
+      '%file' => $caller['file'],
+      '%line' => $caller['line'],
+    ), $error_level == E_RECOVERABLE_ERROR);
+  }
+}
+
+/**
+ * Custom PHP exception handler.
+ *
+ * Uncaught exceptions are those not enclosed in a try/catch block. They are
+ * always fatal: the execution of the script will stop as soon as the exception
+ * handler exits.
+ *
+ * @param $exception
+ *   The exception object that was thrown.
+ */
+function _drupal_exception_handler($exception) {
+  // Log the message to the watchdog and return an error page to the user.
+  _drupal_log_error(_drupal_decode_exception($exception), TRUE);
+}
+
+/**
+ * Decode an exception, especially to retrive the correct caller.
+ *
+ * @param $exception
+ *   The exception object that was thrown.
+ * @return An error in the format expected by _drupal_log_error().
+ */
+function _drupal_decode_exception($exception) {
+  $message = $exception->getMessage();
+
+  $backtrace = $exception->getTrace();
+  // Add the line throwing the exception to the backtrace.
+  array_unshift($backtrace, array('line' => $exception->getLine(), 'file' => $exception->getFile()));
+
+  // For PDOException errors, we try to return the initial caller,
+  // skipping internal functions of the database layer.
+  if ($exception instanceof PDOException) {
+    // The first element in the stack is the call, the second element gives us the caller.
+    // We skip calls that occurred in one of the classes of the database layer
+    // or in one of its global functions.
+    $db_functions = array('db_query', 'pager_query', 'db_query_range', 'db_query_temporary', 'update_sql');
+    while (!empty($backtrace[1]) && ($caller = $backtrace[1]) &&
+        ((isset($caller['class']) && (strpos($caller['class'], 'Query') !== FALSE || strpos($caller['class'], 'Database') !== FALSE || strpos($caller['class'], 'PDO') !== FALSE)) ||
+        in_array($caller['function'], $db_functions))) {
+      // We remove that call.
+      array_shift($backtrace);
+    }
+    if (isset($exception->query_string, $exception->args)) {
+      $message .= ": " . $exception->query_string . "; " . print_r($exception->args, TRUE);
+    }
+  }
+  $caller = _drupal_get_last_caller($backtrace);
+
+  return array(
+    '%type' => get_class($exception),
+    '%message' => $message,
+    '%function' => $caller['function'],
+    '%file' => $caller['file'],
+    '%line' => $caller['line'],
+  );
+}
+
+/**
+ * Log a PHP error or exception, display an error page in fatal cases.
+ *
+ * @param $error
+ *   An array with the following keys: %type, %message, %function, %file, %line.
+ * @param $fatal
+ *   TRUE if the error is fatal.
+ */
+function _drupal_log_error($error, $fatal = FALSE) {
+  // Initialize a maintenance theme if the boostrap was not complete.
+  // Do it early because drupal_set_message() triggers a drupal_theme_initialize().
+  if ($fatal && (drupal_get_bootstrap_phase() != DRUPAL_BOOTSTRAP_FULL)) {
+    unset($GLOBALS['theme']);
+    if (!defined('MAINTENANCE_MODE')) {
+      define('MAINTENANCE_MODE', 'error');
+    }
+    drupal_maintenance_theme();
+  }
+
+  // When running inside the testing framework, we relay the errors
+  // to the tested site by the way of HTTP headers.
+  if (isset($_SERVER['HTTP_USER_AGENT']) && preg_match("/^simpletest\d+;/", $_SERVER['HTTP_USER_AGENT']) && !headers_sent() && (!defined('SIMPLETEST_COLLECT_ERRORS') || SIMPLETEST_COLLECT_ERRORS)) {
+    // $number does not use drupal_static as it should not be reset
+    // as it uniquely identifies each PHP error.
+    static $number = 0;
+    $assertion = array(
+      $error['%message'],
+      $error['%type'],
+      array(
+        'function' => $error['%function'],
+        'file' => $error['%file'],
+        'line' => $error['%line'],
+      ),
+    );
+    header('X-Drupal-Assertion-' . $number . ': ' . rawurlencode(serialize($assertion)));
+    $number++;
+  }
+
+  try {
+    watchdog('php', '%type: %message in %function (line %line of %file).', $error, WATCHDOG_ERROR);
+  }
+  catch (Exception $e) {
+    // Ignore any additional watchdog exception, as that probably means
+    // that the database was not initialized correctly.
+  }
+
+  if ($fatal) {
+    drupal_set_header('500 Service unavailable (with message)');
+  }
+
+  if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest') {
+    if ($fatal) {
+      // When called from JavaScript, simply output the error message.
+      print t('%type: %message in %function (line %line of %file).', $error);
+      exit;
+    }
+  }
+  else {
+    // Display the message if the current error reporting level allows this type
+    // of message to be displayed, and unconditionnaly in update.php.
+    $error_level = variable_get('error_level', ERROR_REPORTING_DISPLAY_ALL);
+    $display_error = $error_level == ERROR_REPORTING_DISPLAY_ALL || ($error_level == ERROR_REPORTING_DISPLAY_SOME && $error['%type'] != 'Notice');
+    if ($display_error || (defined('MAINTENANCE_MODE') && MAINTENANCE_MODE == 'update')) {
+      $class = 'error';
+
+      // If error type is 'User notice' then treat it as debug information
+      // instead of an error message, see dd().
+      if ($error['%type'] == 'User notice') {
+        $error['%type'] = 'Debug';
+        $class = 'status';
+      }
+
+      drupal_set_message(t('%type: %message in %function (line %line of %file).', $error), $class);
+    }
+
+    if ($fatal) {
+      drupal_set_title(t('Error'));
+      // We fallback to a maintenance page at this point, because the page generation
+      // itself can generate errors.
+      print theme('maintenance_page', t('The website encountered an unexpected error. Please try again later.'));
+      exit;
+    }
+  }
+}
+
+/**
+ * Gets the last caller from a backtrace.
+ *
+ * @param $backtrace
+ *   A standard PHP backtrace.
+ * @return
+ *   An associative array with keys 'file', 'line' and 'function'.
+ */
+function _drupal_get_last_caller($backtrace) {
+  // Errors that occur inside PHP internal functions do not generate
+  // information about file and line. Ignore black listed functions.
+  $blacklist = array('debug');
+  while (($backtrace && !isset($backtrace[0]['line'])) ||
+         (isset($backtrace[1]['function']) && in_array($backtrace[1]['function'], $blacklist))) {
+    array_shift($backtrace);
+  }
+
+  // The first trace is the call itself.
+  // It gives us the line and the file of the last call.
+  $call = $backtrace[0];
+
+  // The second call give us the function where the call originated.
+  if (isset($backtrace[1])) {
+    if (isset($backtrace[1]['class'])) {
+      $call['function'] = $backtrace[1]['class'] . $backtrace[1]['type'] . $backtrace[1]['function'] . '()';
+    }
+    else {
+      $call['function'] = $backtrace[1]['function'] . '()';
+    }
+  }
+  else {
+    $call['function'] = 'main()';
+  }
+  return $call;
+}
+
+/**
+ * Debug function used for outputting debug information.
+ *
+ * The debug information is passed on to trigger_error() after being converted
+ * to a string using _drupal_debug_message().
+ *
+ * @param $data
+ *   Data to be output.
+ * @param $label
+ *   Label to prefix the data.
+ * @param $print_r
+ *   Flag to switch between print_r() and var_export() for data conversion to
+ *   string. Set $print_r to TRUE when dealing with a recursive data structure
+ *   as var_export() will generate an error.
+ */
+function debug($data, $label = NULL, $print_r = FALSE) {
+  // Print $data contents to string.
+  $string = $print_r ? print_r($data, TRUE) : var_export($data, TRUE);
+  trigger_error(trim($label ? "$label: $string" : $string));
+}
diff --git a/includes/database.inc b/includes/database.inc
index 72e48ed..c2eec8f 100644
--- a/includes/database.inc
+++ b/includes/database.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: database.inc,v 1.92.2.4 2009/02/16 14:41:58 goba Exp $
+// $Id: database.inc,v 1.92.2.5 2009/06/09 10:42:02 goba Exp $
 
 /**
  * @file
@@ -486,6 +486,8 @@ function db_escape_table($string) {
  *       just map to the according database engine specific
  *       datatypes.  Use 'serial' for auto incrementing fields. This
  *       will expand to 'int auto_increment' on mysql.
+ *     - 'serialize': A boolean indicating whether the field will be stored
+         as a serialized string.
  *     - 'size': The data size: 'tiny', 'small', 'medium', 'normal',
  *       'big'.  This is a hint about the largest value the field will
  *       store and determines which of the database engine specific
diff --git a/includes/database.pgsql.inc b/includes/database.pgsql.inc
index d26fb08..0939717 100644
--- a/includes/database.pgsql.inc
+++ b/includes/database.pgsql.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: database.pgsql.inc,v 1.68.2.4 2009/03/30 13:04:06 goba Exp $
+// $Id: database.pgsql.inc,v 1.68.2.5 2009/06/09 10:53:52 goba Exp $
 
 /**
  * @file
@@ -968,9 +968,20 @@ function db_change_field(&$ret, $table, $field, $field_new, $spec, $new_keys = a
   $not_null = isset($spec['not null']) ? $spec['not null'] : FALSE;
   unset($spec['not null']);
 
+  if (!array_key_exists('size', $spec)) {
+    $spec['size'] = 'normal';
+  }
   db_add_field($ret, $table, "$field_new", $spec);
 
-  $ret[] = update_sql("UPDATE {". $table ."} SET $field_new = ". $field ."_old");
+  // We need to type cast the new column to best transfer the data
+  // db_type_map will return possiblities that are not 'cast-able'
+  // such as serial - they must be made 'int' instead.
+  $map =  db_type_map();
+  $typecast = $map[$spec['type'] .':'. $spec['size']];
+  if (in_array($typecast, array('serial', 'bigserial', 'numeric'))) {
+    $typecast = 'int';
+  }
+  $ret[] = update_sql('UPDATE {'. $table .'} SET '. $field_new .' = CAST('. $field .'_old AS '. $typecast .')');
 
   if ($not_null) {
     $ret[] = update_sql("ALTER TABLE {". $table ."} ALTER $field_new SET NOT NULL");
diff --git a/includes/file.inc b/includes/file.inc
index 78536c3..c64a576 100644
--- a/includes/file.inc
+++ b/includes/file.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: file.inc,v 1.121.2.6 2009/04/13 19:07:16 dries Exp $
+// $Id: file.inc,v 1.121.2.7 2009/06/09 10:37:38 goba Exp $
 
 /**
  * @file
@@ -640,7 +640,7 @@ function file_validate_extensions($file, $extensions) {
  * @param $file_limit
  *   An integer specifying the maximum file size in bytes. Zero indicates that
  *   no limit should be enforced.
- * @param $$user_limit
+ * @param $user_limit
  *   An integer specifying the maximum number of bytes the user is allowed. Zero
  *   indicates that no limit should be enforced.
  * @return
@@ -657,8 +657,8 @@ function file_validate_size($file, $file_limit = 0, $user_limit = 0) {
       $errors[] = t('The file is %filesize exceeding the maximum file size of %maxsize.', array('%filesize' => format_size($file->filesize), '%maxsize' => format_size($file_limit)));
     }
 
-    $total_size = file_space_used($user->uid) + $file->filesize;
-    if ($user_limit && $total_size > $user_limit) {
+    // Save a query by only calling file_space_used() when a limit is provided.
+    if ($user_limit && (file_space_used($user->uid) + $file->filesize) > $user_limit) {
       $errors[] = t('The file is %filesize which would exceed your disk quota of %quota.', array('%filesize' => format_size($file->filesize), '%quota' => format_size($user_limit)));
     }
   }
diff --git a/includes/form.inc b/includes/form.inc
index 62568cc..be9da38 100644
--- a/includes/form.inc
+++ b/includes/form.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: form.inc,v 1.265.2.24 2009/05/13 18:22:29 goba Exp $
+// $Id: form.inc,v 1.265.2.25 2009/05/26 08:18:46 goba Exp $
 
 /**
  * @defgroup forms Form builder functions
@@ -1624,7 +1624,7 @@ function password_confirm_validate($form, &$form_state) {
   $pass1 = trim($form['pass1']['#value']);
   if (!empty($pass1)) {
     $pass2 = trim($form['pass2']['#value']);
-    if ($pass1 != $pass2) {
+    if (strcmp($pass1, $pass2)) {
       form_error($form, t('The specified passwords do not match.'));
     }
   }
diff --git a/includes/locale.inc b/includes/locale.inc
index 06f9c96..d244abf 100644
--- a/includes/locale.inc
+++ b/includes/locale.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: locale.inc,v 1.174.2.8 2009/04/08 02:54:00 dries Exp $
+// $Id: locale.inc,v 1.174.2.9 2009/06/18 12:50:33 goba Exp $
 
 /**
  * @file
@@ -847,8 +847,10 @@ function locale_string_is_safe($string) {
  * Validate string editing form submissions.
  */
 function locale_translate_edit_form_validate($form, &$form_state) {
+  // Locale string check is needed for default textgroup only.
+  $safe_check_needed = $form_state['values']['textgroup'] == 'default';
   foreach ($form_state['values']['translations'] as $key => $value) {
-    if (!locale_string_is_safe($value)) {
+    if ($safe_check_needed && !locale_string_is_safe($value)) {
       form_set_error('translations', t('The submitted string contains disallowed HTML: %string', array('%string' => $value)));
       watchdog('locale', 'Attempted submission of a translation string with disallowed HTML: %string', array('%string' => $value), WATCHDOG_WARNING);
     }
@@ -1340,7 +1342,9 @@ function _locale_import_one_string_db(&$report, $langcode, $source, $translation
 
   if (!empty($translation)) {
      // Skip this string unless it passes a check for dangerous code.
-     if (!locale_string_is_safe($translation)) {
+     // Text groups other than default still can contain HTML tags
+     // (i.e. translatable blocks).
+     if ($textgroup == "default" && !locale_string_is_safe($translation)) {
        $report['skips']++;
        $lid = 0;
      }
diff --git a/includes/mail.inc b/includes/mail.inc
index cb38967..7549927 100644
--- a/includes/mail.inc
+++ b/includes/mail.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: mail.inc,v 1.8.2.6 2009/04/27 11:07:43 goba Exp $
+// $Id: mail.inc,v 1.8.2.7 2009/06/18 12:15:44 goba Exp $
 
 /**
  * Compose and optionally send an e-mail message.
@@ -45,7 +45,7 @@
  *     switch($key) {
  *       case 'notice':
  *         $message['subject'] = t('Notification from !site', $variables, $language->language);
- *         $message['body'] = t("Dear !username\n\nThere is new content available on the site.", $variables, $language->language);
+ *         $message['body'][] = t("Dear !username\n\nThere is new content available on the site.", $variables, $language->language);
  *         break;
  *     }
  *   }
diff --git a/includes/pager.inc b/includes/pager.inc
index 06435e4..f0eaea4 100644
--- a/includes/pager.inc
+++ b/includes/pager.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: pager.inc,v 1.63 2007/12/06 09:58:30 goba Exp $
+// $Id: pager.inc,v 1.63.2.1 2009/07/01 20:51:55 goba Exp $
 
 /**
  * @file
@@ -96,7 +96,7 @@ function pager_query($query, $limit = 10, $element = 0, $count_query = NULL) {
 function pager_get_querystring() {
   static $string = NULL;
   if (!isset($string)) {
-    $string = drupal_query_string_encode($_REQUEST, array_merge(array('q', 'page'), array_keys($_COOKIE)));
+    $string = drupal_query_string_encode($_REQUEST, array_merge(array('q', 'page', 'pass'), array_keys($_COOKIE)));
   }
   return $string;
 }
diff --git a/includes/session.inc b/includes/session.inc
index 595eb4e..d7bd799 100644
--- a/includes/session.inc
+++ b/includes/session.inc
@@ -17,6 +17,12 @@ function sess_close() {
 function sess_read($key) {
   global $user;
 
+  // Write and Close handlers are called after destructing objects
+  // since PHP 5.0.5.
+  // Thus destructors can use sessions but session handler can't use objects.
+  // So we are moving session closure before destructing objects.
+  register_shutdown_function('session_write_close');
+
   // Handle the case of first time visitors and clients that don't store cookies (eg. web crawlers).
   if (!isset($_COOKIE[session_name()])) {
     $user = drupal_anonymous_user();
@@ -77,118 +83,13 @@ function sess_write($key, $value) {
 }
 
 /**
- * Propagate $_SESSION and set session cookie if not already set. This function
- * should be called before writing to $_SESSION, usually via
- * drupal_set_session().
- *
- * @param $start
- *   If FALSE, the session is not actually started. This is only used by
- *   drupal_session_is_started().
- * @return
- *   TRUE if session has already been started, or FALSE if it has not.
- */
-function drupal_session_start($start = TRUE) {
-  global $user;
-  static $started = FALSE;
-  if ($start && !$started) {
-    $started = TRUE;
-
-    // If the user had no session previously, save the user object and the
-    // session data set previously in this request as they will be overriden
-    // by sess_start().
-    if (!isset($_COOKIE[session_name()])) {
-      $saved_user = $user;
-      $saved_session = (array) $_SESSION;
-    }
-
-    // Start the session.
-    session_start();
-
-    // Restore session data.
-    if (!isset($_COOKIE[session_name()])) {
-      $user = $saved_user;
-      $_SESSION += $saved_session;
-    }
-  }
-  return $started;
-}
-
-/**
- * Return whether a session has been started and the $_SESSION variable is
- * available.
- */
-function drupal_session_is_started() {
-  $result = drupal_session_start(FALSE);
-  return $result;
-}
-
-/**
- * Write the session.
- */
-function drupal_session_write() {
-  if (!drupal_session_is_started() && !empty($_SESSION)) {
-    drupal_session_start();
-  }
-
-  session_write_close();
-}
-
-/**
- * Get a session variable.
- *
- * @param $name
- *   The name of the variable to get. If not supplied, all variables are returned.
- * @return
- *   The value of the variable, or FALSE if the variable is not set.
- */
-function drupal_get_session($name = NULL) {
-  if (is_null($name)) {
-    return $_SESSION;
-  }
-  elseif (isset($_SESSION[$name])) {
-    return $_SESSION[$name];
-  }
-  else {
-    return FALSE;
-  }
-}
-
-/**
- * Set a session variable. The variable becomes accessible via $_SESSION[$name]
- * in the current and later requests. If there is no active PHP session prior
- * to the call, one is started automatically.
- *
- * Anonymous users generate less server load if their $_SESSION variable is
- * empty, so unused entries should be unset using unset($_SESSION['foo']).
- *
- * @param $name
- *   The name of the variable to set.
- * @param $value
- *   The value to set.
- */
-function drupal_set_session($name, $value) {
-  drupal_session_start();
-  $_SESSION[$name] = $value;
-}
-
-/**
  * Called when an anonymous user becomes authenticated or vice-versa.
+ *
+ * This backport obsoletes this function, but a call to the new function
+ * is kept here to maximize API consistency.
  */
 function sess_regenerate() {
-  $old_session_id = session_id();
-
-  // We code around http://bugs.php.net/bug.php?id=32802 by destroying
-  // the session cookie by setting expiration in the past (a negative
-  // value).  This issue only arises in PHP versions before 4.4.0,
-  // regardless of the Drupal configuration.
-  // TODO: remove this when we require at least PHP 4.4.0
-  if (isset($_COOKIE[session_name()])) {
-    setcookie(session_name(), '', time() - 42000, '/');
-  }
-
-  session_regenerate_id();
-
-  db_query("UPDATE {sessions} SET sid = '%s' WHERE sid = '%s'", session_id(), $old_session_id);
+  drupal_session_regenerate();
 }
 
 /**
@@ -215,10 +116,26 @@ function sess_count($timestamp = 0, $anonymous = true) {
  *   the session id
  */
 function sess_destroy_sid($sid) {
+  // Delete session data.
   db_query("DELETE FROM {sessions} WHERE sid = '%s'", $sid);
-  // Unset cookie.
-  extract(session_get_cookie_params());
-  setcookie(session_name(), '', time() - 3600, $path, $domain, $secure, $httponly);
+
+  // If the session ID being destroyed is the one of the current user,
+  // clean-up his/her session data and cookie.
+  if ($sid == session_id()) {
+    global $user;
+
+    // Reset $_SESSION and $user to prevent a new session from being started
+    // in drupal_session_commit()
+    $_SESSION = array();
+    $user = drupal_anonymous_user();
+
+    // Unset the session cookie.
+    if (isset($_COOKIE[session_name()])) {
+      $params = session_get_cookie_params();
+      setcookie(session_name(), '', REQUEST_TIME - 3600, $params['path'], $params['domain'], $params['secure'], $params['httponly']);
+      unset($_COOKIE[session_name()]);
+    }
+  }
 }
 
 /**
@@ -243,21 +160,8 @@ function sess_gc($lifetime) {
 }
 
 /**
- * Determine whether to save session data of the current request.
- *
- * This function allows the caller to temporarily disable writing of session data,
- * should the request end while performing potentially dangerous operations, such as
- * manipulating the global $user object.  See http://drupal.org/node/218104 for usage
- *
- * @param $status
- *   Disables writing of session data when FALSE, (re-)enables writing when TRUE.
- * @return
- *   FALSE if writing session data has been disabled. Otherwise, TRUE.
+ * Renamed to drupal_save_session(). Stub kept here for API compatibility.
  */
 function session_save_session($status = NULL) {
-  static $save_session = TRUE;
-  if (isset($status)) {
-    $save_session = $status;
-  }
-  return ($save_session);
+  return drupal_save_session($status);
 }
diff --git a/includes/tablesort.inc b/includes/tablesort.inc
index cec37fc..e43176c 100644
--- a/includes/tablesort.inc
+++ b/includes/tablesort.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: tablesort.inc,v 1.47 2008/01/04 09:31:48 goba Exp $
+// $Id: tablesort.inc,v 1.47.2.1 2009/07/01 20:51:55 goba Exp $
 
 /**
  * @file
@@ -136,7 +136,7 @@ function tablesort_cell($cell, $header, $ts, $i) {
  *   except for those pertaining to table sorting.
  */
 function tablesort_get_querystring() {
-  return drupal_query_string_encode($_REQUEST, array_merge(array('q', 'sort', 'order'), array_keys($_COOKIE)));
+  return drupal_query_string_encode($_REQUEST, array_merge(array('q', 'sort', 'order', 'pass'), array_keys($_COOKIE)));
 }
 
 /**
diff --git a/includes/theme.inc b/includes/theme.inc
index 0fe9616..c7aa637 100644
--- a/includes/theme.inc
+++ b/includes/theme.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: theme.inc,v 1.415.2.22 2009/05/13 19:11:04 goba Exp $
+// $Id: theme.inc,v 1.415.2.24 2009/06/18 12:04:04 goba Exp $
 
 /**
  * @file
@@ -1632,7 +1632,7 @@ function theme_username($object) {
     $output .= ' ('. t('not verified') .')';
   }
   else {
-    $output = variable_get('anonymous', t('Anonymous'));
+    $output = check_plain(variable_get('anonymous', t('Anonymous')));
   }
 
   return $output;
@@ -1820,8 +1820,8 @@ function template_preprocess_page(&$variables) {
   $variables['primary_links']     = theme_get_setting('toggle_primary_links') ? menu_primary_links() : array();
   $variables['secondary_links']   = theme_get_setting('toggle_secondary_links') ? menu_secondary_links() : array();
   $variables['search_box']        = (theme_get_setting('toggle_search') ? drupal_get_form('search_theme_form') : '');
-  $variables['site_name']         = (theme_get_setting('toggle_name') ? variable_get('site_name', 'Pressflow') : '');
-  $variables['site_slogan']       = (theme_get_setting('toggle_slogan') ? variable_get('site_slogan', '') : '');
+  $variables['site_name']         = (theme_get_setting('toggle_name') ? filter_xss_admin(variable_get('site_name', 'Pressflow')) : '');
+  $variables['site_slogan']       = (theme_get_setting('toggle_slogan') ? filter_xss_admin(variable_get('site_slogan', '')) : '');
   $variables['css']               = drupal_add_css();
   $variables['styles']            = drupal_get_css();
   $variables['scripts']           = drupal_get_js();
diff --git a/install.php b/install.php
index 35bf709..eb646dd 100644
--- a/install.php
+++ b/install.php
@@ -17,14 +17,17 @@ define('MAINTENANCE_MODE', 'install');
  *   The installation phase we should proceed to.
  */
 function install_main() {
-  if (preg_match("/^simpletest\d+$/", $_SERVER['HTTP_USER_AGENT'])) {
-    header('HTTP/1.1 403 Forbidden');
-    exit;
-  }
-
   require_once './includes/bootstrap.inc';
   drupal_bootstrap(DRUPAL_BOOTSTRAP_CONFIGURATION);
 
+  // The user agent header is used to pass a database prefix in the request when
+  // running tests. However, for security reasons, it is imperative that no
+  // installation be permitted using such a prefix.
+  if (isset($_SERVER['HTTP_USER_AGENT']) && strpos($_SERVER['HTTP_USER_AGENT'], "simpletest") !== FALSE) {
+    header($_SERVER['SERVER_PROTOCOL'] . ' 403 Forbidden');
+    exit;
+  }
+
   // This must go after drupal_bootstrap(), which unsets globals!
   global $profile, $install_locale, $conf;
 
diff --git a/misc/tabledrag.js b/misc/tabledrag.js
index 7d459ec..3be8f67 100644
--- a/misc/tabledrag.js
+++ b/misc/tabledrag.js
@@ -1,4 +1,4 @@
-// $Id: tabledrag.js,v 1.13.2.4 2008/09/17 07:59:39 goba Exp $
+// $Id: tabledrag.js,v 1.13.2.5 2009/06/18 12:24:24 goba Exp $
 
 /**
  * Drag and drop table rows with field manipulation.
@@ -76,13 +76,15 @@ Drupal.tableDrag = function(table, tableSettings) {
     // manually append 2 indentations in the first draggable row, measure
     // the offset, then remove.
     var indent = Drupal.theme('tableDragIndentation');
-    var testCell = $('tr.draggable:first td:first', table).prepend(indent).prepend(indent);
+    // Match immediate children of the parent element to allow nesting.
+    var testCell = $('> tbody > tr.draggable:first td:first, > tr.draggable:first td:first', table).prepend(indent).prepend(indent);
     this.indentAmount = $('.indentation', testCell).get(1).offsetLeft - $('.indentation', testCell).get(0).offsetLeft;
     $('.indentation', testCell).slice(0, 2).remove();
   }
 
   // Make each applicable row draggable.
-  $('tr.draggable', table).each(function() { self.makeDraggable(this); });
+  // Match immediate children of the parent element to allow nesting.
+  $('> tr.draggable, > tbody > tr.draggable', table).each(function() { self.makeDraggable(this); });
 
   // Hide columns containing affected form elements.
   this.hideColumns();
@@ -112,9 +114,10 @@ Drupal.tableDrag.prototype.hideColumns = function(){
     // Hide the column containing this field.
     if (hidden && cell[0] && cell.css('display') != 'none') {
       // Add 1 to our indexes. The nth-child selector is 1 based, not 0 based.
-      var columnIndex = $('td', cell.parent()).index(cell.get(0)) + 1;
-      var headerIndex = $('td:not(:hidden)', cell.parent()).index(cell.get(0)) + 1;
-      $('tr', this.table).each(function(){
+      // Match immediate children of the parent element to allow nesting.
+      var columnIndex = $('> td', cell.parent()).index(cell.get(0)) + 1;
+      var headerIndex = $('> td:not(:hidden)', cell.parent()).index(cell.get(0)) + 1;
+      $('> thead > tr, > tbody > tr, > tr', this.table).each(function(){
         var row = $(this);
         var parentTag = row.parent().get(0).tagName.toLowerCase();
         var index = (parentTag == 'thead') ? headerIndex : columnIndex;
@@ -775,7 +778,8 @@ Drupal.tableDrag.prototype.setScroll = function(scrollAmount) {
 Drupal.tableDrag.prototype.restripeTable = function() {
   // :even and :odd are reversed because jquery counts from 0 and
   // we count from 1, so we're out of sync.
-  $('tr.draggable', this.table)
+  // Match immediate children of the parent element to allow nesting.
+  $('> tbody > tr.draggable, > tr.draggable', this.table)
     .filter(':odd').filter('.odd')
       .removeClass('odd').addClass('even')
     .end().end()
diff --git a/misc/teaser.js b/misc/teaser.js
index c865788..321197f 100644
--- a/misc/teaser.js
+++ b/misc/teaser.js
@@ -1,4 +1,4 @@
-// $Id: teaser.js,v 1.12 2008/01/09 12:10:04 goba Exp $
+// $Id: teaser.js,v 1.12.2.1 2009/05/20 11:50:54 goba Exp $
 
 /**
  * Auto-attach for teaser behavior.
@@ -71,10 +71,10 @@ Drupal.behaviors.teaser = function(context) {
     $(include).parent().parent().before(button);
 
     // Extract the teaser from the body, if set. Otherwise, stay in joined mode.
-    var text = body.val().split('<!--break-->', 2);
-    if (text.length == 2) {
-      teaser[0].value = trim(text[0]);
-      body[0].value = trim(text[1]);
+    var text = body.val().split('<!--break-->');
+    if (text.length >= 2) {
+      teaser[0].value = trim(text.shift());
+      body[0].value = trim(text.join('<!--break-->'));
       $(teaser).attr('disabled', '');
       $('input', button).val(Drupal.t('Join summary')).toggle(join_teaser, split_teaser);
     }
diff --git a/modules/aggregator/aggregator.info b/modules/aggregator/aggregator.info
index 155448e..6e4b6a2 100644
--- a/modules/aggregator/aggregator.info
+++ b/modules/aggregator/aggregator.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/block/block.info b/modules/block/block.info
index 1aafd2a..57c45b1 100644
--- a/modules/block/block.info
+++ b/modules/block/block.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/blog/blog.info b/modules/blog/blog.info
index 7102ea2..9841daf 100644
--- a/modules/blog/blog.info
+++ b/modules/blog/blog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/blogapi/blogapi.info b/modules/blogapi/blogapi.info
index 8892c94..eda4231 100644
--- a/modules/blogapi/blogapi.info
+++ b/modules/blogapi/blogapi.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/book/book.info b/modules/book/book.info
index ac821e3..b90ba34 100644
--- a/modules/book/book.info
+++ b/modules/book/book.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/color/color.info b/modules/color/color.info
index 5f649c4..6545911 100644
--- a/modules/color/color.info
+++ b/modules/color/color.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/color/color.module b/modules/color/color.module
index 045fa45..993b5d0 100644
--- a/modules/color/color.module
+++ b/modules/color/color.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: color.module,v 1.39.2.1 2009/02/25 11:47:37 goba Exp $
+// $Id: color.module,v 1.39.2.2 2009/05/16 16:09:21 dries Exp $
 
 /**
  * Implementation of hook_help().
@@ -203,7 +203,7 @@ function color_scheme_form(&$form_state, $theme) {
 /**
  * Theme color form.
  *
- * @ingroup @themeable
+ * @ingroup themeable
  */
 function theme_color_scheme_form($form) {
   // Include stylesheet
diff --git a/modules/comment/comment.info b/modules/comment/comment.info
index 67d5e8c..2c6c6ce 100644
--- a/modules/comment/comment.info
+++ b/modules/comment/comment.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/comment/comment.module b/modules/comment/comment.module
index 2df900e..4e57c7d 100644
--- a/modules/comment/comment.module
+++ b/modules/comment/comment.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: comment.module,v 1.617.2.7 2009/05/13 17:15:10 goba Exp $
+// $Id: comment.module,v 1.617.2.8 2009/07/01 20:51:55 goba Exp $
 
 /**
  * @file
@@ -936,7 +936,7 @@ function comment_render($node, $cid = 0) {
 
     if ($cid && is_numeric($cid)) {
       // Single comment view.
-      $query = 'SELECT c.cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.picture, u.data, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d';
+      $query = 'SELECT c.cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d';
       $query_args = array($cid);
       if (!user_access('administer comments')) {
         $query .= ' AND c.status = %d';
@@ -957,7 +957,7 @@ function comment_render($node, $cid = 0) {
     else {
       // Multiple comment view
       $query_count = 'SELECT COUNT(*) FROM {comments} c WHERE c.nid = %d';
-      $query = 'SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.picture, u.data, c.thread, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d';
+      $query = 'SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.thread, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d';
 
       $query_args = array($nid);
       if (!user_access('administer comments')) {
@@ -1468,7 +1468,7 @@ function comment_form_add_preview($form, &$form_state) {
   $output = '';
 
   if ($edit['pid']) {
-    $comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.signature, u.picture, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = %d', $edit['pid'], COMMENT_PUBLISHED));
+    $comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = %d', $edit['pid'], COMMENT_PUBLISHED));
     $comment = drupal_unpack($comment);
     $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
     $output .= theme('comment_view', $comment, $node);
@@ -1778,14 +1778,14 @@ function theme_comment_thread_expanded($comment, $node) {
 function theme_comment_post_forbidden($node) {
   global $user;
   static $authenticated_post_comments;
-  
+
   if (!$user->uid) {
     if (!isset($authenticated_post_comments)) {
       // We only output any link if we are certain, that users get permission
       // to post comments by logging in. We also locally cache this information.
       $authenticated_post_comments = array_key_exists(DRUPAL_AUTHENTICATED_RID, user_roles(TRUE, 'post comments') + user_roles(TRUE, 'post comments without approval'));
     }
-    
+
     if ($authenticated_post_comments) {
       // We cannot use drupal_get_destination() because these links
       // sometimes appear on /node and taxonomy listing pages.
diff --git a/modules/comment/comment.pages.inc b/modules/comment/comment.pages.inc
index 32905e9..b74d7d8 100644
--- a/modules/comment/comment.pages.inc
+++ b/modules/comment/comment.pages.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: comment.pages.inc,v 1.2.2.1 2008/02/07 18:53:38 goba Exp $
+// $Id: comment.pages.inc,v 1.2.2.2 2009/07/01 20:51:55 goba Exp $
 
 /**
  * @file
@@ -70,7 +70,7 @@ function comment_reply($node, $pid = NULL) {
       // $pid indicates that this is a reply to a comment.
       if ($pid) {
         // load the comment whose cid = $pid
-        if ($comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.signature, u.picture, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = %d', $pid, COMMENT_PUBLISHED))) {
+        if ($comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = %d', $pid, COMMENT_PUBLISHED))) {
           // If that comment exists, make sure that the current comment and the parent comment both
           // belong to the same parent node.
           if ($comment->nid != $node->nid) {
diff --git a/modules/contact/contact.info b/modules/contact/contact.info
index 707f985..3e462ac 100644
--- a/modules/contact/contact.info
+++ b/modules/contact/contact.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/dblog/dblog.info b/modules/dblog/dblog.info
index e956fb3..dd99b27 100644
--- a/modules/dblog/dblog.info
+++ b/modules/dblog/dblog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/filter/filter.info b/modules/filter/filter.info
index 022add5..027702a 100644
--- a/modules/filter/filter.info
+++ b/modules/filter/filter.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/forum/forum.admin.inc b/modules/forum/forum.admin.inc
index c074d7e..b0df7ee 100644
--- a/modules/forum/forum.admin.inc
+++ b/modules/forum/forum.admin.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: forum.admin.inc,v 1.8 2008/01/30 10:14:42 goba Exp $
+// $Id: forum.admin.inc,v 1.8.2.1 2009/05/26 08:13:00 goba Exp $
 
 /**
  * @file
@@ -220,7 +220,6 @@ function forum_overview(&$form_state) {
   $vid = variable_get('forum_nav_vocabulary', '');
   $vocabulary = taxonomy_vocabulary_load($vid);
   $form = taxonomy_overview_terms($form_state, $vocabulary);
-  drupal_set_title('Forums');
 
   foreach (element_children($form) as $key) {
     if (isset($form[$key]['#term'])) {
diff --git a/modules/forum/forum.info b/modules/forum/forum.info
index 30113e5..9f39cc6 100644
--- a/modules/forum/forum.info
+++ b/modules/forum/forum.info
@@ -7,8 +7,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/forum/forum.module b/modules/forum/forum.module
index fd650aa..57eb60e 100644
--- a/modules/forum/forum.module
+++ b/modules/forum/forum.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: forum.module,v 1.448.2.6 2009/03/30 11:09:51 goba Exp $
+// $Id: forum.module,v 1.448.2.7 2009/06/03 18:27:48 goba Exp $
 
 /**
  * @file
@@ -679,11 +679,11 @@ function template_preprocess_forums(&$variables) {
     if (empty($forum_types)) {
       // The user is logged-in; but denied access to create any new forum content type.
       if ($user->uid) {
-        $forum_types['disallowed'] = array('title' => t('You are not allowed to post new content in forum.'));
+        $forum_types['disallowed'] = array('title' => t('You are not allowed to post new content in the forum.'));
       }
       // The user is not logged-in; and denied access to create any new forum content type.
       else {
-        $forum_types['login'] = array('title' => t('<a href="@login">Login</a> to post new content in forum.', array('@login' => url('user/login', array('query' => drupal_get_destination())))), 'html' => TRUE);
+        $forum_types['login'] = array('title' => t('<a href="@login">Login</a> to post new content in the forum.', array('@login' => url('user/login', array('query' => drupal_get_destination())))), 'html' => TRUE);
       }
     }
     $variables['links'] = $forum_types;
diff --git a/modules/forum/forum.pages.inc b/modules/forum/forum.pages.inc
index b4138cf..6d7db19 100644
--- a/modules/forum/forum.pages.inc
+++ b/modules/forum/forum.pages.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: forum.pages.inc,v 1.2 2007/07/26 06:48:03 dries Exp $
+// $Id: forum.pages.inc,v 1.2.2.1 2009/07/01 20:51:55 goba Exp $
 
 /**
  * @file
@@ -10,6 +10,11 @@
  * Menu callback; prints a forum listing.
  */
 function forum_page($tid = 0) {
+  if (!is_numeric($tid)) {
+    return MENU_NOT_FOUND;
+  }
+  $tid = (int)$tid;
+
   $topics = '';
   $forum_per_page = variable_get('forum_per_page', 25);
   $sortby = variable_get('forum_order', 1);
diff --git a/modules/help/help.info b/modules/help/help.info
index a4714a5..96bec38 100644
--- a/modules/help/help.info
+++ b/modules/help/help.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/locale/locale.info b/modules/locale/locale.info
index 5932d3c..68c3ce0 100644
--- a/modules/locale/locale.info
+++ b/modules/locale/locale.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/menu/menu.info b/modules/menu/menu.info
index 6746e8c..e24dcaa 100644
--- a/modules/menu/menu.info
+++ b/modules/menu/menu.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/node/node.admin.inc b/modules/node/node.admin.inc
index 50db45e..5782fdd 100644
--- a/modules/node/node.admin.inc
+++ b/modules/node/node.admin.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: node.admin.inc,v 1.19.2.2 2008/11/10 10:31:06 goba Exp $
+// $Id: node.admin.inc,v 1.19.2.3 2009/06/08 16:45:34 goba Exp $
 
 /**
  * @file
@@ -10,24 +10,19 @@
  * Menu callback; presents general node configuration options.
  */
 function node_configure() {
-  // Only show rebuild button if there are either 0, or 2 or more, rows
-  // in the {node_access} table, or if there are modules that
-  // implement hook_node_grants().
-  if (db_result(db_query('SELECT COUNT(*) FROM {node_access}')) != 1 || count(module_implements('node_grants')) > 0) {
-    $status = '<p>'. t('If the site is experiencing problems with permissions to content, you may have to rebuild the permissions cache. Possible causes for permission problems are disabling modules or configuration changes to permissions. Rebuilding will remove all privileges to posts, and replace them with permissions based on the current modules and settings.') .'</p>';
-    $status .= '<p>'. t('Rebuilding may take some time if there is a lot of content or complex permission settings. After rebuilding has completed posts will automatically use the new permissions.') .'</p>';
-
-    $form['access'] = array(
-      '#type' => 'fieldset',
-      '#title' => t('Node access status'),
-    );
-    $form['access']['status'] = array('#value' => $status);
-    $form['access']['rebuild'] = array(
-      '#type' => 'submit',
-      '#value' => t('Rebuild permissions'),
-      '#submit' => array('node_configure_access_submit'),
-    );
-  }
+  $status = '<p>'. t('If the site is experiencing problems with permissions to content, you may have to rebuild the permissions cache. Possible causes for permission problems are disabling modules or configuration changes to permissions. Rebuilding will remove all privileges to posts, and replace them with permissions based on the current modules and settings.') .'</p>';
+  $status .= '<p>'. t('Rebuilding may take some time if there is a lot of content or complex permission settings. After rebuilding has completed posts will automatically use the new permissions.') .'</p>';
+
+  $form['access'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Node access status'),
+  );
+  $form['access']['status'] = array('#value' => $status);
+  $form['access']['rebuild'] = array(
+    '#type' => 'submit',
+    '#value' => t('Rebuild permissions'),
+    '#submit' => array('node_configure_access_submit'),
+  );
 
   $form['default_nodes_main'] = array(
     '#type' => 'select', '#title' => t('Number of posts on main page'), '#default_value' => variable_get('default_nodes_main', 10),
diff --git a/modules/node/node.info b/modules/node/node.info
index 0aeeb8d..078fa6d 100644
--- a/modules/node/node.info
+++ b/modules/node/node.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/openid/openid.info b/modules/openid/openid.info
index 572ca60..1bef2dc 100644
--- a/modules/openid/openid.info
+++ b/modules/openid/openid.info
@@ -5,8 +5,8 @@ version = VERSION
 package = Core - optional
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/openid/openid.module b/modules/openid/openid.module
index 4d84c55..235173a 100644
--- a/modules/openid/openid.module
+++ b/modules/openid/openid.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: openid.module,v 1.19.2.5 2009/03/30 11:36:47 goba Exp $
+// $Id: openid.module,v 1.19.2.6 2009/06/10 14:05:23 goba Exp $
 
 /**
  * @file
@@ -44,8 +44,8 @@ function openid_menu() {
 function openid_help($path, $arg) {
   switch ($path) {
     case 'user/%/openid':
-      $output = '<p>'. t('This site supports <a href="@openid-net">OpenID</a>, a secure way to log into many websites using a single username and password. OpenID can reduce the necessity of managing many usernames and passwords for many websites.', array('@openid-net' => url('http://openid.net'))) .'</p>';
-      $output .= '<p>'. t('To use OpenID you must first establish an identity on a public or private OpenID server. If you do not have an OpenID and would like one, look into one of the <a href="@openid-providers">free public providers</a>. You can find out more about OpenID at <a href="@openid-net">this website</a>.', array('@openid-providers' => url('http://openid.net/wiki/index.php/OpenIDServers'), '@openid-net' => url('http://openid.net'))) .'</p>';
+      $output = '<p>'. t('This site supports <a href="@openid-net">OpenID</a>, a secure way to log into many websites using a single username and password. OpenID can reduce the necessity of managing many usernames and passwords for many websites.', array('@openid-net' => 'http://openid.net')) .'</p>';
+      $output .= '<p>'. t('To use OpenID you must first establish an identity on a public or private OpenID server. If you do not have an OpenID and would like one, look into one of the <a href="@openid-providers">free public providers</a>. You can find out more about OpenID at <a href="@openid-net">this website</a>.', array('@openid-providers' => 'http://openid.net/get/', '@openid-net' => 'http://openid.net')) .'</p>';
       $output .= '<p>'. t('If you already have an OpenID, enter the URL to your OpenID server below (e.g. myusername.openidprovider.com). Next time you login, you will be able to use this URL instead of a regular username and password. You can have multiple OpenID servers if you like; just keep adding them here.') .'</p>';
       return $output;
 
diff --git a/modules/path/path.info b/modules/path/path.info
index 4cc8d6f..583a3c6 100644
--- a/modules/path/path.info
+++ b/modules/path/path.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/php/php.info b/modules/php/php.info
index c92951e..7030091 100644
--- a/modules/php/php.info
+++ b/modules/php/php.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/ping/ping.info b/modules/ping/ping.info
index bda74d9..1b6fb75 100644
--- a/modules/ping/ping.info
+++ b/modules/ping/ping.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/poll/poll.info b/modules/poll/poll.info
index 58afc58..5940d1f 100644
--- a/modules/poll/poll.info
+++ b/modules/poll/poll.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/profile/profile.info b/modules/profile/profile.info
index e4fc88d..526f1d4 100644
--- a/modules/profile/profile.info
+++ b/modules/profile/profile.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/search/search.info b/modules/search/search.info
index 036a2f7..76a8b6e 100644
--- a/modules/search/search.info
+++ b/modules/search/search.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/simpletest/BACKPORT.txt b/modules/simpletest/BACKPORT.txt
index b967731..37e300b 100644
--- a/modules/simpletest/BACKPORT.txt
+++ b/modules/simpletest/BACKPORT.txt
@@ -1,4 +1,4 @@
-$Id: BACKPORT.txt,v 1.1.2.5 2009/04/23 05:39:52 boombatower Exp $
+$Id: BACKPORT.txt,v 1.1.2.7 2009/09/14 23:03:27 boombatower Exp $
 
 AUTHOR
 ------
@@ -23,10 +23,6 @@ DrupalWebTestCase
 -----------------
 Document as described above.
 
-Error/Exception handling (simpletest.function.inc)
----------------------------------------------
-The necessary core error/exception handling function from common.inc.
-
 SimpleTest module (simpletest.module)
 -------------------------------------
   * simpletest_get_all_tests()
@@ -41,7 +37,7 @@ SimpleTest module (simpletest.module)
 
 SimpleTest installer (simpletest.install)
 -----------------------------------------
-  * Added update hooks.
+  * Added update hook.
   * Added requirements check for configuration file modifications.
 
 JavaScript (simpletest.js)
diff --git a/modules/simpletest/CHANGELOG.txt b/modules/simpletest/CHANGELOG.txt
index 0c02b3e..9aac06a 100644
--- a/modules/simpletest/CHANGELOG.txt
+++ b/modules/simpletest/CHANGELOG.txt
@@ -1,7 +1,27 @@
-// $Id: CHANGELOG.txt,v 1.1.2.80 2009/04/23 05:41:34 boombatower Exp $
+// $Id: CHANGELOG.txt,v 1.1.2.97 2009/09/14 23:22:56 boombatower Exp $
 
-SimpleTest 6.x-2.9, xxxx-xx-xx (development version)
+SimpleTest 6.x-2.9, 2009-09-14
 ------------------------------
+- Changes:
+   * #576256: Theme laying needs to be initialized during setUp().
+   * Correct comment on previous workaround.
+   * #400296 by neilnz: Make simpletest_get_like_tables() work in MySQL and PostgreSQL.
+   * #573822: Update SimpleTestMailCaptureTestCase from simpletest.test.
+   * #577324 by Dave Reid: Module tests with extending submodule tests not included correctly.
+- Bugs:
+   * #442890: HEAD info left in simpletest.info.
+   * #474394 by RockyRoad: block.test should treat delta as string.
+- Backports:
+   * #335756: SimpleTest: $this->originalFileDirectory should be set before
+              installation to ensure non-standard directories are picked up.
+   * #567422: Fresh backport of Drupal 7 SimpleTest.
+   * #545228: Missing D7 constants.
+   * Remove simpletest.function.inc.
+   * Correct file_scan_directory() $mask parameter API change.
+   * Correct another 'class' atrribute as array().
+   * Update files.
+   * Changes to install.php included in D6 core patch.
+   * #577496: drupal_mail_wrapper() conflicts.
 
 SimpleTest 6.x-2.8, 2009-04-23
 ------------------------------
diff --git a/modules/simpletest/INSTALL.txt b/modules/simpletest/INSTALL.txt
index d3e69d7..b7dadd3 100644
--- a/modules/simpletest/INSTALL.txt
+++ b/modules/simpletest/INSTALL.txt
@@ -1,4 +1,4 @@
-$Id: INSTALL.txt,v 1.6.4.15 2009/03/23 03:36:21 boombatower Exp $
+$Id: INSTALL.txt,v 1.6.4.16 2009/09/05 13:34:10 boombatower Exp $
 
 AUTHOR
 ------
@@ -10,44 +10,24 @@ The php-curl library is required for SimpleTest to function.
 
 INSTALLATION
 ------------
-1. Add the following code to the bottom of your site's settings.php file. If
-   you are running Windows make sure you encode the file with the UNIX
-   standard.
-
-   $GLOBALS['simpletest_installed'] = TRUE;
-   if (preg_match("/^simpletest\d+$/", $_SERVER['HTTP_USER_AGENT'])) {
-     $db_prefix = $_SERVER['HTTP_USER_AGENT'];
-   }
+1. Apply the D6-core-simpletest.patch file to the Drupal 6 core.
 
 2. (Optional)
-   It is hightly recommonded, but not neccessary, that you add the following
-   code to install.php at the beginning of install_main(). Should look like
-   7.x branch of Drupal core.
-
-   // The user agent header is used to pass a database prefix in the request when
-   // running tests. However, for security reasons, it is imperative that no
-   // installation be permitted using such a prefix.
-   if (preg_match("/^simpletest\d+$/", $_SERVER['HTTP_USER_AGENT'])) {
-     header($_SERVER['SERVER_PROTOCOL'] . ' 403 Forbidden');
-     exit;
-   }
-
-3. (Optional)
    Apply the "Show fatal errors in tests" batch to misc/drupal.js if you want
    the reason for test failure to be displayed on the batch API screen. The
    patch can be found at:
    http://drupal.org/files/issues/simpletest_drupal.js_.patch.
 
-4. (Optional)
+3. (Optional)
    Move/Copy the run-tests.sh file into the Drupal scripts folder. The script
    allows the tests to be run from the command line.
 
-5. Go to Administer >> Site building >> Modules (admin/build/modules) and
+4. Go to Administer >> Site building >> Modules (admin/build/modules) and
    enable the SimpleTest module.
 
-6. Go to Administer >> Site building >> Testing (admin/build/testing) to
+5. Go to Administer >> Site building >> Testing (admin/build/testing) to
    begin using the module.
 
-7. (Optional)
+6. (Optional)
    Go to Administer >> Help >> SimpleTest (admin/help/simpletest)
    for more information on how to use the SimpleTest module.
diff --git a/modules/simpletest/drupal_web_test_case.php b/modules/simpletest/drupal_web_test_case.php
index 06edf02..e78a730 100644
--- a/modules/simpletest/drupal_web_test_case.php
+++ b/modules/simpletest/drupal_web_test_case.php
@@ -1,6 +1,7 @@
 <?php
-// $Id: drupal_web_test_case.php,v 1.2.2.3.2.37 2009/04/23 05:39:52 boombatower Exp $
-// Core: Id: drupal_web_test_case.php,v 1.96 2009/04/22 09:57:10 dries Exp
+// $Id: drupal_web_test_case.php,v 1.2.2.3.2.43 2009/09/14 23:22:56 boombatower Exp $
+// Core: Id: drupal_web_test_case.php,v 1.146 2009/08/31 18:30:26 webchick Exp $
+
 /**
  * @file
  * Provide required modifications to Drupal 7 core DrupalWebTestCase in order
@@ -12,10 +13,11 @@
 module_load_include('function.inc', 'simpletest');
 
 /**
- * Test case for typical Drupal tests.
+ * Base class for Drupal tests.
+ *
+ * Do not extend this class, use one of the subclasses in this file.
  */
-class DrupalWebTestCase {
-
+abstract class DrupalTestCase {
   /**
    * The test run ID.
    *
@@ -24,70 +26,6 @@ class DrupalWebTestCase {
   protected $testId;
 
   /**
-   * The URL currently loaded in the internal browser.
-   *
-   * @var string
-   */
-  protected $url;
-
-  /**
-   * The handle of the current cURL connection.
-   *
-   * @var resource
-   */
-  protected $curlHandle;
-
-  /**
-   * The headers of the page currently loaded in the internal browser.
-   *
-   * @var Array
-   */
-  protected $headers;
-
-  /**
-   * The content of the page currently loaded in the internal browser.
-   *
-   * @var string
-   */
-  protected $content;
-
-  /**
-   * The content of the page currently loaded in the internal browser (plain text version).
-   *
-   * @var string
-   */
-  protected $plainTextContent;
-
-  /**
-   * The parsed version of the page.
-   *
-   * @var SimpleXMLElement
-   */
-  protected $elements = NULL;
-
-  /**
-   * The current user logged in using the internal browser.
-   *
-   * @var bool
-   */
-  protected $loggedInUser = FALSE;
-
-  /**
-   * The current cookie file used by cURL.
-   *
-   * We do not reuse the cookies in further runs, so we do not need a file
-   * but we still need cookie handling, so we set the jar to NULL.
-   */
-  protected $cookieFile = NULL;
-
-  /**
-   * Additional cURL options.
-   *
-   * DrupalWebTestCase itself never sets this but always obeys what is set.
-   */
-  protected $additionalCurlOptions = array();
-
-  /**
    * The original database prefix, before it was changed for testing purposes.
    *
    * @var string
@@ -102,11 +40,9 @@ class DrupalWebTestCase {
   protected $originalFileDirectory = NULL;
 
   /**
-   * The original user, before it was changed to a clean uid = 1 for testing purposes.
-   *
-   * @var object
+   * Time limit for the test.
    */
-  protected $originalUser = NULL;
+  protected $timeLimit = 180;
 
   /**
    * Current results of this test case.
@@ -117,6 +53,7 @@ class DrupalWebTestCase {
     '#pass' => 0,
     '#fail' => 0,
     '#exception' => 0,
+    '#debug' => 0,
   );
 
   /**
@@ -127,10 +64,14 @@ class DrupalWebTestCase {
   protected $assertions = array();
 
   /**
-   * Time limit for the test.
+   * This class is skipped when looking for the source of an assertion.
+   *
+   * When displaying which function an assert comes from, it's not too useful
+   * to see "drupalWebTestCase->drupalLogin()', we would like to see the test
+   * that called it. So we need to skip the classes defining these helper
+   * methods.
    */
-  protected $timeLimit = 180;
-
+  protected $skipClasses = array(__CLASS__ => TRUE);
 
   /**
    * Constructor for DrupalWebTestCase.
@@ -159,7 +100,7 @@ class DrupalWebTestCase {
    *   the name of the source file, 'line' is the line number and 'function'
    *   is the caller function itself.
    */
-  private function assert($status, $message = '', $group = 'Other', array $caller = NULL) {
+  protected function assert($status, $message = '', $group = 'Other', array $caller = NULL) {
     global $db_prefix;
 
     // Convert boolean status to string status.
@@ -192,14 +133,66 @@ class DrupalWebTestCase {
     );
 
     // Store assertion for display after the test has completed.
-//    db_insert('simpletest')->fields($assertion)->execute();
+//    db_insert('simpletest')
+//      ->fields($assertion)
+//      ->execute();
     db_query("INSERT INTO {simpletest}
               (test_id, test_class, status, message, message_group, function, line, file)
-              VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s')", array_values($assertion));
+              VALUES (%d, '%s', '%s', '%s', '%s', '%s', %d, '%s')", array_values($assertion));
 
     // Return to testing prefix.
     $db_prefix = $current_db_prefix;
-    return $status == 'pass' ? TRUE : FALSE;
+    // We do not use a ternary operator here to allow a breakpoint on
+    // test failure.
+    if ($status == 'pass') {
+      return TRUE;
+    }
+    else {
+      return FALSE;
+    }
+  }
+
+  /**
+   * Store an assertion from outside the testing context.
+   *
+   * This is useful for inserting assertions that can only be recorded after
+   * the test case has been destroyed, such as PHP fatal errors. The caller
+   * information is not automatically gathered since the caller is most likely
+   * inserting the assertion on behalf of other code. In all other respects
+   * the method behaves just like DrupalTestCase::assert() in terms of storing
+   * the assertion.
+   *
+   * @see DrupalTestCase::assert()
+   */
+  public static function insertAssert($test_id, $test_class, $status, $message = '', $group = 'Other', array $caller = array()) {
+    // Convert boolean status to string status.
+    if (is_bool($status)) {
+      $status = $status ? 'pass' : 'fail';
+    }
+
+    $caller += array(
+      'function' => t('Unknown'),
+      'line' => 0,
+      'file' => t('Unknown'),
+    );
+
+    $assertion = array(
+      'test_id' => $test_id,
+      'test_class' => $test_class,
+      'status' => $status,
+      'message' => $message,
+      'message_group' => $group,
+      'function' => $caller['function'],
+      'line' => $caller['line'],
+      'file' => $caller['file'],
+    );
+
+//    db_insert('simpletest')
+//      ->fields($assertion)
+//      ->execute();
+    db_query("INSERT INTO {simpletest}
+              (test_id, test_class, status, message, message_group, function, line, file)
+              VALUES (%d, '%s', '%s', '%s', '%s', '%s', %d, '%s')", array_values($assertion));
   }
 
   /**
@@ -212,11 +205,11 @@ class DrupalWebTestCase {
     $backtrace = debug_backtrace();
 
     // The first element is the call. The second element is the caller.
-    // We skip calls that occurred in one of the methods of DrupalWebTestCase
+    // We skip calls that occurred in one of the methods of our base classes
     // or in an assertion function.
-    while (($caller = $backtrace[1]) &&
-          ((isset($caller['class']) && $caller['class'] == 'DrupalWebTestCase') ||
-            substr($caller['function'], 0, 6) == 'assert')) {
+   while (($caller = $backtrace[1]) &&
+         ((isset($caller['class']) && isset($this->skipClasses[$caller['class']])) ||
+           substr($caller['function'], 0, 6) == 'assert')) {
       // We remove that call.
       array_shift($backtrace);
     }
@@ -401,6 +394,12 @@ class DrupalWebTestCase {
    *   FALSE.
    */
   protected function error($message = '', $group = 'Other', array $caller = NULL) {
+    if ($group == 'User notice') {
+      // Since 'User notice' is set by trigger_error() which is used for debug
+      // set the message to a status of 'debug'.
+      return $this->assert('debug', $message, 'Debug', $caller);
+    }
+
     return $this->assert('exception', $message, $group, $caller);
   }
 
@@ -408,6 +407,17 @@ class DrupalWebTestCase {
    * Run all tests in this class.
    */
   public function run() {
+    // Initialize verbose debugging.
+    simpletest_verbose(NULL, file_directory_path(), get_class($this));
+
+    // HTTP auth settings (<username>:<password>) for the simpletest browser
+    // when sending requests to the test site.
+    $username = variable_get('simpletest_username', NULL);
+    $password = variable_get('simpletest_password', NULL);
+    if ($username && $password) {
+      $this->httpauth_credentials = $username . ':' . $password;
+    }
+
     set_error_handler(array($this, 'errorHandler'));
     $methods = array();
     // Iterate through all the methods in this class.
@@ -473,6 +483,206 @@ class DrupalWebTestCase {
   }
 
   /**
+   * Generates a random string of ASCII characters of codes 32 to 126.
+   *
+   * The generated string includes alpha-numeric characters and common misc
+   * characters. Use this method when testing general input where the content
+   * is not restricted.
+   *
+   * @param $length
+   *   Length of random string to generate which will be appended to $db_prefix.
+   * @return
+   *   Randomly generated string.
+   */
+  public static function randomString($length = 8) {
+    global $db_prefix;
+
+    $str = '';
+    for ($i = 0; $i < $length; $i++) {
+      $str .= chr(mt_rand(32, 126));
+    }
+    return str_replace('simpletest', 's', $db_prefix) . $str;
+  }
+
+  /**
+   * Generates a random string containing letters and numbers.
+   *
+   * The letters may be upper or lower case. This method is better for
+   * restricted inputs that do not accept certain characters. For example,
+   * when testing input fields that require machine readable values (ie without
+   * spaces and non-standard characters) this method is best.
+   *
+   * @param $length
+   *   Length of random string to generate which will be appended to $db_prefix.
+   * @return
+   *   Randomly generated string.
+   */
+  public static function randomName($length = 8) {
+    global $db_prefix;
+
+    $values = array_merge(range(65, 90), range(97, 122), range(48, 57));
+    $max = count($values) - 1;
+    $str = '';
+    for ($i = 0; $i < $length; $i++) {
+      $str .= chr($values[mt_rand(0, $max)]);
+    }
+    return str_replace('simpletest', 's', $db_prefix) . $str;
+  }
+
+}
+
+/**
+ * Test case for Drupal unit tests.
+ *
+ * These tests can not access the database nor files. Calling any Drupal
+ * function that needs the database will throw exceptions. These include
+ * watchdog(), function_exists(), module_implements(),
+ * module_invoke_all() etc.
+ */
+class DrupalUnitTestCase extends DrupalTestCase {
+
+  /**
+   * Constructor for DrupalUnitTestCase.
+   */
+  function __construct($test_id = NULL) {
+    parent::__construct($test_id);
+    $this->skipClasses[__CLASS__] = TRUE;
+  }
+
+  function setUp() {
+    global $db_prefix, $conf;
+
+    // Store necessary current values before switching to prefixed database.
+    $this->originalPrefix = $db_prefix;
+    $this->originalFileDirectory = file_directory_path();
+
+    // Generate temporary prefixed database to ensure that tests have a clean starting point.
+    $db_prefix = Database::getConnection()->prefixTables('{simpletest' . mt_rand(1000, 1000000) . '}');
+    $conf['file_public_path'] = $this->originalFileDirectory . '/' . $db_prefix;
+
+    // If locale is enabled then t() will try to access the database and
+    // subsequently will fail as the database is not accessible.
+    $module_list = module_list();
+    if (isset($module_list['locale'])) {
+      $this->originalModuleList = $module_list;
+      unset($module_list['locale']);
+      module_list(TRUE, FALSE, FALSE, $module_list);
+    }
+  }
+
+  function tearDown() {
+    global $db_prefix, $conf;
+    if (preg_match('/simpletest\d+/', $db_prefix)) {
+      $conf['file_public_path'] = $this->originalFileDirectory;
+      // Return the database prefix to the original.
+      $db_prefix = $this->originalPrefix;
+      // Restore modules if necessary.
+      if (isset($this->originalModuleList)) {
+        module_list(TRUE, FALSE, FALSE, $this->originalModuleList);
+      }
+    }
+  }
+}
+
+/**
+ * Test case for typical Drupal tests.
+ */
+class DrupalWebTestCase extends DrupalTestCase {
+  /**
+   * The URL currently loaded in the internal browser.
+   *
+   * @var string
+   */
+  protected $url;
+
+  /**
+   * The handle of the current cURL connection.
+   *
+   * @var resource
+   */
+  protected $curlHandle;
+
+  /**
+   * The headers of the page currently loaded in the internal browser.
+   *
+   * @var Array
+   */
+  protected $headers;
+
+  /**
+   * The content of the page currently loaded in the internal browser.
+   *
+   * @var string
+   */
+  protected $content;
+
+  /**
+   * The content of the page currently loaded in the internal browser (plain text version).
+   *
+   * @var string
+   */
+  protected $plainTextContent;
+
+  /**
+   * The parsed version of the page.
+   *
+   * @var SimpleXMLElement
+   */
+  protected $elements = NULL;
+
+  /**
+   * The current user logged in using the internal browser.
+   *
+   * @var bool
+   */
+  protected $loggedInUser = FALSE;
+
+  /**
+   * The current cookie file used by cURL.
+   *
+   * We do not reuse the cookies in further runs, so we do not need a file
+   * but we still need cookie handling, so we set the jar to NULL.
+   */
+  protected $cookieFile = NULL;
+
+  /**
+   * Additional cURL options.
+   *
+   * DrupalWebTestCase itself never sets this but always obeys what is set.
+   */
+  protected $additionalCurlOptions = array();
+
+  /**
+   * The original user, before it was changed to a clean uid = 1 for testing purposes.
+   *
+   * @var object
+   */
+  protected $originalUser = NULL;
+
+  /**
+   * HTTP authentication credentials (<username>:<password>).
+   */
+  protected $httpauth_credentials = NULL;
+
+  /**
+   * The current session name, if available.
+   */
+  protected $session_name = NULL;
+
+  /**
+   * The current session ID, if available.
+   */
+  protected $session_id = NULL;
+
+  /**
+   * Constructor for DrupalWebTestCase.
+   */
+  function __construct($test_id = NULL) {
+    parent::__construct($test_id);
+    $this->skipClasses[__CLASS__] = TRUE;
+  }
+
+  /**
    * Get a node from the database based on its title.
    *
    * @param title
@@ -494,13 +704,14 @@ class DrupalWebTestCase {
    *
    * @param $settings
    *   An associative array of settings to change from the defaults, keys are
-   *   node properties, for example 'body' => 'Hello, world!'.
+   *   node properties, for example 'title' => 'Hello, world!'.
    * @return
    *   Created node object.
    */
   protected function drupalCreateNode($settings = array()) {
-    // Populate defaults array
+    // Populate defaults array.
     $settings += array(
+//      'body'      => array(FIELD_LANGUAGE_NONE => array(array())),
       'body'      => $this->randomName(32),
       'title'     => $this->randomName(8),
       'comment'   => 2,
@@ -523,11 +734,6 @@ class DrupalWebTestCase {
       $settings['date'] = format_date($settings['created'], 'custom', 'Y-m-d H:i:s O');
     }
 
-    // Add the default teaser.
-    if (!isset($settings['teaser'])) {
-      $settings['teaser'] = $settings['body'];      
-    }
-
     // If the node's user uid is not specified manually, use the currently
     // logged in user if available, or else the user running the test.
     if (!isset($settings['uid'])) {
@@ -540,11 +746,21 @@ class DrupalWebTestCase {
       }
     }
 
+//    // Merge body field value and format separately.
+//    $body = array(
+//      'value' => $this->randomName(32),
+//      'format' => FILTER_FORMAT_DEFAULT
+//    );
+//    $settings['body'][FIELD_LANGUAGE_NONE][0] += $body;
+
     $node = (object) $settings;
     node_save($node);
 
-    // small hack to link revisions to our test user
-//    db_query('UPDATE {node_revision} SET uid = %d WHERE vid = %d', $node->uid, $node->vid);
+    // Small hack to link revisions to our test user.
+//    db_update('node_revision')
+//      ->fields(array('uid' => $node->uid))
+//      ->condition('vid', $node->vid)
+//      ->execute();
     db_query('UPDATE {node_revisions} SET uid = %d WHERE vid = %d', $node->uid, $node->vid);
     return $node;
   }
@@ -559,24 +775,26 @@ class DrupalWebTestCase {
    *   Created content type.
    */
   protected function drupalCreateContentType($settings = array()) {
-    // find a non-existent random type name.
+    // Find a non-existent random type name.
     do {
+//      $name = strtolower($this->randomName(8));
+//    } while (node_type_get_type($name));
       $name = strtolower($this->randomName(3, 'type_'));
     } while (node_get_types('type', $name));
 
-    // Populate defaults array
+    // Populate defaults array.
     $defaults = array(
       'type' => $name,
       'name' => $name,
       'description' => '',
       'help' => '',
-      'min_word_count' => 0,
+      'min_word_count' => 0, // Drupal 6.
       'title_label' => 'Title',
       'body_label' => 'Body',
       'has_title' => 1,
       'has_body' => 1,
     );
-    // imposed values for a custom type
+    // Imposed values for a custom type.
     $forced = array(
       'orig_type' => '',
       'old_type' => '',
@@ -615,7 +833,7 @@ class DrupalWebTestCase {
 
     // Make sure type is valid.
     if (in_array($type, array('binary', 'html', 'image', 'javascript', 'php', 'sql', 'text'))) {
-     // Use original file directory instead of one created during setUp().
+      // Use original file directory instead of one created during setUp().
       $path = $this->originalFileDirectory . '/simpletest';
 //      $files = file_scan_directory($path, '/' . $type . '\-.*/');
       $files = file_scan_directory($path, '' . $type . '\-.*');
@@ -623,10 +841,10 @@ class DrupalWebTestCase {
       // If size is set then remove any files that are not of that size.
       if ($size !== NULL) {
         foreach ($files as $file) {
-//          $stats = stat($file->filepath);
+//          $stats = stat($file->uri);
           $stats = stat($file->filename);
           if ($stats['size'] != $size) {
-//            unset($files[$file->filepath]);
+//            unset($files[$file->uri]);
             unset($files[$file->filename]);
           }
         }
@@ -640,7 +858,7 @@ class DrupalWebTestCase {
    * Compare two files based on size and file name.
    */
   protected function drupalCompareFiles($file1, $file2) {
-//    $compare_size = filesize($file1->filepath) - filesize($file2->filepath);
+//    $compare_size = filesize($file1->uri) - filesize($file2->uri);
     $compare_size = filesize($file1->filename) - filesize($file2->filename);
     if ($compare_size) {
       // Sort by file size.
@@ -653,27 +871,6 @@ class DrupalWebTestCase {
   }
 
   /**
-   * Generates a random string.
-   *
-   * @param $number
-   *   Number of characters in length to append to the prefix.
-   * @param $prefix
-   *   Prefix to use.
-   * @return
-   *   Randomly generated string.
-   */
-  public static function randomName($number = 4, $prefix = 'simpletest_') {
-    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_';
-    for ($x = 0; $x < $number; $x++) {
-      $prefix .= $chars{mt_rand(0, strlen($chars) - 1)};
-      if ($x == 0) {
-        $chars .= '0123456789';
-      }
-    }
-    return $prefix;
-  }
-
-  /**
    * Create a user with a given set of permissions. The permissions correspond to the
    * names given on the privileges page.
    *
@@ -683,9 +880,9 @@ class DrupalWebTestCase {
    *   A fully loaded user object with pass_raw property, or FALSE if account
    *   creation fails.
    */
-  protected function drupalCreateUser($permissions = NULL) {
+  protected function drupalCreateUser($permissions = array('access comments', 'access content', 'post comments', 'post comments without approval')) {
     // Create a role with the given permission set.
-    if (!($rid = $this->_drupalCreateRole($permissions))) {
+    if (!($rid = $this->drupalCreateRole($permissions))) {
       return FALSE;
     }
 
@@ -714,32 +911,34 @@ class DrupalWebTestCase {
    *
    * @param $permissions
    *   Array of permission names to assign to role.
+   * @param $name
+   *   (optional) String for the name of the role.  Defaults to a random string.
    * @return
    *   Role ID of newly created role, or FALSE if role creation failed.
    */
-  protected function _drupalCreateRole(array $permissions = NULL) {
-    // Generate string version of permissions list.
-    if ($permissions === NULL) {
-      $permissions = array('access comments', 'access content', 'post comments', 'post comments without approval');
+  protected function drupalCreateRole(array $permissions, $name = NULL) {
+    // Generate random name if it was not passed.
+    if (!$name) {
+      $name = $this->randomName();
     }
 
+    // Check the all the permissions strings are valid.
     if (!$this->checkPermissions($permissions)) {
       return FALSE;
     }
 
     // Create new role.
-    $role_name = $this->randomName();
-    db_query("INSERT INTO {role} (name) VALUES ('%s')", $role_name);
-    $role = db_fetch_object(db_query("SELECT * FROM {role} WHERE name = '%s'", $role_name));
-    $this->assertTrue($role, t('Created role of name: @role_name, id: @rid', array('@role_name' => $role_name, '@rid' => (isset($role->rid) ? $role->rid : t('-n/a-')))), t('Role'));
+//    $role = new stdClass();
+//    $role->name = $name;
+//    user_role_save($role);
+//    user_role_set_permissions($role->name, $permissions);
+    db_query("INSERT INTO {role} (name) VALUES ('%s')", $name);
+    $role = db_fetch_object(db_query("SELECT * FROM {role} WHERE name = '%s'", $name));
+
+    $this->assertTrue(isset($role->rid), t('Created role of name: @name, id: @rid', array('@name' => $name, '@rid' => (isset($role->rid) ? $role->rid : t('-n/a-')))), t('Role'));
     if ($role && !empty($role->rid)) {
-//      // Assign permissions to role and mark it for clean-up.
-//      foreach ($permissions as $permission_string) {
-//        db_query("INSERT INTO {role_permission} (rid, permission) VALUES (%d, '%s')", $role->rid, $permission_string);
-//      }
-//      $count = db_result(db_query("SELECT COUNT(*) FROM {role_permission} WHERE rid = %d", $role->rid));
+//      $count = db_query('SELECT COUNT(*) FROM {role_permission} WHERE rid = :rid', array(':rid' => $role->rid))->fetchField();
 //      $this->assertTrue($count == count($permissions), t('Created permissions: @perms', array('@perms' => implode(', ', $permissions))), t('Role'));
-//      return $role->rid;
 
       // Assign permissions to role and mark it for clean-up.
       db_query("INSERT INTO {permission} (rid, perm) VALUES (%d, '%s')", $role->rid, implode(', ', $permissions));
@@ -763,10 +962,11 @@ class DrupalWebTestCase {
    *   TRUE or FALSE depending on whether the permissions are valid.
    */
   protected function checkPermissions(array $permissions, $reset = FALSE) {
+//    $available = &drupal_static(__FUNCTION__);
     static $available;
 
     if (!isset($available) || $reset) {
-//      $available = array_keys(module_invoke_all('perm'));
+//      $available = array_keys(module_invoke_all('permission'));
       $available = module_invoke_all('perm');
     }
 
@@ -818,25 +1018,32 @@ class DrupalWebTestCase {
     );
     $this->drupalPost('user', $edit, t('Log in'));
 
-    $pass = $this->assertText($user->name, t('Found name: %name', array('%name' => $user->name)), t('User login'));
-    $pass = $pass && $this->assertNoText(t('The username %name has been blocked.', array('%name' => $user->name)), t('No blocked message at login page'), t('User login'));
-    $pass = $pass && $this->assertNoText(t('The name %name is a reserved username.', array('%name' => $user->name)), t('No reserved message at login page'), t('User login'));
+    // If a "log out" link appears on the page, it is almost certainly because
+    // the login was successful.
+    $pass = $this->assertLink(t('Log out'), 0, t('User %name successfully logged in.', array('%name' => $user->name)), t('User login'));
 
     if ($pass) {
       $this->loggedInUser = $user;
     }
   }
 
+  /**
+   * Generate a token for the currently logged in user.
+   */
+  protected function drupalGetToken($value = '') {
+    $private_key = drupal_get_private_key();
+    return md5($this->session_id . $value . $private_key);
+  }
+
   /*
    * Logs a user out of the internal browser, then check the login page to confirm logout.
    */
   protected function drupalLogout() {
-    // Make a request to the logout page.
-//    $this->drupalGet('user/logout');
-    $this->drupalGet('logout');
-
-    // Load the user page, the idea being if you were properly logged out you should be seeing a login screen.
-    $this->drupalGet('user');
+    // Make a request to the logout page, and redirect to the user page, the
+    // idea being if you were properly logged out you should be seeing a login
+    // screen.
+//    $this->drupalGet('user/logout', array('query' => 'destination=user'));
+    $this->drupalGet('logout', array('query' => 'destination=user'));
     $pass = $this->assertField('name', t('Username field found.'), t('Logout'));
     $pass = $pass && $this->assertField('pass', t('Password field found.'), t('Logout'));
 
@@ -856,21 +1063,48 @@ class DrupalWebTestCase {
    *   List of modules to enable for the duration of the test.
    */
   protected function setUp() {
-    global $db_prefix, $user, $language; // $language (Drupal 6).
+    global $db_prefix, $user, $language;
 
     // Store necessary current values before switching to prefixed database.
+    $this->originalLanguage = $language;
+//    $this->originalLanguageDefault = variable_get('language_default');
     $this->originalPrefix = $db_prefix;
+    $this->originalFileDirectory = file_directory_path();
+//    $this->originalProfile = drupal_get_profile();
     $clean_url_original = variable_get('clean_url', 0);
 
-    // Must reset locale here, since schema calls t().  (Drupal 6)
+    // Must reset locale here, since schema calls t(). (Drupal 6)
     if (module_exists('locale')) {
       $language = (object) array('language' => 'en', 'name' => 'English', 'native' => 'English', 'direction' => 0, 'enabled' => 1, 'plurals' => 0, 'formula' => '', 'domain' => '', 'prefix' => '', 'weight' => 0, 'javascript' => '');
       locale(NULL, NULL, TRUE);
     }
 
     // Generate temporary prefixed database to ensure that tests have a clean starting point.
-//    $db_prefix = Database::getConnection()->prefixTables('{simpletest' . mt_rand(1000, 1000000) . '}');
-    $db_prefix = 'simpletest' . mt_rand(1000, 1000000);
+//    $db_prefix_new = Database::getConnection()->prefixTables('{simpletest' . mt_rand(1000, 1000000) . '}');
+    $db_prefix_new = $db_prefix . 'simpletest' . mt_rand(1000, 1000000);
+
+    // Workaround to insure we init the theme layer before going into prefixed
+    // environment. (Drupal 6)
+    $this->pass(t('Starting run with db_prefix %prefix', array('%prefix' => $db_prefix_new)), 'System');
+
+//    db_update('simpletest_test_id')
+//      ->fields(array('last_prefix' => $db_prefix_new))
+//      ->condition('test_id', $this->testId)
+//      ->execute();
+    db_query("UPDATE {simpletest_test_id}
+              SET last_prefix = '%s'
+              WHERE test_id = %d", $db_prefix_new, $this->testId);
+    $db_prefix = $db_prefix_new;
+
+    // Create test directory ahead of installation so fatal errors and debug
+    // information can be logged during installation process.
+    $directory = $this->originalFileDirectory . '/simpletest/' . substr($db_prefix, 10);
+//    file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
+    file_check_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
+
+    // Log fatal errors.
+    ini_set('log_errors', 1);
+    ini_set('error_log', $directory . '/error.log');
 
 //    include_once DRUPAL_ROOT . '/includes/install.inc';
     include_once './includes/install.inc';
@@ -878,12 +1112,24 @@ class DrupalWebTestCase {
 
 //    $this->preloadRegistry();
 
+//    // Include the default profile
+//    variable_set('install_profile', 'default');
+//    $profile_details = install_profile_info('default', 'en');
+
     // Add the specified modules to the list of modules in the default profile.
-    $args = func_get_args();
-//    $modules = array_unique(array_merge(drupal_get_profile_modules('default', 'en'), $args));
-    $modules = array_unique(array_merge(drupal_verify_profile('default', 'en'), $args));
-//    drupal_install_modules($modules, TRUE);
-    drupal_install_modules($modules);
+    // Install the modules specified by the default profile.
+//    drupal_install_modules($profile_details['dependencies'], TRUE);
+    drupal_install_modules(drupal_verify_profile('default', 'en'));
+
+//    node_type_clear();
+
+    // Install additional modules one at a time in order to make sure that the
+    // list of modules is updated between each module's installation.
+    $modules = func_get_args();
+    foreach ($modules as $module) {
+//      drupal_install_modules(array($module), TRUE);
+      drupal_install_modules(array($module));
+    }
 
     // Because the schema is static cached, we need to flush
     // it between each run. If we don't, then it will contain
@@ -892,10 +1138,13 @@ class DrupalWebTestCase {
     drupal_get_schema(NULL, TRUE);
 
     // Run default profile tasks.
+//    $install_state = array();
+//    drupal_install_modules(array('default'), TRUE);
     $task = 'profile';
     default_profile_tasks($task, '');
 
     // Rebuild caches.
+//    node_types_rebuild();
     actions_synchronize();
     _drupal_flush_css_js();
     $this->refreshVariables();
@@ -914,28 +1163,21 @@ class DrupalWebTestCase {
     variable_set('install_task', 'profile-finished');
     variable_set('clean_url', $clean_url_original);
     variable_set('site_mail', 'simpletest@example.com');
+    variable_set('smtp_library', drupal_get_path('module', 'simpletest') . '/simpletest.test');
 
-    // Use temporary files directory with the same prefix as database.
-    $this->originalFileDirectory = file_directory_path();
-    variable_set('file_directory_path', file_directory_path() . '/' . $db_prefix);
-    $directory = file_directory_path();
-    // Create the files directory.
+    // Use temporary files directory with the same prefix as the database.
+    $directory = $this->originalFileDirectory . '/' . $db_prefix;
+
+    // Set path variables
+    variable_set('file_directory_path', $directory);
+
+    // Create the directories
     file_check_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
 
     set_time_limit($this->timeLimit);
   }
 
   /**
-   * This method is called by DrupalWebTestCase::setUp, and preloads the
-   * registry from the testing site to cut down on the time it takes to
-   * setup a clean environment for the current test run.
-   */
-  protected function preloadRegistry() {
-    db_query('INSERT INTO {registry} SELECT * FROM ' . $this->originalPrefix . 'registry');
-    db_query('INSERT INTO {registry_file} SELECT * FROM ' . $this->originalPrefix . 'registry_file');
-  }
-
-  /**
    * Refresh the in-memory set of variables. Useful after a page request is made
    * that changes a variable in a different thread.
    *
@@ -958,12 +1200,24 @@ class DrupalWebTestCase {
    * and reset the database prefix.
    */
   protected function tearDown() {
-    global $db_prefix, $user;
+    global $db_prefix, $user, $language;
+
+    // In case a fatal error occured that was not in the test process read the
+    // log to pick up any fatal errors.
+    $db_prefix_temp = $db_prefix;
+    $db_prefix = $this->originalPrefix;
+    simpletest_log_read($this->testId, $db_prefix, get_class($this), TRUE);
+    $db_prefix = $db_prefix_temp;
+
+    $emailCount = count(variable_get('drupal_test_email_collector', array()));
+    if ($emailCount) {
+      $message = format_plural($emailCount, t('!count e-mail was sent during this test.'), t('!count e-mails were sent during this test.'), array('!count' => $emailCount));
+      $this->pass($message, t('E-mail'));
+    }
+
     if (preg_match('/simpletest\d+/', $db_prefix)) {
-      // Delete temporary files directory and reset files directory path.
-//      file_unmanaged_delete_recursive(file_directory_path());
+      // Delete temporary files directory.
       simpletest_clean_temporary_directory(file_directory_path());
-      variable_set('file_directory_path', $this->originalFileDirectory);
 
       // Remove all prefixed tables (all the tables in the schema).
       $schema = drupal_get_schema(NULL, TRUE);
@@ -977,7 +1231,6 @@ class DrupalWebTestCase {
 
       // Return the user to the original one.
       $user = $this->originalUser;
-//      drupal_save_session(TRUE);
       session_save_session(TRUE);
 
       // Bring back default language. (Drupal 6)
@@ -993,12 +1246,8 @@ class DrupalWebTestCase {
       // Reload module list and implementations to ensure that test module hooks
       // aren't called after tests.
       module_list(TRUE);
-//      module_implements(MODULE_IMPLEMENTS_CLEAR_CACHE);
       module_implements('', '', TRUE);
 
-      // Reset the Field API.
-//      field_cache_clear();
-
       // Rebuild caches.
       $this->refreshVariables();
 
@@ -1010,12 +1259,14 @@ class DrupalWebTestCase {
   /**
    * Initializes the cURL connection.
    *
-   * This function will add authentication headers as specified in the
-   * simpletest_httpauth_username and simpletest_httpauth_pass variables. Also,
-   * see the description of $curl_options among the properties.
+   * If the simpletest_httpauth_credentials variable is set, this function will
+   * add HTTP authentication headers. This is necessary for testing sites that
+   * are protected by login credentials from public access.
+   * See the description of $curl_options for other options.
    */
   protected function curlInitialize() {
     global $base_url, $db_prefix;
+
     if (!isset($this->curlHandle)) {
       $this->curlHandle = curl_init();
       $curl_options = $this->additionalCurlOptions + array(
@@ -1024,20 +1275,22 @@ class DrupalWebTestCase {
         CURLOPT_FOLLOWLOCATION => TRUE,
         CURLOPT_MAXREDIRS => 5,
         CURLOPT_RETURNTRANSFER => TRUE,
-        CURLOPT_SSL_VERIFYPEER => FALSE,  // Required to make the tests run on https://
-        CURLOPT_SSL_VERIFYHOST => FALSE,  // Required to make the tests run on https://
+        CURLOPT_SSL_VERIFYPEER => FALSE, // Required to make the tests run on https.
+        CURLOPT_SSL_VERIFYHOST => FALSE, // Required to make the tests run on https.
         CURLOPT_HEADERFUNCTION => array(&$this, 'curlHeaderCallback'),
       );
-      if (preg_match('/simpletest\d+/', $db_prefix, $matches)) {
-        $curl_options[CURLOPT_USERAGENT] = $matches[0];
-      }
-      if (!isset($curl_options[CURLOPT_USERPWD]) && ($auth = variable_get('simpletest_httpauth_username', ''))) {
-        if ($pass = variable_get('simpletest_httpauth_pass', '')) {
-          $auth .= ':' . $pass;
-        }
-        $curl_options[CURLOPT_USERPWD] = $auth;
+      if (isset($this->httpauth_credentials)) {
+        $curl_options[CURLOPT_USERPWD] = $this->httpauth_credentials;
       }
       curl_setopt_array($this->curlHandle, $this->additionalCurlOptions + $curl_options);
+
+      // By default, the child session name should be the same as the parent.
+      $this->session_name = session_name();
+    }
+    // We set the user agent header on each request so as to use the current
+    // time and a new uniqid.
+    if (preg_match('/simpletest\d+/', $db_prefix, $matches)) {
+      curl_setopt($this->curlHandle, CURLOPT_USERAGENT, drupal_generate_test_ua($matches[0]));
     }
   }
 
@@ -1061,7 +1314,11 @@ class DrupalWebTestCase {
       $curl_options[CURLOPT_HTTPHEADER][] = 'Expect:';
     }
     curl_setopt_array($this->curlHandle, $this->additionalCurlOptions + $curl_options);
+
+    // Reset headers and the session ID.
+    $this->session_id = NULL;
     $this->headers = array();
+
     $this->drupalSetContent(curl_exec($this->curlHandle), curl_getinfo($this->curlHandle, CURLINFO_EFFECTIVE_URL));
     $message_vars = array(
       '!method' => !empty($curl_options[CURLOPT_NOBODY]) ? 'HEAD' : (empty($curl_options[CURLOPT_POSTFIELDS]) ? 'GET' : 'POST'),
@@ -1086,6 +1343,7 @@ class DrupalWebTestCase {
    */
   protected function curlHeaderCallback($curlHandler, $header) {
     $this->headers[] = $header;
+
     // Errors are being sent via X-Drupal-Assertion-* headers,
     // generated by _drupal_log_error() in the exact form required
     // by DrupalWebTestCase::error().
@@ -1093,6 +1351,17 @@ class DrupalWebTestCase {
       // Call DrupalWebTestCase::error() with the parameters from the header.
       call_user_func_array(array(&$this, 'error'), unserialize(urldecode($matches[1])));
     }
+
+    // Save the session cookie, if set.
+    if (preg_match('/^Set-Cookie: ' . preg_quote($this->session_name) . '=([a-z90-9]+)/', $header, $matches)) {
+      if ($matches[1] != 'deleted') {
+        $this->session_id = $matches[1];
+      }
+      else {
+        $this->session_id = NULL;
+      }
+    }
+
     // This is required by cURL.
     return strlen($header);
   }
@@ -1158,6 +1427,9 @@ class DrupalWebTestCase {
     if (($new = $this->checkForMetaRefresh())) {
       $out = $new;
     }
+    $this->verbose('GET request to: ' . $path .
+                   '<hr />Ending URL: ' . $this->getUrl() .
+                   '<hr />' . $out);
     return $out;
   }
 
@@ -1216,12 +1488,13 @@ class DrupalWebTestCase {
         // We post only if we managed to handle every field in edit and the
         // submit button matches.
         if (!$edit && $submit_matches) {
+          $post_array = $post;
           if ($upload) {
             // TODO: cURL handles file uploads for us, but the implementation
             // is broken. This is a less than elegant workaround. Alternatives
             // are being explored at #253506.
             foreach ($upload as $key => $file) {
-              $file = realpath($file);
+              $file = drupal_realpath($file);
               if ($file && is_file($file)) {
                 $post[$key] = '@' . $file;
               }
@@ -1244,6 +1517,10 @@ class DrupalWebTestCase {
           if (($new = $this->checkForMetaRefresh())) {
             $out = $new;
           }
+          $this->verbose('POST request to: ' . $path .
+                         '<hr />Ending URL: ' . $this->getUrl() .
+                         '<hr />Fields: ' . highlight_string('<?php ' . var_export($post_array, TRUE), TRUE) .
+                         '<hr />' . $out);
           return $out;
         }
       }
@@ -1436,8 +1713,8 @@ class DrupalWebTestCase {
    *   The xpath string to use in the search.
    * @return
    *   The return value of the xpath search. For details on the xpath string
-   *   format and return values see the SimpleXML documentation.
-   *   http://us.php.net/manual/function.simplexml-element-xpath.php
+   *   format and return values see the SimpleXML documentation,
+   *   http://us.php.net/manual/function.simplexml-element-xpath.php.
    */
   protected function xpath($xpath) {
     if ($this->parse()) {
@@ -1482,11 +1759,13 @@ class DrupalWebTestCase {
    *   Message to display.
    * @param $group
    *   The group this message belongs to, defaults to 'Other'.
+   * @return
+   *   TRUE if the assertion succeeded, FALSE otherwise.
    */
   protected function assertLink($label, $index = 0, $message = '', $group = 'Other') {
     $links = $this->xpath('//a[text()="' . $label . '"]');
     $message = ($message ?  $message : t('Link with label "!label" found.', array('!label' => $label)));
-    $this->assert(isset($links[$index]), $message, $group);
+    return $this->assert(isset($links[$index]), $message, $group);
   }
 
   /**
@@ -1500,11 +1779,13 @@ class DrupalWebTestCase {
    *   Message to display.
    * @param $group
    *   The group this message belongs to, defaults to 'Other'.
+   * @return
+   *   TRUE if the assertion succeeded, FALSE otherwise.
    */
   protected function assertNoLink($label, $message = '', $group = 'Other') {
     $links = $this->xpath('//a[text()="' . $label . '"]');
     $message = ($message ?  $message : t('Link with label "!label" not found.', array('!label' => $label)));
-    $this->assert(empty($links), $message, $group);
+    return $this->assert(empty($links), $message, $group);
   }
 
   /**
@@ -1670,6 +1951,30 @@ class DrupalWebTestCase {
   }
 
   /**
+   * Gets an array containing all e-mails sent during this test case.
+   *
+   * @param $filter
+   *   An array containing key/value pairs used to filter the e-mails that are returned.
+   * @return
+   *   An array containing e-mail messages captured during the current test.
+   */
+  protected function drupalGetMails($filter = array()) {
+    $captured_emails = variable_get('drupal_test_email_collector', array());
+    $filtered_emails = array();
+
+    foreach ($captured_emails as $message) {
+      foreach ($filter as $key => $value) {
+        if (!isset($message['params'][$key]) || $message['params'][$key] != $value) {
+          continue 2;
+        }
+      }
+      $filtered_emails[] = $message;
+    }
+
+    return $filtered_emails;
+  }
+
+  /**
    * Sets the raw HTML content. This can be useful when a page has been fetched
    * outside of the internal browser and assertions need to be made on the
    * returned page.
@@ -1698,7 +2003,10 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertRaw($raw, $message = '%s found', $group = 'Other') {
+  protected function assertRaw($raw, $message = '', $group = 'Other') {
+    if (!$message) {
+      $message = t('Raw "@raw" found', array('@raw' => check_plain($raw)));
+    }
     return $this->assert(strpos($this->content, $raw) !== FALSE, $message, $group);
   }
 
@@ -1715,7 +2023,10 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertNoRaw($raw, $message = '%s found', $group = 'Other') {
+  protected function assertNoRaw($raw, $message = '', $group = 'Other') {
+    if (!$message) {
+      $message = t('Raw "@raw" not found', array('@raw' => check_plain($raw)));
+    }
     return $this->assert(strpos($this->content, $raw) === FALSE, $message, $group);
   }
 
@@ -1776,7 +2087,7 @@ class DrupalWebTestCase {
       $this->plainTextContent = filter_xss($this->content, array());
     }
     if (!$message) {
-      $message = '"' . $text . '"' . ($not_exists ? ' not found' : ' found');
+      $message = !$not_exists ? t('"@text" found', array('@text' => $text)) : t('"@text" not found', array('@text' => $text));
     }
     return $this->assert($not_exists == (strpos($this->plainTextContent, $text) === FALSE), $message, $group);
   }
@@ -1842,7 +2153,7 @@ class DrupalWebTestCase {
       $this->plainTextContent = filter_xss($this->content, array());
     }
     if (!$message) {
-      $message = '"' . $text . '"'. ($be_unique ? ' found only once' : ' found more than once');
+      $message = '"' . $text . '"' . ($be_unique ? ' found only once' : ' found more than once');
     }
     $first_occurance = strpos($this->plainTextContent, $text);
     if ($first_occurance === FALSE) {
@@ -1865,7 +2176,10 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertPattern($pattern, $message = 'Pattern %s found', $group = 'Other') {
+  protected function assertPattern($pattern, $message = '', $group = 'Other') {
+    if (!$message) {
+      $message = t('Pattern "@pattern" found', array('@pattern' => $pattern));
+    }
     return $this->assert((bool) preg_match($pattern, $this->drupalGetContent()), $message, $group);
   }
 
@@ -1881,7 +2195,10 @@ class DrupalWebTestCase {
    * @return
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertNoPattern($pattern, $message = 'Pattern %s not found', $group = 'Other') {
+  protected function assertNoPattern($pattern, $message = '', $group = 'Other') {
+    if (!$message) {
+      $message = t('Pattern "@pattern" not found', array('@pattern' => $pattern));
+    }
     return $this->assert(!preg_match($pattern, $this->drupalGetContent()), $message, $group);
   }
 
@@ -2094,6 +2411,36 @@ class DrupalWebTestCase {
   }
 
   /**
+   * Assert that a checkbox field in the current page is checked.
+   *
+   * @param $id
+   *   Id of field to assert.
+   * @param $message
+   *   Message to display.
+   * @return
+   *   TRUE on pass, FALSE on fail.
+   */
+  protected function assertFieldChecked($id, $message = '') {
+    $elements = $this->xpath('//input[@id="' . $id . '"]');
+    return $this->assertTrue(isset($elements[0]) && !empty($elements[0]['checked']), $message ? $message : t('Checkbox field @id is checked.', array('@id' => $id)), t('Browser'));
+  }
+
+  /**
+   * Assert that a checkbox field in the current page is not checked.
+   *
+   * @param $id
+   *   Id of field to assert.
+   * @param $message
+   *   Message to display.
+   * @return
+   *   TRUE on pass, FALSE on fail.
+   */
+  protected function assertNoFieldChecked($id, $message = '') {
+    $elements = $this->xpath('//input[@id="' . $id . '"]');
+    return $this->assertTrue(isset($elements[0]) && empty($elements[0]['checked']), $message ? $message : t('Checkbox field @id is not checked.', array('@id' => $id)), t('Browser'));
+  }
+
+  /**
    * Assert that a field exists with the given name or id.
    *
    * @param $field
@@ -2155,4 +2502,82 @@ class DrupalWebTestCase {
     $match = is_array($code) ? in_array($curl_code, $code) : $curl_code == $code;
     return $this->assertTrue($match, $message ? $message : t('HTTP response expected !code, actual !curl_code', array('!code' => $code, '!curl_code' => $curl_code)), t('Browser'));
   }
+
+  /**
+   * Assert that the most recently sent e-mail message has a field with the given value.
+   *
+   * @param $name
+   *   Name of field or message property to assert. Examples: subject, body, id, ...
+   * @param $value
+   *   Value of the field to assert.
+   * @param $message
+   *   Message to display.
+   * @return
+   *   TRUE on pass, FALSE on fail.
+   */
+  protected function assertMail($name, $value = '', $message = '') {
+    $captured_emails = variable_get('drupal_test_email_collector', array());
+    $email = end($captured_emails);
+    return $this->assertTrue($email && isset($email['params'][$name]) && $email['params'][$name] == $value, $message, t('E-mail'));
+  }
+
+  /**
+   * Log verbose message in a text file.
+   *
+   * The a link to the vebose message will be placed in the test results via
+   * as a passing assertion with the text '[verbose message]'.
+   *
+   * @param $message
+   *   The verbose message to be stored.
+   * @see simpletest_verbose()
+   */
+  protected function verbose($message) {
+    if ($id = simpletest_verbose($message)) {
+      $this->pass(l(t('Verbose message'), $this->originalFileDirectory . '/simpletest/verbose/' . get_class($this) . '-' . $id . '.html', array('attributes' => array('target' => '_blank'))), 'Debug');
+    }
+  }
+
+}
+
+/**
+ * Log verbose message in a text file.
+ *
+ * If verbose mode is enabled then page requests will be dumped to a file and
+ * presented on the test result screen. The messages will be placed in a file
+ * located in the simpletest directory in the original file system.
+ *
+ * @param $message
+ *   The verbose message to be stored.
+ * @param $original_file_directory
+ *   The original file directory, before it was changed for testing purposes.
+ * @param $test_class
+ *   The active test case class.
+ * @return
+ *   The ID of the message to be placed in related assertion messages.
+ * @see DrupalTestCase->originalFileDirectory
+ * @see DrupalWebTestCase->verbose()
+ */
+function simpletest_verbose($message, $original_file_directory = NULL, $test_class = NULL) {
+  static $file_directory = NULL, $class = NULL, $id = 1;
+  static $verbose;
+
+  // Will pass first time during setup phase, and when verbose is TRUE.
+  if (!isset($original_file_directory) && !$verbose) {
+    return FALSE;
+  }
+
+  if ($message && $file_directory) {
+    $message = '<hr />ID #' . $id . ' (<a href="' . $class . '-' . ($id - 1) . '.html">Previous</a> | <a href="' . $class . '-' . ($id + 1) . '.html">Next</a>)<hr />' . $message;
+    file_put_contents($file_directory . "/simpletest/verbose/$class-$id.html", $message, FILE_APPEND);
+    return $id++;
+  }
+
+  if ($original_file_directory) {
+    $file_directory = $original_file_directory;
+    $class = $test_class;
+    $verbose = variable_get('simpletest_verbose', FALSE);
+    $directory = $file_directory . '/simpletest/verbose';
+    return file_check_directory($directory, FILE_CREATE_DIRECTORY);
+  }
+  return FALSE;
 }
diff --git a/modules/simpletest/files/README.txt b/modules/simpletest/files/README.txt
index 835850b..862118a 100644
--- a/modules/simpletest/files/README.txt
+++ b/modules/simpletest/files/README.txt
@@ -1,4 +1,5 @@
-$Id: README.txt,v 1.1.2.2 2009/03/28 03:27:26 boombatower Exp $
+$Id: README.txt,v 1.1.2.3 2009/09/14 23:05:19 boombatower Exp $
+Core: Id: README.txt,v 1.1 2008/04/20 18:23:30 dries Exp
 
 These files are use in some tests that upload files or other operations were
 a file is useful. These files are copied to the files directory as specified
diff --git a/modules/simpletest/files/php-2.php b/modules/simpletest/files/php-2.php
index dc8e642..615a8d7 100644
--- a/modules/simpletest/files/php-2.php
+++ b/modules/simpletest/files/php-2.php
@@ -1,3 +1,2 @@
 <?php
 print 'SimpleTest PHP was executed!';
-?>
\ No newline at end of file
diff --git a/modules/simpletest/run-tests.sh b/modules/simpletest/run-tests.sh
index 12d0d18..65e350e 100755
--- a/modules/simpletest/run-tests.sh
+++ b/modules/simpletest/run-tests.sh
@@ -1,6 +1,7 @@
 <?php
-// $Id: run-tests.sh,v 1.1.2.4 2009/04/23 05:39:52 boombatower Exp $
-// Core: Id: run-tests.sh,v 1.26 2009/04/13 12:23:26 dries Exp
+// $Id: run-tests.sh,v 1.1.2.5 2009/09/05 13:34:10 boombatower Exp $
+// Core: Id: run-tests.sh,v 1.35 2009/08/17 19:14:41 webchick Exp
+
 /**
  * @file
  * Backport of Drupal 7 run-tests.sh with modifications, see BACKPORT.txt.
@@ -17,16 +18,20 @@ define('SIMPLETEST_SCRIPT_COLOR_EXCEPTION', 33); // Brown.
 // Set defaults and get overrides.
 list($args, $count) = simpletest_script_parse_args();
 
-simpletest_script_init();
-
 if ($args['help'] || $count == 0) {
   simpletest_script_help();
   exit;
 }
 
 if ($args['execute-batch']) {
+  // Masquerade as Apache for running tests.
+  simpletest_script_init("Apache");
   simpletest_script_execute_batch();
 }
+else {
+  // Run administrative functions as CLI.
+  simpletest_script_init("PHP CLI");
+}
 
 // Bootstrap to perform initial validation or other operations.
 drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
@@ -49,8 +54,11 @@ if ($args['clean']) {
 }
 
 // Load SimpleTest files.
-$all_tests = simpletest_get_all_tests();
-$groups = simpletest_categorize_tests($all_tests);
+$groups = simpletest_test_get_all();
+$all_tests = array();
+foreach ($groups as $group => $tests) {
+  $all_tests = array_merge($all_tests, array_keys($tests));
+}
 $test_list = array();
 
 if ($args['list']) {
@@ -59,8 +67,8 @@ if ($args['list']) {
   echo   "-------------------------------\n\n";
   foreach ($groups as $group => $tests) {
     echo $group . "\n";
-    foreach ($tests as $class_name => $info) {
-      echo " - " . $info['name'] . ' (' . $class_name . ')' . "\n";
+    foreach ($tests as $class => $info) {
+      echo " - " . $info['name'] . ' (' . $class . ')' . "\n";
     }
   }
   exit;
@@ -68,7 +76,8 @@ if ($args['list']) {
 
 $test_list = simpletest_script_get_test_list();
 
-// If not in 'safe mode', increase the maximum execution time.
+// Try to allocate unlimited time to run the tests.
+//drupal_set_time_limit(0);
 if (!ini_get('safe_mode')) {
   set_time_limit(0);
 }
@@ -83,6 +92,12 @@ $test_id = db_last_insert_id('simpletest_test_id', 'test_id');
 // Execute tests.
 simpletest_script_command($args['concurrency'], $test_id, implode(",", $test_list));
 
+// Retrieve the last database prefix used for testing and the last test class
+// that was run from. Use the information to read the lgo file in case any
+// fatal errors caused the test to crash.
+list($last_prefix, $last_test_class) = simpletest_last_test_get($test_id);
+simpletest_log_read($test_id, $last_prefix, $last_test_class);
+
 // Display results before database is cleared.
 simpletest_script_reporter_display_results();
 
@@ -137,7 +152,8 @@ All arguments are long options.
   <test1>[,<test2>[,<test3> ...]]
 
               One or more tests to be run. By default, these are interpreted
-              as the names of test groups as shown at ?q=admin/build/testing.
+              as the names of test groups as shown at 
+              ?q=admin/build/testing.
               These group names typically correspond to module names like "User"
               or "Profile" or "System", but there is also a group "XML-RPC".
               If --class is specified then these are interpreted as the names of
@@ -230,7 +246,7 @@ function simpletest_script_parse_args() {
 /**
  * Initialize script variables and perform general setup requirements.
  */
-function simpletest_script_init() {
+function simpletest_script_init($server_software) {
   global $args, $php;
 
   $host = 'localhost';
@@ -264,7 +280,7 @@ function simpletest_script_init() {
   $_SERVER['HTTP_HOST'] = $host;
   $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
   $_SERVER['SERVER_ADDR'] = '127.0.0.1';
-  $_SERVER['SERVER_SOFTWARE'] = 'Apache';
+  $_SERVER['SERVER_SOFTWARE'] = $server_software;
   $_SERVER['SERVER_NAME'] = 'localhost';
   $_SERVER['REQUEST_URI'] = $path .'/';
   $_SERVER['REQUEST_METHOD'] = 'GET';
@@ -346,7 +362,11 @@ function simpletest_script_execute_batch() {
  * Run a single test (assume a Drupal bootstrapped environment).
  */
 function simpletest_script_run_one_test($test_id, $test_class) {
-  simpletest_get_all_tests();
+  // Drupal 6.
+  require_once drupal_get_path('module', 'simpletest') . '/drupal_web_test_case.php';
+  $classes = simpletest_test_get_all_classes();
+  require_once $classes[$test_class]['file'];
+  
   $test = new $test_class($test_id);
   $test->run();
   $info = $test->getInfo();
@@ -397,11 +417,12 @@ function simpletest_script_get_test_list() {
     elseif ($args['file']) {
       $files = array();
       foreach ($args['test_names'] as $file) {
+//        $files[drupal_realpath($file)] = 1;
         $files[realpath($file)] = 1;
       }
 
       // Check for valid class names.
-      foreach ($all_tests as $class_name => $info) {
+      foreach ($all_tests as $class_name) {
         $refclass = new ReflectionClass($class_name);
         $file = $refclass->getFileName();
         if (isset($files[$file])) {
diff --git a/modules/simpletest/simpletest.css b/modules/simpletest/simpletest.css
index 4c3c6cf..bb180af 100644
--- a/modules/simpletest/simpletest.css
+++ b/modules/simpletest/simpletest.css
@@ -1,4 +1,5 @@
-/* $Id: simpletest.css,v 1.1.6.3 2009/02/08 02:35:39 boombatower Exp $ */
+/* $Id: simpletest.css,v 1.1.6.4 2009/09/05 13:34:10 boombatower Exp $
+/* Core: Id: simpletest.css,v 1.6 2009/08/04 06:47:00 webchick Exp */
 
 /* Addon for the simpletest module */
 #simpletest {
@@ -6,7 +7,7 @@
 
 /* Test Table */
 #simpletest-form-table th.select-all {
-  width: 50px;
+  width: 25px;
 }
 
 th.simpletest_test {
@@ -59,6 +60,14 @@ tr.simpletest-exception.even {
   background: #f5e742;
 }
 
+tr.simpletest-debug.odd {
+  background: #eeeeee;
+}
+
+tr.simpletest-debug.even {
+  background: #ffffff;
+}
+
 div.simpletest-image {
   display: inline;
   cursor: pointer;
diff --git a/modules/simpletest/simpletest.function.inc b/modules/simpletest/simpletest.function.inc
deleted file mode 100644
index 14bb5c3..0000000
--- a/modules/simpletest/simpletest.function.inc
+++ /dev/null
@@ -1,218 +0,0 @@
-<?php
-// $Id: simpletest.function.inc,v 1.1.2.2 2009/04/23 05:39:51 boombatower Exp $
-// Core: Id: common.inc,v 1.878 2009/04/22 09:45:02 dries Exp
-/**
- * @file
- * Provide backported function from Drupal 7 core required by SimpleTest.
- *
- * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
- */
-
-/*
- * From common.inc.
- */
-
-// Set the Drupal custom error handler.
-set_error_handler('_drupal_error_handler');
-set_exception_handler('_drupal_exception_handler');
-
-/**
- * Custom PHP error handler.
- *
- * @param $error_level
- *   The level of the error raised.
- * @param $message
- *   The error message.
- * @param $filename
- *   The filename that the error was raised in.
- * @param $line
- *   The line number the error was raised at.
- * @param $context
- *   An array that points to the active symbol table at the point the error occurred.
- */
-function _drupal_error_handler($error_level, $message, $filename, $line, $context) {
-  if ($error_level & error_reporting()) {
-    // All these constants are documented at http://php.net/manual/en/errorfunc.constants.php
-    $types = array(
-      E_ERROR => 'Error',
-      E_WARNING => 'Warning',
-      E_PARSE => 'Parse error',
-      E_NOTICE => 'Notice',
-      E_CORE_ERROR => 'Core error',
-      E_CORE_WARNING => 'Core warning',
-      E_COMPILE_ERROR => 'Compile error',
-      E_COMPILE_WARNING => 'Compile warning',
-      E_USER_ERROR => 'User error',
-      E_USER_WARNING => 'User warning',
-      E_USER_NOTICE => 'User notice',
-      E_STRICT => 'Strict warning',
-      E_RECOVERABLE_ERROR => 'Recoverable fatal error'
-    );
-    $backtrace = debug_backtrace();
-
-    $caller = _drupal_get_last_caller(debug_backtrace());
-
-    // We treat recoverable errors as fatal.
-    _drupal_log_error(array(
-      '%type' => isset($types[$error_level]) ? $types[$error_level] : 'Unknown error',
-      '%message' => $message,
-      '%function' => $caller['function'],
-      '%file' => $caller['file'],
-      '%line' => $caller['line'],
-    ), $error_level == E_RECOVERABLE_ERROR);
-  }
-}
-
-/**
- * Custom PHP exception handler.
- *
- * Uncaught exceptions are those not enclosed in a try/catch block. They are
- * always fatal: the execution of the script will stop as soon as the exception
- * handler exits.
- *
- * @param $exception
- *   The exception object that was thrown.
- */
-function _drupal_exception_handler($exception) {
-  // Log the message to the watchdog and return an error page to the user.
-  _drupal_log_error(_drupal_decode_exception($exception), TRUE);
-}
-
-/**
- * Decode an exception, especially to retrive the correct caller.
- *
- * @param $exception
- *   The exception object that was thrown.
- * @return An error in the format expected by _drupal_log_error().
- */
-function _drupal_decode_exception($exception) {
-  $backtrace = $exception->getTrace();
-  // Add the line throwing the exception to the backtrace.
-  array_unshift($backtrace, array('line' => $exception->getLine(), 'file' => $exception->getFile()));
-
-  // For PDOException errors, we try to return the initial caller,
-  // skipping internal functions of the database layer.
-  if ($exception instanceof PDOException) {
-    // The first element in the stack is the call, the second element gives us the caller.
-    // We skip calls that occurred in one of the classes of the database layer
-    // or in one of its global functions.
-//    $db_functions = array('db_query', 'pager_query', 'db_query_range', 'db_query_temporary', 'update_sql');
-    $db_functions = array('db_query', '_db_query', 'pager_query', 'db_query_range', 'db_query_temporary', 'update_sql');
-    while (!empty($backtrace[1]) && ($caller = $backtrace[1]) &&
-         ((isset($caller['class']) && (strpos($caller['class'], 'Query') !== FALSE || strpos($caller['class'], 'Database') !== FALSE)) ||
-         in_array($caller['function'], $db_functions))) {
-      // We remove that call.
-      array_shift($backtrace);
-    }
-  }
-  $caller = _drupal_get_last_caller($backtrace);
-
-  return array(
-    '%type' => get_class($exception),
-    '%message' => $exception->getMessage(),
-    '%function' => $caller['function'],
-    '%file' => $caller['file'],
-    '%line' => $caller['line'],
-  );
-}
-
-/**
- * Log a PHP error or exception, display an error page in fatal cases.
- *
- * @param $error
- *   An array with the following keys: %type, %message, %function, %file, %line.
- * @param $fatal
- *   TRUE if the error is fatal.
- */
-function _drupal_log_error($error, $fatal = FALSE) {
-  // Initialize a maintenance theme early if the boostrap was not complete.
-  // Do it early because drupal_set_message() triggers an init_theme().
-  if ($fatal && (drupal_get_bootstrap_phase() != DRUPAL_BOOTSTRAP_FULL)) {
-    unset($GLOBALS['theme']);
-    if (!defined('MAINTENANCE_MODE')) {
-      define('MAINTENANCE_MODE', 'error');
-    }
-    drupal_maintenance_theme();
-  }
-
-  // When running inside the testing framework, we relay the errors
-  // to the tested site by the way of HTTP headers.
-  if (preg_match("/^simpletest\d+/", $_SERVER['HTTP_USER_AGENT']) && !headers_sent() && (!defined('SIMPLETEST_COLLECT_ERRORS') || SIMPLETEST_COLLECT_ERRORS)) {
-    static $number = 0;
-    $assertion = array(
-      $error['%message'],
-      $error['%type'],
-      array(
-        'function' => $error['%function'],
-        'file' => $error['%file'],
-        'line' => $error['%line'],
-      ),
-    );
-    header('X-Drupal-Assertion-' . $number . ': ' . rawurlencode(serialize($assertion)));
-    $number++;
-  }
-
-  // Force display of error messages in update.php or if the proper error
-  // reporting level is set.
-  $error_level = variable_get('error_level', 2);
-  if ($error_level == 2 || ($error_level == 1 && $error['%type'] != 'Notice') || (defined('MAINTENANCE_MODE') && MAINTENANCE_MODE == 'update')) {
-    drupal_set_message(t('%type: %message in %function (line %line of %file).', $error), 'error');
-  }
-
-  try {
-    watchdog('php', '%type: %message in %function (line %line of %file).', $error, WATCHDOG_ERROR);
-  }
-  catch (Exception $e) {
-    $new_error = _drupal_decode_exception($e);
-    drupal_set_message(t('%type: %message in %function (line %line of %file).', $new_error), 'error');
-  }
-
-  if ($fatal) {
-    drupal_set_header('503 Service unavailable');
-    drupal_set_title(t('Error'));
-    if (!defined('MAINTENANCE_MODE') && drupal_get_bootstrap_phase() == DRUPAL_BOOTSTRAP_FULL) {
-      // To conserve CPU and bandwidth, omit the blocks.
-      $page = drupal_get_page(t('The website encountered an unexpected error. Please try again later.'));
-      $page['#show_blocks'] = FALSE;
-      print drupal_render_page($page);
-    }
-    else {
-      print theme('maintenance_page', t('The website encountered an unexpected error. Please try again later.'), FALSE);
-    }
-    exit;
-  }
-}
-
-/**
- * Gets the last caller from a backtrace.
- *
- * @param $backtrace
- *   A standard PHP backtrace.
- * @return
- *   An associative array with keys 'file', 'line' and 'function'.
- */
-function _drupal_get_last_caller($backtrace) {
-  // Errors that occur inside PHP internal functions
-  // do not generate information about file and line.
-  while ($backtrace && !isset($backtrace[0]['line'])) {
-    array_shift($backtrace);
-  }
-
-  // The first trace is the call itself.
-  // It gives us the line and the file of the last call.
-  $call = $backtrace[0];
-
-  // The second call give us the function where the call originated.
-  if (isset($backtrace[1])) {
-    if (isset($backtrace[1]['class'])) {
-      $call['function'] = $backtrace[1]['class'] . $backtrace[1]['type'] . $backtrace[1]['function'] . '()';
-    }
-    else {
-      $call['function'] = $backtrace[1]['function'] . '()';
-    }
-  }
-  else {
-    $call['function'] = 'main()';
-  }
-  return $call;
-}
diff --git a/modules/simpletest/simpletest.info b/modules/simpletest/simpletest.info
index 3c909d4..6b31a68 100644
--- a/modules/simpletest/simpletest.info
+++ b/modules/simpletest/simpletest.info
@@ -1,15 +1,50 @@
-; $Id: simpletest.info,v 1.4.2.2.2.4 2009/04/23 05:39:51 boombatower Exp $
+; $Id: simpletest.info,v 1.4.2.2.2.7 2009/09/05 13:34:10 boombatower Exp $
+; Core: Id: simpletest.info,v 1.10 2009/08/31 18:30:26 webchick Exp
 name = "SimpleTest"
 description = "Provides a framework for unit and functional testing."
+; package = Core
 package = Development
-version = VERSION
-core = 7.x
+; version = VERSION
+; core = 7.x
+core = 6.x
+php = 5 ; Drupal 6
 files[] = simpletest.module
+files[] = simpletest.pages.inc
 files[] = simpletest.install
+files[] = simpletest.test
+files[] = drupal_web_test_case.php
 
-; Information added by drupal.org packaging script on 2009-04-23
-version = "6.x-2.8"
+; Drupal 6
+files[] = tests/block.test
+
+; Tests in tests directory.
+; files[] = tests/actions.test
+; files[] = tests/batch.test
+; files[] = tests/bootstrap.test
+; files[] = tests/browser.test
+; files[] = tests/cache.test
+; files[] = tests/common.test
+; files[] = tests/database_test.test
+; files[] = tests/error.test
+; files[] = tests/file.test
+; files[] = tests/filetransfer.test
+; files[] = tests/form.test
+; files[] = tests/graph.test
+; files[] = tests/image.test
+; files[] = tests/lock.test
+; files[] = tests/mail.test
+; files[] = tests/menu.test
+; files[] = tests/module.test
+; files[] = tests/registry.test
+; files[] = tests/schema.test
+; files[] = tests/session.test
+; files[] = tests/theme.test
+; files[] = tests/unicode.test
+; files[] = tests/xmlrpc.test
+
+; Information added by drupal.org packaging script on 2009-09-14
+version = "6.x-2.9"
 core = "6.x"
 project = "simpletest"
-datestamp = "1240465894"
+datestamp = "1252971974"
 
diff --git a/modules/simpletest/simpletest.install b/modules/simpletest/simpletest.install
index 7a90353..c922985 100644
--- a/modules/simpletest/simpletest.install
+++ b/modules/simpletest/simpletest.install
@@ -1,6 +1,7 @@
 <?php
-// $Id: simpletest.install,v 1.4.2.3.2.16 2009/04/23 05:39:52 boombatower Exp $
-// Core: Id: simpletest.install,v 1.17 2009/03/29 23:14:53 webchick Exp
+// $Id: simpletest.install,v 1.4.2.3.2.19 2009/09/14 22:32:11 boombatower Exp $
+// Core: Id: simpletest.install,v 1.26 2009/08/17 19:14:41 webchick Exp
+
 /**
  * @file
  * Backport of Drupal 7 simpletest.install with modifications, see BACKPORT.txt.
@@ -35,19 +36,23 @@ function simpletest_install() {
     }
 
     // Copy other test files for consistency.
-    $files = file_scan_directory($path, '/(html|image|javascript|php|sql)-.*/');
-    if (count($files) == 0) {
-      $original = drupal_get_path('module', 'simpletest') . '/files';
-      $files = file_scan_directory($original, '/(html|image|javascript|php|sql)-.*/');
+    $original = drupal_get_path('module', 'simpletest') . '/files';
+    $files = file_scan_directory($original, '(html|image|javascript|php|sql)-.*');
+
+    // If there are more files in SimpleTest's files directory than the site's
+    // files directory, restore all the files. This situation might occur when
+    // an errant test deletes one or more files from the site's files
+    // directory. It serves a convenience to developers so that they can get
+    // the test files back easily.
+    if (count($files) > count(file_scan_directory($path, '(html|image|javascript|php|sql)-.*'))) {
       foreach ($files as $file) {
-//        file_unmanaged_copy($file->filepath, $path);
-        file_unmanaged_copy($file->filename, $path . '/' . $file->basename);
+        copy($file->filename, $path . '/' . $file->basename);
       }
       $generated = TRUE;
     }
 
     if ($generated) {
-      drupal_set_message('Extra test files generated.');
+      drupal_set_message('Extra test files generated/copied.');
     }
   }
 }
@@ -74,7 +79,7 @@ function simpletest_generate_file($filename, $width, $lines, $type = 'binary-tex
         break;
     }
   }
-  $text = wordwrap($text, $width - 1, "\n", TRUE) ."\n"; // Add \n for symetrical file.
+  $text = wordwrap($text, $width - 1, "\n", TRUE) . "\n"; // Add \n for symetrical file.
 
   // Create filename.
   $path = file_directory_path() . '/simpletest/';
@@ -102,11 +107,22 @@ function simpletest_get_file_count($directory, $filename) {
 function simpletest_uninstall() {
   simpletest_clean_environment();
 
-  variable_del('simpletest_httpauth');
-  variable_del('simpletest_httpauth_username');
-  variable_del('simpletest_httpauth_pass');
-  variable_del('simpletest_devel');
+  // Remove settings variables.
+  variable_del('simpletest_username');
+  variable_del('simpletest_password');
+  variable_del('simpletest_clear_results');
+  variable_del('simpletest_verbose');
+
+  // Uninstall schema.
   drupal_uninstall_schema('simpletest');
+
+  // Remove generated files.
+  $path = file_directory_path() . '/simpletest';
+  $files = file_scan_directory($path, '.*');
+  foreach ($files as $file) {
+    unlink($file->filename);
+  }
+  rmdir($path);
 }
 
 /**
@@ -117,6 +133,7 @@ function simpletest_requirements($phase) {
   $t = get_t();
 
   $has_curl = function_exists('curl_init');
+  $has_hash = function_exists('hash_hmac');
   $has_domdocument = class_exists('DOMDocument');
 
   $requirements['curl'] = array(
@@ -127,6 +144,14 @@ function simpletest_requirements($phase) {
     $requirements['curl']['severity'] = REQUIREMENT_ERROR;
     $requirements['curl']['description'] = $t('Simpletest could not be installed because the PHP <a href="@curl_url">cURL</a> library is not available.', array('@curl_url' => 'http://php.net/manual/en/curl.setup.php'));
   }
+  $requirements['hash'] = array(
+    'title' => $t('hash'),
+    'value' => $has_hash ? $t('Enabled') : $t('Not found'),
+  );
+  if (!$has_hash) {
+    $requirements['hash']['severity'] = REQUIREMENT_ERROR;
+    $requirements['hash']['description'] = $t('Simpletest could not be installed because the PHP <a href="@hash_url">hash</a> extension is disabled.', array('@hash_url' => 'http://php.net/manual/en/book.hash.php'));
+  }
 
   $requirements['php_domdocument'] = array(
     'title' => $t('PHP DOMDocument class'),
@@ -151,10 +176,10 @@ function simpletest_requirements($phase) {
       'title' => $t('SimpleTest code addition'),
       'value' => t('Not-found'),
       'severity' => REQUIREMENT_ERROR,
-      'description' => $t('SimpleTest could not be installed. Must add code to the %settings file please see
+      'description' => $t('SimpleTest could not be installed. Must apply core patch, please see
                            <a href="@install">INSTALL.txt</a>.',
                            array('%settings' => realpath(conf_path() . '/settings.php'),
-                                 '@install' => url(drupal_get_path('module', 'simpletest') . '/INSTALL.txt')))
+                                 '@install' => drupal_get_path('module', 'simpletest') . '/INSTALL.txt')),
     );
   }
 
@@ -237,6 +262,13 @@ function simpletest_schema() {
         'description' => 'Primary Key: Unique simpletest ID used to group test results together. Each time a set of tests
                             are run a new test ID is used.',
       ),
+      'last_prefix' => array(
+        'type' => 'varchar',
+        'length' => 60,
+        'not null' => FALSE,
+        'default' => '',
+        'description' => 'The last database prefix used during testing.',
+      ),
     ),
     'primary key' => array('test_id'),
   );
@@ -245,184 +277,25 @@ function simpletest_schema() {
 
 /**
  * Upgrade simpletest 5.x-1.x and 6.x-1.x to 6.x-2.1 release.
- * 
- * Note: This does not fix the update_7000 bug introduced in 6.x-2.1 release.
+ *
+ * Provides a basic upgrade path for initial switch to 2.x branch. The update
+ * path will not be continued as there is no data that needs to be updated and
+ * any further releases should simply un-install and install just like Drupal
+ * HEAD development.
  */
-function simpletest_update_6000() {
+function simpletest_update_6200() {
   $ret = array();
-  $schema = array();
-
-  // Check for files directory.
-  $path = file_directory_path() . '/simpletest';
-  if (file_check_directory($path, FILE_CREATE_DIRECTORY)) {
-    // Generate binary and text test files.
-    $generated = FALSE;
-    if (simpletest_get_file_count($path, 'binary') == 0) {
-      $lines = array(64, 1024);
-      foreach ($lines as $line) {
-        simpletest_generate_file('binary', 64, $line, 'binary');
-      }
-      $generated = TRUE;
-    }
-
-    if (simpletest_get_file_count($path, 'text') == 0) {
-      $lines = array(16, 256, 1024, 2048, 20480);
-      foreach ($lines as $line) {
-        simpletest_generate_file('text', 64, $line);
-      }
-      $generated = TRUE;
-    }
 
-    // Copy other test files for consistency.
-    $files = file_scan_directory($path, '(html|image|javascript|php|sql)-.*');
-    if (count($files) == 0) {
-      $original = drupal_get_path('module', 'simpletest') . '/files';
-      $files = file_scan_directory($original, '(html|image|javascript|php|sql)-.*');
-      foreach ($files as $file) {
-        file_copy($file->filename, $path . '/' . $file->basename);
-      }
-      $generated = TRUE;
-    }
-
-    if ($generated) {
-      $ret[] = array('success' => TRUE, 'query' => 'Extra test files generated.');
-    }
+  // Drop any existing SimpleTest tables.
+  if (db_table_exists('simpletest')) {
+    db_drop_table($ret, 'simpletest');
   }
-
-  // Install 6.x-2.1 schema.
-  $schema['simpletest'] = array(
-    'description' => t('Stores simpletest messages'),
-    'fields' => array(
-      'message_id'  => array(
-        'type' => 'serial',
-        'not null' => TRUE,
-        'description' => t('Primary Key: Unique simpletest message ID.'),
-      ),
-      'test_id' => array(
-        'type' => 'int',
-        'not null' => TRUE,
-        'default' => 0,
-        'description' => t('Test ID, messages belonging to the same ID are reported together'),
-      ),
-      'test_class' => array(
-        'type' => 'varchar',
-        'length' => 255,
-        'not null' => TRUE,
-        'default' => '',
-        'description' => t('The name of the class that created this message.'),
-      ),
-      'status' => array(
-        'type' => 'varchar',
-        'length' => 9,
-        'not null' => TRUE,
-        'default' => '',
-        'description' => t('Message status. Core understands pass, fail, exception.'),
-      ),
-      'message' => array(
-        'type' => 'varchar',
-        'length' => 255,
-        'not null' => TRUE,
-        'default' => '',
-        'description' => t('The message itself.'),
-      ),
-      'message_group' => array(
-        'type' => 'varchar',
-        'length' => 255,
-        'not null' => TRUE,
-        'default' => '',
-        'description' => t('The message group this message belongs to. For example: warning, browser, user.'),
-      ),
-      'caller' => array(
-        'type' => 'varchar',
-        'length' => 255,
-        'not null' => TRUE,
-        'default' => '',
-        'description' => t('Name of the caller function or method that created this message.'),
-      ),
-      'line' => array(
-        'type' => 'int',
-        'not null' => TRUE,
-        'default' => 0,
-        'description' => t('Line number on which the function is called.'),
-      ),
-      'file' => array(
-        'type' => 'varchar',
-        'length' => 255,
-        'not null' => TRUE,
-        'default' => '',
-        'description' => t('Name of the file where the function is called.'),
-      ),
-    ),
-    'primary key' => array('message_id'),
-    'indexes' => array(
-      'reporter' => array('test_class', 'message_id'),
-    ),
-  );
-  $schema['simpletest_test_id'] = array(
-    'description' => t('Stores simpletest test IDs, used to auto-incrament the test ID so that a fresh test ID is used.'),
-    'fields' => array(
-      'test_id'  => array(
-        'type' => 'serial',
-        'not null' => TRUE,
-        'description' => t('Primary Key: Unique simpletest ID used to group test results together. Each time a set of tests
-                            are run a new test ID is used.')
-      )
-    ),
-    'primary key' => array('test_id')
-  );
-
-  // Install non-existent tables.
-  db_create_table($ret, 'simpletest', $schema['simpletest']);
-
-  // Drop table to make sure field 'test_id' and primary key is fixed (6.x-2.1 bug fixed in 6.x-2.2).
   if (db_table_exists('simpletest_test_id')) {
     db_drop_table($ret, 'simpletest_test_id');
   }
-  db_create_table($ret, 'simpletest_test_id', $schema['simpletest_test_id']);
-
-  return $ret;
-}
-
-/**
- * Change message field to type text.
- */
-function simpletest_update_6001() {
-  $ret = array();
-  $schema = array();
-
-  $schema = array(
-    'type' => 'text',
-    'not null' => TRUE
-  );
-
-  // Clear test results to prevent odd results.
-  db_query('DELETE FROM {simpletest}');
-
-  db_drop_field($ret, 'simpletest', 'message');
-  db_add_field($ret, 'simpletest', 'message', $schema);
-
-  return $ret;
-}
-
-/**
- * Change caller field to function.
- */
-function simpletest_update_6002() {
-  $ret = array();
-  $schema = array();
-
-  $schema = array(
-    'type' => 'varchar',
-    'length' => 255,
-    'not null' => TRUE,
-    'default' => ''
-  );
-
-  // Clear test results to prevent odd results.
-  db_query('DELETE FROM {simpletest}');
 
-  db_drop_field($ret, 'simpletest', 'caller');
-  db_add_field($ret, 'simpletest', 'function', $schema);
+  // Install most recent schema and files.
+  simpletest_install();
 
   return $ret;
 }
diff --git a/modules/simpletest/simpletest.js b/modules/simpletest/simpletest.js
index 38a3a4b..29e2f2f 100644
--- a/modules/simpletest/simpletest.js
+++ b/modules/simpletest/simpletest.js
@@ -1,20 +1,26 @@
-// $Id: simpletest.js,v 1.2.4.4 2009/02/08 02:35:39 boombatower Exp $
+// $Id: simpletest.js,v 1.2.4.5 2009/09/05 13:34:10 boombatower Exp $
+// Core: Id: simpletest.js,v 1.11 2009/04/27 20:19:37 webchick Exp
+//(function ($) {
 
 /**
  * Add the cool table collapsing on the testing overview page.
  */
 //Drupal.behaviors.simpleTestMenuCollapse = {
-//  attach: function() {
+//  attach: function (context, settings) {
 Drupal.behaviors.simpleTestMenuCollapse = function() {
     var timeout = null;
     // Adds expand-collapse functionality.
-    $('div.simpletest-image').each(function() {
+    $('div.simpletest-image').each(function () {
+//      direction = settings.simpleTest[$(this).attr('id')].imageDirection;
+//      $(this).html(settings.simpleTest.images[direction]);
       direction = Drupal.settings.simpleTest[$(this).attr('id')].imageDirection;
       $(this).html(Drupal.settings.simpleTest.images[direction]);
     });
 
     // Adds group toggling functionality to arrow images.
-    $('div.simpletest-image').click(function() {
+    $('div.simpletest-image').click(function () {
+//      var trs = $(this).parents('tbody').children('.' + settings.simpleTest[this.id].testClass);
+//      var direction = settings.simpleTest[this.id].imageDirection;
       var trs = $(this).parents('tbody').children('.' + Drupal.settings.simpleTest[this.id].testClass);
       var direction = Drupal.settings.simpleTest[this.id].imageDirection;
       var row = direction ? trs.size() - 1 : 0;
@@ -48,6 +54,8 @@ Drupal.behaviors.simpleTestMenuCollapse = function() {
       rowToggle();
 
       // Toggle the arrow image next to the test group title.
+//      $(this).html(settings.simpleTest.images[(direction ? 0 : 1)]);
+//      settings.simpleTest[this.id].imageDirection = !direction;
       $(this).html(Drupal.settings.simpleTest.images[(direction ? 0 : 1)]);
       Drupal.settings.simpleTest[this.id].imageDirection = !direction;
 
@@ -60,37 +68,38 @@ Drupal.behaviors.simpleTestMenuCollapse = function() {
  * selected/deselected.
  */
 //Drupal.behaviors.simpleTestSelectAll = {
-//  attach: function() {
+//  attach: function (context, settings) {
 Drupal.behaviors.simpleTestSelectAll = function() {
-    $('td.simpletest-select-all').each(function() {
+    $('td.simpletest-select-all').each(function () {
+//      var testCheckboxes = settings.simpleTest['simpletest-test-group-' + $(this).attr('id')].testNames;
       var testCheckboxes = Drupal.settings.simpleTest['simpletest-test-group-' + $(this).attr('id')].testNames;
       var groupCheckbox = $('<input type="checkbox" class="form-checkbox" id="' + $(this).attr('id') + '-select-all" />');
 
       // Each time a single-test checkbox is checked or unchecked, make sure
       // that the associated group checkbox gets the right state too.
-      var updateGroupCheckbox = function() {
+      var updateGroupCheckbox = function () {
         var checkedTests = 0;
         for (var i = 0; i < testCheckboxes.length; i++) {
-          $('#' + testCheckboxes[i]).each(function() {
+          $('#' + testCheckboxes[i]).each(function () {
             if (($(this).attr('checked'))) {
               checkedTests++;
             }
           });
         }
         $(groupCheckbox).attr('checked', (checkedTests == testCheckboxes.length));
-      }
+      };
 
       // Have the single-test checkboxes follow the group checkbox.
-      groupCheckbox.change(function() {
+      groupCheckbox.change(function () {
         var checked = !!($(this).attr('checked'));
         for (var i = 0; i < testCheckboxes.length; i++) {
-          $('#'+ testCheckboxes[i]).attr('checked', checked);
+          $('#' + testCheckboxes[i]).attr('checked', checked);
         }
       });
 
       // Have the group checkbox follow the single-test checkboxes.
       for (var i = 0; i < testCheckboxes.length; i++) {
-        $('#' + testCheckboxes[i]).change(function() {
+        $('#' + testCheckboxes[i]).change(function () {
           updateGroupCheckbox();
         });
       }
@@ -101,3 +110,5 @@ Drupal.behaviors.simpleTestSelectAll = function() {
     });
 //  }
 };
+
+//})(jQuery);
diff --git a/modules/simpletest/simpletest.module b/modules/simpletest/simpletest.module
index 64d77f6..b0082bd 100644
--- a/modules/simpletest/simpletest.module
+++ b/modules/simpletest/simpletest.module
@@ -1,6 +1,7 @@
 <?php
-// $Id: simpletest.module,v 1.33.2.4.2.17 2009/04/23 05:39:52 boombatower Exp $
-// Core: Id: simpletest.module,v 1.39 2009/03/31 01:49:53 webchick Exp
+// $Id: simpletest.module,v 1.33.2.4.2.20 2009/09/14 20:34:30 boombatower Exp $
+// Core: Id: simpletest.module,v 1.71 2009/08/24 00:14:21 webchick Exp
+
 /**
  * @file
  * Backport of Drupal 7 simpletest.module with modifications, see BACKPORT.txt.
@@ -14,11 +15,11 @@
 function simpletest_help($path, $arg) {
   switch ($path) {
     case 'admin/help#simpletest':
-      $output  = '<p>' . t('The SimpleTest module is a framework for running automated unit tests in Drupal. It can be used to verify a working state of Drupal before and after any code changes, or as a means for developers to write and execute tests for their modules.') .'</p>';
-      $output .= '<p>' . t('Visit <a href="@admin-simpletest">Administer >> Site building >> SimpleTest</a> to display a list of available tests. For comprehensive testing, select <em>all</em> tests, or individually select tests for more targeted testing. Note that it might take several minutes for all tests to complete.)', array('@admin-simpletest' => url('admin/build/testing'))) .'</p>';
-      $output .= '<p>' . t('After the tests have run, a message will be displayed next to each test group indicating whether tests within it passed, failed, or had exceptions. A pass means that a test returned the expected results, while fail means that it did not. An exception normally indicates an error outside of the test, such as a PHP warning or notice. If there were fails or exceptions, the results are expanded, and the tests that had issues will be indicated in red or pink rows. Use these results to refine your code and tests until all tests return a pass.') .'</p>';
-      $output .= '<p>' . t('For more information on creating and modifying your own tests, see the <a href="@simpletest-api">SimpleTest API Documentation</a> in the Drupal handbook.', array('@simpletest-api' => 'http://drupal.org/simpletest')) .'</p>';
-      $output .= '<p>' . t('For more information, see the online handbook entry for <a href="@simpletest">SimpleTest module</a>.', array('@simpletest' => 'http://drupal.org/handbook/modules/simpletest')) .'</p>';
+      $output  = '<p>' . t('The SimpleTest module is a framework for running automated unit tests in Drupal. It can be used to verify a working state of Drupal before and after any code changes, or as a means for developers to write and execute tests for their modules.') . '</p>';
+      $output .= '<p>' . t('Visit <a href="@admin-simpletest">Administer >> Structure >> SimpleTest</a> to display a list of available tests. For comprehensive testing, select <em>all</em> tests, or individually select tests for more targeted testing. Note that it might take several minutes for all tests to complete.)', array('@admin-simpletest' => url('admin/build/testing'))) . '</p>';
+      $output .= '<p>' . t('After the tests have run, a message will be displayed next to each test group indicating whether tests within it passed, failed, or had exceptions. A pass means that a test returned the expected results, while fail means that it did not. An exception normally indicates an error outside of the test, such as a PHP warning or notice. If there were fails or exceptions, the results are expanded, and the tests that had issues will be indicated in red or pink rows. Use these results to refine your code and tests until all tests return a pass.') . '</p>';
+      $output .= '<p>' . t('For more information on creating and modifying your own tests, see the <a href="@simpletest-api">SimpleTest API Documentation</a> in the Drupal handbook.', array('@simpletest-api' => 'http://drupal.org/simpletest')) . '</p>';
+      $output .= '<p>' . t('For more information, see the online handbook entry for <a href="@simpletest">SimpleTest module</a>.', array('@simpletest' => 'http://drupal.org/handbook/modules/simpletest')) . '</p>';
       return $output;
   }
 }
@@ -33,6 +34,28 @@ function simpletest_menu() {
     'page arguments' => array('simpletest_test_form'),
     'description' => 'Run tests against Drupal core and your active modules. These tests help assure that your site code is working as designed.',
     'access arguments' => array('administer unit tests'),
+    'file' => 'simpletest.pages.inc',
+  );
+  $items['admin/build/testing/list'] = array(
+    'title' => 'List',
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+  );
+  $items['admin/build/testing/settings'] = array(
+    'title' => 'Settings',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('simpletest_settings_form'),
+    'access arguments' => array('administer unit tests'),
+    'type' => MENU_LOCAL_TASK,
+    'file' => 'simpletest.pages.inc',
+  );
+  $items['admin/build/testing/results/%'] = array(
+    'title' => 'Test result',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('simpletest_result_form', 4),
+    'description' => 'View result of tests.',
+    'access arguments' => array('administer unit tests'),
+    'type' => MENU_CALLBACK,
+    'file' => 'simpletest.pages.inc',
   );
   return $items;
 }
@@ -41,12 +64,6 @@ function simpletest_menu() {
  * Implementation of hook_perm().
  */
 function simpletest_perm() {
-//  return array(
-//    'administer unit tests' => array(
-//      'title' => t('Administer unit tests'),
-//      'description' => t('Manage and run automated testing. %warning', array('%warning' => t('Warning: Give to trusted roles only; this permission has security implications.'))),
-//    ),
-//  );
   return array('administer unit tests');
 }
 
@@ -56,294 +73,27 @@ function simpletest_perm() {
 function simpletest_theme() {
   return array(
     'simpletest_test_table' => array(
-      'arguments' => array('table' => NULL)
+      'arguments' => array('table' => NULL),
+      'file' => 'simpletest.pages.inc',
     ),
     'simpletest_result_summary' => array(
-      'arguments' => array('form' => NULL)
-    ),
-  );
-}
-
-/**
- * Menu callback for both running tests and listing possible tests
- */
-function simpletest_test_form() {
-  $form = array();
-
-  // List out all tests in groups for selection.
-  $uncategorized_tests = simpletest_get_all_tests();
-  $tests = simpletest_categorize_tests($uncategorized_tests);
-  $selected_tests = array();
-
-  if (isset($_SESSION['test_id'])) {
-    // Select all results using the active test ID used to group them.
-    $results = db_query("SELECT * FROM {simpletest} WHERE test_id = %d ORDER BY test_class, message_id", $_SESSION['test_id']);
-
-    $summary = array(
-      '#theme' => 'simpletest_result_summary',
-      '#pass' => 0,
-      '#fail' => 0,
-      '#exception' => 0,
-      '#weight' => -10,
-    );
-    $form['summary'] = $summary;
-    $form['results'] = array();
-    $group_summary = array();
-    $map = array(
-      'pass' => theme('image', 'misc/watchdog-ok.png'),
-      'fail' => theme('image', 'misc/watchdog-error.png'),
-      'exception' => theme('image', 'misc/watchdog-warning.png'),
-    );
-    $header = array(t('Message'), t('Group'), t('Filename'), t('Line'), t('Function'), array('colspan' => 2, 'data' => t('Status')));
-    while ($result = db_fetch_object($results)) {
-      $class = $result->test_class;
-      $info = call_user_func(array($class, 'getInfo'));
-      $group = $info['group'];
-      $selected_tests[$group][$class] = TRUE;
-      if (!isset($group_summary[$group])) {
-        $group_summary[$group] = $summary;
-      }
-      $element = &$form['results'][$group][$class];
-      if (!isset($element)) {
-        $element['summary'] = $summary;
-      }
-      $status = $result->status;
-      // This reporter can only handle pass, fail and exception.
-      if (isset($map[$status])) {
-        $element['#title'] = $info['name'];
-        $status_index = '#'. $status;
-        $form['summary'][$status_index]++;
-        $group_summary[$group][$status_index]++;
-        $element['summary'][$status_index]++;
-        $element['result_table']['#rows'][] = array(
-          'data' => array(
-            $result->message,
-            $result->message_group,
-            basename($result->file),
-            $result->line,
-            $result->function,
-            $map[$status],
-          ),
-          'class' => "simpletest-$status",
-        );
-      }
-      unset($element);
-    }
-
-    // Clear test results.
-    simpletest_clean_results_table($_SESSION['test_id']);
-    unset($_SESSION['test_id']);
-
-    $all_ok = TRUE;
-    foreach ($form['results'] as $group => &$elements) {
-      $group_ok = TRUE;
-      foreach ($elements as $class => &$element) {
-        $info = call_user_func(array($class, 'getInfo'));
-        $ok = $element['summary']['#fail'] + $element['summary']['#exception'] == 0;
-        $element += array(
-          '#type' => 'fieldset',
-          '#collapsible' => TRUE,
-          '#collapsed' => $ok,
-          '#description' => $info['description'],
-        );
-//        $element['result_table']['#markup'] = theme('table', $header, $element['result_table']['#rows']);
-        $element['result_table']['#value'] = theme('table', $header, $element['result_table']['#rows']);
-        $element['summary']['#ok'] = $ok;
-        $group_ok = $group_ok && $ok;
-      }
-      $elements += array(
-        '#type' => 'fieldset',
-        '#title' => $group,
-        '#collapsible' => TRUE,
-        '#collapsed' => $group_ok,
-        'summary' => $group_summary[$group],
-      );
-      $elements['summary']['#ok'] = $group_ok;
-      $all_ok = $group_ok && $all_ok;
-    }
-    $form['summary']['#ok'] = $all_ok;
-  }
-  $form['tests'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Tests'),
-    '#description' => t('Select the tests you would like to run, and click Run tests.'),
-  );
-  $form['tests']['table'] = array(
-    '#theme' => 'simpletest_test_table'
-    );
-  foreach ($tests as $group_name => $test_group) {
-    $form['tests']['table'][$group_name] = array(
-      '#collapsed' => TRUE,
-    );
-    foreach ($test_group as $class => $info) {
-      $is_selected = isset($selected_tests[$group_name][$class]);
-      $form['tests']['table'][$group_name][$class] = array(
-        '#type' => 'checkbox',
-        '#title' => $info['name'],
-        '#default_value' => $is_selected,
-        '#description' => $info['description'],
-      );
-      if ($is_selected) {
-        $form['tests']['table'][$group_name]['#collapsed'] = FALSE;
-      }
-    }
-  }
-
-  // Action buttons.
-  $form['tests']['op'] = array(
-    '#type' => 'submit',
-    '#value' => t('Run tests'),
-  );
-  $form['reset'] = array(
-    '#type' => 'fieldset',
-    '#collapsible' => FALSE,
-    '#collapsed' => FALSE,
-    '#title' => t('Clean test environment'),
-    '#description' => t('Remove tables with the prefix "simpletest" and temporary directories that are left over from tests that crashed. This is intended for developers when creating tests.'),
-  );
-  $form['reset']['op'] = array(
-    '#type' => 'submit',
-    '#value' => t('Clean environment'),
-    '#submit' => array('simpletest_clean_environment'),
-  );
-
-  return $form;
-}
-
-function theme_simpletest_test_table($table) {
-  drupal_add_css(drupal_get_path('module', 'simpletest') . '/simpletest.css');
-  drupal_add_js(drupal_get_path('module', 'simpletest') . '/simpletest.js');
-
-  // Create header for test selection table.
-  $header = array(
-    theme('table_select_header_cell'),
-    array('data' => t('Test'), 'class' => 'simpletest_test'),
-    array('data' => t('Description'), 'class' => 'simpletest_description'),
-  );
-
-  // Define the images used to expand/collapse the test groups.
-  $js = array(
-    'images' => array(
-      theme('image', 'misc/menu-collapsed.png', 'Expand', 'Expand'),
-      theme('image', 'misc/menu-expanded.png', 'Collapsed', 'Collapsed'),
+      'arguments' => array('form' => NULL),
+      'file' => 'simpletest.pages.inc',
     ),
   );
-
-  // Go through each test group and create a row.
-  $rows = array();
-  foreach (element_children($table) as $key) {
-    $element = &$table[$key];
-    $row = array();
-
-    // Make the class name safe for output on the page by replacing all
-    // non-word/decimal characters with a dash (-).
-    $test_class = strtolower(trim(preg_replace("/[^\w\d]/", "-", $key)));
-
-    // Select the right "expand"/"collapse" image, depending on whether the
-    // category is expanded (at least one test selected) or not.
-    $collapsed = !empty($element['#collapsed']);
-    $image_index = $collapsed ? 0 : 1;
-
-    // Place-holder for checkboxes to select group of tests.
-    $row[] = array('id' => $test_class, 'class' => 'simpletest-select-all');
-
-    // Expand/collapse image and group title.
-    $row[] = array(
-      'data' =>  '<div class="simpletest-image" id="simpletest-test-group-' . $test_class . '"></div>&nbsp;' .
-                 '<label for="' . $test_class . '-select-all" class="simpletest-group-label">' . $key . '</label>',
-      'style' => 'font-weight: bold;'
-      );
-
-      $row[] = isset($element['#description']) ? $element['#description'] : '&nbsp;';
-      $rows[] = array('data' => $row, 'class' => 'simpletest-group');
-
-      // Add individual tests to group.
-      $current_js = array(
-        'testClass' => $test_class . '-test',
-        'testNames' => array(),
-        'imageDirection' => $image_index,
-        'clickActive' => FALSE,
-      );
-      foreach (element_children($element) as $test_name) {
-        $test = $element[$test_name];
-        $row = array();
-
-        $current_js['testNames'][] = 'edit-' . $test_name;
-
-        // Store test title and description so that checkbox won't render them.
-        $title = $test['#title'];
-        $description = $test['#description'];
-
-        unset($test['#title']);
-        unset($test['#description']);
-
-        // Test name is used to determine what tests to run.
-        $test['#name'] = $test_name;
-
-        $row[] = drupal_render($test);
-        $row[] = theme('indentation', 1) . '<label for="edit-' . $test_name . '">' . $title . '</label>';
-        $row[] = '<div class="description">' . $description . '</div>';
-        $rows[] = array('data' => $row, 'class' => $test_class . '-test' . ($collapsed ? ' js-hide' : ''));
-      }
-      $js['simpletest-test-group-'. $test_class] = $current_js;
-      unset($table[$key]);
-  }
-
-  // Add js array of settings.
-  drupal_add_js(array('simpleTest' => $js), 'setting');
-
-  if (empty($rows)) {
-    return '<strong>' . t('No tests to display.') . '</strong>';
-  }
-  else {
-    return theme('table', $header, $rows, array('id' => 'simpletest-form-table'));
-  }
-}
-
-/**
- * Implementation of hook_js_alter().
- */
-function simpletest_js_alter(&$javascript) {
-  // Since SimpleTest is a special use case for the table select, stick the
-  // SimpleTest JavaScript above the table select.
-  $simpletest = drupal_get_path('module', 'simpletest') . '/simpletest.js';
-  if (array_key_exists($simpletest, $javascript) && array_key_exists('misc/tableselect.js', $javascript)) {
-    $javascript[$simpletest]['weight'] = $javascript['misc/tableselect.js']['weight'] - 1;
-  }
-}
-
-function theme_simpletest_result_summary($form, $text = NULL) {
-  return '<div class="simpletest-'. ($form['#ok'] ? 'pass' : 'fail') .'">' . _simpletest_format_summary_line($form) . '</div>';
 }
 
 function _simpletest_format_summary_line($summary) {
-  return t('@pass, @fail, and @exception', array(
+  $args = array(
     '@pass' => format_plural(isset($summary['#pass']) ? $summary['#pass'] : 0, '1 pass', '@count passes'),
     '@fail' => format_plural(isset($summary['#fail']) ? $summary['#fail'] : 0, '1 fail', '@count fails'),
     '@exception' => format_plural(isset($summary['#exception']) ? $summary['#exception'] : 0, '1 exception', '@count exceptions'),
-  ));
-}
-
-/**
- * Run selected tests.
- */
-function simpletest_test_form_submit($form, &$form_state) {
-  // Ensure that all classes are loaded before we create instances to get test information and run.
-  simpletest_get_all_tests();
-
-  // Get list of tests.
-  $tests_list = array();
-  foreach ($form_state['values'] as $class_name => $value) {
-    if (class_exists($class_name) && $value === 1) {
-      $tests_list[] = $class_name;
-    }
-  }
-  if (count($tests_list) > 0 ) {
-    simpletest_run_tests($tests_list, 'drupal');
-  }
-  else {
-    drupal_set_message(t('No test(s) selected.'), 'error');
+  );
+  if (!$summary['#debug']) {
+    return t('@pass, @fail, and @exception', $args);
   }
+  $args['@debug'] = format_plural(isset($summary['#debug']) ? $summary['#debug'] : 0, '1 debug message', '@count debug messages');
+  return t('@pass, @fail, @exception, and @debug', $args);
 }
 
 /**
@@ -357,10 +107,12 @@ function simpletest_test_form_submit($form, &$form_state) {
  */
 function simpletest_run_tests($test_list, $reporter = 'drupal') {
   cache_clear_all();
-//  $test_id = db_insert('simpletest_test_id')->useDefaults(array('test_id'))->execute();
-  db_query('INSERT INTO {simpletest_test_id} VALUES (default)');
+  db_query('INSERT INTO {simpletest_test_id} (test_id) VALUES (default)');
   $test_id = db_last_insert_id('simpletest_test_id', 'test_id');
 
+  // Clear out the previous verbose files.
+  simpletest_clean_temporary_directory(file_directory_path() . '/simpletest/verbose');
+
   // Get the info for the first test being run.
   $first_test = array_shift($test_list);
   $first_instance = new $first_test();
@@ -373,34 +125,33 @@ function simpletest_run_tests($test_list, $reporter = 'drupal') {
       array('_simpletest_batch_operation', array($test_list, $test_id)),
     ),
     'finished' => '_simpletest_batch_finished',
-    'redirect' => 'admin/build/testing',
     'progress_message' => '',
     'css' => array(drupal_get_path('module', 'simpletest') . '/simpletest.css'),
     'init_message' => t('Processing test @num of @max - %test.', array('%test' => $info['name'], '@num' => '1', '@max' => count($test_list))),
   );
   batch_set($batch);
+
+  module_invoke_all('test_group_started');
+
   // Normally, the forms portion of the batch API takes care of calling
   // batch_process(), but in the process it saves the whole $form into the
   // database (which is huge for the test selection form).
   // By calling batch_process() directly, we skip that behavior and ensure
   // that we don't exceed the size of data that can be sent to the database
   // (max_allowed_packet on MySQL).
-  batch_process();
+  batch_process('admin/build/testing/results/' . $test_id);
 }
 
 /**
  * Batch operation callback.
  */
 function _simpletest_batch_operation($test_list_init, $test_id, &$context) {
-  // Ensure that all classes are loaded before we unserialize some instances.
-  simpletest_get_all_tests();
-
   // Get working values.
   if (!isset($context['sandbox']['max'])) {
     // First iteration: initialize working values.
     $test_list = $test_list_init;
     $context['sandbox']['max'] = count($test_list);
-    $test_results = array('#pass' => 0, '#fail' => 0, '#exception' => 0);
+    $test_results = array('#pass' => 0, '#fail' => 0, '#exception' => 0, '#debug' => 0);
   }
   else {
     // Nth iteration: get the current values where we last stored them.
@@ -411,11 +162,19 @@ function _simpletest_batch_operation($test_list_init, $test_id, &$context) {
 
   // Perform the next test.
   $test_class = array_shift($test_list);
+
+  // Drupal 6.
+  require_once drupal_get_path('module', 'simpletest') . '/drupal_web_test_case.php';
+  $classes = simpletest_test_get_all_classes();
+  require_once $classes[$test_class]['file'];
+
   $test = new $test_class($test_id);
   $test->run();
   $size = count($test_list);
   $info = $test->getInfo();
 
+  module_invoke_all('test_finished', $test->results);
+
   // Gather results and compose the report.
   $test_results[$test_class] = $test->results;
   foreach ($test_results[$test_class] as $key => $value) {
@@ -442,88 +201,179 @@ function _simpletest_batch_operation($test_list_init, $test_id, &$context) {
 
 //function _simpletest_batch_finished($success, $results, $operations, $elapsed) {
 function _simpletest_batch_finished($success, $results, $operations) {
-  if (isset($results['test_id'])) {
-//    drupal_set_session('test_id', $results['test_id']);
-    $_SESSION['test_id'] = $results['test_id'];
-  }
   if ($success) {
-//    drupal_set_message(t('The tests finished in @elapsed.', array('@elapsed' => $elapsed)));
-    drupal_set_message(t('The tests finished.'));
+    drupal_set_message(t('The test run finished.'));
   }
   else {
-    drupal_set_message(t('The tests did not successfully finish.'), 'error');
+    // Use the test_id passed as a parameter to _simpletest_batch_operation().
+    $test_id = $operations[0][1][1];
+
+    // Retrieve the last database prefix used for testing and the last test
+    // class that was run from. Use the information to read the lgo file
+    // in case any fatal errors caused the test to crash.
+    list($last_prefix, $last_test_class) = simpletest_last_test_get($test_id);
+    simpletest_log_read($test_id, $last_prefix, $last_test_class);
+
+    drupal_set_message(t('The test run did not successfully finish.'), 'error');
+    drupal_set_message(t('Please use the <em>Clean environment</em> button to clean-up temporary files and tables.'), 'warning');
   }
+  module_invoke_all('test_group_finished');
+}
+
+/*
+ * Get information about the last test that ran given a test ID.
+ *
+ * @param $test_id
+ *   The test ID to get the last test from.
+ * @return
+ *   Array containing the last database prefix used and the last test class
+ *   that ran.
+ */
+function simpletest_last_test_get($test_id) {
+//  $last_prefix = db_result(db_query_range('SELECT last_prefix FROM {simpletest_test_id} WHERE test_id = :test_id', array(':test_id' => $test_id), 0, 1));
+  $last_prefix = db_result(db_query_range('SELECT last_prefix FROM {simpletest_test_id} WHERE test_id = ' . $test_id, 0, 1));
+//  $last_test_class = db_result(db_query_range('SELECT test_class FROM {simpletest} WHERE test_id = :test_id ORDER BY message_id DESC', array(':test_id' => $test_id), 0, 1));
+  $last_test_class = db_result(db_query_range('SELECT test_class FROM {simpletest} WHERE test_id = ' . $test_id . ' ORDER BY message_id DESC', 0, 1));
+  return array($last_prefix, $last_test_class);
 }
 
 /**
- * Get a list of all of the tests.
+ * Read the error log and report any errors as assertion failures.
+ *
+ * The errors in the log should only be fatal errors since any other errors
+ * will have been recorded by the error handler.
  *
+ * @param $test_id
+ *   The test ID to which the log relates.
+ * @param $prefix
+ *   The database prefix to which the log relates.
+ * @param $test_class
+ *   The test class to which the log relates.
+ * @param $during_test
+ *   Indicates that the current file directory path is a temporary file
+ *   file directory used during testing.
  * @return
- *   An array of tests, with the class name as the keys and the instantiated
- *   versions of the classes as the values.
+ *   Found any entries in log.
  */
-function simpletest_get_all_tests() {
-  static $formatted_classes;
-  if (!isset($formatted_classes)) {
-//    require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'simpletest') . '/drupal_web_test_case.php';
-    require_once drupal_get_path('module', 'simpletest') . '/drupal_web_test_case.php';
-    $files = array();
-    foreach (array_keys(module_rebuild_cache()) as $module) {
-      $module_path = drupal_get_path('module', $module);
-      $test = $module_path . "/$module.test";
-      if (file_exists($test)) {
-        $files[] = $test;
+function simpletest_log_read($test_id, $prefix, $test_class, $during_test = FALSE) {
+  require_once drupal_get_path('module', 'simpletest') . '/drupal_web_test_case.php';
+  $log = file_directory_path() . ($during_test ? '' : '/simpletest/' . substr($prefix, 10)) . '/error.log';
+  $found = FALSE;
+  if (file_exists($log)) {
+    foreach (file($log) as $line) {
+      if (preg_match('/\[.*?\] (.*?): (.*?) in (.*) on line (\d+)/', $line, $match)) {
+        // Parse PHP fatal errors for example: PHP Fatal error: Call to
+        // undefined function break_me() in /path/to/file.php on line 17
+        $caller = array(
+          'line' => $match[4],
+          'file' => $match[3],
+        );
+        DrupalTestCase::insertAssert($test_id, $test_class, FALSE, $match[2], $match[1], $caller);
+      }
+      else {
+        // Unkown format, place the entire message in the log.
+        DrupalTestCase::insertAssert($test_id, $test_class, FALSE, $line, 'Fatal error');
       }
+      $found = TRUE;
+    }
+  }
+  return $found;
+}
+
+/**
+ * Get a list of all of the tests provided by the system.
+ *
+ * The list of test classes is loaded from the registry where it looks for
+ * files ending in ".test". Once loaded the test list is cached and stored in
+ * a static variable. In order to list tests provided by disabled modules
+ * hook_registry_files_alter() is used to forcefully add them to the registry.
+ *
+ * @return
+ *   An array of tests keyed with the groups specified in each of the tests
+ *   getInfo() method and then keyed by the test class. An example of the array
+ *   structure is provided below.
+ *
+ *   @code
+ *     $groups['Blog'] => array(
+ *       'BlogTestCase' => array(
+ *         'name' => 'Blog functionality',
+ *         'description' => 'Create, view, edit, delete, ...',
+ *         'group' => 'Blog',
+ *       ),
+ *     );
+ *   @endcode
+ * @see simpletest_registry_files_alter()
+ */
+function simpletest_test_get_all() {
+  static $groups;
+
+  if (!$groups) {
+    // Load test information from cache if available, otherwise retrieve the
+    // information from each tests getInfo() method.
+    if ($cache = cache_get('simpletest', 'cache')) {
+      $groups = $cache->data;
+    }
+    else {
+      // Select all clases in files ending with .test.
+      $classes = simpletest_test_get_all_classes();
+
+      $groups = array();
+
+      // Check that each class has a getInfo() method and store the information
+      // in an array keyed with the group specified in the test information.
+      foreach ($classes as $class) {
+        $class = $class['class'];
+
+        if (class_exists($class) && method_exists($class, 'getInfo')) {
+          // Valid test class, retrieve test information.
+          $info = call_user_func(array($class, 'getInfo'));
 
-      $tests_directory = $module_path . '/tests';
-      if (is_dir($tests_directory)) {
-//        foreach (file_scan_directory($tests_directory, '/\.test$/') as $file) {
-        foreach (file_scan_directory($tests_directory, '\.test$') as $file) {
-          // Drupal 6: Ignore 1.x style tests.
-          if (!preg_match('/class\s+.*?\s+extends\s+DrupalTestCase/', file_get_contents($file->filename))) {
-            // Ignore tests using the old format.
-            $files[] = $file->filename;
+          // Initialize test groups.
+          if (!isset($groups[$info['group']])) {
+            $groups[$info['group']] = array();
           }
+          $groups[$info['group']][$class] = $info;
         }
       }
-    }
+      // Sort the groups and tests within the groups by name.
+      uksort($groups, 'strnatcasecmp');
+      foreach ($groups as $group => &$tests) {
+        uksort($tests, 'strnatcasecmp');
+      }
 
-    $existing_classes = get_declared_classes();
-    foreach ($files as $file) {
-//      include_once DRUPAL_ROOT . '/' . $file;
-      include_once $file;
+      cache_set('simpletest', $groups);
     }
-    $classes = array_values(array_diff(get_declared_classes(), $existing_classes));
-    $formatted_classes = array();
-    foreach ($classes as $key => $class) {
-      if (!method_exists($class, 'getInfo')) {
-        unset($classes[$key]);
+  }
+  return $groups;
+}
+
+function simpletest_test_get_all_classes() {
+  // Must load DrupalWebTestCase before loading any other test classes which
+  // will extend it.
+  require_once 'drupal_web_test_case.php';
+
+  $classes = array();
+  $files = module_rebuild_cache();
+  foreach ($files as $file) {
+    $directory = dirname($file->filename);
+    $test_files = file_scan_directory($directory, '\.test$', array('.', '..', 'CVS', '.svn'), FALSE, FALSE);
+    $test_files += file_scan_directory($directory . '/tests', '\.test$');
+
+    foreach ($test_files as $test_file) {
+      $pre = get_declared_classes();
+      require_once $test_file->filename;
+      $post = get_declared_classes();
+
+      $classes_new = array_values(array_diff($post, $pre));
+      foreach ($classes_new as $class) {
+        $classes[$class] = array('file' => $test_file->filename, 'class' => $class);
       }
     }
   }
-  if (count($classes) == 0) {
-    drupal_set_message('No test cases found.', 'error');
-    return FALSE;
-  }
+
   return $classes;
 }
 
-/**
- * Categorize the tests into groups.
- *
- * @param $tests
- *   A list of tests from simpletest_get_all_tests.
- * @see simpletest_get_all_tests.
- */
-function simpletest_categorize_tests($tests) {
-  $groups = array();
-  foreach ($tests as $test) {
-    $info = call_user_func(array($test, 'getInfo'));
-    $groups[$info['group']][$test] = $info;
-  }
-  uksort($groups, 'strnatcasecmp');
-  return $groups;
-}
 
 /**
  * Remove all temporary database tables and directories.
@@ -531,15 +381,19 @@ function simpletest_categorize_tests($tests) {
 function simpletest_clean_environment() {
   simpletest_clean_database();
   simpletest_clean_temporary_directories();
-  $count = simpletest_clean_results_table();
-  drupal_set_message(t('Removed @count test results.', array('@count' => $count)));
+  if (variable_get('simpletest_clear_results', TRUE)) {
+    $count = simpletest_clean_results_table();
+    drupal_set_message(format_plural($count, 'Removed 1 test result.', 'Removed @count test results.'));
+  }
+  else {
+    drupal_set_message(t('Clear results is disabled and the test results table will not be cleared.'), 'warning');
+  }
 }
 
 /**
  * Removed prefixed tables from the database that are left over from crashed tests.
  */
 function simpletest_clean_database() {
-//  $tables = db_find_tables(Database::getConnection()->prefixTables('{simpletest}') . '%');
   $tables = simpletest_get_like_tables();
   $schema = drupal_get_schema_unprocessed('simpletest');
   $ret = array();
@@ -552,10 +406,10 @@ function simpletest_clean_database() {
   }
 
   if (count($ret) > 0) {
-    drupal_set_message(t('Removed @count left over tables.', array('@count' => count($ret))));
+    drupal_set_message(format_plural(count($ret), 'Removed 1 leftover table.', 'Removed @count leftover tables.'));
   }
   else {
-    drupal_set_message(t('No left over tables to remove.'));
+    drupal_set_message(t('No leftover tables to remove.'));
   }
 }
 
@@ -570,7 +424,7 @@ function simpletest_get_like_tables($base_table = 'simpletest', $count = FALSE)
   global $db_url, $db_prefix;
   $url = parse_url(is_array($db_url) ? $db_url['default'] : $db_url);
   $database = substr($url['path'], 1);
-  $result = db_query("SELECT table_name FROM information_schema.tables WHERE table_schema = '$database' AND table_name LIKE '$db_prefix$base_table%'");
+  $result = db_query("SELECT table_name FROM information_schema.tables WHERE (table_schema = '$database' OR table_catalog = '$database') AND table_name LIKE '$db_prefix$base_table%'");
   $schema = drupal_get_schema_unprocessed('simpletest');
 
   $tables = array();
@@ -583,13 +437,13 @@ function simpletest_get_like_tables($base_table = 'simpletest', $count = FALSE)
 }
 
 /**
- * Find all left over temporary directories and remove them.
+ * Find all leftover temporary directories and remove them.
  */
 function simpletest_clean_temporary_directories() {
   $files = scandir(file_directory_path());
   $count = 0;
   foreach ($files as $file) {
-    $path = file_directory_path() . '/' . $file;
+    $path = file_directory_path() . $file;
     if (is_dir($path) && preg_match('/^simpletest\d+/', $file)) {
       simpletest_clean_temporary_directory($path);
       $count++;
@@ -597,7 +451,7 @@ function simpletest_clean_temporary_directories() {
   }
 
   if ($count > 0) {
-    drupal_set_message(t('Removed @count temporary directories.', array('@count' => $count)));
+    drupal_set_message(format_plural($count, 'Removed 1 temporary directory.', 'Removed @count temporary directories.'));
   }
   else {
     drupal_set_message(t('No temporary directories to remove.'));
@@ -610,6 +464,11 @@ function simpletest_clean_temporary_directories() {
  * @param string $path Directory path.
  */
 function simpletest_clean_temporary_directory($path) {
+  // Drupal 6.
+  if (!is_dir($path)) {
+    return;
+  }
+
   $files = scandir($path);
   foreach ($files as $file) {
     if ($file != '.' && $file != '..') {
@@ -632,36 +491,26 @@ function simpletest_clean_temporary_directory($path) {
  * @param $test_id
  *   Test ID to remove results for, or NULL to remove all results.
  * @return
- *   The number of results removed or FALSE.
+ *   The number of results removed.
  */
 function simpletest_clean_results_table($test_id = NULL) {
   if (variable_get('simpletest_clear_results', TRUE)) {
     if ($test_id) {
-//      $count = db_result(db_query('SELECT COUNT(test_id) FROM {simpletest_test_id} WHERE test_id = :test_id', array(':test_id' => $test_id)));
       $count = db_result(db_query('SELECT COUNT(test_id) FROM {simpletest_test_id} WHERE test_id = %d', $test_id));
 
-//      db_delete("simpletest")
-//        ->condition('test_id', $test_id)
-//        ->execute();
-//      db_delete("simpletest_test_id")
-//        ->condition('test_id', $test_id)
-//        ->execute();
       db_query("DELETE FROM {simpletest} WHERE test_id = %d", $test_id);
       db_query("DELETE FROM {simpletest_test_id} WHERE test_id = %d", $test_id);
     }
     else {
       $count = db_result(db_query('SELECT COUNT(test_id) FROM {simpletest_test_id}'));
 
-      // Clear test results.
-//      db_delete("simpletest")->execute();
-//      db_delete("simpletest_test_id")->execute();
       db_query('DELETE FROM {simpletest}');
       db_query('DELETE FROM {simpletest_test_id}');
     }
 
     return $count;
   }
-  return FALSE;
+  return 0;
 }
 
 /**
diff --git a/modules/simpletest/simpletest.pages.inc b/modules/simpletest/simpletest.pages.inc
new file mode 100644
index 0000000..f4221f4
--- /dev/null
+++ b/modules/simpletest/simpletest.pages.inc
@@ -0,0 +1,464 @@
+<?php
+// $Id: simpletest.pages.inc,v 1.1.2.2 2009/09/14 22:37:35 boombatower Exp $
+
+/**
+ * @file
+ * Page callbacks for simpletest module.
+ */
+
+/**
+ * List tests arranged in groups that can be selected and run.
+ */
+function simpletest_test_form() {
+  $form = array();
+
+  $form['tests'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Tests'),
+    '#description' => t('Select the test(s) or test group(s) you would like to run, and click <em>Run tests</em>.'),
+  );
+
+  $form['tests']['table'] = array(
+    '#theme' => 'simpletest_test_table',
+  );
+
+  // Generate the list of tests arranged by group.
+  $groups = simpletest_test_get_all();
+  foreach ($groups as $group => $tests) {
+    $form['tests']['table'][$group] = array(
+      '#collapsed' => TRUE,
+    );
+
+    foreach ($tests as $class => $info) {
+      $form['tests']['table'][$group][$class] = array(
+        '#type' => 'checkbox',
+        '#title' => $info['name'],
+        '#description' => $info['description'],
+      );
+    }
+  }
+
+ // Operation buttons.
+ $form['tests']['op'] = array(
+   '#type' => 'submit',
+   '#value' => t('Run tests'),
+ );
+ $form['clean'] = array(
+   '#type' => 'fieldset',
+   '#collapsible' => FALSE,
+   '#collapsed' => FALSE,
+   '#title' => t('Clean test environment'),
+   '#description' => t('Remove tables with the prefix "simpletest" and temporary directories that are left over from tests that crashed. This is intended for developers when creating tests.'),
+ );
+ $form['clean']['op'] = array(
+   '#type' => 'submit',
+   '#value' => t('Clean environment'),
+   '#submit' => array('simpletest_clean_environment'),
+ );
+
+  return $form;
+}
+
+/**
+ * Theme the test list generated by simpletest_test_form() into a table.
+ *
+ * @param $table Form array that represent a table.
+ * @return HTML output.
+ */
+function theme_simpletest_test_table($table) {
+  drupal_add_css(drupal_get_path('module', 'simpletest') . '/simpletest.css');
+  drupal_add_js(drupal_get_path('module', 'simpletest') . '/simpletest.js');
+
+  // Create header for test selection table.
+  $header = array(
+    theme('table_select_header_cell'),
+    array('data' => t('Test'), 'class' => 'simpletest_test'),
+    array('data' => t('Description'), 'class' => 'simpletest_description'),
+  );
+
+  // Define the images used to expand/collapse the test groups.
+  $js = array(
+    'images' => array(
+      theme('image', 'misc/menu-collapsed.png', 'Expand', 'Expand'),
+      theme('image', 'misc/menu-expanded.png', 'Collapsed', 'Collapsed'),
+    ),
+  );
+
+  // Cycle through each test group and create a row.
+  $rows = array();
+  foreach (element_children($table) as $key) {
+    $element = &$table[$key];
+    $row = array();
+
+    // Make the class name safe for output on the page by replacing all
+    // non-word/decimal characters with a dash (-).
+    $test_class = strtolower(trim(preg_replace("/[^\w\d]/", "-", $key)));
+
+    // Select the right "expand"/"collapse" image, depending on whether the
+    // category is expanded (at least one test selected) or not.
+    $collapsed = !empty($element['#collapsed']);
+    $image_index = $collapsed ? 0 : 1;
+
+    // Place-holder for checkboxes to select group of tests.
+    $row[] = array('id' => $test_class, 'class' => 'simpletest-select-all');
+
+    // Expand/collapse image and group title.
+    $row[] = array(
+      'data' =>  '<div class="simpletest-image" id="simpletest-test-group-' . $test_class . '"></div>&nbsp;' .
+                 '<label for="' . $test_class . '-select-all" class="simpletest-group-label">' . $key . '</label>',
+      'style' => 'font-weight: bold;'
+    );
+
+    $row[] = '&nbsp;';
+
+    $rows[] = array('data' => $row, 'class' => 'simpletest-group');
+
+    // Add individual tests to group.
+    $current_js = array(
+      'testClass' => $test_class . '-test',
+      'testNames' => array(),
+      'imageDirection' => $image_index,
+      'clickActive' => FALSE,
+    );
+
+    // Sorting $element by children's #title attribute instead of by class name.
+    uasort($element, '_simpletest_sort_by_title');
+
+    // Cycle through each test within the current group.
+    foreach (element_children($element) as $test_name) {
+      $test = $element[$test_name];
+      $row = array();
+
+      $current_js['testNames'][] = 'edit-' . $test_name;
+
+      // Store test title and description so that checkbox won't render them.
+      $title = $test['#title'];
+      $description = $test['#description'];
+
+      unset($test['#title']);
+      unset($test['#description']);
+
+      // Test name is used to determine what tests to run.
+      $test['#name'] = $test_name;
+
+      $row[] = drupal_render($test);
+      $row[] = theme('indentation', 1) . '<label for="edit-' . $test_name . '">' . $title . '</label>';
+      $row[] = '<div class="description">' . $description . '</div>';
+
+      $rows[] = array('data' => $row, 'class' => $test_class . '-test ' . ($collapsed ? 'js-hide' : ''));
+    }
+    $js['simpletest-test-group-' . $test_class] = $current_js;
+    unset($table[$key]);
+  }
+
+  // Add js array of settings.
+  drupal_add_js(array('simpleTest' => $js), 'setting');
+
+  if (empty($rows)) {
+    return '<strong>' . t('No tests to display.') . '</strong>';
+  }
+  else {
+    return theme('table', $header, $rows, array('id' => 'simpletest-form-table'));
+  }
+}
+
+/**
+ * Sort element by title instead of by class name.
+ */
+function _simpletest_sort_by_title($a, $b) {
+  // This is for parts of $element that are not an array.
+  if (!isset($a['#title']) || !isset($b['#title'])) {
+    return 1;
+  }
+
+  return strcasecmp($a['#title'], $b['#title']);
+}
+
+/**
+ * Run selected tests.
+ */
+function simpletest_test_form_submit($form, &$form_state) {
+  // Get list of tests.
+  $tests_list = array();
+  $classes = simpletest_test_get_all_classes(); // Drupal 6.
+  foreach ($form_state['values'] as $class_name => $value) {
+    // Drupal 6.
+    if (isset($classes[$class_name]['file'])) {
+      require_once $classes[$class_name]['file'];
+    }
+
+    if (class_exists($class_name) && $value === 1) {
+      $tests_list[] = $class_name;
+    }
+  }
+  if (count($tests_list) > 0 ) {
+    simpletest_run_tests($tests_list, 'drupal');
+  }
+  else {
+    drupal_set_message(t('No test(s) selected.'), 'error');
+  }
+}
+
+/**
+ * Test results form for $test_id.
+ */
+function simpletest_result_form(&$form_state, $test_id) {
+  $form = array();
+
+  // Make sure there are test results to display and a re-run is not being performed.
+  $results = array();
+  if (is_numeric($test_id) && !$results = simpletest_result_get($test_id)) {
+    drupal_set_message(t('No test results to display.'), 'error');
+    drupal_goto('admin/build/testing');
+    return $form;
+  }
+
+  // Load all classes and include CSS.
+  drupal_add_css(drupal_get_path('module', 'simpletest') . '/simpletest.css', 'module');
+
+  // Keep track of which test cases passed or failed.
+  $filter = array(
+    'pass' => array(),
+    'fail' => array(),
+  );
+
+  // Summary result fieldset.
+  $form['result'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Results'),
+  );
+  $form['result']['summary'] = $summary = array(
+    '#theme' => 'simpletest_result_summary',
+    '#pass' => 0,
+    '#fail' => 0,
+    '#exception' => 0,
+    '#debug' => 0,
+  );
+
+  // Cycle through each test group.
+  $header = array(t('Message'), t('Group'), t('Filename'), t('Line'), t('Function'), t('Status'));
+  $form['result']['results'] = array();
+  $classes = simpletest_test_get_all_classes(); // Drupal 6.
+  foreach ($results as $group => $assertions) {
+    require_once $classes[$group]['file']; // Drupal 6.
+
+    // Create group fieldset with summary information.
+    $info = call_user_func(array($group, 'getInfo'));
+    $form['result']['results'][$group] = array(
+      '#type' => 'fieldset',
+      '#title' => $info['name'],
+      '#description' => $info['description'],
+      '#collapsible' => TRUE,
+    );
+    $form['result']['results'][$group]['summary'] = $summary;
+    $group_summary = &$form['result']['results'][$group]['summary'];
+
+    // Create table of assertions for the group.
+    $rows = array();
+    foreach ($assertions as $assertion) {
+      $row = array();
+      $row[] = $assertion->message;
+      $row[] = $assertion->message_group;
+      $row[] = basename($assertion->file);
+      $row[] = $assertion->line;
+      $row[] = $assertion->function;
+      $row[] = simpletest_result_status_image($assertion->status);
+
+      $class = 'simpletest-' . $assertion->status;
+      if ($assertion->message_group == 'Debug') {
+        $class = 'simpletest-debug';
+      }
+      $rows[] = array('data' => $row, 'class' => $class);
+
+      $group_summary['#' . $assertion->status]++;
+      $form['result']['summary']['#' . $assertion->status]++;
+    }
+    $form['result']['results'][$group]['table'] = array(
+      '#type' => 'markup',
+      '#value' => theme('table', $header, $rows),
+    );
+
+    // Set summary information.
+    $group_summary['#ok'] = $group_summary['#fail'] + $group_summary['#exception'] == 0;
+    $form['result']['results'][$group]['#collapsed'] = $group_summary['#ok'] && !$group_summary['#debug'];
+
+    // Store test group (class) as for use in filter.
+    $filter[$group_summary['#ok'] ? 'pass' : 'fail'][] = $group;
+  }
+
+  // Overal summary status.
+  $form['result']['summary']['#ok'] = $form['result']['summary']['#fail'] + $form['result']['summary']['#exception'] == 0;
+
+  // Actions.
+  $form['#action'] = url('admin/build/testing/results/re-run');
+  $form['action'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Actions'),
+    '#attributes' => array('class' => 'container-inline'),
+    '#weight' => -11,
+  );
+
+  $form['action']['filter'] = array(
+    '#type' => 'select',
+    '#title' => 'Filter',
+    '#options' => array(
+      'all' => t('All (@count)', array('@count' => count($filter['pass']) + count($filter['fail']))),
+      'pass' => t('Pass (@count)', array('@count' => count($filter['pass']))),
+      'fail' => t('Fail (@count)', array('@count' => count($filter['fail']))),
+    ),
+  );
+  $form['action']['filter']['#default_value'] = ($filter['fail'] ? 'fail' : 'all');
+
+  // Catagorized test classes for to be used with selected filter value.
+  $form['action']['filter_pass'] = array(
+    '#type' => 'hidden',
+    '#default_value' => implode(',', $filter['pass']),
+  );
+  $form['action']['filter_fail'] = array(
+    '#type' => 'hidden',
+    '#default_value' => implode(',', $filter['fail']),
+  );
+
+  $form['action']['op'] = array(
+    '#type' => 'submit',
+    '#value' => t('Run tests'),
+  );
+
+  $form['action']['return'] = array(
+    '#type' => 'markup',
+    '#value' => l(t('Return to list'), 'admin/build/testing'),
+  );
+
+  if (is_numeric($test_id)) {
+    simpletest_clean_results_table($test_id);
+  }
+
+  return $form;
+}
+
+/**
+ * Re-run the tests that match the filter.
+ */
+function simpletest_result_form_submit($form, &$form_state) {
+  $pass = $form_state['values']['filter_pass'] ? explode(',', $form_state['values']['filter_pass']) : array();
+  $fail = $form_state['values']['filter_fail'] ? explode(',', $form_state['values']['filter_fail']) : array();
+
+  if ($form_state['values']['filter'] == 'all') {
+    $classes = array_merge($pass, $fail);
+  }
+  else if ($form_state['values']['filter'] == 'pass') {
+    $classes = $pass;
+  }
+  else {
+    $classes = $fail;
+  }
+
+  if (!$classes) {
+    $form_state['redirect'] = 'admin/config/development/testing';
+    return;
+  }
+
+  $form_state_execute = array('values' => array());
+  foreach ($classes as $class) {
+    $form_state_execute['values'][$class] = 1;
+  }
+
+  simpletest_test_form_submit(array(), $form_state_execute);
+}
+
+/**
+ * Add wrapper div with class based on summary status.
+ *
+ * @return HTML output.
+ */
+function theme_simpletest_result_summary($form) {
+  return '<div class="simpletest-' . ($form['#ok'] ? 'pass' : 'fail') . '">' . _simpletest_format_summary_line($form) . '</div>';
+}
+
+/**
+ * Get test results for $test_id.
+ *
+ * @param $test_id The test_id to retrieve results of.
+ * @return Array of results grouped by test_class.
+ */
+function simpletest_result_get($test_id) {
+  $results = db_query('SELECT *
+                       FROM {simpletest}
+                       WHERE test_id = %d
+                       ORDER BY test_class, message_id', $test_id);
+
+  $test_results = array();
+  while ($result = db_fetch_object($results)) {
+    if (!isset($test_results[$result->test_class])) {
+      $test_results[$result->test_class] = array();
+    }
+    $test_results[$result->test_class][] = $result;
+  }
+  return $test_results;
+}
+
+/**
+ * Get the appropriate image for the status.
+ *
+ * @param $status Status string, either: pass, fail, exception.
+ * @return HTML image or false.
+ */
+function simpletest_result_status_image($status) {
+  // $map does not use drupal_static() as its value never changes.
+  static $map;
+
+  if (!isset($map)) {
+    $map = array(
+      'pass' => theme('image', 'misc/watchdog-ok.png'),
+      'fail' => theme('image', 'misc/watchdog-error.png'),
+      'exception' => theme('image', 'misc/watchdog-warning.png'),
+      'debug' => theme('image', 'misc/watchdog-warning.png'),
+    );
+  }
+  if (isset($map[$status])) {
+    return $map[$status];
+  }
+  return FALSE;
+}
+
+/**
+ * Provides settings form for SimpleTest variables.
+ */
+function simpletest_settings_form(&$form_state) {
+  $form = array();
+
+  $form['general'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('General'),
+  );
+  $form['general']['simpletest_clear_results'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Clear results after each complete test suite run'),
+    '#description' => t('By default SimpleTest will clear the results after they have been viewed on the results page, but in some cases it may be useful to leave the results in the database. The results can then be viewed at <em>admin/config/development/testing/[test_id]</em>. The test ID can be found in the database, simpletest table, or kept track of when viewing the results the first time. Additionally, some modules may provide more analaysis or features that require this setting to be disabled.'),
+    '#default_value' => variable_get('simpletest_clear_results', TRUE),
+  );
+  $form['general']['simpletest_verbose'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Provide verbose information when running tests'),
+    '#description' => t('The verbose data will be printed along with the standard assertions and is useful for debugging. The verbose data will be erased between each test suite run. The verbose data output is very detailed and should only be used when debugging.'),
+    '#default_value' => variable_get('simpletest_verbose', FALSE),
+  );
+
+  $form['httpauth'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('HTTP authentication credentials'),
+    '#description' => t('HTTP auth settings to be used by the SimpleTest browser during testing. Useful when the site requires basic HTTP authentication.'),
+  );
+  $form['httpauth']['simpletest_username'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Username'),
+    '#default_value' => variable_get('simpletest_username', ''),
+  );
+  $form['httpauth']['simpletest_password'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Password'),
+    '#default_value' => variable_get('simpletest_password', ''),
+  );
+
+  return system_settings_form($form);
+}
diff --git a/modules/simpletest/simpletest.test b/modules/simpletest/simpletest.test
index bc63c5f..8091351 100644
--- a/modules/simpletest/simpletest.test
+++ b/modules/simpletest/simpletest.test
@@ -1,6 +1,7 @@
 <?php
-// $Id: simpletest.test,v 1.1.2.11 2009/04/23 05:39:51 boombatower Exp $
-// Core: Id: simpletest.test,v 1.17 2009/03/31 01:49:53 webchick Exp
+// $Id: simpletest.test,v 1.1.2.16 2009/09/14 23:22:56 boombatower Exp $
+// Core: Id: simpletest.test,v 1.31 2009/09/01 17:40:27 webchick Exp
+
 /**
  * @file
  * Backport of Drupal 7 simpletest.test with modifications, see BACKPORT.txt.
@@ -22,12 +23,12 @@ class SimpleTestFunctionalTest extends DrupalWebTestCase {
 
   public static function getInfo() {
     return array(
-      'name' => t('SimpleTest functionality'),
-      'description' => t('Test SimpleTest\'s web interface: check that the intended tests were
+      'name' => 'SimpleTest functionality',
+      'description' => 'Test SimpleTest\'s web interface: check that the intended tests were
                           run and ensure that test reports display the intended results. Also
                           test SimpleTest\'s internal browser and API\'s both explicitly and
-                          implicitly.'),
-      'group' => t('SimpleTest')
+                          implicitly.',
+      'group' => 'SimpleTest'
     );
   }
 
@@ -52,7 +53,7 @@ class SimpleTestFunctionalTest extends DrupalWebTestCase {
     if (!$this->inCURL()) {
       $this->drupalGet('node');
       $this->assertTrue($this->drupalGetHeader('Date'), t('An HTTP header was received.'));
-      $this->assertTitle(variable_get('site_name', 'Drupal'), t('Site title matches.'));
+      $this->assertTitle(variable_get('site_name', 'Pressflow'), t('Site title matches.'));
       $this->assertNoTitle('Foo', t('Site title does not match.'));
       // Make sure that we are locked out of the installer when prefixing
       // using the user-agent header. This is an important security check.
@@ -128,6 +129,8 @@ class SimpleTestFunctionalTest extends DrupalWebTestCase {
 
     // Generates a warning inside a PHP function.
     array_key_exists(NULL, NULL);
+
+    debug('Foo', 'Debug');
   }
 
   /**
@@ -158,6 +161,10 @@ class SimpleTestFunctionalTest extends DrupalWebTestCase {
     // the function name 'array_key_exists'.
     $this->assertAssertion('array_key_exists', 'Warning', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
 
+    $this->assertAssertion("Debug: 'Foo'", 'Debug', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
+
+    $this->assertEqual('8 passes, 2 fails, 2 exceptions, and 1 debug message', $this->childTestResults['summary'], 'Stub test summary is correct');
+
     $this->test_ids[] = $test_id = $this->getTestIdFromResults();
     $this->assertTrue($test_id, t('Found test ID in results.'));
   }
@@ -166,7 +173,7 @@ class SimpleTestFunctionalTest extends DrupalWebTestCase {
    * Fetch the test id from the test results.
    */
   function getTestIdFromResults() {
-    foreach($this->childTestResults['assertions'] as $assertion) {
+    foreach ($this->childTestResults['assertions'] as $assertion) {
       if (preg_match('@^Test ID is ([0-9]*)\.$@', $assertion['message'], $matches)) {
         return $matches[1];
       }
@@ -206,15 +213,14 @@ class SimpleTestFunctionalTest extends DrupalWebTestCase {
    */
   function getTestResults() {
     $results = array();
-
     if ($this->parse()) {
       if ($fieldset = $this->getResultFieldSet()) {
         // Code assumes this is the only test in group.
-        $results['summary'] = $this->asText($fieldset->div);
-        $results['name'] = $this->asText($fieldset->fieldset->legend);
+        $results['summary'] = $this->asText($fieldset->div[1]);
+        $results['name'] = $this->asText($fieldset->legend);
 
         $results['assertions'] = array();
-        $tbody = $fieldset->fieldset->table->tbody;
+        $tbody = $fieldset->table->tbody;
         foreach ($tbody->tr as $row) {
           $assertion = array();
           $assertion['message'] = $this->asText($row->td[0]);
@@ -222,7 +228,7 @@ class SimpleTestFunctionalTest extends DrupalWebTestCase {
           $assertion['file'] = $this->asText($row->td[2]);
           $assertion['line'] = $this->asText($row->td[3]);
           $assertion['function'] = $this->asText($row->td[4]);
-          $ok_url = (url('misc/watchdog-ok.png') == 'misc/watchdog-ok.png') ? 'misc/watchdog-ok.png' : (base_path() . 'misc/watchdog-ok.png');
+          $ok_url = '/misc/watchdog-ok.png';
           $assertion['status'] = ($row->td[5]->img['src'] == $ok_url) ? 'Pass' : 'Fail';
           $results['assertions'][] = $assertion;
         }
@@ -240,7 +246,7 @@ class SimpleTestFunctionalTest extends DrupalWebTestCase {
     $fieldsets = $this->xpath('//fieldset');
     $info = $this->getInfo();
     foreach ($fieldsets as $fieldset) {
-      if ($fieldset->legend == $info['group']) {
+      if ($this->asText($fieldset->legend) == $info['name']) {
         return $fieldset;
       }
     }
@@ -268,23 +274,99 @@ class SimpleTestFunctionalTest extends DrupalWebTestCase {
    * @return The test is being run from inside a CURL request.
    */
   function inCURL() {
-    return preg_match("/^simpletest\d+/", $_SERVER['HTTP_USER_AGENT']);
+    return isset($_SERVER['HTTP_USER_AGENT']) && preg_match("/^simpletest\d+/", $_SERVER['HTTP_USER_AGENT']);
   }
+}
 
-  /*
-   * Drupal 6.
+class SimpleTestMailCaptureTestCase extends DrupalWebTestCase {
+  /**
+   * Implement getInfo().
    */
-
-  function testUserAccess()
-  {
-    $user = $this->drupalCreateUser(array('administer unit tests'));
-    $this->assertTrue(user_access('administer unit tests', $user), 'user_access() check successfull.');
+  public static function getInfo() {
+    return array(
+      'name' => 'SimpleTest e-mail capturing',
+      'description' => 'Test the SimpleTest e-mail capturing logic, the assertMail assertion and the drupalGetMails function.',
+      'group' => 'SimpleTest',
+    );
   }
 
-  function testUserAccessCache()
-  {
-    $user = $this->drupalCreateUser(array('administer nodes'));
-    $this->assertTrue(user_access('administer nodes', $user), 'user_access() cache has been cleaned');
+  /**
+   * Test to see if the wrapper function is executed correctly.
+   */
+  function testMailSend() {
+    // Create an e-mail.
+    $subject = $this->randomString(64);
+    $body = $this->randomString(128);
+    $message = array(
+      'id' => 'drupal_mail_test',
+      'headers' => array('Content-type'=> 'text/html'),
+      'subject' => $subject,
+      'to' => 'foobar@example.com',
+      'body' => $body,
+    );
+
+    // Before we send the e-mail, drupalGetMails should return an empty array.
+    $captured_emails = $this->drupalGetMails();
+    $this->assertEqual(count($captured_emails), 0, t('The captured e-mails queue is empty.'), t('E-mail'));
+
+    // Send the e-mail.
+    $response = drupal_mail('simpletest', 'drupal_mail_test', $message['to'], language_default(), $message, NULL, TRUE);
+
+    // Ensure that there is one e-mail in the captured e-mails array.
+    $captured_emails = $this->drupalGetMails();
+    $this->assertEqual(count($captured_emails), 1, t('One e-mail was captured.'), t('E-mail'));
+
+    // Assert that the e-mail was sent by iterating over the message properties
+    // and ensuring that they are captured intact.
+    foreach($message as $field => $value) {
+      $this->assertMail($field, $value, t('The e-mail was sent and the value for property @field is intact.', array('@field' => $field)), t('E-mail'));
+    }
+
+    // Send additional e-mails so more than one e-mail is captured.
+    for ($index = 0; $index < 5; $index++) {
+      $message = array(
+        'id' => 'drupal_mail_test_' . $index,
+        'headers' => array('Content-type'=> 'text/html'),
+        'subject' => $this->randomString(64),
+        'to' => $this->randomName(32) . '@example.com',
+        'body' => $this->randomString(512),
+      );
+      $response = drupal_mail('simpletest', 'drupal_mail_test', $message['to'], language_default(), $message, NULL, TRUE);
+    }
 
+    // There should now be 6 e-mails captured.
+    $captured_emails = $this->drupalGetMails();
+    $this->assertEqual(count($captured_emails), 6, t('All e-mails were captured.'), t('E-mail'));
+
+    // Test different ways of getting filtered e-mails via drupalGetMails().
+    $captured_emails = $this->drupalGetMails(array('id' => 'drupal_mail_test'));
+    $this->assertEqual(count($captured_emails), 1, t('Only one e-mail is returned when filtering by id.'), t('E-mail'));
+    $captured_emails = $this->drupalGetMails(array('id' => 'drupal_mail_test', 'subject' => $subject));
+    $this->assertEqual(count($captured_emails), 1, t('Only one e-mail is returned when filtering by id and subject.'), t('E-mail'));
+    $captured_emails = $this->drupalGetMails(array('id' => 'drupal_mail_test', 'subject' => $subject, 'from' => 'this_was_not_used@example.com'));
+    $this->assertEqual(count($captured_emails), 0, t('No e-mails are returned when querying with an unused from address.'), t('E-mail'));
+
+    // Send the last e-mail again, so we can confirm that the drupalGetMails-filter
+    // correctly returns all e-mails with a given property/value.
+    $response = drupal_mail('simpletest', $index, $message['to'], language_default(), $message, NULL, TRUE);
+    $captured_emails = $this->drupalGetMails(array('id' => 'drupal_mail_test_4'));
+    $this->assertEqual(count($captured_emails), 2, t('All e-mails with the same id are returned when filtering by id.'), t('E-mail'));
   }
 }
+
+/**
+ * Capture e-mail message during testing.
+ *
+ * Code copied from TestingMailSystem in mail.sending.inc (Drupal 7). Placed in
+ * this file to ensure no loaded until in testing mode, to ensure no conflicts
+ * with other implementations like devel.
+ *
+ * @param $message
+ *   An e-mail message.
+ */
+function drupal_mail_wrapper(array $message) {
+  $captured_emails = variable_get('drupal_test_email_collector', array());
+  $captured_emails[] = $message;
+  variable_set('drupal_test_email_collector', $captured_emails);
+  return TRUE;
+}
diff --git a/modules/simpletest/tests/block.test b/modules/simpletest/tests/block.test
index a1374ff..dfdf4e9 100644
--- a/modules/simpletest/tests/block.test
+++ b/modules/simpletest/tests/block.test
@@ -1,5 +1,5 @@
 <?php
-// $Id: block.test,v 1.1.2.1.2.2 2009/04/23 05:39:52 boombatower Exp $
+// $Id: block.test,v 1.1.2.1.2.3 2009/05/27 19:13:43 boombatower Exp $
 /**
  * @file
  * Backport of Drupal 7 block.test with modifications, see BACKPORT.txt.
@@ -79,7 +79,7 @@ class BlockTestCase extends DrupalWebTestCase {
     // Set block title to confirm that interface works and override any custom titles.
     $this->drupalPost('admin/build/block/configure/'. $block['module'] .'/'. $block['delta'], array('title' => $block['title']), t('Save block'));
     $this->assertText(t('The block configuration has been saved.'), t('Block title set.'));
-    $bid = db_result(db_query("SELECT bid FROM {blocks} WHERE module = '%s' AND delta = %d", array($block['module'], $block['delta'])));
+    $bid = db_result(db_query("SELECT bid FROM {blocks} WHERE module = '%s' AND delta = '%s'", array($block['module'], $block['delta'])));
 
     // Check to see if the block was created by checking that it's in the database.
     $this->assertNotNull($bid, t('Block found in database'));
diff --git a/modules/statistics/statistics.info b/modules/statistics/statistics.info
index 9296d5c..0ef7313 100644
--- a/modules/statistics/statistics.info
+++ b/modules/statistics/statistics.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/syslog/syslog.info b/modules/syslog/syslog.info
index c41ac8e..1404dec 100644
--- a/modules/syslog/syslog.info
+++ b/modules/syslog/syslog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/system/system.admin.inc b/modules/system/system.admin.inc
index 6e5e00a..f7fe40e 100644
--- a/modules/system/system.admin.inc
+++ b/modules/system/system.admin.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: system.admin.inc,v 1.63.2.7 2009/02/25 11:38:41 goba Exp $
+// $Id: system.admin.inc,v 1.63.2.8 2009/06/09 10:58:09 goba Exp $
 
 /**
  * @file
@@ -1371,7 +1371,7 @@ function system_performance_settings() {
  *
  * @ingroup forms
  */
-function system_clear_cache_submit(&$form_state, $form) {
+function system_clear_cache_submit($form, &$form_state) {
   drupal_flush_all_caches();
   drupal_set_message(t('Caches cleared.'));
 }
diff --git a/modules/system/system.info b/modules/system/system.info
index fbb25b7..bd54e92 100644
--- a/modules/system/system.info
+++ b/modules/system/system.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/system/system.install b/modules/system/system.install
index e786d03..51421b3 100644
--- a/modules/system/system.install
+++ b/modules/system/system.install
@@ -1,5 +1,5 @@
 <?php
-// $Id: system.install,v 1.238.2.14 2009/04/27 12:50:13 goba Exp $
+// $Id: system.install,v 1.238.2.15 2009/07/01 20:51:56 goba Exp $
 
 /**
  * Test and report Drupal installation requirements.
@@ -2565,6 +2565,39 @@ function system_update_6050() {
 }
 
 /**
+ * Create a signature_format column.
+ */
+function system_update_6051() {
+  $ret = array();
+
+  if (!db_column_exists('users', 'signature_format')) {
+
+    // Set future input formats to FILTER_FORMAT_DEFAULT to ensure a safe default
+    // when incompatible modules insert into the users table. An actual format
+    // will be assigned when users save their signature.
+
+    $schema = array(
+      'type' => 'int',
+      'size' => 'small',
+      'not null' => TRUE,
+      'default' => FILTER_FORMAT_DEFAULT,
+      'description' => 'The {filter_formats}.format of the signature.',
+    );
+
+    db_add_field($ret, 'users', 'signature_format', $schema);
+
+    // Set the format of existing signatures to the current default input format.
+    if ($current_default_filter = variable_get('filter_default_format', 0)) {
+      $ret[] = update_sql("UPDATE {users} SET signature_format = ". $current_default_filter);
+    }
+
+    drupal_set_message("User signatures no longer inherit comment input formats. Each user's signature now has its own associated format that can be selected on the user's account page. Existing signatures have been set to your site's default input format.");
+  }
+
+  return $ret;
+}
+
+/**
  * @} End of "defgroup updates-6.x-extra"
  * The next series of updates should start at 7000.
  */
diff --git a/modules/system/system.module b/modules/system/system.module
index e7f475c..672a96b 100644
--- a/modules/system/system.module
+++ b/modules/system/system.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: system.module,v 1.585.2.36 2009/05/13 19:11:04 goba Exp $
+// $Id: system.module,v 1.585.2.38 2009/07/01 20:51:56 goba Exp $
 
 /**
  * @file
@@ -9,7 +9,7 @@
 /**
  * The current system version.
  */
-define('VERSION', '6.12');
+define('VERSION', '6.13');
 
 /**
  * Core API compatibility.
diff --git a/modules/taxonomy/taxonomy.info b/modules/taxonomy/taxonomy.info
index 78db430..8d26dec 100644
--- a/modules/taxonomy/taxonomy.info
+++ b/modules/taxonomy/taxonomy.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/throttle/throttle.info b/modules/throttle/throttle.info
index 563a3d4..b334cd9 100644
--- a/modules/throttle/throttle.info
+++ b/modules/throttle/throttle.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/tracker/tracker.info b/modules/tracker/tracker.info
index 39016fd..9174a8b 100644
--- a/modules/tracker/tracker.info
+++ b/modules/tracker/tracker.info
@@ -6,8 +6,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/translation/translation.info b/modules/translation/translation.info
index 51e1961..06de45a 100644
--- a/modules/translation/translation.info
+++ b/modules/translation/translation.info
@@ -6,8 +6,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/trigger/trigger.info b/modules/trigger/trigger.info
index 2e5b8b4..7540100 100644
--- a/modules/trigger/trigger.info
+++ b/modules/trigger/trigger.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/trigger/trigger.module b/modules/trigger/trigger.module
index 718a991..e913a9d 100644
--- a/modules/trigger/trigger.module
+++ b/modules/trigger/trigger.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: trigger.module,v 1.13.2.2 2009/03/30 11:53:09 goba Exp $
+// $Id: trigger.module,v 1.13.2.3 2009/06/08 16:34:57 goba Exp $
 
 /**
  * @file
@@ -313,10 +313,10 @@ function trigger_comment($a1, $op) {
  * Implementation of hook_cron().
  */
 function trigger_cron() {
-  $aids = _trigger_get_hook_aids('cron');
+  $aids = _trigger_get_hook_aids('cron', 'run');
   $context = array(
     'hook' => 'cron',
-    'op' => '',
+    'op' => 'run',
   );
   // Cron does not act on any specific object.
   $object = NULL;
diff --git a/modules/update/update.compare.inc b/modules/update/update.compare.inc
index ce7aa2f..8c99b7a 100644
--- a/modules/update/update.compare.inc
+++ b/modules/update/update.compare.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: update.compare.inc,v 1.8.2.3 2009/04/29 18:43:11 goba Exp $
+// $Id: update.compare.inc,v 1.8.2.5 2009/06/09 11:08:32 goba Exp $
 
 /**
  * @file
@@ -38,6 +38,8 @@ function update_get_projects() {
       // Still empty, so we have to rebuild the cache.
       _update_process_info_list($projects, module_rebuild_cache(), 'module');
       _update_process_info_list($projects, system_theme_data(), 'theme');
+      // Allow other modules to alter projects before fetching and comparing.
+      drupal_alter('update_projects', $projects);
       // Cache the site's project data for at most 1 hour.
       _update_cache_set('update_project_projects', $projects, time() + 3600);
     }
@@ -301,6 +303,11 @@ function update_calculate_project_data($available) {
               'data' => t('This project is no longer supported, and is no longer available for download. Disabling everything included by this project is strongly recommended!'),
             );
             break;
+          case 'not-fetched':
+            $projects[$project]['status'] = UPDATE_NOT_FETCHED;
+            $projects[$project]['reason'] = t('Failed to fetch available update data');
+            break;
+
           default:
             // Assume anything else (e.g. 'published') is valid and we should
             // perform the rest of the logic in this function.
diff --git a/modules/update/update.fetch.inc b/modules/update/update.fetch.inc
index 22db6e8..bd60e80 100644
--- a/modules/update/update.fetch.inc
+++ b/modules/update/update.fetch.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: update.fetch.inc,v 1.7.2.4 2009/04/29 18:43:11 goba Exp $
+// $Id: update.fetch.inc,v 1.7.2.6 2009/06/09 11:08:32 goba Exp $
 
 /**
  * @file
@@ -11,7 +11,7 @@
  */
 function update_manual_status() {
   if (_update_refresh()) {
-    drupal_set_message(t('Fetched information about all available new releases and updates.'));
+    drupal_set_message(t('Attempted to fetch information about all available new releases and updates.'));
   }
   else {
     drupal_set_message(t('Unable to fetch any information about available new releases and updates.'), 'error');
@@ -23,6 +23,7 @@ function update_manual_status() {
  * Fetch project info via XML from a central server.
  */
 function _update_refresh() {
+  static $fail = array();
   global $base_url;
   module_load_include('inc', 'update', 'update.compare');
 
@@ -44,12 +45,24 @@ function _update_refresh() {
   // available release data, since even if we fail to fetch new data, we need
   // to clear out the stale data at this point.
   _update_cache_clear('update_available_releases');
+  $max_fetch_attempts = variable_get('update_max_fetch_attempts', UPDATE_MAX_FETCH_ATTEMPTS);
   
   foreach ($projects as $key => $project) {
     $url = _update_build_fetch_url($project, $site_key);
-    $xml = drupal_http_request($url);
-    if (isset($xml->data)) {
-      $data[] = $xml->data;
+    $fetch_url_base = _update_get_fetch_url_base($project);
+    if (empty($fail[$fetch_url_base]) || count($fail[$fetch_url_base]) < $max_fetch_attempts) {
+      $xml = drupal_http_request($url);
+      if (isset($xml->data)) {
+        $data[] = $xml->data;
+      }
+      else {
+        // Connection likely broken; prepare to give up.
+        $fail[$fetch_url_base][$key] = 1;
+      }
+    }
+    else {
+      // Didn't bother trying to fetch.
+      $fail[$fetch_url_base][$key] = 1;
     }
   }
 
@@ -58,14 +71,21 @@ function _update_refresh() {
     $available = $parser->parse($data);
   }
   if (!empty($available) && is_array($available)) {
+    // Record the projects where we failed to fetch data.
+    foreach ($fail as $fetch_url_base => $failures) {
+      foreach ($failures as $key => $value) {
+        $available[$key]['project_status'] = 'not-fetched';
+      }
+    }
     $frequency = variable_get('update_check_frequency', 1);
     _update_cache_set('update_available_releases', $available, time() + (60 * 60 * 24 * $frequency));
-    variable_set('update_last_check', time());
-    watchdog('update', 'Fetched information about all available new releases and updates.', array(), WATCHDOG_NOTICE, l(t('view'), 'admin/reports/updates'));
+    watchdog('update', 'Attempted to fetch information about all available new releases and updates.', array(), WATCHDOG_NOTICE, l(t('view'), 'admin/reports/updates'));
   }
   else {
     watchdog('update', 'Unable to fetch any information about available new releases and updates.', array(), WATCHDOG_ERROR, l(t('view'), 'admin/reports/updates'));
   }
+  // Whether this worked or not, we did just (try to) check for updates.
+  variable_set('update_last_check', time());
   return $available;
 }
 
@@ -85,14 +105,13 @@ function _update_refresh() {
  * @see update_get_projects()
  */
 function _update_build_fetch_url($project, $site_key = '') {
-  $default_url = variable_get('update_fetch_url', UPDATE_DEFAULT_URL);
-  if (!isset($project['info']['project status url'])) {
-    $project['info']['project status url'] = $default_url;
-  }
   $name = $project['name'];
-  $url = $project['info']['project status url'];
+  $url = _update_get_fetch_url_base($project);
   $url .= '/'. $name .'/'. DRUPAL_CORE_COMPATIBILITY;
-  if (!empty($site_key)) {
+  // Only append a site_key and the version information if we have a site_key
+  // in the first place, and if this is not a disabled module or theme. We do
+  // not want to record usage statistics for disabled code.
+  if (!empty($site_key) && (strpos($project['project_type'], 'disabled') === FALSE)) {
     $url .= (strpos($url, '?') === TRUE) ? '&' : '?';
     $url .= 'site_key=';
     $url .= drupal_urlencode($site_key);
@@ -105,6 +124,22 @@ function _update_build_fetch_url($project, $site_key = '') {
 }
 
 /**
+ * Return the base of the URL to fetch available update data for a project.
+ *
+ * @param $project
+ *   The array of project information from update_get_projects().
+ * @return
+ *   The base of the URL used for fetching available update data. This does
+ *   not include the path elements to specify a particular project, version,
+ *   site_key, etc.
+ *
+ * @see _update_build_fetch_url()
+ */
+function _update_get_fetch_url_base($project) {
+  return isset($project['info']['project status url']) ? $project['info']['project status url'] : variable_get('update_fetch_url', UPDATE_DEFAULT_URL);
+}
+
+/**
  * Perform any notifications that should be done once cron fetches new data.
  *
  * This method checks the status of the site using the new data and depending
diff --git a/modules/update/update.info b/modules/update/update.info
index a48f447..966c8f9 100644
--- a/modules/update/update.info
+++ b/modules/update/update.info
@@ -5,8 +5,8 @@ version = VERSION
 package = Core - optional
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/update/update.module b/modules/update/update.module
index d8e8fbd..c464737 100644
--- a/modules/update/update.module
+++ b/modules/update/update.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: update.module,v 1.17.2.4 2009/05/13 18:27:58 goba Exp $
+// $Id: update.module,v 1.17.2.5 2009/06/09 11:08:32 goba Exp $
 
 /**
  * @file
@@ -51,6 +51,15 @@ define('UPDATE_NOT_CHECKED', -1);
  */
 define('UPDATE_UNKNOWN', -2);
 
+/**
+ * There was a failure fetching available update data for this project.
+ */
+define('UPDATE_NOT_FETCHED', -3);
+
+/**
+ * Maximum number of attempts to fetch available update data from a given host.
+ */
+define('UPDATE_MAX_FETCH_ATTEMPTS', 2);
 
 /**
  * Implementation of hook_help().
@@ -267,6 +276,7 @@ function _update_requirement_check($project, $type) {
       break;
     case UPDATE_UNKNOWN:
     case UPDATE_NOT_CHECKED:
+    case UPDATE_NOT_FETCHED:
       $requirement_label = isset($project['reason']) ? $project['reason'] : t('Can not determine status');
       $requirement['severity'] = REQUIREMENT_WARNING;
       break;
@@ -464,6 +474,7 @@ function _update_message_text($msg_type, $msg_reason, $report_link = FALSE, $lan
 
     case UPDATE_UNKNOWN:
     case UPDATE_NOT_CHECKED:
+    case UPDATE_NOT_FETCHED:
       if ($msg_type == 'core') {
         $text = t('There was a problem determining the status of available updates for your version of Drupal.', array(), $langcode);
       }
diff --git a/modules/update/update.report.inc b/modules/update/update.report.inc
index 55f823a..58d5c07 100644
--- a/modules/update/update.report.inc
+++ b/modules/update/update.report.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: update.report.inc,v 1.10.2.3 2009/04/29 17:17:21 goba Exp $
+// $Id: update.report.inc,v 1.10.2.4 2009/06/09 11:08:32 goba Exp $
 
 /**
  * @file
@@ -48,6 +48,7 @@ function theme_update_report($data) {
         $icon = theme('image', 'misc/watchdog-ok.png', t('ok'), t('ok'));
         break;
       case UPDATE_UNKNOWN:
+      case UPDATE_NOT_FETCHED:
         $class = 'unknown';
         $icon = theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning'));
         break;
diff --git a/modules/upload/upload.info b/modules/upload/upload.info
index 492a512..9e98171 100644
--- a/modules/upload/upload.info
+++ b/modules/upload/upload.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/user/user.info b/modules/user/user.info
index 1a86346..cd1d6ad 100644
--- a/modules/user/user.info
+++ b/modules/user/user.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/modules/user/user.install b/modules/user/user.install
index 446b3df..8f9d359 100644
--- a/modules/user/user.install
+++ b/modules/user/user.install
@@ -1,5 +1,5 @@
 <?php
-// $Id: user.install,v 1.5.2.1 2009/01/06 15:46:38 goba Exp $
+// $Id: user.install,v 1.5.2.2 2009/07/01 20:51:56 goba Exp $
 
 /**
  * Implementation of hook_schema().
@@ -191,6 +191,13 @@ function user_schema() {
         'default' => '',
         'description' => "User's signature.",
       ),
+      'signature_format' => array(
+        'type' => 'int',
+        'size' => 'small',
+        'not null' => TRUE,
+        'default' => 0,
+        'description' => 'The {filter_formats}.format of the signature.',
+      ),
       'created' => array(
         'type' => 'int',
         'not null' => TRUE,
diff --git a/modules/user/user.module b/modules/user/user.module
index 4d0c93a..a37b5c3 100644
--- a/modules/user/user.module
+++ b/modules/user/user.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: user.module,v 1.892.2.13 2009/04/27 12:02:27 goba Exp $
+// $Id: user.module,v 1.892.2.14 2009/07/01 20:51:56 goba Exp $
 
 /**
  * @file
@@ -271,7 +271,7 @@ function user_save($account, $array = array(), $category = 'account') {
     if (!empty($array['pass'])) {
       sess_destroy_uid($account->uid);
       if ($account->uid == $GLOBALS['user']->uid) {
-        sess_regenerate();
+        drupal_session_regenerate();
       }
     }
 
@@ -532,7 +532,7 @@ function user_fields() {
     }
     else {
       // Make sure we return the default fields at least.
-      $fields = array('uid', 'name', 'pass', 'mail', 'picture', 'mode', 'sort', 'threshold', 'theme', 'signature', 'created', 'access', 'login', 'status', 'timezone', 'language', 'init', 'data');
+      $fields = array('uid', 'name', 'pass', 'mail', 'picture', 'mode', 'sort', 'threshold', 'theme', 'signature', 'signature_format', 'created', 'access', 'login', 'status', 'timezone', 'language', 'init', 'data');
     }
   }
 
@@ -1369,14 +1369,9 @@ function user_authenticate_finalize(&$edit) {
   $user->login = time();
   db_query("UPDATE {users} SET login = %d WHERE uid = %d", $user->login, $user->uid);
 
-  // Regenerate the session ID to prevent against session fixation attacks.
-  if (drupal_session_is_started()) {
-    sess_regenerate();
-  }
-  else {
-    // Start a new session.
-    drupal_session_start();
-  }
+  // This is called before hook_user in case one of those functions fails
+  // or incorrectly does a redirect which would leave the old session in place.
+  drupal_session_regenerate();
 
   user_module_invoke('login', $edit, $user);
 }
@@ -1526,6 +1521,15 @@ function user_edit_form(&$form_state, $uid, $edit, $register = FALSE) {
       '#default_value' => $edit['signature'],
       '#description' => t('Your signature will be publicly displayed at the end of your comments.'),
     );
+
+    // Prevent a "validation error" message when the user attempts to save with a default value they
+    // do not have access to.
+    if (!filter_access($edit['signature_format']) && empty($_POST)) {
+      drupal_set_message(t("The signature input format has been set to a format you don't have access to. It will be changed to a format you have access to when you save this page."));
+      $edit['signature_format'] = FILTER_FORMAT_DEFAULT;
+    }
+
+    $form['signature_settings']['signature_format'] = filter_form($edit['signature_format'], NULL, array('signature_format'));
   }
 
   // Picture/avatar:
@@ -2038,7 +2042,7 @@ function user_comment(&$comment, $op) {
   // Validate signature.
   if ($op == 'view') {
     if (variable_get('user_signatures', 0) && !empty($comment->signature)) {
-      $comment->signature = check_markup($comment->signature, $comment->format);
+      $comment->signature = check_markup($comment->signature, $comment->signature_format, FALSE);
     }
     else {
       $comment->signature = '';
diff --git a/modules/user/user.pages.inc b/modules/user/user.pages.inc
index a549283..21c0819 100644
--- a/modules/user/user.pages.inc
+++ b/modules/user/user.pages.inc
@@ -146,12 +146,10 @@ function user_logout() {
 
   watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
 
-  // Destroy the current session:
-  session_destroy();
   module_invoke_all('user', 'logout', NULL, $user);
 
-  // Load the anonymous user
-  $user = drupal_anonymous_user();
+  // Destroy the current session, and reset $user to the anonymous user.
+  session_destroy();
 
   drupal_goto();
 }
diff --git a/scripts/run-tests.sh b/scripts/run-tests.sh
index 12d0d18..65e350e 100755
--- a/scripts/run-tests.sh
+++ b/scripts/run-tests.sh
@@ -1,6 +1,7 @@
 <?php
-// $Id: run-tests.sh,v 1.1.2.4 2009/04/23 05:39:52 boombatower Exp $
-// Core: Id: run-tests.sh,v 1.26 2009/04/13 12:23:26 dries Exp
+// $Id: run-tests.sh,v 1.1.2.5 2009/09/05 13:34:10 boombatower Exp $
+// Core: Id: run-tests.sh,v 1.35 2009/08/17 19:14:41 webchick Exp
+
 /**
  * @file
  * Backport of Drupal 7 run-tests.sh with modifications, see BACKPORT.txt.
@@ -17,16 +18,20 @@ define('SIMPLETEST_SCRIPT_COLOR_EXCEPTION', 33); // Brown.
 // Set defaults and get overrides.
 list($args, $count) = simpletest_script_parse_args();
 
-simpletest_script_init();
-
 if ($args['help'] || $count == 0) {
   simpletest_script_help();
   exit;
 }
 
 if ($args['execute-batch']) {
+  // Masquerade as Apache for running tests.
+  simpletest_script_init("Apache");
   simpletest_script_execute_batch();
 }
+else {
+  // Run administrative functions as CLI.
+  simpletest_script_init("PHP CLI");
+}
 
 // Bootstrap to perform initial validation or other operations.
 drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
@@ -49,8 +54,11 @@ if ($args['clean']) {
 }
 
 // Load SimpleTest files.
-$all_tests = simpletest_get_all_tests();
-$groups = simpletest_categorize_tests($all_tests);
+$groups = simpletest_test_get_all();
+$all_tests = array();
+foreach ($groups as $group => $tests) {
+  $all_tests = array_merge($all_tests, array_keys($tests));
+}
 $test_list = array();
 
 if ($args['list']) {
@@ -59,8 +67,8 @@ if ($args['list']) {
   echo   "-------------------------------\n\n";
   foreach ($groups as $group => $tests) {
     echo $group . "\n";
-    foreach ($tests as $class_name => $info) {
-      echo " - " . $info['name'] . ' (' . $class_name . ')' . "\n";
+    foreach ($tests as $class => $info) {
+      echo " - " . $info['name'] . ' (' . $class . ')' . "\n";
     }
   }
   exit;
@@ -68,7 +76,8 @@ if ($args['list']) {
 
 $test_list = simpletest_script_get_test_list();
 
-// If not in 'safe mode', increase the maximum execution time.
+// Try to allocate unlimited time to run the tests.
+//drupal_set_time_limit(0);
 if (!ini_get('safe_mode')) {
   set_time_limit(0);
 }
@@ -83,6 +92,12 @@ $test_id = db_last_insert_id('simpletest_test_id', 'test_id');
 // Execute tests.
 simpletest_script_command($args['concurrency'], $test_id, implode(",", $test_list));
 
+// Retrieve the last database prefix used for testing and the last test class
+// that was run from. Use the information to read the lgo file in case any
+// fatal errors caused the test to crash.
+list($last_prefix, $last_test_class) = simpletest_last_test_get($test_id);
+simpletest_log_read($test_id, $last_prefix, $last_test_class);
+
 // Display results before database is cleared.
 simpletest_script_reporter_display_results();
 
@@ -137,7 +152,8 @@ All arguments are long options.
   <test1>[,<test2>[,<test3> ...]]
 
               One or more tests to be run. By default, these are interpreted
-              as the names of test groups as shown at ?q=admin/build/testing.
+              as the names of test groups as shown at 
+              ?q=admin/build/testing.
               These group names typically correspond to module names like "User"
               or "Profile" or "System", but there is also a group "XML-RPC".
               If --class is specified then these are interpreted as the names of
@@ -230,7 +246,7 @@ function simpletest_script_parse_args() {
 /**
  * Initialize script variables and perform general setup requirements.
  */
-function simpletest_script_init() {
+function simpletest_script_init($server_software) {
   global $args, $php;
 
   $host = 'localhost';
@@ -264,7 +280,7 @@ function simpletest_script_init() {
   $_SERVER['HTTP_HOST'] = $host;
   $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
   $_SERVER['SERVER_ADDR'] = '127.0.0.1';
-  $_SERVER['SERVER_SOFTWARE'] = 'Apache';
+  $_SERVER['SERVER_SOFTWARE'] = $server_software;
   $_SERVER['SERVER_NAME'] = 'localhost';
   $_SERVER['REQUEST_URI'] = $path .'/';
   $_SERVER['REQUEST_METHOD'] = 'GET';
@@ -346,7 +362,11 @@ function simpletest_script_execute_batch() {
  * Run a single test (assume a Drupal bootstrapped environment).
  */
 function simpletest_script_run_one_test($test_id, $test_class) {
-  simpletest_get_all_tests();
+  // Drupal 6.
+  require_once drupal_get_path('module', 'simpletest') . '/drupal_web_test_case.php';
+  $classes = simpletest_test_get_all_classes();
+  require_once $classes[$test_class]['file'];
+  
   $test = new $test_class($test_id);
   $test->run();
   $info = $test->getInfo();
@@ -397,11 +417,12 @@ function simpletest_script_get_test_list() {
     elseif ($args['file']) {
       $files = array();
       foreach ($args['test_names'] as $file) {
+//        $files[drupal_realpath($file)] = 1;
         $files[realpath($file)] = 1;
       }
 
       // Check for valid class names.
-      foreach ($all_tests as $class_name => $info) {
+      foreach ($all_tests as $class_name) {
         $refclass = new ReflectionClass($class_name);
         $file = $refclass->getFileName();
         if (isset($files[$file])) {
diff --git a/sites/default/default.settings.php b/sites/default/default.settings.php
index 589b232..dd59c4c 100644
--- a/sites/default/default.settings.php
+++ b/sites/default/default.settings.php
@@ -1,5 +1,5 @@
 <?php
-// $Id: default.settings.php,v 1.8.2.1 2008/08/13 06:52:36 dries Exp $
+// $Id: default.settings.php,v 1.8.2.2 2009/06/09 10:44:55 goba Exp $
 
 /**
  * @file
@@ -142,6 +142,7 @@ ini_set('session.cache_limiter',    'none');
 ini_set('session.cookie_lifetime',  2000000);
 ini_set('session.gc_maxlifetime',   200000);
 ini_set('session.save_handler',     'user');
+ini_set('session.use_cookies',      1);
 ini_set('session.use_only_cookies', 1);
 ini_set('session.use_trans_sid',    0);
 ini_set('url_rewriter.tags',        '');
diff --git a/themes/bluemarine/bluemarine.info b/themes/bluemarine/bluemarine.info
index 08d04da..47d9181 100644
--- a/themes/bluemarine/bluemarine.info
+++ b/themes/bluemarine/bluemarine.info
@@ -5,8 +5,8 @@ version = VERSION
 core = 6.x
 engine = phptemplate
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/themes/chameleon/chameleon.info b/themes/chameleon/chameleon.info
index fc23602..948888b 100644
--- a/themes/chameleon/chameleon.info
+++ b/themes/chameleon/chameleon.info
@@ -12,8 +12,8 @@ stylesheets[all][] = common.css
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/themes/chameleon/marvin/marvin.info b/themes/chameleon/marvin/marvin.info
index 6882131..024a2bf 100644
--- a/themes/chameleon/marvin/marvin.info
+++ b/themes/chameleon/marvin/marvin.info
@@ -7,8 +7,8 @@ version = VERSION
 core = 6.x
 base theme = chameleon
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/themes/garland/garland.info b/themes/garland/garland.info
index 57462a6..5bc0005 100644
--- a/themes/garland/garland.info
+++ b/themes/garland/garland.info
@@ -7,8 +7,8 @@ engine = phptemplate
 stylesheets[all][] = style.css
 stylesheets[print][] = print.css
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/themes/garland/minnelli/minnelli.info b/themes/garland/minnelli/minnelli.info
index 7f9d98f..9c0bd92 100644
--- a/themes/garland/minnelli/minnelli.info
+++ b/themes/garland/minnelli/minnelli.info
@@ -6,8 +6,8 @@ core = 6.x
 base theme = garland
 stylesheets[all][] = minnelli.css
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
diff --git a/themes/pushbutton/pushbutton.info b/themes/pushbutton/pushbutton.info
index 4564b81..eb830f8 100644
--- a/themes/pushbutton/pushbutton.info
+++ b/themes/pushbutton/pushbutton.info
@@ -5,8 +5,8 @@ version = VERSION
 core = 6.x
 engine = phptemplate
 
-; Information added by drupal.org packaging script on 2009-05-13
-version = "6.12"
+; Information added by drupal.org packaging script on 2009-07-01
+version = "6.13"
 project = "drupal"
-datestamp = "1242243950"
+datestamp = "1246481719"
 
