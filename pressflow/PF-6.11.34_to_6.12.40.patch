diff --git a/.htaccess b/.htaccess
index e362690..3994bd2 100644
--- a/.htaccess
+++ b/.htaccess
@@ -66,8 +66,10 @@ DirectoryIndex index.php
   # Cache all files for 2 weeks after access (A).
   ExpiresDefault A1209600
 
-  # Do not cache dynamically generated pages.
-  ExpiresByType text/html A1
+  <Files index.php>
+    # Caching headers for dynamically generated pages are set from PHP.
+    ExpiresActive Off
+  </Files>
 </IfModule>
 
 # Various rewrite rules.
diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index 9615555..99e4e54 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,4 +1,9 @@
-// $Id: CHANGELOG.txt,v 1.253.2.27 2009/04/30 00:13:30 goba Exp $
+// $Id: CHANGELOG.txt,v 1.253.2.29 2009/05/13 19:11:04 goba Exp $
+
+Drupal 6.12, 2009-05-13
+----------------------
+- Fixed security issues (Cross site scripting), see SA-CORE-2009-006.
+- Fixed a variety of small bugs.
 
 Drupal 6.11, 2009-04-29
 ----------------------
@@ -181,6 +186,11 @@ Drupal 6.0, 2008-02-13
 - Removed old system updates. Updates from Drupal versions prior to 5.x will
   require upgrading to 5.x before upgrading to 6.x.
 
+Drupal 5.18, 2009-05-13
+----------------------
+- Fixed security issues (Cross site scripting), see SA-CORE-2009-006.
+- Fixed a variety of small bugs.
+
 Drupal 5.17, 2009-04-29
 -----------------------
 - Fixed security issues (Cross site scripting and limited information disclosure) see SA-CORE-2009-005.
diff --git a/PRESSFLOW.txt b/PRESSFLOW.txt
index 6285737..79294a7 100644
--- a/PRESSFLOW.txt
+++ b/PRESSFLOW.txt
@@ -1 +1 @@
-6.11.34
+6.12.40
diff --git a/includes/bootstrap.inc b/includes/bootstrap.inc
index 6d33e0b..d0c93dd 100644
--- a/includes/bootstrap.inc
+++ b/includes/bootstrap.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: bootstrap.inc,v 1.206.2.12 2009/04/30 00:13:30 goba Exp $
+// $Id: bootstrap.inc,v 1.206.2.11 2009/02/25 13:49:54 dries Exp $
 
 /**
  * @file
@@ -546,32 +546,44 @@ function variable_del($name) {
 /**
  * Retrieve the current page from the cache.
  *
- * Note: we do not serve cached pages when status messages are waiting (from
- * a redirected form submission which was completed).
+ * Note: we do not serve cached pages to authenticated users, or to anonymous
+ * users when $_SESSION is non-empty. $_SESSION may contain status messages
+ * from a form submission, the contents of a shopping cart, or other user-
+ * specific content that should not be cached and displayed to other users.
  *
- * @param $status_only
- *   When set to TRUE, retrieve the status of the page cache only
- *   (whether it was started in this request or not).
+ * @return
+ *   The cache object, if the page was found in the cache.
  */
-function page_get_cache($status_only = FALSE) {
-  static $status = FALSE;
+function page_get_cache() {
   global $user, $base_root;
 
-  if ($status_only) {
-    return $status;
-  }
-  $cache = NULL;
-
-  if (!$user->uid && $_SERVER['REQUEST_METHOD'] == 'GET' && count(drupal_set_message()) == 0 && $_SERVER['SERVER_SOFTWARE'] !== 'PHP CLI' && !isset($_COOKIE['NO_CACHE'])) {
+  if (page_is_cacheable()) {
     $cache = cache_get($base_root . request_uri(), 'cache_page');
 
-    if (empty($cache)) {
-      ob_start();
-      $status = TRUE;
+    // Unserialize the cached page headers
+    if (isset($cache->headers)) {
+      $cache->headers = unserialize($cache->headers);
+    }
+
+    if ($cache) {
+      return $cache;
     }
   }
+}
+
+function page_is_cacheable($force = NULL) {
+  static $forced_cache = TRUE;
+  if (isset($force)) {
+    $forced_cache = $force;
+  }
 
-  return $cache;
+  $result = $forced_cache
+    && !drupal_session_is_started()
+    && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'HEAD')
+    && !count(drupal_get_messages(NULL, FALSE))
+    && $_SERVER['SERVER_SOFTWARE'] !== 'PHP CLI';
+
+  return $result;
 }
 
 /**
@@ -619,90 +631,259 @@ function drupal_load($type, $name) {
 }
 
 /**
+ * Set an HTTP response header for the current page.
+ *
+ * Note: When sending a Content-Type header, always include a 'charset' type,
+ * too. This is necessary to avoid security bugs (e.g. UTF-7 XSS).
+ *
+ * @param $name
+ *   The HTTP header name, or a status code followed by a reason phrase, e.g.
+ *   "404 Not Found".
+ * @param $value
+ *   The HTTP header value; if omitted, the specified header is unset.
+ * @param $append
+ *   Whether to append the value to an existing header or to replace it.
+ */
+function drupal_set_header($name = NULL, $value = NULL, $append = FALSE) {
+  // The headers as name/value pairs.
+  static $headers = array();
+
+  if (!isset($name)) {
+    return $headers;
+  }
+
+  // Save status codes using the special key ":status".
+  if (preg_match('/^\d{3} /', $name)) {
+    $value = $name;
+    $name = $name_lower = ':status';
+  }
+  else {
+    $name_lower = strtolower($name);
+  }
+  _drupal_set_preferred_header_name($name);
+
+  if (!isset($value)) {
+    $headers[$name_lower] = FALSE;
+  }
+  elseif (isset($headers[$name_lower]) && $append) {
+    // Multiple headers with identical names may be combined using comma (RFC
+    // 2616, section 4.2).
+    $headers[$name_lower] .= ',' . $value;
+  }
+  else {
+    $headers[$name_lower] = $value;
+  }
+  drupal_send_headers(array($name => $headers[$name_lower]), TRUE);
+}
+
+/**
+ * Get the HTTP response headers for the current page.
+ *
+ * @param $name
+ *   An HTTP header name. If omitted, all headers are returned as name/value
+ *   pairs. If an array value is FALSE, the header has been unset.
+ * @return
+ *   A string containing the header value, or FALSE if the header has been set,
+ *   or NULL if the header has not been set.
+ */
+function drupal_get_header($name = NULL) {
+  $headers = drupal_set_header();
+  if (isset($name)) {
+    $name = strtolower($name);
+    return isset($headers[$name]) ? $headers[$name] : NULL;
+  }
+  else {
+    return $headers;
+  }
+}
+
+/**
+ * Header names are case-insensitive, but for maximum compatibility they should
+ * follow "common form" (see RFC 2617, section 4.2).
+ */
+function _drupal_set_preferred_header_name($name = NULL) {
+  static $header_names = array();
+
+  if (!isset($name)) {
+    return $header_names;
+  }
+  $header_names[strtolower($name)] = $name;
+}
+
+/**
+ * Send the HTTP response headers previously set using drupal_set_header().
+ * Add default headers, unless they have been replaced or unset using
+ * drupal_set_header().
+ *
+ * @param $default_headers
+ *   An array of headers as name/value pairs.
+ * @param $single
+ *   If TRUE and headers have already be sent, send only the specified header.
+ */
+function drupal_send_headers($default_headers = array(), $only_default = FALSE) {
+  static $headers_sent = FALSE;
+  $headers = drupal_get_header();
+  if ($only_default && $headers_sent) {
+    $headers = array();
+  }
+  $headers_sent = TRUE;
+
+  $header_names = _drupal_set_preferred_header_name();
+  foreach ($default_headers as $name => $value) {
+    $name_lower = strtolower($name);
+    if (!isset($headers[$name_lower])) {
+      $headers[$name_lower] = $value;
+      $header_names[$name_lower] = $name;
+    }
+  }
+  foreach ($headers as $name_lower => $value) {
+    if ($name_lower == ':status') {
+      header($_SERVER['SERVER_PROTOCOL'] . ' ' . $value);
+    }
+    // Skip headers that have been unset.
+    elseif ($value) {
+      header($header_names[$name_lower] . ': ' . $value);
+    }
+  }
+}
+
+/**
  * Set HTTP headers in preparation for a page response.
  *
- * Authenticated users are always given a 'no-cache' header, and will
- * fetch a fresh page on every request.  This prevents authenticated
- * users seeing locally cached pages that show them as logged out.
+ * Authenticated users are always given a 'no-cache' header, and will fetch a
+ * fresh page on every request. This prevents authenticated users from seeing
+ * locally cached pages.
+ *
+ * Also give each page a unique ETag. This will force clients to include both
+ * an If-Modified-Since header and an If-None-Match header when doing
+ * conditional requests for the page (required by RFC 2616, section 13.3.4),
+ * making the validation more robust. This is a workaround for a bug in Mozilla
+ * Firefox that is triggered when Drupal's caching is enabled and the user
+ * accesses Drupal via an HTTP proxy (see
+ * https://bugzilla.mozilla.org/show_bug.cgi?id=269303): When an authenticated
+ * user requests a page, and then logs out and requests the same page again,
+ * Firefox may send a conditional request based on the page that was cached
+ * locally when the user was logged in. If this page did not have an ETag
+ * header, the request only contains an If-Modified-Since header. The date will
+ * be recent, because with authenticated users the Last-Modified header always
+ * refers to the time of the request. If the user accesses Drupal via a proxy
+ * server, and the proxy already has a cached copy of the anonymous page with an
+ * older Last-Modified date, the proxy may respond with 304 Not Modified, making
+ * the client think that the anonymous and authenticated pageviews are
+ * identical.
  *
  * @see page_set_cache()
  */
 function drupal_page_header() {
-  global $user;
- 
-  // Set a cookie if the user is logged in, so the reverse proxy would
-  // pass through the request. This requires a rule in the reverse proxy's
-  // configuration. See settings.php for details.
-  if ($user->uid && !isset($_COOKIE['LOGGED_IN'])) {
-    setcookie('LOGGED_IN', 'Y', $_SERVER['REQUEST_TIME'] + ini_get('session.cookie_lifetime'), '/');
-  }     
-
-  header("Last-Modified: ". gmdate("D, d M Y H:i:s") ." GMT");
-  header("Cache-Control: store, no-cache, must-revalidate");
-  header("Cache-Control: post-check=0, pre-check=0", FALSE);
+  static $headers_sent = FALSE;
+  if ($headers_sent) {
+    return TRUE;
+  }
+  $headers_sent = TRUE;
+
+  $default_headers = array(
+    'Last-Modified' => gmdate(DATE_RFC1123, $_SERVER['REQUEST_TIME']),
+    'Cache-Control' => 'no-cache, must-revalidate, post-check=0, pre-check=0',
+    'ETag' => '"' . $_SERVER['REQUEST_TIME'] . '"',
+  );
+  drupal_send_headers($default_headers);
 }
 
 /**
  * Set HTTP headers in preparation for a cached page response.
  *
- * The general approach here is that anonymous users can keep a local
- * cache of the page, but must revalidate it on every request.  Then,
- * they are given a '304 Not Modified' response as long as they stay
- * logged out and the page has not been modified.
+ * The headers allow as much as possible in proxies and browsers without any
+ * particular knowledge about the pages. Modules can override these headers
+ * using drupal_set_header().
  *
+ * If the request is conditional (using If-Modified-Since and If-None-Match),
+ * and the conditions match those currently in the cache, a 304 Not Modified
+ * response is sent.
  */
-function drupal_page_cache_header($cache) {
-  // Set default values:
-  $last_modified = gmdate('D, d M Y H:i:s', $cache->created) .' GMT';
-  $etag = '"'. md5($last_modified) .'"';
-
-  if (variable_get('reverse_proxy', 0)) {
-    // Optimize the headers for anonymous users when we have a reverse proxy such as Squid
-    $lifetime = variable_get('cache_lifetime', 300);
-    header('Expires: Sun, 11 Mar 1985 12:00:00 GMT');
-    $age = abs($_SERVER['REQUEST_TIME'] - $cache->created);
-    header('Cache-Control: public, max-age=0');
-    header('Cache-Control: public, s-maxage=' . max(0, $lifetime - $age));
-  }
-  else {
-    // See if the client has provided the required HTTP headers:
-    $if_modified_since = isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? stripslashes($_SERVER['HTTP_IF_MODIFIED_SINCE']) : FALSE;
-    $if_none_match = isset($_SERVER['HTTP_IF_NONE_MATCH']) ? stripslashes($_SERVER['HTTP_IF_NONE_MATCH']) : FALSE;
-
-    if ($if_modified_since && $if_none_match
-        && $if_none_match == $etag // etag must match
-        && $if_modified_since == $last_modified) {  // if-modified-since must match
-      header('HTTP/1.1 304 Not Modified');
-      // All 304 responses must send an etag if the 200 response for the same object contained an etag
-      header("Etag: $etag");
-      exit();
+function drupal_page_cache_header(stdClass $cache) {
+  // Negotiate whether to use compression.
+  $page_compression = variable_get('page_compression', TRUE) && extension_loaded('zlib');
+  $return_compressed = $page_compression && isset($_SERVER['HTTP_ACCEPT_ENCODING']) && strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== FALSE;
+
+  // Get headers set in hook_boot(). Keys are lower-case.
+  $hook_boot_headers = drupal_get_header();
+
+  // Headers generated in this function, that may be replaced or unset using
+  // drupal_set_headers(). Keys are mixed-case.
+  $default_headers = array();
+
+  foreach ($cache->headers as $name => $value) {
+    // In the case of a 304 response, certain headers must be sent, and the
+    // remaining may not (see RFC 2616, section 10.3.5). Do not override
+    // headers set in hook_boot().
+    $name_lower = strtolower($name);
+    if (in_array($name_lower, array('content-location', 'expires', 'cache-control', 'vary')) && !isset($hook_boot_headers[$name_lower])) {
+      drupal_set_header($name, $value);
+      unset($cache->headers[$name]);
     }
-    // Use the old header which does not get cached
-    header('Expires: Sun, 19 Nov 1978 05:00:00 GMT');
-    header('Cache-Control: must-revalidate');
   }
 
-  // Send appropriate response:
-  header("Last-Modified: $last_modified");
-  header("ETag: $etag");
+  // If a cache is served from a HTTP proxy without hitting the web server,
+  // the boot and exit hooks cannot be fired, so only allow caching in
+  // proxies with aggressive caching. If the client send a session cookie, do
+  // not bother caching the page in a public proxy, because the cached copy
+  // will only be served to that particular user due to Vary: Cookie, unless
+  // the Vary header has been replaced or unset in hook_boot() (see below).
+  $max_age = variable_get('cache', CACHE_NONE) == CACHE_AGGRESSIVE && (!isset($_COOKIE[session_name()]) || isset($hook_boot_headers['vary'])) ? variable_get('page_cache_max_age', 0) : 0;
+  $default_headers['Cache-Control'] = 'public, max-age=' . $max_age;
+
+  // Entity tag should change if the output changes.
+  $etag = '"' . $cache->created . '-' . intval($return_compressed) . '"';
+  header('Etag: ' . $etag);
+
+  // See if the client has provided the required HTTP headers.
+  $if_modified_since = isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) : FALSE;
+  $if_none_match = isset($_SERVER['HTTP_IF_NONE_MATCH']) ? stripslashes($_SERVER['HTTP_IF_NONE_MATCH']) : FALSE;
+
+  if ($if_modified_since && $if_none_match
+      && $if_none_match == $etag // etag must match
+      && $if_modified_since == $cache->created) {  // if-modified-since must match
+    header($_SERVER['SERVER_PROTOCOL'] . ' 304 Not Modified');
+    drupal_send_headers($default_headers);
+    return;
+  }
 
-  if (variable_get('page_compression', TRUE)) {
-    // Determine if the browser accepts gzipped data.
-    if (@strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') === FALSE && function_exists('gzencode')) {
-      // Strip the gzip header and run uncompress.
-      $cache->data = gzinflate(substr(substr($cache->data, 10), 0, -8));
-    }
-    elseif (function_exists('gzencode')) {
-      header('Content-Encoding: gzip');
-    }
+  // Send the remaining headers.
+  foreach ($cache->headers as $name => $value) {
+    drupal_set_header($name, $value);
   }
 
-  // Send the original request's headers. We send them one after
-  // another so PHP's header() function can deal with duplicate
-  // headers.
-  $headers = explode("\n", $cache->headers);
-  foreach ($headers as $header) {
-    header($header);
+  $default_headers['Last-Modified'] = gmdate(DATE_RFC1123, $cache->created);
+
+  // HTTP/1.0 proxies do not support the Vary header, so prevent any caching
+  // by sending an Expires date in the past. HTTP/1.1 clients ignores the
+  // Expires header if a Cache-Control: max-age= directive is specified (see RFC
+  // 2616, section 14.9.3).
+  $default_headers['Expires'] = 'Sun, 11 Mar 1984 12:00:00 GMT';
+
+  drupal_send_headers($default_headers);
+
+  // Allow HTTP proxies to cache pages for anonymous users without a session
+  // cookie. The Vary header is used to indicates the set of request-header
+  // fields that fully determines whether a cache is permitted to use the
+  // response to reply to a subsequent request for a given URL without
+  // revalidation. If a Vary header has been set in hook_boot(), it is assumed
+  // that the module knows how to cache the page.
+  if (!isset($hook_boot_headers['vary']) && !variable_get('omit_vary_cookie', FALSE)) {
+    header('Vary: Cookie');
+  }
+
+  if ($page_compression) {
+    header('Vary: Accept-Encoding', FALSE);
+    // If page_compression is enabled, the cache contains gzipped data.
+    if ($return_compressed) {
+      header('Content-Encoding: gzip');
+    }
+    else {
+      // The client does not support compression, so unzip the data in the
+      // cache. Strip the gzip header and run uncompress.
+      $cache->data = gzinflate(substr(substr($cache->data, 10), 0, -8));
+    }
   }
 
   print $cache->data;
@@ -879,7 +1060,12 @@ function watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NO
 function drupal_set_message($message = NULL, $type = 'status', $repeat = TRUE) {
   if ($message) {
     if (!isset($_SESSION['messages'])) {
-      $_SESSION['messages'] = array();
+      if (function_exists('drupal_set_session')) {
+        drupal_set_session('messages', array());
+      }
+      else {
+        $_SESSION['messages'] = array();
+      }
     }
 
     if (!isset($_SESSION['messages'][$type])) {
@@ -1003,7 +1189,7 @@ function drupal_bootstrap($phase) {
 }
 
 function _drupal_bootstrap($phase) {
-  global $conf;
+  global $conf, $user;
 
   switch ($phase) {
 
@@ -1046,23 +1232,45 @@ function _drupal_bootstrap($phase) {
     case DRUPAL_BOOTSTRAP_SESSION:
       require_once variable_get('session_inc', './includes/session.inc');
       session_set_save_handler('sess_open', 'sess_close', 'sess_read', 'sess_write', 'sess_destroy_sid', 'sess_gc');
-      session_start();
+      // If a session cookie exists, initialize the session. Otherwise the
+      // session is only started on demand in drupal_session_start(), making
+      // anonymous users not use a session cookie unless something is stored in
+      // $_SESSION. This allows HTTP proxies to cache anonymous pageviews.
+      if (isset($_COOKIE[session_name()])) {
+        drupal_session_start();
+      }
+      else {
+        $user = drupal_anonymous_user();
+      }
+
+      // Register a shutdown handler to decide if we need to register a session.
+      register_shutdown_function('drupal_session_write');
+
       break;
 
     case DRUPAL_BOOTSTRAP_LATE_PAGE_CACHE:
       // Initialize configuration variables, using values from settings.php if available.
       $conf = variable_init(isset($conf) ? $conf : array());
+
       $cache_mode = variable_get('cache', CACHE_DISABLED);
       // Get the page from the cache.
-      $cache = $cache_mode == CACHE_DISABLED ? '' : page_get_cache();
-      // If the skipping of the bootstrap hooks is not enforced, call hook_boot.
-      if (!$cache || $cache_mode != CACHE_AGGRESSIVE) {
+      if ($cache_mode != CACHE_DISABLED) {
+        $cache = page_get_cache();
+      }
+      else {
+        $cache = FALSE;
+      }
+
+      // If the skipping of the bootstrap hooks is not enforced, call hook_init.
+      if (!is_object($cache) || $cache_mode != CACHE_AGGRESSIVE) {
         // Load module handling.
         require_once './includes/module.inc';
         bootstrap_invoke_all('boot');
       }
+
       // If there is a cached page, display it.
-      if ($cache) {
+      if (is_object($cache)) {
+        header('X-Drupal-Cache: HIT');
         drupal_page_cache_header($cache);
         // If the skipping of the bootstrap hooks is not enforced, call hook_exit.
         if ($cache_mode != CACHE_AGGRESSIVE) {
@@ -1071,7 +1279,13 @@ function _drupal_bootstrap($phase) {
         // We are done.
         exit;
       }
+  
+      if (!$cache && page_is_cacheable()) {
+        header('X-Drupal-Cache: MISS');
+      }
+
       // Prepare for non-cached page workflow.
+      ob_start();
       drupal_page_header();
       break;
 
diff --git a/includes/common.inc b/includes/common.inc
index cbe8fab..a73532f 100644
--- a/includes/common.inc
+++ b/includes/common.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: common.inc,v 1.756.2.49 2009/04/30 00:13:30 goba Exp $
+// $Id: common.inc,v 1.756.2.52 2009/05/13 19:11:04 goba Exp $
 
 /**
  * @file
@@ -125,30 +125,23 @@ function drupal_clear_path_cache() {
   drupal_lookup_path('wipe');
 }
 
-/**
- * Set an HTTP response header for the current page.
- *
- * Note: When sending a Content-Type header, always include a 'charset' type,
- * too. This is necessary to avoid security bugs (e.g. UTF-7 XSS).
+/*
+ * The function drupal_set_header() has been moved to includes/bootstrap.inc in Pressflow.
  */
-function drupal_set_header($header = NULL) {
-  // We use an array to guarantee there are no leading or trailing delimiters.
-  // Otherwise, header('') could get called when serving the page later, which
-  // ends HTTP headers prematurely on some PHP versions.
-  static $stored_headers = array();
-
-  if (strlen($header)) {
-    header($header);
-    $stored_headers[] = $header;
-  }
-  return implode("\n", $stored_headers);
-}
 
 /**
  * Get the HTTP response headers for the current page.
+ *
+ * This function is not called by Pressflow and remains here
+ * only for Drupal 5/6 API compatibility.
  */
 function drupal_get_headers() {
-  return drupal_set_header();
+  $headers = drupal_set_header();
+  $header_text = array();
+  foreach ($headers as $name => $value) {
+    $header_text[] .= $name . ': ' . $value;
+  }
+  return implode("\n", $header_text);
 }
 
 /**
@@ -321,9 +314,9 @@ function drupal_goto($path = '', $query = NULL, $fragment = NULL, $http_response
     module_invoke_all('exit', $url);
   }
 
-  // Even though session_write_close() is registered as a shutdown function, we
-  // need all session data written to the database before redirecting.
-  session_write_close();
+  // Even though session_write_close() is registered as a shutdown function,
+  // we need all session data written to the database before redirecting.
+  drupal_session_write();
 
   header('Location: '. $url, TRUE, $http_response_code);
 
@@ -352,11 +345,6 @@ function drupal_not_found() {
 
   watchdog('page not found', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);
 
-  // Keep old path for reference.
-  if (!isset($_REQUEST['destination'])) {
-    $_REQUEST['destination'] = $_GET['q'];
-  }
-
   $path = drupal_get_normal_path(variable_get('site_404', ''));
   if ($path && $path != $_GET['q']) {
     // Set the active item in case there are tabs to display, or other
@@ -379,12 +367,8 @@ function drupal_not_found() {
  */
 function drupal_access_denied() {
   drupal_set_header('HTTP/1.1 403 Forbidden');
-  watchdog('access denied', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);
 
-  // Keep old path for reference.
-  if (!isset($_REQUEST['destination'])) {
-    $_REQUEST['destination'] = $_GET['q'];
-  }
+  watchdog('access denied', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);
 
   $path = drupal_get_normal_path(variable_get('site_403', ''));
   if ($path && $path != $_GET['q']) {
@@ -1577,6 +1561,11 @@ function l($text, $path, $options = array()) {
  * react to the closing of the page by calling hook_exit().
  */
 function drupal_page_footer() {
+  global $user;
+
+  // Write the session, and open one if needed.
+  drupal_session_write();
+
   if (variable_get('cache', CACHE_DISABLED) != CACHE_DISABLED) {
     page_set_cache();
   }
@@ -2563,30 +2552,44 @@ function _drupal_bootstrap_full() {
 function page_set_cache() {
   global $user, $base_root;
 
-  if (!$user->uid && $_SERVER['REQUEST_METHOD'] == 'GET' && page_get_cache(TRUE)) {
-    // This will fail in some cases, see page_get_cache() for the explanation.
-    if ($data = ob_get_contents()) {
-      $cache = TRUE;
-      if (variable_get('page_compression', TRUE) && function_exists('gzencode')) {
-        // We do not store the data in case the zlib mode is deflate.
-        // This should be rarely happening.
-        if (zlib_get_coding_type() == 'deflate') {
-          $cache = FALSE;
-        }
-        else if (zlib_get_coding_type() == FALSE) {
-          $data = gzencode($data, 9, FORCE_GZIP);
-        }
-        // The remaining case is 'gzip' which means the data is
-        // already compressed and nothing left to do but to store it.
+  if (page_is_cacheable()) {
+    $cache_page = TRUE;
+
+    $cache_lifetime = variable_get('page_cache_lifetime', 0);
+
+    $cache = (object) array(
+      'cid' => $base_root . request_uri(),
+      'data' => ob_get_clean(),
+      'expire' => $cache_lifetime > 0 ? $cache_lifetime : CACHE_TEMPORARY,
+      'created' => $_SERVER['REQUEST_TIME'],
+      'headers' => array(),
+    );
+    // Restore preferred header names based on the lower-case names returned
+    // by drupal_get_header().
+    $header_names = _drupal_set_preferred_header_name();
+    foreach (drupal_get_header() as $name_lower => $value) {
+      $cache->headers[$header_names[$name_lower]] = $value;
+    }
+    if (variable_get('page_compression', TRUE) && function_exists('gzencode')) {
+      // We do not store the data in case the zlib mode is deflate. This should
+      // be rarely happening.
+      if (zlib_get_coding_type() == 'deflate') {
+        $cache_page = FALSE;
       }
-      ob_end_flush();
-      if ($cache && $data) {
-        cache_set($base_root . request_uri(), $data, 'cache_page', CACHE_TEMPORARY, drupal_get_headers());
+      elseif (zlib_get_coding_type() == FALSE) {
+        $cache->data = gzencode($cache->data, 9, FORCE_GZIP);
       }
+      // The remaining case is 'gzip' which means the data is already
+      // compressed and nothing left to do but to store it.
     }
+    if ($cache_page && $cache->data) {
+      cache_set($cache->cid, $cache->data, 'cache_page', $cache->expire, serialize($cache->headers));
+    }
+    drupal_page_cache_header($cache);
   }
 }
 
+
 /**
  * Executes a cron run when called
  * @return
diff --git a/includes/form.inc b/includes/form.inc
index c3056f0..62568cc 100644
--- a/includes/form.inc
+++ b/includes/form.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: form.inc,v 1.265.2.23 2009/04/27 14:41:11 goba Exp $
+// $Id: form.inc,v 1.265.2.24 2009/05/13 18:22:29 goba Exp $
 
 /**
  * @defgroup forms Form builder functions
@@ -624,12 +624,6 @@ function drupal_redirect_form($form, $redirect = NULL) {
   }
   if (!isset($goto) || ($goto !== FALSE)) {
     if (isset($goto)) {
-      // Remove any fake destination set by drupal_not_found() or
-      // drupal_access_denied() so that we can properly redirect from those
-      // pages.
-      if (isset($_REQUEST['destination']) && $_REQUEST['destination'] == $_GET['q']) {
-        unset($_REQUEST['destination']);
-      }
       if (is_array($goto)) {
         call_user_func_array('drupal_goto', $goto);
       }
diff --git a/includes/session.inc b/includes/session.inc
index b70bdee..595eb4e 100644
--- a/includes/session.inc
+++ b/includes/session.inc
@@ -17,11 +17,6 @@ function sess_close() {
 function sess_read($key) {
   global $user;
 
-  // Write and Close handlers are called after destructing objects since PHP 5.0.5
-  // Thus destructors can use sessions but session handler can't use objects.
-  // So we are moving session closure before destructing objects.
-  register_shutdown_function('session_write_close');
-
   // Handle the case of first time visitors and clients that don't store cookies (eg. web crawlers).
   if (!isset($_COOKIE[session_name()])) {
     $user = drupal_anonymous_user();
@@ -56,11 +51,10 @@ function sess_read($key) {
 function sess_write($key, $value) {
   global $user;
 
-  // If saving of session data is disabled or if the client doesn't have a session,
-  // and one isn't being created ($value), do nothing. This keeps crawlers out of
-  // the session table. This reduces memory and server load, and gives more useful
-  // statistics. We can't eliminate anonymous session table rows without breaking
-  // the throttle module and the "Who's Online" block.
+  // If saving of session data is disabled, or if a new empty anonymous session
+  // has been started, do nothing. This keeps anonymous users, including
+  // crawlers, out of the session table, unless they actually have something
+  // stored in $_SESSION.
   if (!session_save_session() || ($user->uid == 0 && empty($_COOKIE[session_name()]) && empty($value))) {
     return TRUE;
   }
@@ -83,6 +77,101 @@ function sess_write($key, $value) {
 }
 
 /**
+ * Propagate $_SESSION and set session cookie if not already set. This function
+ * should be called before writing to $_SESSION, usually via
+ * drupal_set_session().
+ *
+ * @param $start
+ *   If FALSE, the session is not actually started. This is only used by
+ *   drupal_session_is_started().
+ * @return
+ *   TRUE if session has already been started, or FALSE if it has not.
+ */
+function drupal_session_start($start = TRUE) {
+  global $user;
+  static $started = FALSE;
+  if ($start && !$started) {
+    $started = TRUE;
+
+    // If the user had no session previously, save the user object and the
+    // session data set previously in this request as they will be overriden
+    // by sess_start().
+    if (!isset($_COOKIE[session_name()])) {
+      $saved_user = $user;
+      $saved_session = (array) $_SESSION;
+    }
+
+    // Start the session.
+    session_start();
+
+    // Restore session data.
+    if (!isset($_COOKIE[session_name()])) {
+      $user = $saved_user;
+      $_SESSION += $saved_session;
+    }
+  }
+  return $started;
+}
+
+/**
+ * Return whether a session has been started and the $_SESSION variable is
+ * available.
+ */
+function drupal_session_is_started() {
+  $result = drupal_session_start(FALSE);
+  return $result;
+}
+
+/**
+ * Write the session.
+ */
+function drupal_session_write() {
+  if (!drupal_session_is_started() && !empty($_SESSION)) {
+    drupal_session_start();
+  }
+
+  session_write_close();
+}
+
+/**
+ * Get a session variable.
+ *
+ * @param $name
+ *   The name of the variable to get. If not supplied, all variables are returned.
+ * @return
+ *   The value of the variable, or FALSE if the variable is not set.
+ */
+function drupal_get_session($name = NULL) {
+  if (is_null($name)) {
+    return $_SESSION;
+  }
+  elseif (isset($_SESSION[$name])) {
+    return $_SESSION[$name];
+  }
+  else {
+    return FALSE;
+  }
+}
+
+/**
+ * Set a session variable. The variable becomes accessible via $_SESSION[$name]
+ * in the current and later requests. If there is no active PHP session prior
+ * to the call, one is started automatically.
+ *
+ * Anonymous users generate less server load if their $_SESSION variable is
+ * empty, so unused entries should be unset using unset($_SESSION['foo']).
+ *
+ * @param $name
+ *   The name of the variable to set.
+ * @param $value
+ *   The value to set.
+ */
+function drupal_set_session($name, $value) {
+  drupal_session_start();
+  $_SESSION[$name] = $value;
+}
+
+/**
  * Called when an anonymous user becomes authenticated or vice-versa.
  */
 function sess_regenerate() {
@@ -127,6 +216,9 @@ function sess_count($timestamp = 0, $anonymous = true) {
  */
 function sess_destroy_sid($sid) {
   db_query("DELETE FROM {sessions} WHERE sid = '%s'", $sid);
+  // Unset cookie.
+  extract(session_get_cookie_params());
+  setcookie(session_name(), '', time() - 3600, $path, $domain, $secure, $httponly);
 }
 
 /**
diff --git a/includes/theme.inc b/includes/theme.inc
index ea167bc..0fe9616 100644
--- a/includes/theme.inc
+++ b/includes/theme.inc
@@ -1,5 +1,5 @@
 <?php
-// $Id: theme.inc,v 1.415.2.21 2009/04/30 00:13:30 goba Exp $
+// $Id: theme.inc,v 1.415.2.22 2009/05/13 19:11:04 goba Exp $
 
 /**
  * @file
@@ -688,7 +688,7 @@ function theme() {
   // restore path_to_theme()
   $theme_path = $temp;
   // Add final markup to the full page.
-  if ($hook == 'page') {
+  if ($hook == 'page' || $hook == 'book_export_html') {
     $output = drupal_final_markup($output);
   }
   return $output;
diff --git a/misc/drupal.js b/misc/drupal.js
index 530c7e7..c3324b6 100644
--- a/misc/drupal.js
+++ b/misc/drupal.js
@@ -5,7 +5,7 @@ var Drupal = Drupal || { 'settings': {}, 'behaviors': {}, 'themes': {}, 'locale'
 /**
  * Set the variable that indicates if JavaScript behaviors should be applied
  */
-Drupal.jsEnabled = document.getElementsByTagName && document.createElement && document.createTextNode && document.documentElement && document.getElementById;
+Drupal.jsEnabled = true;
 
 /**
  * Attach all registered behaviors to a page element.
@@ -36,12 +36,10 @@ Drupal.jsEnabled = document.getElementsByTagName && document.createElement && do
  */
 Drupal.attachBehaviors = function(context) {
   context = context || document;
-  if (Drupal.jsEnabled) {
-    // Execute all of them.
-    jQuery.each(Drupal.behaviors, function() {
-      this(context);
-    });
-  }
+  // Execute all of them.
+  jQuery.each(Drupal.behaviors, function() {
+    this(context);
+  });
 };
 
 /**
@@ -266,16 +264,11 @@ Drupal.ahahError = function(xmlhttp, uri) {
 }
 
 // Global Killswitch on the <html> element
-if (Drupal.jsEnabled) {
-  // Global Killswitch on the <html> element
-  $(document.documentElement).addClass('js');
-  // 'js enabled' cookie
-  document.cookie = 'has_js=1; path=/';
-  // Attach all behaviors.
-  $(document).ready(function() {
-    Drupal.attachBehaviors(this);
-  });
-}
+$(document.documentElement).addClass('js');
+// Attach all behaviors.
+$(document).ready(function() {
+  Drupal.attachBehaviors(this);
+});
 
 /**
  * The default themes.
diff --git a/modules/aggregator/aggregator.info b/modules/aggregator/aggregator.info
index ba7ec3b..155448e 100644
--- a/modules/aggregator/aggregator.info
+++ b/modules/aggregator/aggregator.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/block/block.info b/modules/block/block.info
index ffa9e7e..1aafd2a 100644
--- a/modules/block/block.info
+++ b/modules/block/block.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/blog/blog.info b/modules/blog/blog.info
index 4867a67..7102ea2 100644
--- a/modules/blog/blog.info
+++ b/modules/blog/blog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/blogapi/blogapi.info b/modules/blogapi/blogapi.info
index 8870507..8892c94 100644
--- a/modules/blogapi/blogapi.info
+++ b/modules/blogapi/blogapi.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/book/book-export-html.tpl.php b/modules/book/book-export-html.tpl.php
index 928d73f..0cb55c0 100644
--- a/modules/book/book-export-html.tpl.php
+++ b/modules/book/book-export-html.tpl.php
@@ -1,5 +1,5 @@
 <?php
-// $Id: book-export-html.tpl.php,v 1.1 2007/11/04 14:29:09 goba Exp $
+// $Id: book-export-html.tpl.php,v 1.1.2.1 2009/05/13 19:11:04 goba Exp $
 
 /**
  * @file book-export-html.tpl.php
@@ -20,8 +20,8 @@
 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language; ?>" xml:lang="<?php print $language->language; ?>">
   <head>
-    <title><?php print $title; ?></title>
     <?php print $head; ?>
+    <title><?php print $title; ?></title>
     <base href="<?php print $base_url; ?>" />
     <link type="text/css" rel="stylesheet" href="misc/print.css" />
     <?php if ($language_rtl): ?>
diff --git a/modules/book/book.info b/modules/book/book.info
index 0b7f18d..ac821e3 100644
--- a/modules/book/book.info
+++ b/modules/book/book.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/color/color.info b/modules/color/color.info
index d7a9c0f..5f649c4 100644
--- a/modules/color/color.info
+++ b/modules/color/color.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/comment/comment.info b/modules/comment/comment.info
index fe01989..67d5e8c 100644
--- a/modules/comment/comment.info
+++ b/modules/comment/comment.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/comment/comment.module b/modules/comment/comment.module
index 11928d5..2df900e 100644
--- a/modules/comment/comment.module
+++ b/modules/comment/comment.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: comment.module,v 1.617.2.6 2009/04/05 12:04:52 dries Exp $
+// $Id: comment.module,v 1.617.2.7 2009/05/13 17:15:10 goba Exp $
 
 /**
  * @file
@@ -1541,7 +1541,9 @@ function comment_form_submit($form, &$form_state) {
   _comment_form_submit($form_state['values']);
   if ($cid = comment_save($form_state['values'])) {
     $node = node_load($form_state['values']['nid']);
-    $page = comment_new_page_count($node->comment_count, 1, $node);
+    // Add 1 to existing $node->comment count to include new comment being added.
+    $comment_count = $node->comment_count + 1;
+    $page = comment_new_page_count($comment_count, 1, $node);
     $form_state['redirect'] = array('node/'. $node->nid, $page, "comment-$cid");
     return;
   }
diff --git a/modules/contact/contact.info b/modules/contact/contact.info
index 7257692..707f985 100644
--- a/modules/contact/contact.info
+++ b/modules/contact/contact.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/dblog/dblog.info b/modules/dblog/dblog.info
index b59f108..e956fb3 100644
--- a/modules/dblog/dblog.info
+++ b/modules/dblog/dblog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/filter/filter.info b/modules/filter/filter.info
index e8e4854..022add5 100644
--- a/modules/filter/filter.info
+++ b/modules/filter/filter.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/forum/forum.info b/modules/forum/forum.info
index c36d76e..30113e5 100644
--- a/modules/forum/forum.info
+++ b/modules/forum/forum.info
@@ -7,8 +7,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/help/help.info b/modules/help/help.info
index 0163b54..a4714a5 100644
--- a/modules/help/help.info
+++ b/modules/help/help.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/locale/locale.info b/modules/locale/locale.info
index fa165d8..5932d3c 100644
--- a/modules/locale/locale.info
+++ b/modules/locale/locale.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/menu/menu.info b/modules/menu/menu.info
index 08446da..6746e8c 100644
--- a/modules/menu/menu.info
+++ b/modules/menu/menu.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/node/node.info b/modules/node/node.info
index 5b0e067..0aeeb8d 100644
--- a/modules/node/node.info
+++ b/modules/node/node.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/openid/openid.info b/modules/openid/openid.info
index af8f0b1..572ca60 100644
--- a/modules/openid/openid.info
+++ b/modules/openid/openid.info
@@ -5,8 +5,8 @@ version = VERSION
 package = Core - optional
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/path/path.info b/modules/path/path.info
index 15c0381..4cc8d6f 100644
--- a/modules/path/path.info
+++ b/modules/path/path.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/php/php.info b/modules/php/php.info
index 9e11028..c92951e 100644
--- a/modules/php/php.info
+++ b/modules/php/php.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/ping/ping.info b/modules/ping/ping.info
index 4eca538..bda74d9 100644
--- a/modules/ping/ping.info
+++ b/modules/ping/ping.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/poll/poll.info b/modules/poll/poll.info
index 93eea87..58afc58 100644
--- a/modules/poll/poll.info
+++ b/modules/poll/poll.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/profile/profile.info b/modules/profile/profile.info
index ed17b35..e4fc88d 100644
--- a/modules/profile/profile.info
+++ b/modules/profile/profile.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/search/search.info b/modules/search/search.info
index 58cb8e4..036a2f7 100644
--- a/modules/search/search.info
+++ b/modules/search/search.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/statistics/statistics.info b/modules/statistics/statistics.info
index d07fab7..9296d5c 100644
--- a/modules/statistics/statistics.info
+++ b/modules/statistics/statistics.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/syslog/syslog.info b/modules/syslog/syslog.info
index 2a65eba..c41ac8e 100644
--- a/modules/syslog/syslog.info
+++ b/modules/syslog/syslog.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/system/system.admin.inc b/modules/system/system.admin.inc
index 92b213d..6e5e00a 100644
--- a/modules/system/system.admin.inc
+++ b/modules/system/system.admin.inc
@@ -1293,6 +1293,13 @@ function system_performance_settings() {
     '#options' => $period,
     '#description' => t('On high-traffic sites, it may be necessary to enforce a minimum cache lifetime. The minimum cache lifetime is the minimum amount of time that will elapse before the cache is emptied and recreated, and is applied to both page and block caches. A larger minimum cache lifetime offers better performance, but users will not see new content for a longer period of time.')
   );
+  $form['page_cache']['page_cache_max_age'] = array(
+    '#type' => 'select',
+    '#title' => t('Page cache maximum age'),
+    '#default_value' => variable_get('page_cache_max_age', 0),
+    '#options' => $period,
+    '#description' => t('Internal and external page caches will not deliver cached paged older than this setting.')
+  );
   $form['page_cache']['page_compression'] = array(
     '#type' => 'radios',
     '#title' => t('Page compression'),
diff --git a/modules/system/system.info b/modules/system/system.info
index ae93b73..fbb25b7 100644
--- a/modules/system/system.info
+++ b/modules/system/system.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/system/system.module b/modules/system/system.module
index 06f2b93..e7f475c 100644
--- a/modules/system/system.module
+++ b/modules/system/system.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: system.module,v 1.585.2.34 2009/04/30 00:13:31 goba Exp $
+// $Id: system.module,v 1.585.2.36 2009/05/13 19:11:04 goba Exp $
 
 /**
  * @file
@@ -9,7 +9,7 @@
 /**
  * The current system version.
  */
-define('VERSION', '6.11');
+define('VERSION', '6.12');
 
 /**
  * Core API compatibility.
diff --git a/modules/taxonomy/taxonomy.info b/modules/taxonomy/taxonomy.info
index 31f6eab..78db430 100644
--- a/modules/taxonomy/taxonomy.info
+++ b/modules/taxonomy/taxonomy.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/taxonomy/taxonomy.module b/modules/taxonomy/taxonomy.module
index 49d9bc2..495ce74 100644
--- a/modules/taxonomy/taxonomy.module
+++ b/modules/taxonomy/taxonomy.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: taxonomy.module,v 1.414.2.8 2009/04/27 11:49:05 goba Exp $
+// $Id: taxonomy.module,v 1.414.2.11 2009/05/13 19:38:33 goba Exp $
 
 /**
  * @file
@@ -415,7 +415,7 @@ function taxonomy_del_term($tid) {
  */
 function taxonomy_form($vid, $value = 0, $help = NULL, $name = 'taxonomy') {
   $vocabulary = taxonomy_vocabulary_load($vid);
-  $help = ($help) ? $help : $vocabulary->help;
+  $help = ($help) ? $help : filter_xss_admin($vocabulary->help);
 
   if (!$vocabulary->multiple) {
     $blank = ($vocabulary->required) ? t('- Please choose -') : t('- None selected -');
@@ -514,7 +514,7 @@ function taxonomy_form_alter(&$form, $form_state, $form_id) {
           $typed_string = taxonomy_implode_tags($terms, $vocabulary->vid) . (array_key_exists('tags', $terms) ? $terms['tags'][$vocabulary->vid] : NULL);
         }
         if ($vocabulary->help) {
-          $help = $vocabulary->help;
+          $help = filter_xss_admin($vocabulary->help);
         }
         else {
           $help = t('A comma-separated list of terms describing this content. Example: funny, bungee jumping, "Company, Inc.".');
@@ -538,7 +538,7 @@ function taxonomy_form_alter(&$form, $form_state, $form_id) {
             $default_terms[$term->tid] = $term;
           }
         }
-        $form['taxonomy'][$vocabulary->vid] = taxonomy_form($vocabulary->vid, array_keys($default_terms), $vocabulary->help);
+        $form['taxonomy'][$vocabulary->vid] = taxonomy_form($vocabulary->vid, array_keys($default_terms), filter_xss_admin($vocabulary->help));
         $form['taxonomy'][$vocabulary->vid]['#weight'] = $vocabulary->weight;
         $form['taxonomy'][$vocabulary->vid]['#required'] = $vocabulary->required;
       }
@@ -838,19 +838,16 @@ function taxonomy_get_tree($vid, $parent = 0, $depth = -1, $max_depth = NULL) {
 
   $max_depth = (is_null($max_depth)) ? count($children[$vid]) : $max_depth;
   $tree = array();
-  if (!empty($children[$vid][$parent])) {
+  if ($max_depth > $depth && !empty($children[$vid][$parent])) {
     foreach ($children[$vid][$parent] as $child) {
-      if ($max_depth > $depth) {
-        $term = drupal_clone($terms[$vid][$child]);
-        $term->depth = $depth;
-        // The "parent" attribute is not useful, as it would show one parent only.
-        unset($term->parent);
-        $term->parents = $parents[$vid][$child];
-        $tree[] = $term;
-
-        if (!empty($children[$vid][$child])) {
-          $tree = array_merge($tree, taxonomy_get_tree($vid, $child, $depth, $max_depth));
-        }
+      $term = drupal_clone($terms[$vid][$child]);
+      $term->depth = $depth;
+      // The "parent" attribute is not useful, as it would show one parent only.
+      unset($term->parent);
+      $term->parents = $parents[$vid][$child];
+      $tree[] = $term;
+      if (!empty($children[$vid][$child])) {
+        $tree = array_merge($tree, taxonomy_get_tree($vid, $child, $depth, $max_depth));
       }
     }
   }
@@ -1018,6 +1015,35 @@ function taxonomy_get_term($tid) {
   return $terms[$tid];
 }
 
+/**
+ * Create a select form element for a given taxonomy vocabulary.
+ *
+ * NOTE: This function expects input that has already been sanitized and is
+ * safe for display. Callers must properly sanitize the $title and
+ * $description arguments to prevent XSS vulnerabilities.
+ *
+ * @param $title
+ *   The title of the vocabulary. This MUST be sanitized by the caller.
+ * @param $name
+ *   Ignored.
+ * @param $value
+ *   The currently selected terms from this vocabulary, if any.
+ * @param $vocabulary_id
+ *   The vocabulary ID to build the form element for.
+ * @param $description
+ *   Help text for the form element. This MUST be sanitized by the caller.
+ * @param $multiple
+ *   Boolean to control if the form should use a single or multiple select.
+ * @param $blank
+ *   Optional form choice to use when no value has been selected.
+ * @param $exclude
+ *   Optional array of term ids to exclude in the selector.
+ * @return
+ *   A FAPI form array to select terms from the given vocabulary.
+ *
+ * @see taxonomy_form()
+ * @see taxonomy_form_term()
+ */
 function _taxonomy_term_select($title, $name, $value, $vocabulary_id, $description, $multiple, $blank, $exclude = array()) {
   $tree = taxonomy_get_tree($vocabulary_id);
   $options = array();
diff --git a/modules/throttle/throttle.info b/modules/throttle/throttle.info
index 6b0afe9..563a3d4 100644
--- a/modules/throttle/throttle.info
+++ b/modules/throttle/throttle.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/tracker/tracker.info b/modules/tracker/tracker.info
index 2e6187d..39016fd 100644
--- a/modules/tracker/tracker.info
+++ b/modules/tracker/tracker.info
@@ -6,8 +6,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/translation/translation.info b/modules/translation/translation.info
index 1db3897..51e1961 100644
--- a/modules/translation/translation.info
+++ b/modules/translation/translation.info
@@ -6,8 +6,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/trigger/trigger.info b/modules/trigger/trigger.info
index 9474fbb..2e5b8b4 100644
--- a/modules/trigger/trigger.info
+++ b/modules/trigger/trigger.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/update/update.info b/modules/update/update.info
index f0db1b6..a48f447 100644
--- a/modules/update/update.info
+++ b/modules/update/update.info
@@ -5,8 +5,8 @@ version = VERSION
 package = Core - optional
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/update/update.module b/modules/update/update.module
index ce21bc4..d8e8fbd 100644
--- a/modules/update/update.module
+++ b/modules/update/update.module
@@ -1,5 +1,5 @@
 <?php
-// $Id: update.module,v 1.17.2.3 2009/04/29 18:43:11 goba Exp $
+// $Id: update.module,v 1.17.2.4 2009/05/13 18:27:58 goba Exp $
 
 /**
  * @file
@@ -303,7 +303,7 @@ function update_cron() {
  * @see update_invalidate_cache()
  */
 function update_form_alter(&$form, $form_state, $form_id) {
-  if ($form_id == 'system_modules' || $form_id == 'system_themes' ) {
+  if ($form_id == 'system_modules' || $form_id == 'system_themes_form' ) {
     $form['#submit'][] = 'update_invalidate_cache';
   }
 }
diff --git a/modules/upload/upload.info b/modules/upload/upload.info
index abc85c8..492a512 100644
--- a/modules/upload/upload.info
+++ b/modules/upload/upload.info
@@ -5,8 +5,8 @@ package = Core - optional
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/user/user.info b/modules/user/user.info
index 8bb3a8f..1a86346 100644
--- a/modules/user/user.info
+++ b/modules/user/user.info
@@ -5,8 +5,8 @@ package = Core - required
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/modules/user/user.module b/modules/user/user.module
index 39b72be..4d0c93a 100644
--- a/modules/user/user.module
+++ b/modules/user/user.module
@@ -1370,12 +1370,15 @@ function user_authenticate_finalize(&$edit) {
   db_query("UPDATE {users} SET login = %d WHERE uid = %d", $user->login, $user->uid);
 
   // Regenerate the session ID to prevent against session fixation attacks.
-  sess_regenerate();
-  user_module_invoke('login', $edit, $user);
-  if (variable_get('reverse_proxy', 0)) {
-    // If we have a reverse proxy, set a special cookie so the proxy would pass through the requests.
-    setcookie('LOGGED_IN', 'Y', $_SERVER['REQUEST_TIME'] + ini_get('session.cookie_lifetime'), '/');
+  if (drupal_session_is_started()) {
+    sess_regenerate();
+  }
+  else {
+    // Start a new session.
+    drupal_session_start();
   }
+
+  user_module_invoke('login', $edit, $user);
 }
 
 /**
diff --git a/modules/user/user.pages.inc b/modules/user/user.pages.inc
index cea16d2..a549283 100644
--- a/modules/user/user.pages.inc
+++ b/modules/user/user.pages.inc
@@ -146,12 +146,6 @@ function user_logout() {
 
   watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
 
-  if (variable_get('reverse_proxy', 0)) {
-    // If we are behind a reverse proxy, unset the logged in cookie by giving it
-    // an empty value and a time in the past
-    setcookie('LOGGED_IN', '', $_SERVER['REQUEST_TIME'] - 86400, '/');
-  }
-
   // Destroy the current session:
   session_destroy();
   module_invoke_all('user', 'logout', NULL, $user);
diff --git a/sites/default/default.settings.php b/sites/default/default.settings.php
index 460e07f..589b232 100644
--- a/sites/default/default.settings.php
+++ b/sites/default/default.settings.php
@@ -197,27 +197,6 @@ ini_set('url_rewriter.tags',        '');
  * logging, statistics and access management systems; if you are unsure
  * about this setting, do not have a reverse proxy, or Drupal operates in
  * a shared hosting environment, this setting should be set to disabled.
- *
- * Configuration for Squid
- *   ...
- *   acl cookie_logged_in_set rep_header Set-Cookie LOGGED_IN=Y
- *   cache deny cookie_logged_in_set
- *   acl cookie_logged_in_out rep_header Cookie LOGGED_IN=Y
- *   cache deny cookie_logged_in_out
- *   acl cookie_logged_in     req_header Cookie LOGGED_IN=Y
- *   cache deny cookie_logged_in
- *   ...
- *
- * Configuration for Varnish
- *
- *    sub vcl_recv {
- *      ...
- *      if (req.http.Cookie && req.http.Cookie ~ "LOGGED_IN=Y") {
- *        pass;
- *      }
- *      ...
- *    }
- *
  */
 #   'reverse_proxy' => TRUE,
 /**
diff --git a/themes/bluemarine/bluemarine.info b/themes/bluemarine/bluemarine.info
index 98b7d47..08d04da 100644
--- a/themes/bluemarine/bluemarine.info
+++ b/themes/bluemarine/bluemarine.info
@@ -5,8 +5,8 @@ version = VERSION
 core = 6.x
 engine = phptemplate
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/themes/chameleon/chameleon.info b/themes/chameleon/chameleon.info
index e2701fc..fc23602 100644
--- a/themes/chameleon/chameleon.info
+++ b/themes/chameleon/chameleon.info
@@ -12,8 +12,8 @@ stylesheets[all][] = common.css
 version = VERSION
 core = 6.x
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/themes/chameleon/marvin/marvin.info b/themes/chameleon/marvin/marvin.info
index ab8a9c0..6882131 100644
--- a/themes/chameleon/marvin/marvin.info
+++ b/themes/chameleon/marvin/marvin.info
@@ -7,8 +7,8 @@ version = VERSION
 core = 6.x
 base theme = chameleon
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/themes/garland/garland.info b/themes/garland/garland.info
index 5275271..57462a6 100644
--- a/themes/garland/garland.info
+++ b/themes/garland/garland.info
@@ -7,8 +7,8 @@ engine = phptemplate
 stylesheets[all][] = style.css
 stylesheets[print][] = print.css
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/themes/garland/minnelli/minnelli.info b/themes/garland/minnelli/minnelli.info
index bf497ec..7f9d98f 100644
--- a/themes/garland/minnelli/minnelli.info
+++ b/themes/garland/minnelli/minnelli.info
@@ -6,8 +6,8 @@ core = 6.x
 base theme = garland
 stylesheets[all][] = minnelli.css
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/themes/pushbutton/pushbutton.info b/themes/pushbutton/pushbutton.info
index fb2ebb9..4564b81 100644
--- a/themes/pushbutton/pushbutton.info
+++ b/themes/pushbutton/pushbutton.info
@@ -5,8 +5,8 @@ version = VERSION
 core = 6.x
 engine = phptemplate
 
-; Information added by drupal.org packaging script on 2009-04-30
-version = "6.11"
+; Information added by drupal.org packaging script on 2009-05-13
+version = "6.12"
 project = "drupal"
-datestamp = "1241050838"
+datestamp = "1242243950"
 
diff --git a/update.php b/update.php
index 28b1b7a..b62a10a 100644
--- a/update.php
+++ b/update.php
@@ -617,6 +617,7 @@ ini_set('display_errors', TRUE);
 
 // Access check:
 if (!empty($update_free_access) || $user->uid == 1) {
+  drupal_session_start();
 
   include_once './includes/install.inc';
   include_once './includes/batch.inc';
