diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index 4c58b4d..ada825d 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,5 +1,19 @@
 // $Id$
 
+Drupal 6.9, 2009-01-14
+----------------------
+- Fixed security issues, (Access Bypass, Validation Bypass and Hardening
+  against SQL injection), see SA-CORE-2009-001
+- Made HTTP request checking more robust and informative.
+- Fixed HTTP_HOST checking to work again with HTTP 1.0 clients and
+  basic shell scripts.
+- Removed t() calls from all schema documentation. Suggested best practice
+  changed for contributed modules, see http://drupal.org/node/322731.
+- Fixed a variety of small bugs.
+
+Drupal 6.9-dev, xxxx-xx-xx (development release)
+----------------------
+
 Drupal 6.8, 2008-12-11
 ----------------------
 - Removed a previous change incompatible with PHP 5.1.x and lower.
@@ -154,6 +168,13 @@ Drupal 6.0, 2008-02-13
 - Removed old system updates. Updates from Drupal versions prior to 5.x will
   require upgrading to 5.x before upgrading to 6.x.
 
+Drupal 5.15, 2009-01-14
+----------------------
+- Fixed security issues, (Hardening against SQL injection), see SA-CORE-2009-001
+- Fixed HTTP_HOST checking to work again with HTTP 1.0 clients and
+  basic shell scripts.
+- Fixed a variety of small bugs.
+
 Drupal 5.14, 2008-12-11
 ----------------------
 - Removed a previous change incompatible with PHP 5.1.x and lower.
diff --git a/LICENSE.txt b/LICENSE.txt
index 5312a46..8d7df75 100644
--- a/LICENSE.txt
+++ b/LICENSE.txt
@@ -1,14 +1,13 @@
 // $Id$
+		    GNU GENERAL PUBLIC LICENSE
+		       Version 2, June 1991
 
-        GNU GENERAL PUBLIC LICENSE
-           Version 2, June 1991
-
- Copyright (C) 1989, 1991 Free Software Foundation, Inc.
- 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  Everyone is permitted to copy and distribute verbatim copies
  of this license document, but changing it is not allowed.
 
-          Preamble
+			    Preamble
 
   The licenses for most software are designed to take away your
 freedom to share and change it.  By contrast, the GNU General Public
@@ -58,7 +57,7 @@ patent must be licensed for everyone's free use or not licensed at all.
   The precise terms and conditions for copying, distribution and
 modification follow.
 
-        GNU GENERAL PUBLIC LICENSE
+		    GNU GENERAL PUBLIC LICENSE
    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 
   0. This License applies to any program or other work which contains
@@ -257,7 +256,7 @@ make exceptions for this.  Our decision will be guided by the two goals
 of preserving the free status of all derivatives of our free software and
 of promoting the sharing and reuse of software generally.
 
-          NO WARRANTY
+			    NO WARRANTY
 
   11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
 FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
@@ -279,9 +278,9 @@ YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
 PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGES.
 
-         END OF TERMS AND CONDITIONS
+		     END OF TERMS AND CONDITIONS
 
-      How to Apply These Terms to Your New Programs
+	    How to Apply These Terms to Your New Programs
 
   If you develop a new program, and you want it to be of the greatest
 possible use to the public, the best way to achieve this is to make it
@@ -305,10 +304,9 @@ the "copyright" line and a pointer to where the full notice is found.
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
 
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, write to the Free Software
-    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
-
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
 Also add information on how to contact you by electronic and paper mail.
 
diff --git a/includes/actions.inc b/includes/actions.inc
index a0a59e8..6dd4463 100644
--- a/includes/actions.inc
+++ b/includes/actions.inc
@@ -252,7 +252,7 @@ function actions_function_lookup($hash) {
  */
 function actions_synchronize($actions_in_code = array(), $delete_orphans = FALSE) {
   if (!$actions_in_code) {
-    $actions_in_code = actions_list();
+    $actions_in_code = actions_list(TRUE);
   }
   $actions_in_db = array();
   $result = db_query("SELECT * FROM {actions} WHERE parameters = ''");
diff --git a/includes/bootstrap.inc b/includes/bootstrap.inc
index 760fe54..b74098d 100644
--- a/includes/bootstrap.inc
+++ b/includes/bootstrap.inc
@@ -267,7 +267,7 @@ function drupal_unset_globals() {
 }
 
 /**
- * Validate that $_SERVER['HTTP_HOST'] is safe.
+ * Validate that a hostname (for example $_SERVER['HTTP_HOST']) is safe.
  *
  * As $_SERVER['HTTP_HOST'] is user input, ensure it only contains characters
  * allowed in hostnames.  See RFC 952 (and RFC 2181). $_SERVER['HTTP_HOST'] is
@@ -276,9 +276,8 @@ function drupal_unset_globals() {
  * @return
  *  TRUE if only containing valid characters, or FALSE otherwise.
  */
-function drupal_valid_http_host() {
-  $_SERVER['HTTP_HOST'] = strtolower($_SERVER['HTTP_HOST']);
-  return preg_match('/^\[?(?:[a-z0-9-:\]_]+\.?)+$/', $_SERVER['HTTP_HOST']);
+function drupal_valid_http_host($host) {
+  return preg_match('/^\[?(?:[a-z0-9-:\]_]+\.?)+$/', $host);
 }
 
 /**
@@ -292,10 +291,21 @@ function conf_init() {
   global $db_url, $db_prefix, $cookie_domain, $conf, $installed_profile, $update_free_access;
   $conf = array();
 
-  if (!drupal_valid_http_host()) {
-    // HTTP_HOST is invalid, e.g. if containing slashes it may be an attack.
-    header('HTTP/1.1 400 Bad Request');
-    exit;
+  if (isset($_SERVER['HTTP_HOST'])) {
+    // As HTTP_HOST is user input, ensure it only contains characters allowed
+    // in hostnames. See RFC 952 (and RFC 2181).
+    // $_SERVER['HTTP_HOST'] is lowercased here per specifications.
+    $_SERVER['HTTP_HOST'] = strtolower($_SERVER['HTTP_HOST']);
+    if (!drupal_valid_http_host($_SERVER['HTTP_HOST'])) {
+      // HTTP_HOST is invalid, e.g. if containing slashes it may be an attack.
+      header('HTTP/1.1 400 Bad Request');
+      exit;
+    }
+  }
+  else {
+    // Some pre-HTTP/1.1 clients will not send a Host header. Ensure the key is
+    // defined for E_ALL compliance.
+    $_SERVER['HTTP_HOST'] = '';
   }
 
   if (file_exists('./'. conf_path() .'/settings.php')) {
@@ -1012,13 +1022,13 @@ function _drupal_bootstrap($phase) {
     case DRUPAL_BOOTSTRAP_LATE_PAGE_CACHE:
       // Initialize configuration variables, using values from settings.php if available.
       $conf = variable_init(isset($conf) ? $conf : array());
-      // Load module handling.
-      require_once './includes/module.inc';
       $cache_mode = variable_get('cache', CACHE_DISABLED);
       // Get the page from the cache.
       $cache = $cache_mode == CACHE_DISABLED ? '' : page_get_cache();
       // If the skipping of the bootstrap hooks is not enforced, call hook_boot.
-      if ($cache_mode != CACHE_AGGRESSIVE) {
+      if (!$cache || $cache_mode != CACHE_AGGRESSIVE) {
+        // Load module handling.
+        require_once './includes/module.inc';
         bootstrap_invoke_all('boot');
       }
       // If there is a cached page, display it.
diff --git a/includes/common.inc b/includes/common.inc
index 9ae6c96..016fcfe 100644
--- a/includes/common.inc
+++ b/includes/common.inc
@@ -414,23 +414,7 @@ function drupal_access_denied() {
  *   data and redirect status.
  */
 function drupal_http_request($url, $headers = array(), $method = 'GET', $data = NULL, $retry = 3) {
-  static $self_test = FALSE;
   $result = new stdClass();
-  // Try to clear the drupal_http_request_fails variable if it's set. We
-  // can't tie this call to any error because there is no surefire way to
-  // tell whether a request has failed, so we add the check to places where
-  // some parsing has failed.
-  if (!$self_test && variable_get('drupal_http_request_fails', FALSE)) {
-    $self_test = TRUE;
-    $works = module_invoke('system', 'check_http_request');
-    $self_test = FALSE;
-    if (!$works) {
-      // Do not bother with further operations if we already know that we
-      // have no chance.
-      $result->error = t("The server can't issue HTTP requests");
-      return $result;
-    }
-  }
 
   // Parse the URL and make sure we can handle the schema.
   $uri = parse_url($url);
@@ -468,6 +452,13 @@ function drupal_http_request($url, $headers = array(), $method = 'GET', $data =
     // clash with the HTTP status codes.
     $result->code = -$errno;
     $result->error = trim($errstr);
+
+    // Mark that this request failed. This will trigger a check of the web
+    // server's ability to make outgoing HTTP requests the next time that
+    // requirements checking is performed.
+    // @see system_requirements()
+    variable_set('drupal_http_request_fails', TRUE);
+
     return $result;
   }
 
@@ -684,8 +675,8 @@ function fix_gpc_magic() {
  *
  * Special variables called "placeholders" are used to signal dynamic
  * information in a string which should not be translated. Placeholders
- * can also be used for text that may change from time to time
- * (such as link paths) to be changed without requiring updates to translations.
+ * can also be used for text that may change from time to time (such as
+ * link paths) to be changed without requiring updates to translations.
  *
  * For example:
  * @code
@@ -701,9 +692,9 @@ function fix_gpc_magic() {
  *     $message[] = t("If you don't want to receive such e-mails, you can change your settings at !url.", array('!url' => url("user/$account->uid", array('absolute' => TRUE))));
  *   @endcode
  *
- * - @variable, which indicates that the text should be run through check_plain,
- *   to escape HTML characters. Use this for any output that's displayed within
- *   a Drupal page.
+ * - @variable, which indicates that the text should be run through
+ *   check_plain, to escape HTML characters. Use this for any output that's
+ *   displayed within a Drupal page.
  *   @code
  *     drupal_set_title($title = t("@name's blog", array('@name' => $account->name)));
  *   @endcode
@@ -716,10 +707,10 @@ function fix_gpc_magic() {
  *   @endcode
  *
  * When using t(), try to put entire sentences and strings in one t() call.
- * This makes it easier for translators, as it provides context as to what each
- * word refers to. HTML markup within translation strings is allowed, but should
- * be avoided if possible. The exception are embedded links; link titles add a
- * context for translators, so should be kept in the main string.
+ * This makes it easier for translators, as it provides context as to what
+ * each word refers to. HTML markup within translation strings is allowed, but
+ * should be avoided if possible. The exception are embedded links; link
+ * titles add a context for translators, so should be kept in the main string.
  *
  * Here is an example of incorrect usage of t():
  * @code
@@ -842,8 +833,8 @@ function fix_gpc_magic() {
  *   A string containing the English string to translate.
  * @param $args
  *   An associative array of replacements to make after translation. Incidences
- *   of any key in this array are replaced with the corresponding value.
- *   Based on the first character of the key, the value is escaped and/or themed:
+ *   of any key in this array are replaced with the corresponding value. Based
+ *   on the first character of the key, the value is escaped and/or themed:
  *    - !variable: inserted as is
  *    - @variable: escape plain text to HTML (check_plain)
  *    - %variable: escape text and theme as a placeholder for user-submitted
@@ -931,6 +922,7 @@ function valid_email_address($mail) {
  *
  * This function should only be used on actual URLs. It should not be used for
  * Drupal menu paths, which can contain arbitrary characters.
+ * Valid values per RFC 3986.
  *
  * @param $url
  *   The URL to verify.
@@ -940,15 +932,30 @@ function valid_email_address($mail) {
  *   TRUE if the URL is in a valid format.
  */
 function valid_url($url, $absolute = FALSE) {
-  $allowed_characters = '[a-z0-9\/:_\-_\.\?\$,;~=#&%\+]';
   if ($absolute) {
-    return preg_match("/^(http|https|ftp):\/\/". $allowed_characters ."+$/i", $url);
+    return (bool)preg_match("
+      /^                                                      # Start at the beginning of the text
+      (?:ftp|https?):\/\/                                     # Look for ftp, http, or https schemes
+      (?:                                                     # Userinfo (optional) which is typically
+        (?:(?:[\w\.\-\+!$&'\(\)*\+,;=]|%[0-9a-f]{2})+:)*      # a username or a username and password
+        (?:[\w\.\-\+%!$&'\(\)*\+,;=]|%[0-9a-f]{2})+@          # combination
+      )?
+      (?:
+        (?:[a-z0-9\-\.]|%[0-9a-f]{2})+                        # A domain name or a IPv4 address
+        |(?:\[(?:[0-9a-f]{0,4}:)*(?:[0-9a-f]{0,4})\])         # or a well formed IPv6 address
+      )
+      (?::[0-9]+)?                                            # Server port number (optional)
+      (?:[\/|\?]
+        (?:[\w#!:\.\?\+=&@$'~*,;\/\(\)\[\]\-]|%[0-9a-f]{2})   # The path and query (optional)
+      *)?
+    $/xi", $url);
   }
   else {
-    return preg_match("/^". $allowed_characters ."+$/i", $url);
+    return (bool)preg_match("/^(?:[\w#!:\.\?\+=&@$'~*,;\/\(\)\[\]\-]|%[0-9a-f]{2})+$/i", $url);
   }
 }
 
+
 /**
  * @} End of "defgroup validation".
  */
diff --git a/includes/form.inc b/includes/form.inc
index 27f970f..329ed2a 100644
--- a/includes/form.inc
+++ b/includes/form.inc
@@ -972,7 +972,6 @@ function _form_builder_handle_input_element($form_id, &$form, &$form_state, $com
     $form['#id'] = form_clean_id('edit-'. implode('-', $form['#parents']));
   }
 
-  unset($edit);
   if (!empty($form['#disabled'])) {
     $form['#attributes']['disabled'] = 'disabled';
   }
diff --git a/includes/language.inc b/includes/language.inc
index 75efe91..174a5e2 100644
--- a/includes/language.inc
+++ b/includes/language.inc
@@ -25,7 +25,7 @@ function language_initialize() {
     case LANGUAGE_NEGOTIATION_DOMAIN:
       foreach ($languages as $language) {
         $parts = parse_url($language->domain);
-        if (!empty($parts['host']) && ($_SERVER['SERVER_NAME'] == $parts['host'])) {
+        if (!empty($parts['host']) && ($_SERVER['HTTP_HOST'] == $parts['host'])) {
           return $language;
         }
       }
diff --git a/includes/locale.inc b/includes/locale.inc
index 0dd2322..3c05efa 100644
--- a/includes/locale.inc
+++ b/includes/locale.inc
@@ -665,6 +665,7 @@ function locale_translate_import_form_submit($form, &$form_state) {
   else {
     drupal_set_message(t('File to import not found.'), 'error');
     $form_state['redirect'] = 'admin/build/translate/import';
+    return;
   }
 
   $form_state['redirect'] = 'admin/build/translate';
@@ -1368,7 +1369,7 @@ function _locale_import_one_string_db(&$report, $langcode, $source, $translation
   }
   elseif ($mode == LOCALE_IMPORT_OVERWRITE) {
     // Empty translation, remove existing if instructed.
-    db_query("DELETE FROM {locales_target} WHERE language = '%s' AND lid = %d AND plid = %d AND plural = %d", $translation, $langcode, $lid, $plid, $plural);
+    db_query("DELETE FROM {locales_target} WHERE language = '%s' AND lid = %d AND plid = %d AND plural = %d", $langcode, $lid, $plid, $plural);
     $report['deletes']++;
   }
 
diff --git a/includes/xmlrpc.inc b/includes/xmlrpc.inc
index 5f4f9cb..d316d95 100644
--- a/includes/xmlrpc.inc
+++ b/includes/xmlrpc.inc
@@ -349,7 +349,6 @@ function xmlrpc_error($code = NULL, $message = NULL, $reset = FALSE) {
     $xmlrpc_error->is_error = TRUE;
     $xmlrpc_error->code = $code;
     $xmlrpc_error->message = $message;
-    module_invoke('system', 'check_http_request');
   }
   elseif ($reset) {
     $xmlrpc_error = NULL;
diff --git a/modules/aggregator/aggregator.install b/modules/aggregator/aggregator.install
index 1c80424..8a6889a 100644
--- a/modules/aggregator/aggregator.install
+++ b/modules/aggregator/aggregator.install
@@ -27,32 +27,32 @@ function aggregator_uninstall() {
  */
 function aggregator_schema() {
   $schema['aggregator_category'] = array(
-    'description' => t('Stores categories for aggregator feeds and feed items.'),
+    'description' => 'Stores categories for aggregator feeds and feed items.',
     'fields' => array(
       'cid'  => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique aggregator category ID.'),
+        'description' => 'Primary Key: Unique aggregator category ID.',
       ),
       'title' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Title of the category.'),
+        'description' => 'Title of the category.',
       ),
       'description' => array(
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
-        'description' => t('Description of the category'),
+        'description' => 'Description of the category',
       ),
       'block' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('The number of recent items to show within the category block.'),
+        'description' => 'The number of recent items to show within the category block.',
       )
     ),
     'primary key' => array('cid'),
@@ -60,19 +60,19 @@ function aggregator_schema() {
   );
 
   $schema['aggregator_category_feed'] = array(
-    'description' => t('Bridge table; maps feeds to categories.'),
+    'description' => 'Bridge table; maps feeds to categories.',
     'fields' => array(
       'fid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t("The feed's {aggregator_feed}.fid."),
+        'description' => "The feed's {aggregator_feed}.fid.",
       ),
       'cid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {aggregator_category}.cid to which the feed is being assigned.'),
+        'description' => 'The {aggregator_category}.cid to which the feed is being assigned.',
       )
     ),
     'primary key' => array('cid', 'fid'),
@@ -80,19 +80,19 @@ function aggregator_schema() {
   );
 
   $schema['aggregator_category_item'] = array(
-    'description' => t('Bridge table; maps feed items to categories.'),
+    'description' => 'Bridge table; maps feed items to categories.',
     'fields' => array(
       'iid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t("The feed item's {aggregator_item}.iid."),
+        'description' => "The feed item's {aggregator_item}.iid.",
       ),
       'cid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {aggregator_category}.cid to which the feed item is being assigned.'),
+        'description' => 'The {aggregator_category}.cid to which the feed item is being assigned.',
       )
     ),
     'primary key' => array('cid', 'iid'),
@@ -100,77 +100,77 @@ function aggregator_schema() {
   );
 
   $schema['aggregator_feed'] = array(
-    'description' => t('Stores feeds to be parsed by the aggregator.'),
+    'description' => 'Stores feeds to be parsed by the aggregator.',
     'fields' => array(
       'fid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique feed ID.'),
+        'description' => 'Primary Key: Unique feed ID.',
       ),
       'title' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Title of the feed.'),
+        'description' => 'Title of the feed.',
       ),
       'url' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('URL to the feed.'),
+        'description' => 'URL to the feed.',
       ),
       'refresh' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('How often to check for new feed items, in seconds.'),
+        'description' => 'How often to check for new feed items, in seconds.',
       ),
       'checked' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Last time feed was checked for new items, as Unix timestamp.'),
+        'description' => 'Last time feed was checked for new items, as Unix timestamp.',
       ),
       'link' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The parent website of the feed; comes from the &lt;link&gt; element in the feed.'),
+        'description' => 'The parent website of the feed; comes from the &lt;link&gt; element in the feed.',
       ),
       'description' => array(
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
-        'description' => t("The parent website's description; comes from the &lt;description&gt; element in the feed."),
+        'description' => "The parent website's description; comes from the &lt;description&gt; element in the feed.",
       ),
       'image' => array(
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
-        'description' => t('An image representing the feed.'),
+        'description' => 'An image representing the feed.',
       ),
       'etag' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Entity tag HTTP response header, used for validating cache.'),
+        'description' => 'Entity tag HTTP response header, used for validating cache.',
       ),
       'modified' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('When the feed was last modified, as a Unix timestamp.'),
+        'description' => 'When the feed was last modified, as a Unix timestamp.',
       ),
       'block' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t("Number of items to display in the feed's block."),
+        'description' => "Number of items to display in the feed's block.",
       )
     ),
     'primary key' => array('fid'),
@@ -181,56 +181,56 @@ function aggregator_schema() {
   );
 
   $schema['aggregator_item'] = array(
-    'description' => t('Stores the individual items imported from feeds.'),
+    'description' => 'Stores the individual items imported from feeds.',
     'fields' => array(
       'iid'  => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique ID for feed item.'),
+        'description' => 'Primary Key: Unique ID for feed item.',
       ),
       'fid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {aggregator_feed}.fid to which this item belongs.'),
+        'description' => 'The {aggregator_feed}.fid to which this item belongs.',
       ),
       'title' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Title of the feed item.'),
+        'description' => 'Title of the feed item.',
       ),
       'link' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Link to the feed item.'),
+        'description' => 'Link to the feed item.',
       ),
       'author' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Author of the feed item.'),
+        'description' => 'Author of the feed item.',
       ),
       'description' => array(
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
-        'description' => t('Body of the feed item.'),
+        'description' => 'Body of the feed item.',
       ),
       'timestamp' => array(
         'type' => 'int',
         'not null' => FALSE,
-        'description' => t('Post date of feed item, as a Unix timestamp.'),
+        'description' => 'Post date of feed item, as a Unix timestamp.',
       ),
       'guid' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => FALSE,
-        'description' => t('Unique identifier for the feed item.'),
+        'description' => 'Unique identifier for the feed item.',
       )
     ),
     'primary key' => array('iid'),
diff --git a/modules/aggregator/aggregator.module b/modules/aggregator/aggregator.module
index 6659199..7652720 100644
--- a/modules/aggregator/aggregator.module
+++ b/modules/aggregator/aggregator.module
@@ -647,7 +647,6 @@ function aggregator_refresh($feed) {
     default:
       watchdog('aggregator', 'The feed from %site seems to be broken, due to "%error".', array('%site' => $feed['title'], '%error' => $result->code .' '. $result->error), WATCHDOG_WARNING);
       drupal_set_message(t('The feed from %site seems to be broken, because of error "%error".', array('%site' => $feed['title'], '%error' => $result->code .' '. $result->error)));
-      module_invoke('system', 'check_http_request');
   }
 }
 
diff --git a/modules/block/block.install b/modules/block/block.install
index e474c78..6956136 100644
--- a/modules/block/block.install
+++ b/modules/block/block.install
@@ -6,94 +6,94 @@
  */
 function block_schema() {
   $schema['blocks'] = array(
-    'description' => t('Stores block settings, such as region and visibility settings.'),
+    'description' => 'Stores block settings, such as region and visibility settings.',
     'fields' => array(
       'bid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique block ID.'),
+        'description' => 'Primary Key: Unique block ID.',
       ),
       'module' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
-        'description' => t("The module from which the block originates; for example, 'user' for the Who's Online block, and 'block' for any custom blocks."),
+        'description' => "The module from which the block originates; for example, 'user' for the Who's Online block, and 'block' for any custom blocks.",
       ),
       'delta' => array(
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => '0',
-        'description' => t('Unique ID for block within a module.'),
+        'description' => 'Unique ID for block within a module.',
       ),
       'theme' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The theme under which the block settings apply.'),
+        'description' => 'The theme under which the block settings apply.',
       ),
       'status' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Block enabled status. (1 = enabled, 0 = disabled)'),
+        'description' => 'Block enabled status. (1 = enabled, 0 = disabled)',
       ),
       'weight' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Block weight within region.'),
+        'description' => 'Block weight within region.',
       ),
       'region' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Theme region within which the block is set.'),
+        'description' => 'Theme region within which the block is set.',
       ),
       'custom' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Flag to indicate how users may control visibility of the block. (0 = Users cannot control, 1 = On by default, but can be hidden, 2 = Hidden by default, but can be shown)'),
+        'description' => 'Flag to indicate how users may control visibility of the block. (0 = Users cannot control, 1 = On by default, but can be hidden, 2 = Hidden by default, but can be shown)',
       ),
       'throttle' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Flag to indicate whether or not to remove block when website traffic is high. (1 = throttle, 0 = do not throttle)'),
+        'description' => 'Flag to indicate whether or not to remove block when website traffic is high. (1 = throttle, 0 = do not throttle)',
       ),
       'visibility' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Flag to indicate how to show blocks on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility)'),
+        'description' => 'Flag to indicate how to show blocks on pages. (0 = Show on all pages except listed pages, 1 = Show only on listed pages, 2 = Use custom PHP code to determine visibility)',
       ),
       'pages' => array(
         'type' => 'text',
         'not null' => TRUE,
-        'description' => t('Contents of the "Pages" block; contains either a list of paths on which to include/exclude the block or PHP code, depending on "visibility" setting.'),
+        'description' => 'Contents of the "Pages" block; contains either a list of paths on which to include/exclude the block or PHP code, depending on "visibility" setting.',
       ),
       'title' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Custom title for the block. (Empty string will use block default title, &lt;none&gt; will remove the title, text will cause block to use specified title.)'),
+        'description' => 'Custom title for the block. (Empty string will use block default title, &lt;none&gt; will remove the title, text will cause block to use specified title.)',
       ),
       'cache' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 1,
         'size' => 'tiny',
-        'description' => t('Binary flag to indicate block cache mode. (-1: Do not cache, 1: Cache per role, 2: Cache per user, 4: Cache per page, 8: Block cache global) See BLOCK_CACHE_* constants in block.module for more detailed information.'),
+        'description' => 'Binary flag to indicate block cache mode. (-1: Do not cache, 1: Cache per role, 2: Cache per user, 4: Cache per page, 8: Block cache global) See BLOCK_CACHE_* constants in block.module for more detailed information.',
       ),
     ),
     'primary key' => array('bid'),
@@ -106,25 +106,25 @@ function block_schema() {
   );
 
   $schema['blocks_roles'] = array(
-    'description' => t('Sets up access permissions for blocks based on user roles'),
+    'description' => 'Sets up access permissions for blocks based on user roles',
     'fields' => array(
       'module' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
-        'description' => t("The block's origin module, from {blocks}.module."),
+        'description' => "The block's origin module, from {blocks}.module.",
       ),
       'delta'  => array(
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
-        'description' => t("The block's unique delta within module, from {blocks}.delta."),
+        'description' => "The block's unique delta within module, from {blocks}.delta.",
       ),
       'rid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
-        'description' => t("The user's role ID from {users_roles}.rid."),
+        'description' => "The user's role ID from {users_roles}.rid.",
       ),
     ),
     'primary key' => array(
@@ -138,33 +138,33 @@ function block_schema() {
   );
 
   $schema['boxes'] = array(
-    'description' => t('Stores contents of custom-made blocks.'),
+    'description' => 'Stores contents of custom-made blocks.',
     'fields' => array(
       'bid' => array(
         'type' => 'serial',
   'unsigned' => TRUE,
         'not null' => TRUE,
-        'description' => t("The block's {blocks}.bid."),
+        'description' => "The block's {blocks}.bid.",
       ),
       'body' => array(
         'type' => 'text',
         'not null' => FALSE,
         'size' => 'big',
-        'description' => t('Block contents.'),
+        'description' => 'Block contents.',
       ),
       'info' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Block description.'),
+        'description' => 'Block description.',
       ),
       'format' => array(
         'type' => 'int',
         'size' => 'small',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t("Block body's {filter_formats}.format; for example, 1 = Filtered HTML."),
+        'description' => "Block body's {filter_formats}.format; for example, 1 = Filtered HTML.",
       )
     ),
     'unique keys' => array('info' => array('info')),
@@ -172,7 +172,7 @@ function block_schema() {
   );
 
   $schema['cache_block'] = drupal_get_schema_unprocessed('system', 'cache');
-  $schema['cache_block']['description'] = t('Cache table for the Block module to store already built blocks, identified by module, delta, and various contexts which may change the block, such as theme, locale, and caching mode defined for the block.');
+  $schema['cache_block']['description'] = 'Cache table for the Block module to store already built blocks, identified by module, delta, and various contexts which may change the block, such as theme, locale, and caching mode defined for the block.';
 
   return $schema;
 }
diff --git a/modules/blogapi/blogapi.install b/modules/blogapi/blogapi.install
index 1c0aebf..926cfd6 100644
--- a/modules/blogapi/blogapi.install
+++ b/modules/blogapi/blogapi.install
@@ -24,26 +24,26 @@ function blogapi_uninstall() {
 function blogapi_schema() {
   //This table was introduced in Drupal 6.4
   $schema['blogapi_files'] = array(
-    'description' => t('Stores information for files uploaded via the blogapi.'),
+    'description' => 'Stores information for files uploaded via the blogapi.',
     'fields' => array(
       'fid' => array(
-        'description' => t('Primary Key: Unique file ID.'),
+        'description' => 'Primary Key: Unique file ID.',
         'type' => 'serial',
       ),
       'uid' => array(
-        'description' => t('The {users}.uid of the user who is associated with the file.'),
+        'description' => 'The {users}.uid of the user who is associated with the file.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'filepath' => array(
-        'description' => t('Path of the file relative to Drupal root.'),
+        'description' => 'Path of the file relative to Drupal root.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'filesize' => array(
-        'description' => t('The size of the file in bytes.'),
+        'description' => 'The size of the file in bytes.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
@@ -79,26 +79,26 @@ function blogapi_update_6000() {
  */
 function blogapi_update_6001() {
     $schema['blogapi_files'] = array(
-    'description' => t('Stores information for files uploaded via the blogapi.'),
+    'description' => 'Stores information for files uploaded via the blogapi.',
     'fields' => array(
       'fid' => array(
-        'description' => t('Primary Key: Unique file ID.'),
+        'description' => 'Primary Key: Unique file ID.',
         'type' => 'serial',
       ),
       'uid' => array(
-        'description' => t('The {users}.uid of the user who is associated with the file.'),
+        'description' => 'The {users}.uid of the user who is associated with the file.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'filepath' => array(
-        'description' => t('Path of the file relative to Drupal root.'),
+        'description' => 'Path of the file relative to Drupal root.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'filesize' => array(
-        'description' => t('The size of the file in bytes.'),
+        'description' => 'The size of the file in bytes.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
diff --git a/modules/book/book.install b/modules/book/book.install
index 88ed1a6..14be8c1 100644
--- a/modules/book/book.install
+++ b/modules/book/book.install
@@ -251,28 +251,28 @@ function book_update_6000() {
  */
 function book_schema() {
   $schema['book'] = array(
-  'description' => t('Stores book outline information. Uniquely connects each node in the outline to a link in {menu_links}'),
+  'description' => 'Stores book outline information. Uniquely connects each node in the outline to a link in {menu_links}',
     'fields' => array(
       'mlid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t("The book page's {menu_links}.mlid."),
+        'description' => "The book page's {menu_links}.mlid.",
       ),
       'nid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t("The book page's {node}.nid."),
+        'description' => "The book page's {node}.nid.",
       ),
       'bid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t("The book ID is the {book}.nid of the top-level page."),
+        'description' => "The book ID is the {book}.nid of the top-level page.",
       ),
     ),
     'primary key' => array('mlid'),
diff --git a/modules/comment/comment.install b/modules/comment/comment.install
index 959d637..98949d2 100644
--- a/modules/comment/comment.install
+++ b/modules/comment/comment.install
@@ -73,56 +73,56 @@ function comment_update_6003() {
  */
 function comment_schema() {
   $schema['comments'] = array(
-    'description' => t('Stores comments and associated data.'),
+    'description' => 'Stores comments and associated data.',
     'fields' => array(
       'cid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique comment ID.'),
+        'description' => 'Primary Key: Unique comment ID.',
       ),
       'pid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {comments}.cid to which this comment is a reply. If set to 0, this comment is not a reply to an existing comment.'),
+        'description' => 'The {comments}.cid to which this comment is a reply. If set to 0, this comment is not a reply to an existing comment.',
       ),
       'nid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {node}.nid to which this comment is a reply.'),
+        'description' => 'The {node}.nid to which this comment is a reply.',
       ),
       'uid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {users}.uid who authored the comment. If set to 0, this comment was created by an anonymous user.'),
+        'description' => 'The {users}.uid who authored the comment. If set to 0, this comment was created by an anonymous user.',
       ),
       'subject' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The comment title.'),
+        'description' => 'The comment title.',
       ),
       'comment' => array(
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
-        'description' => t('The comment body.'),
+        'description' => 'The comment body.',
       ),
       'hostname' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t("The author's host name."),
+        'description' => "The author's host name.",
       ),
       'timestamp' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The time that the comment was created, or last edited by its author, as a Unix timestamp.'),
+        'description' => 'The time that the comment was created, or last edited by its author, as a Unix timestamp.',
       ),
       'status' => array(
         'type' => 'int',
@@ -130,38 +130,38 @@ function comment_schema() {
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('The published status of a comment. (0 = Published, 1 = Not Published)'),
+        'description' => 'The published status of a comment. (0 = Published, 1 = Not Published)',
       ),
       'format' => array(
         'type' => 'int',
         'size' => 'small',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {filter_formats}.format of the comment body.'),
+        'description' => 'The {filter_formats}.format of the comment body.',
       ),
       'thread' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'description' => t("The vancode representation of the comment's place in a thread."),
+        'description' => "The vancode representation of the comment's place in a thread.",
       ),
       'name' => array(
         'type' => 'varchar',
         'length' => 60,
         'not null' => FALSE,
-        'description' => t("The comment author's name. Uses {users}.name if the user is logged in, otherwise uses the value typed into the comment form."),
+        'description' => "The comment author's name. Uses {users}.name if the user is logged in, otherwise uses the value typed into the comment form.",
       ),
       'mail' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => FALSE,
-        'description' => t("The comment author's e-mail address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on."),
+        'description' => "The comment author's e-mail address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",
       ),
       'homepage' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => FALSE,
-        'description' => t("The comment author's home page address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on."),
+        'description' => "The comment author's home page address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",
       )
     ),
     'indexes' => array(
@@ -173,39 +173,39 @@ function comment_schema() {
   );
 
   $schema['node_comment_statistics'] = array(
-    'description' => t('Maintains statistics of node and comments posts to show "new" and "updated" flags.'),
+    'description' => 'Maintains statistics of node and comments posts to show "new" and "updated" flags.',
     'fields' => array(
       'nid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {node}.nid for which the statistics are compiled.'),
+        'description' => 'The {node}.nid for which the statistics are compiled.',
       ),
       'last_comment_timestamp' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The Unix timestamp of the last comment that was posted within this node, from {comments}.timestamp.'),
+        'description' => 'The Unix timestamp of the last comment that was posted within this node, from {comments}.timestamp.',
       ),
       'last_comment_name' => array(
         'type' => 'varchar',
         'length' => 60,
         'not null' => FALSE,
-        'description' => t('The name of the latest author to post a comment on this node, from {comments}.name.'),
+        'description' => 'The name of the latest author to post a comment on this node, from {comments}.name.',
       ),
       'last_comment_uid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The user ID of the latest author to post a comment on this node, from {comments}.uid.'),
+        'description' => 'The user ID of the latest author to post a comment on this node, from {comments}.uid.',
       ),
       'comment_count' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The total number of comments on this node.'),
+        'description' => 'The total number of comments on this node.',
       ),
     ),
     'primary key' => array('nid'),
diff --git a/modules/comment/comment.module b/modules/comment/comment.module
index c930dc5..791bd5d 100644
--- a/modules/comment/comment.module
+++ b/modules/comment/comment.module
@@ -1600,7 +1600,7 @@ function theme_comment_view($comment, $node, $links = array(), $visible = TRUE)
  *   Comments per page.
  * @ingroup forms
  */
-function comment_controls($mode = COMMENT_MODE_THREADED_EXPANDED, $order = COMMENT_ORDER_NEWEST_FIRST, $comments_per_page = 50) {
+function comment_controls(&$form_state, $mode = COMMENT_MODE_THREADED_EXPANDED, $order = COMMENT_ORDER_NEWEST_FIRST, $comments_per_page = 50) {
   $form['mode'] = array('#type' => 'select',
     '#default_value' => $mode,
     '#options' => _comment_get_modes(),
diff --git a/modules/contact/contact.install b/modules/contact/contact.install
index c3ee3c8..559e073 100644
--- a/modules/contact/contact.install
+++ b/modules/contact/contact.install
@@ -26,46 +26,46 @@ function contact_uninstall() {
  */
 function contact_schema() {
   $schema['contact'] = array(
-    'description' => t('Contact form category settings.'),
+    'description' => 'Contact form category settings.',
     'fields' => array(
       'cid' => array(
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique category ID.'),
+        'description' => 'Primary Key: Unique category ID.',
       ),
       'category' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Category name.'),
+        'description' => 'Category name.',
       ),
       'recipients' => array(
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
-        'description' => t('Comma-separated list of recipient e-mail addresses.'),
+        'description' => 'Comma-separated list of recipient e-mail addresses.',
       ),
       'reply' => array(
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
-        'description' => t('Text of the auto-reply message.'),
+        'description' => 'Text of the auto-reply message.',
       ),
       'weight' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t("The category's weight."),
+        'description' => "The category's weight.",
       ),
       'selected' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Flag to indicate whether or not category is selected by default. (1 = Yes, 0 = No)'),
+        'description' => 'Flag to indicate whether or not category is selected by default. (1 = Yes, 0 = No)',
       ),
     ),
     'primary key' => array('cid'),
diff --git a/modules/dblog/dblog.install b/modules/dblog/dblog.install
index beeae3d..0e8b716 100644
--- a/modules/dblog/dblog.install
+++ b/modules/dblog/dblog.install
@@ -22,37 +22,37 @@ function dblog_uninstall() {
  */
 function dblog_schema() {
   $schema['watchdog'] = array(
-    'description' => t('Table that contains logs of all system events.'),
+    'description' => 'Table that contains logs of all system events.',
     'fields' => array(
       'wid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique watchdog event ID.'),
+        'description' => 'Primary Key: Unique watchdog event ID.',
       ),
       'uid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {users}.uid of the user who triggered the event.'),
+        'description' => 'The {users}.uid of the user who triggered the event.',
       ),
       'type' => array(
         'type' => 'varchar',
         'length' => 16,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Type of log message, for example "user" or "page not found."'),
+        'description' => 'Type of log message, for example "user" or "page not found."',
       ),
       'message' => array(
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
-        'description' => t('Text of log message to be passed into the t() function.'),
+        'description' => 'Text of log message to be passed into the t() function.',
       ),
       'variables' => array(
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
-        'description' => t('Serialized array of variables that match the message string and that is passed into the t() function.'),
+        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
       ),
       'severity' => array(
         'type' => 'int',
@@ -60,39 +60,39 @@ function dblog_schema() {
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)'),
+        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
       ),
       'link' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Link to view the result of the event.'),
+        'description' => 'Link to view the result of the event.',
       ),
       'location'  => array(
         'type' => 'text',
         'not null' => TRUE,
-        'description' => t('URL of the origin of the event.'),
+        'description' => 'URL of the origin of the event.',
       ),
       'referer' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('URL of referring page.'),
+        'description' => 'URL of referring page.',
       ),
       'hostname' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Hostname of the user who triggered the event.'),
+        'description' => 'Hostname of the user who triggered the event.',
       ),
       'timestamp' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Unix timestamp of when event occurred.'),
+        'description' => 'Unix timestamp of when event occurred.',
       ),
     ),
     'primary key' => array('wid'),
diff --git a/modules/filter/filter.install b/modules/filter/filter.install
index fb69d51..033f8b8 100644
--- a/modules/filter/filter.install
+++ b/modules/filter/filter.install
@@ -6,39 +6,39 @@
  */
 function filter_schema() {
   $schema['filters'] = array(
-    'description' => t('Table that maps filters (HTML corrector) to input formats (Filtered HTML).'),
+    'description' => 'Table that maps filters (HTML corrector) to input formats (Filtered HTML).',
     'fields' => array(
       'fid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Auto-incrementing filter ID.'),
+        'description' => 'Primary Key: Auto-incrementing filter ID.',
       ),
       'format' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Foreign key: The {filter_formats}.format to which this filter is assigned.'),
+        'description' => 'Foreign key: The {filter_formats}.format to which this filter is assigned.',
       ),
       'module' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The origin module of the filter.'),
+        'description' => 'The origin module of the filter.',
       ),
       'delta' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('ID to identify which filter within module is being referenced.'),
+        'description' => 'ID to identify which filter within module is being referenced.',
       ),
       'weight' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Weight of filter within format.'),
+        'description' => 'Weight of filter within format.',
       )
     ),
     'primary key' => array('fid'),
@@ -50,33 +50,33 @@ function filter_schema() {
     ),
   );
   $schema['filter_formats'] = array(
-    'description' => t('Stores input formats: custom groupings of filters, such as Filtered HTML.'),
+    'description' => 'Stores input formats: custom groupings of filters, such as Filtered HTML.',
     'fields' => array(
       'format' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique ID for format.'),
+        'description' => 'Primary Key: Unique ID for format.',
       ),
       'name' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Name of the input format (Filtered HTML).'),
+        'description' => 'Name of the input format (Filtered HTML).',
       ),
       'roles' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('A comma-separated string of roles; references {role}.rid.'), // This is bad since you can't use joins, nor index.
+        'description' => 'A comma-separated string of roles; references {role}.rid.', // This is bad since you can't use joins, nor index.
       ),
       'cache' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Flag to indicate whether format is cachable. (1 = cachable, 0 = not cachable)'),
+        'description' => 'Flag to indicate whether format is cachable. (1 = cachable, 0 = not cachable)',
       ),
     ),
     'primary key' => array('format'),
@@ -84,7 +84,7 @@ function filter_schema() {
   );
 
   $schema['cache_filter'] = drupal_get_schema_unprocessed('system', 'cache');
-  $schema['cache_filter']['description'] = t('Cache table for the Filter module to store already filtered pieces of text, identified by input format and md5 hash of the text.');
+  $schema['cache_filter']['description'] = 'Cache table for the Filter module to store already filtered pieces of text, identified by input format and md5 hash of the text.';
 
   return $schema;
 }
diff --git a/modules/forum/forum.install b/modules/forum/forum.install
index 1596c7f..aa80507 100644
--- a/modules/forum/forum.install
+++ b/modules/forum/forum.install
@@ -65,28 +65,28 @@ function forum_uninstall() {
  */
 function forum_schema() {
   $schema['forum'] = array(
-    'description' => t('Stores the relationship of nodes to forum terms.'),
+    'description' => 'Stores the relationship of nodes to forum terms.',
     'fields' => array(
       'nid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {node}.nid of the node.'),
+        'description' => 'The {node}.nid of the node.',
       ),
       'vid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Primary Key: The {node}.vid of the node.'),
+        'description' => 'Primary Key: The {node}.vid of the node.',
       ),
       'tid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {term_data}.tid of the forum term assigned to the node.'),
+        'description' => 'The {term_data}.tid of the forum term assigned to the node.',
       ),
     ),
     'indexes' => array(
diff --git a/modules/locale/locale.install b/modules/locale/locale.install
index 29718de..d671ebe 100644
--- a/modules/locale/locale.install
+++ b/modules/locale/locale.install
@@ -226,80 +226,80 @@ function locale_uninstall() {
  */
 function locale_schema() {
   $schema['languages'] = array(
-    'description' => t('List of all available languages in the system.'),
+    'description' => 'List of all available languages in the system.',
     'fields' => array(
       'language' => array(
         'type' => 'varchar',
         'length' => 12,
         'not null' => TRUE,
         'default' => '',
-        'description' => t("Language code, e.g. 'de' or 'en-US'."),
+        'description' => "Language code, e.g. 'de' or 'en-US'.",
       ),
       'name' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Language name in English.'),
+        'description' => 'Language name in English.',
       ),
       'native' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Native language name.'),
+        'description' => 'Native language name.',
       ),
       'direction' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Direction of language (Left-to-Right = 0, Right-to-Left = 1).'),
+        'description' => 'Direction of language (Left-to-Right = 0, Right-to-Left = 1).',
       ),
       'enabled' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Enabled flag (1 = Enabled, 0 = Disabled).'),
+        'description' => 'Enabled flag (1 = Enabled, 0 = Disabled).',
       ),
       'plurals' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Number of plural indexes in this language.'),
+        'description' => 'Number of plural indexes in this language.',
       ),
       'formula' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Plural formula in PHP code to evaluate to get plural indexes.'),
+        'description' => 'Plural formula in PHP code to evaluate to get plural indexes.',
       ),
       'domain' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Domain to use for this language.'),
+        'description' => 'Domain to use for this language.',
       ),
       'prefix' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Path prefix to use for this language.'),
+        'description' => 'Path prefix to use for this language.',
       ),
       'weight' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Weight, used in lists of languages.'),
+        'description' => 'Weight, used in lists of languages.',
       ),
       'javascript' => array(
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Location of JavaScript translation file.'),
+        'description' => 'Location of JavaScript translation file.',
       ),
     ),
     'primary key' => array('language'),
@@ -309,39 +309,39 @@ function locale_schema() {
   );
 
   $schema['locales_source'] = array(
-    'description' => t('List of English source strings.'),
+    'description' => 'List of English source strings.',
     'fields' => array(
       'lid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Unique identifier of this string.'),
+        'description' => 'Unique identifier of this string.',
       ),
       'location' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Drupal path in case of online discovered translations or file path in case of imported strings.'),
+        'description' => 'Drupal path in case of online discovered translations or file path in case of imported strings.',
       ),
       'textgroup' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => 'default',
-        'description' => t('A module defined group of translations, see hook_locale().'),
+        'description' => 'A module defined group of translations, see hook_locale().',
       ),
       'source' => array(
         'type' => 'text',
         'mysql_type' => 'blob',
         'not null' => TRUE,
-        'description' => t('The original string in English.'),
+        'description' => 'The original string in English.',
       ),
       'version' => array(
         'type' => 'varchar',
         'length' => 20,
         'not null' => TRUE,
         'default' => 'none',
-        'description' => t('Version of Drupal, where the string was last used (for locales optimization).'),
+        'description' => 'Version of Drupal, where the string was last used (for locales optimization).',
       ),
     ),
     'primary key' => array('lid'),
@@ -351,38 +351,38 @@ function locale_schema() {
   );
 
   $schema['locales_target'] = array(
-    'description' => t('Stores translated versions of strings.'),
+    'description' => 'Stores translated versions of strings.',
     'fields' => array(
       'lid' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Source string ID. References {locales_source}.lid.'),
+        'description' => 'Source string ID. References {locales_source}.lid.',
       ),
       'translation' => array(
         'type' => 'text',
         'mysql_type' => 'blob',
         'not null' => TRUE,
-        'description' => t('Translation string value in this language.'),
+        'description' => 'Translation string value in this language.',
       ),
       'language' => array(
         'type' => 'varchar',
         'length' => 12,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Language code. References {languages}.language.'),
+        'description' => 'Language code. References {languages}.language.',
       ),
       'plid' => array(
         'type' => 'int',
         'not null' => TRUE, // This should be NULL for no referenced string, not zero.
         'default' => 0,
-        'description' => t('Parent lid (lid of the previous string in the plural chain) in case of plural strings. References {locales_source}.lid.'),
+        'description' => 'Parent lid (lid of the previous string in the plural chain) in case of plural strings. References {locales_source}.lid.',
       ),
       'plural' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Plural index number in case of plural strings.'),
+        'description' => 'Plural index number in case of plural strings.',
       ),
     ),
     'primary key' => array('language', 'lid', 'plural'),
diff --git a/modules/menu/menu.install b/modules/menu/menu.install
index 1e32ab6..141283c 100644
--- a/modules/menu/menu.install
+++ b/modules/menu/menu.install
@@ -28,26 +28,26 @@ function menu_uninstall() {
  */
 function menu_schema() {
   $schema['menu_custom'] = array(
-    'description' => t('Holds definitions for top-level custom menus (for example, Primary Links).'),
+    'description' => 'Holds definitions for top-level custom menus (for example, Primary Links).',
     'fields' => array(
       'menu_name' => array(
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Primary Key: Unique key for menu. This is used as a block delta so length is 32.'),
+        'description' => 'Primary Key: Unique key for menu. This is used as a block delta so length is 32.',
       ),
       'title' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Menu title; displayed at top of block.'),
+        'description' => 'Menu title; displayed at top of block.',
       ),
       'description' => array(
         'type' => 'text',
         'not null' => FALSE,
-        'description' => t('Menu description.'),
+        'description' => 'Menu description.',
       ),
     ),
     'primary key' => array('menu_name'),
diff --git a/modules/node/node.install b/modules/node/node.install
index 76c0f15..8397986 100644
--- a/modules/node/node.install
+++ b/modules/node/node.install
@@ -6,85 +6,85 @@
  */
 function node_schema() {
   $schema['node'] = array(
-    'description' => t('The base table for nodes.'),
+    'description' => 'The base table for nodes.',
     'fields' => array(
       'nid' => array(
-        'description' => t('The primary identifier for a node.'),
+        'description' => 'The primary identifier for a node.',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE),
       'vid' => array(
-        'description' => t('The current {node_revisions}.vid version identifier.'),
+        'description' => 'The current {node_revisions}.vid version identifier.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'type' => array(
-        'description' => t('The {node_type}.type of this node.'),
+        'description' => 'The {node_type}.type of this node.',
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => ''),
       'language' => array(
-        'description' => t('The {languages}.language of this node.'),
+        'description' => 'The {languages}.language of this node.',
         'type' => 'varchar',
         'length' => 12,
         'not null' => TRUE,
         'default' => ''),
       'title' => array(
-        'description' => t('The title of this node, always treated as non-markup plain text.'),
+        'description' => 'The title of this node, always treated as non-markup plain text.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'uid' => array(
-        'description' => t('The {users}.uid that owns this node; initially, this is the user that created it.'),
+        'description' => 'The {users}.uid that owns this node; initially, this is the user that created it.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'status' => array(
-        'description' => t('Boolean indicating whether the node is published (visible to non-administrators).'),
+        'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 1),
       'created' => array(
-        'description' => t('The Unix timestamp when the node was created.'),
+        'description' => 'The Unix timestamp when the node was created.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'changed' => array(
-        'description' => t('The Unix timestamp when the node was most recently saved.'),
+        'description' => 'The Unix timestamp when the node was most recently saved.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'comment' => array(
-        'description' => t('Whether comments are allowed on this node: 0 = no, 1 = read only, 2 = read/write.'),
+        'description' => 'Whether comments are allowed on this node: 0 = no, 1 = read only, 2 = read/write.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'promote' => array(
-        'description' => t('Boolean indicating whether the node should be displayed on the front page.'),
+        'description' => 'Boolean indicating whether the node should be displayed on the front page.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'moderate' => array(
-        'description' => t('Previously, a boolean indicating whether the node was "in moderation"; mostly no longer used.'),
+        'description' => 'Previously, a boolean indicating whether the node was "in moderation"; mostly no longer used.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'sticky' => array(
-        'description' => t('Boolean indicating whether the node should be displayed at the top of lists in which it appears.'),
+        'description' => 'Boolean indicating whether the node should be displayed at the top of lists in which it appears.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'tnid' => array(
-        'description' => t('The translation set id for this node, which equals the node id of the source post in each set.'),
+        'description' => 'The translation set id for this node, which equals the node id of the source post in each set.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'translate' => array(
-        'description' => t('A boolean indicating whether this translation page needs to be updated.'),
+        'description' => 'A boolean indicating whether this translation page needs to be updated.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
@@ -108,42 +108,42 @@ function node_schema() {
     );
 
   $schema['node_access'] = array(
-    'description' => t('Identifies which realm/grant pairs a user must possess in order to view, update, or delete specific nodes.'),
+    'description' => 'Identifies which realm/grant pairs a user must possess in order to view, update, or delete specific nodes.',
     'fields' => array(
       'nid' => array(
-        'description' => t('The {node}.nid this record affects.'),
+        'description' => 'The {node}.nid this record affects.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'gid' => array(
-        'description' => t("The grant ID a user must possess in the specified realm to gain this row's privileges on the node."),
+        'description' => "The grant ID a user must possess in the specified realm to gain this row's privileges on the node.",
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'realm' => array(
-        'description' => t('The realm in which the user must possess the grant ID. Each node access node can define one or more realms.'),
+        'description' => 'The realm in which the user must possess the grant ID. Each node access node can define one or more realms.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'grant_view' => array(
-        'description' => t('Boolean indicating whether a user with the realm/grant pair can view this node.'),
+        'description' => 'Boolean indicating whether a user with the realm/grant pair can view this node.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny'),
       'grant_update' => array(
-        'description' => t('Boolean indicating whether a user with the realm/grant pair can edit this node.'),
+        'description' => 'Boolean indicating whether a user with the realm/grant pair can edit this node.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny'),
       'grant_delete' => array(
-        'description' => t('Boolean indicating whether a user with the realm/grant pair can delete this node.'),
+        'description' => 'Boolean indicating whether a user with the realm/grant pair can delete this node.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
@@ -154,29 +154,29 @@ function node_schema() {
     );
 
   $schema['node_counter'] = array(
-    'description' => t('Access statistics for {node}s.'),
+    'description' => 'Access statistics for {node}s.',
     'fields' => array(
       'nid' => array(
-        'description' => t('The {node}.nid for these statistics.'),
+        'description' => 'The {node}.nid for these statistics.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'totalcount' => array(
-        'description' => t('The total number of times the {node} has been viewed.'),
+        'description' => 'The total number of times the {node} has been viewed.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
         'size' => 'big'),
       'daycount' => array(
-        'description' => t('The total number of times the {node} has been viewed today.'),
+        'description' => 'The total number of times the {node} has been viewed today.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
         'size' => 'medium'),
       'timestamp' => array(
-        'description' => t('The most recent time the {node} has been viewed.'),
+        'description' => 'The most recent time the {node} has been viewed.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
@@ -186,52 +186,52 @@ function node_schema() {
     );
 
   $schema['node_revisions'] = array(
-    'description' => t('Stores information about each saved version of a {node}.'),
+    'description' => 'Stores information about each saved version of a {node}.',
     'fields' => array(
       'nid' => array(
-        'description' => t('The {node} this version belongs to.'),
+        'description' => 'The {node} this version belongs to.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'vid' => array(
-        'description' => t('The primary identifier for this version.'),
+        'description' => 'The primary identifier for this version.',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE),
       'uid' => array(
-        'description' => t('The {users}.uid that created this version.'),
+        'description' => 'The {users}.uid that created this version.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'title' => array(
-        'description' => t('The title of this version.'),
+        'description' => 'The title of this version.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'body' => array(
-        'description' => t('The body of this version.'),
+        'description' => 'The body of this version.',
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big'),
       'teaser' => array(
-        'description' => t('The teaser of this version.'),
+        'description' => 'The teaser of this version.',
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big'),
       'log' => array(
-        'description' => t('The log entry explaining the changes in this version.'),
+        'description' => 'The log entry explaining the changes in this version.',
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big'),
       'timestamp' => array(
-        'description' => t('A Unix timestamp indicating when this version was created.'),
+        'description' => 'A Unix timestamp indicating when this version was created.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'format' => array(
-        'description' => t("The input format used by this version's body."),
+        'description' => "The input format used by this version's body.",
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0)
@@ -244,84 +244,84 @@ function node_schema() {
     );
 
   $schema['node_type'] = array(
-    'description' => t('Stores information about all defined {node} types.'),
+    'description' => 'Stores information about all defined {node} types.',
     'fields' => array(
       'type' => array(
-        'description' => t('The machine-readable name of this type.'),
+        'description' => 'The machine-readable name of this type.',
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE),
       'name' => array(
-        'description' => t('The human-readable name of this type.'),
+        'description' => 'The human-readable name of this type.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'module' => array(
-        'description' => t('The base string used to construct callbacks corresponding to this node type.'),
+        'description' => 'The base string used to construct callbacks corresponding to this node type.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE),
       'description'    => array(
-        'description' => t('A brief description of this type.'),
+        'description' => 'A brief description of this type.',
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'medium'),
       'help' => array(
-        'description' => t('Help information shown to the user when creating a {node} of this type.'),
+        'description' => 'Help information shown to the user when creating a {node} of this type.',
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'medium'),
       'has_title' => array(
-        'description' => t('Boolean indicating whether this type uses the {node}.title field.'),
+        'description' => 'Boolean indicating whether this type uses the {node}.title field.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'size' => 'tiny'),
       'title_label' => array(
-        'description' => t('The label displayed for the title field on the edit form.'),
+        'description' => 'The label displayed for the title field on the edit form.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'has_body' => array(
-        'description' => t('Boolean indicating whether this type uses the {node_revisions}.body field.'),
+        'description' => 'Boolean indicating whether this type uses the {node_revisions}.body field.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'size' => 'tiny'),
       'body_label' => array(
-        'description' => t('The label displayed for the body field on the edit form.'),
+        'description' => 'The label displayed for the body field on the edit form.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'min_word_count' => array(
-        'description' => t('The minimum number of words the body must contain.'),
+        'description' => 'The minimum number of words the body must contain.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'size' => 'small'),
       'custom' => array(
-        'description' => t('A boolean indicating whether this type is defined by a module (FALSE) or by a user via a module like the Content Construction Kit (TRUE).'),
+        'description' => 'A boolean indicating whether this type is defined by a module (FALSE) or by a user via a module like the Content Construction Kit (TRUE).',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny'),
       'modified' => array(
-        'description' => t('A boolean indicating whether this type has been modified by an administrator; currently not used in any way.'),
+        'description' => 'A boolean indicating whether this type has been modified by an administrator; currently not used in any way.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny'),
       'locked' => array(
-        'description' => t('A boolean indicating whether the administrator can change the machine name of this type.'),
+        'description' => 'A boolean indicating whether the administrator can change the machine name of this type.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny'),
       'orig_type' => array(
-        'description' => t('The original machine-readable name of this node type. This may be different from the current type name if the locked field is 0.'),
+        'description' => 'The original machine-readable name of this node type. This may be different from the current type name if the locked field is 0.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
diff --git a/modules/node/node.module b/modules/node/node.module
index 51913a7..40ccaa5 100644
--- a/modules/node/node.module
+++ b/modules/node/node.module
@@ -903,7 +903,6 @@ function node_save(&$node) {
 
   $node->timestamp = time();
   $node->format = isset($node->format) ? $node->format : FILTER_FORMAT_DEFAULT;
-  $update_node = TRUE;
 
   // Generate the node table query and the node_revisions table query.
   if ($node->is_new) {
@@ -920,7 +919,6 @@ function node_save(&$node) {
     }
     else {
       _node_save_revision($node, $user->uid, 'vid');
-      $update_node = FALSE;
     }
     $op = 'update';
   }
@@ -1979,7 +1977,9 @@ function node_search_validate($form, &$form_state) {
 function node_access($op, $node, $account = NULL) {
   global $user;
 
-  if (!$node) {
+  if (!$node || !in_array($op, array('view', 'update', 'delete', 'create'), TRUE)) {
+    // If there was no node to check against, or the $op was not one of the
+    // supported ones, we return access denied.
     return FALSE;
   }
   // Convert the node to an object if necessary:
diff --git a/modules/openid/openid.install b/modules/openid/openid.install
index 572738a..9e482fc 100644
--- a/modules/openid/openid.install
+++ b/modules/openid/openid.install
@@ -22,45 +22,45 @@ function openid_uninstall() {
  */
 function openid_schema() {
   $schema['openid_association'] = array(
-    'description' => t('Stores temporary shared key association information for OpenID authentication.'),
+    'description' => 'Stores temporary shared key association information for OpenID authentication.',
     'fields' => array(
       'idp_endpoint_uri' => array(
         'type' => 'varchar',
         'length' => 255,
-        'description' => t('URI of the OpenID Provider endpoint.'),
+        'description' => 'URI of the OpenID Provider endpoint.',
       ),
       'assoc_handle' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
-        'description' => t('Primary Key: Used to refer to this association in subsequent messages.'),
+        'description' => 'Primary Key: Used to refer to this association in subsequent messages.',
       ),
       'assoc_type' => array(
         'type' => 'varchar',
         'length' => 32,
-        'description' => t('The signature algorithm used: one of HMAC-SHA1 or HMAC-SHA256.'),
+        'description' => 'The signature algorithm used: one of HMAC-SHA1 or HMAC-SHA256.',
       ),
       'session_type' => array(
         'type' => 'varchar',
         'length' => 32,
-        'description' => t('Valid association session types: "no-encryption", "DH-SHA1", and "DH-SHA256".'),
+        'description' => 'Valid association session types: "no-encryption", "DH-SHA1", and "DH-SHA256".',
       ),
       'mac_key' => array(
         'type' => 'varchar',
         'length' => 255,
-        'description' => t('The MAC key (shared secret) for this association.'),
+        'description' => 'The MAC key (shared secret) for this association.',
       ),
       'created' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('UNIX timestamp for when the association was created.'),
+        'description' => 'UNIX timestamp for when the association was created.',
       ),
       'expires_in' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The lifetime, in seconds, of this association.'),
+        'description' => 'The lifetime, in seconds, of this association.',
       ),
     ),
     'primary key' => array('assoc_handle'),
diff --git a/modules/openid/openid.module b/modules/openid/openid.module
index 36f842d..4dc835a 100644
--- a/modules/openid/openid.module
+++ b/modules/openid/openid.module
@@ -319,9 +319,6 @@ function openid_discovery($claimed_id) {
       }
     }
   }
-  if (!$services) {
-    module_invoke('system', 'check_http_request');
-  }
   return $services;
 }
 
@@ -353,13 +350,11 @@ function openid_association($op_endpoint) {
     $assoc_headers = array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8');
     $assoc_result = drupal_http_request($op_endpoint, $assoc_headers, 'POST', $assoc_message);
     if (isset($assoc_result->error)) {
-      module_invoke('system', 'check_http_request');
       return FALSE;
     }
 
     $assoc_response = _openid_parse_message($assoc_result->data);
     if (isset($assoc_response['mode']) && $assoc_response['mode'] == 'error') {
-      module_invoke('system', 'check_http_request');
       return FALSE;
     }
 
@@ -524,8 +519,5 @@ function openid_verify_assertion($op_endpoint, $response) {
       }
     }
   }
-  if (!$valid) {
-    module_invoke('system', 'check_http_request');
-  }
   return $valid;
 }
diff --git a/modules/poll/poll.install b/modules/poll/poll.install
index 4859747..18cff15 100644
--- a/modules/poll/poll.install
+++ b/modules/poll/poll.install
@@ -22,66 +22,66 @@ function poll_uninstall() {
  */
 function poll_schema() {
   $schema['poll'] = array(
-    'description' => t('Stores poll-specific information for poll nodes.'),
+    'description' => 'Stores poll-specific information for poll nodes.',
     'fields' => array(
       'nid'     => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t("The poll's {node}.nid.")
+        'description' => "The poll's {node}.nid."
         ),
       'runtime' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The number of seconds past {node}.created during which the poll is open.')
+        'description' => 'The number of seconds past {node}.created during which the poll is open.'
         ),
       'active'  => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Boolean indicating whether or not the poll is open.'),
+        'description' => 'Boolean indicating whether or not the poll is open.',
         ),
       ),
     'primary key' => array('nid'),
     );
 
   $schema['poll_choices'] = array(
-    'description' => t('Stores information about all choices for all {poll}s.'),
+    'description' => 'Stores information about all choices for all {poll}s.',
     'fields' => array(
       'chid'    => array(
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE,
-        'description' => t('Unique identifier for a poll choice.'),
+        'description' => 'Unique identifier for a poll choice.',
         ),
       'nid'     => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {node}.nid this choice belongs to.'),
+        'description' => 'The {node}.nid this choice belongs to.',
         ),
       'chtext'  => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The text for this choice.'),
+        'description' => 'The text for this choice.',
         ),
       'chvotes' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The total number of votes this choice has received by all users.'),
+        'description' => 'The total number of votes this choice has received by all users.',
         ),
       'chorder' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The sort order of this choice among all choices for the same node.'),
+        'description' => 'The sort order of this choice among all choices for the same node.',
         )
       ),
     'indexes' => array(
@@ -91,33 +91,33 @@ function poll_schema() {
     );
 
   $schema['poll_votes'] = array(
-    'description' => t('Stores per-{users} votes for each {poll}.'),
+    'description' => 'Stores per-{users} votes for each {poll}.',
     'fields' => array(
       'nid'      => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
-        'description' => t('The {poll} node this vote is for.'),
+        'description' => 'The {poll} node this vote is for.',
         ),
       'uid'      => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {users}.uid this vote is from unless the voter was anonymous.'),
+        'description' => 'The {users}.uid this vote is from unless the voter was anonymous.',
         ),
       'chorder'  => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => -1,
-        'description' => t("The {users}'s vote for this poll."),
+        'description' => "The {users}'s vote for this poll.",
         ),
       'hostname' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The IP address this vote is from unless the voter was logged in.'),
+        'description' => 'The IP address this vote is from unless the voter was logged in.',
         ),
       ),
     'primary key' => array('nid', 'uid', 'hostname'),
diff --git a/modules/poll/poll.module b/modules/poll/poll.module
index 9f92561..f6452b3 100644
--- a/modules/poll/poll.module
+++ b/modules/poll/poll.module
@@ -288,7 +288,8 @@ function poll_more_choices_submit($form, &$form_state) {
 
   // Make the changes we want to the form state.
   if ($form_state['values']['poll_more']) {
-    $form_state['choice_count'] = count($form_state['values']['choice']) + 5;
+    $n = $_GET['q'] == 'poll/js' ? 1 : 5;
+    $form_state['choice_count'] = count($form_state['values']['choice']) + $n;
   }
 }
 
@@ -326,36 +327,28 @@ function _poll_choice_form($delta, $value = '', $votes = 0) {
  * Menu callback for AHAH additions.
  */
 function poll_choice_js() {
-  $delta = count($_POST['choice']);
-
-  // Build our new form element.
-  $form_element = _poll_choice_form($delta);
-  drupal_alter('form', $form_element, array(), 'poll_choice_js');
-
-  // Build the new form.
-  $form_state = array('submitted' => FALSE);
+  include_once 'modules/node/node.pages.inc';
+  $form_state = array('storage' => NULL, 'submitted' => FALSE);
   $form_build_id = $_POST['form_build_id'];
-  // Add the new element to the stored form. Without adding the element to the
-  // form, Drupal is not aware of this new elements existence and will not
-  // process it. We retreive the cached form, add the element, and resave.
-  if (!$form = form_get_cache($form_build_id, $form_state)) {
-    exit();
-  }
-  $form['choice_wrapper']['choice'][$delta] = $form_element;
-  form_set_cache($form_build_id, $form, $form_state);
-  $form += array(
-    '#post' => $_POST,
-    '#programmed' => FALSE,
-  );
-
-  // Rebuild the form.
-  $form = form_builder('poll_node_form', $form, $form_state);
-
+  // Get the form from the cache.
+  $form = form_get_cache($form_build_id, $form_state);
+  $args = $form['#parameters'];
+  $form_id = array_shift($args);
+  // We will run some of the submit handlers so we need to disable redirecting.
+  $form['#redirect'] = FALSE;
+  // We need to process the form, prepare for that by setting a few internals
+  // variables.
+  $form['#post'] = $_POST;
+  $form['#programmed'] = FALSE;
+  $form_state['post'] = $_POST;
+  // Build, validate and if possible, submit the form.
+  drupal_process_form($form_id, $form, $form_state);
+  // This call recreates the form relying solely on the form_state that the
+  // drupal_process_form set up.
+  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
   // Render the new output.
   $choice_form = $form['choice_wrapper']['choice'];
   unset($choice_form['#prefix'], $choice_form['#suffix']); // Prevent duplicate wrappers.
-  $choice_form[$delta]['#attributes']['class'] = empty($choice_form[$delta]['#attributes']['class']) ? 'ahah-new-content' : $choice_form[$delta]['#attributes']['class'] .' ahah-new-content';
-  $choice_form[$delta]['chvotes']['#value'] = 0;
   $output = theme('status_messages') . drupal_render($choice_form);
 
   drupal_json(array('status' => TRUE, 'data' => $output));
diff --git a/modules/profile/profile.install b/modules/profile/profile.install
index f05bccd..e113dc6 100644
--- a/modules/profile/profile.install
+++ b/modules/profile/profile.install
@@ -24,88 +24,88 @@ function profile_uninstall() {
  */
 function profile_schema() {
   $schema['profile_fields'] = array(
-    'description' => t('Stores profile field information.'),
+    'description' => 'Stores profile field information.',
     'fields' => array(
       'fid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique profile field ID.'),
+        'description' => 'Primary Key: Unique profile field ID.',
       ),
       'title' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => FALSE,
-        'description' => t('Title of the field shown to the end user.'),
+        'description' => 'Title of the field shown to the end user.',
       ),
       'name' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Internal name of the field used in the form HTML and URLs.'),
+        'description' => 'Internal name of the field used in the form HTML and URLs.',
       ),
       'explanation' => array(
         'type' => 'text',
         'not null' => FALSE,
-        'description' => t('Explanation of the field to end users.'),
+        'description' => 'Explanation of the field to end users.',
       ),
       'category' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => FALSE,
-        'description' => t('Profile category that the field will be grouped under.'),
+        'description' => 'Profile category that the field will be grouped under.',
       ),
       'page' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => FALSE,
-        'description' => t("Title of page used for browsing by the field's value"),
+        'description' => "Title of page used for browsing by the field's value",
       ),
       'type' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => FALSE,
-        'description' => t('Type of form field.'),
+        'description' => 'Type of form field.',
       ),
       'weight' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Weight of field in relation to other profile fields.'),
+        'description' => 'Weight of field in relation to other profile fields.',
       ),
       'required' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Whether the user is required to enter a value. (0 = no, 1 = yes)'),
+        'description' => 'Whether the user is required to enter a value. (0 = no, 1 = yes)',
       ),
       'register' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Whether the field is visible in the user registration form. (1 = yes, 0 = no)'),
+        'description' => 'Whether the field is visible in the user registration form. (1 = yes, 0 = no)',
       ),
       'visibility' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('The level of visibility for the field. (0 = hidden, 1 = private, 2 = public on profile but not member list pages, 3 = public on profile and list pages)'),
+        'description' => 'The level of visibility for the field. (0 = hidden, 1 = private, 2 = public on profile but not member list pages, 3 = public on profile and list pages)',
       ),
       'autocomplete' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Whether form auto-completion is enabled. (0 = disabled, 1 = enabled)'),
+        'description' => 'Whether form auto-completion is enabled. (0 = disabled, 1 = enabled)',
       ),
       'options' => array(
         'type' => 'text',
         'not null' => FALSE,
-        'description' => t('List of options to be used in a list selection field.'),
+        'description' => 'List of options to be used in a list selection field.',
       ),
     ),
     'indexes' => array('category' => array('category')),
@@ -114,26 +114,26 @@ function profile_schema() {
   );
 
   $schema['profile_values'] = array(
-    'description' => t('Stores values for profile fields.'),
+    'description' => 'Stores values for profile fields.',
     'fields' => array(
       'fid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {profile_fields}.fid of the field.'),
+        'description' => 'The {profile_fields}.fid of the field.',
       ),
       'uid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {users}.uid of the profile user.'),
+        'description' => 'The {users}.uid of the profile user.',
       ),
       'value' => array(
         'type' => 'text',
         'not null' => FALSE,
-        'description' => t('The value for the field.'),
+        'description' => 'The value for the field.',
       ),
     ),
     'primary key' => array('uid', 'fid'),
diff --git a/modules/profile/profile.module b/modules/profile/profile.module
index 6c79426..eba16aa 100644
--- a/modules/profile/profile.module
+++ b/modules/profile/profile.module
@@ -393,7 +393,7 @@ function profile_form_profile($edit, $user, $category, $register = FALSE) {
         break;
       case 'selection':
         $options = $field->required ? array() : array('--');
-        $lines = split("[,\n\r]", $field->options);
+        $lines = split("[\n\r]", $field->options);
         foreach ($lines as $line) {
           if ($line = trim($line)) {
             $options[$line] = $line;
diff --git a/modules/search/search.install b/modules/search/search.install
index 75a23e8..ebadaf7 100644
--- a/modules/search/search.install
+++ b/modules/search/search.install
@@ -26,65 +26,65 @@ function search_uninstall() {
  */
 function search_schema() {
   $schema['search_dataset'] = array(
-    'description' => t('Stores items that will be searched.'),
+    'description' => 'Stores items that will be searched.',
     'fields' => array(
       'sid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Search item ID, e.g. node ID for nodes.'),
+        'description' => 'Search item ID, e.g. node ID for nodes.',
       ),
       'type' => array(
         'type' => 'varchar',
         'length' => 16,
         'not null' => FALSE,
-        'description' => t('Type of item, e.g. node.'),
+        'description' => 'Type of item, e.g. node.',
       ),
       'data' => array(
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big',
-        'description' => t('List of space-separated words from the item.'),
+        'description' => 'List of space-separated words from the item.',
       ),
       'reindex' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Set to force node reindexing.'),
+        'description' => 'Set to force node reindexing.',
       ),
     ),
     'unique keys' => array('sid_type' => array('sid', 'type')),
   );
 
   $schema['search_index'] = array(
-    'description' => t('Stores the search index, associating words, items and scores.'),
+    'description' => 'Stores the search index, associating words, items and scores.',
     'fields' => array(
       'word' => array(
         'type' => 'varchar',
         'length' => 50,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The {search_total}.word that is associated with the search item.'),
+        'description' => 'The {search_total}.word that is associated with the search item.',
       ),
       'sid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {search_dataset}.sid of the searchable item to which the word belongs.'),
+        'description' => 'The {search_dataset}.sid of the searchable item to which the word belongs.',
       ),
       'type' => array(
         'type' => 'varchar',
         'length' => 16,
         'not null' => FALSE,
-        'description' => t('The {search_dataset}.type of the searchable item to which the word belongs.'),
+        'description' => 'The {search_dataset}.type of the searchable item to which the word belongs.',
       ),
       'score' => array(
         'type' => 'float',
         'not null' => FALSE,
-        'description' => t('The numeric score of the word, higher being more important.'),
+        'description' => 'The numeric score of the word, higher being more important.',
       ),
     ),
     'indexes' => array(
@@ -95,17 +95,17 @@ function search_schema() {
   );
 
   $schema['search_total'] = array(
-    'description' => t('Stores search totals for words.'),
+    'description' => 'Stores search totals for words.',
     'fields' => array(
       'word' => array(
-        'description' => t('Primary Key: Unique word in the search index.'),
+        'description' => 'Primary Key: Unique word in the search index.',
         'type' => 'varchar',
         'length' => 50,
         'not null' => TRUE,
         'default' => '',
       ),
       'count' => array(
-        'description' => t("The count of the word in the index using Zipf's law to equalize the probability distribution."),
+        'description' => "The count of the word in the index using Zipf's law to equalize the probability distribution.",
         'type' => 'float',
         'not null' => FALSE,
       ),
@@ -114,34 +114,34 @@ function search_schema() {
   );
 
   $schema['search_node_links'] = array(
-    'description' => t('Stores items (like nodes) that link to other nodes, used to improve search scores for nodes that are frequently linked to.'),
+    'description' => 'Stores items (like nodes) that link to other nodes, used to improve search scores for nodes that are frequently linked to.',
     'fields' => array(
       'sid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {search_dataset}.sid of the searchable item containing the link to the node.'),
+        'description' => 'The {search_dataset}.sid of the searchable item containing the link to the node.',
       ),
       'type' => array(
         'type' => 'varchar',
         'length' => 16,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The {search_dataset}.type of the searchable item containing the link to the node.'),
+        'description' => 'The {search_dataset}.type of the searchable item containing the link to the node.',
       ),
       'nid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {node}.nid that this item links to.'),
+        'description' => 'The {node}.nid that this item links to.',
       ),
       'caption' => array(
         'type' => 'text',
         'size' => 'big',
         'not null' => FALSE,
-        'description' => t('The text used to link to the {node}.nid.'),
+        'description' => 'The text used to link to the {node}.nid.',
       ),
     ),
     'primary key' => array('sid', 'type', 'nid'),
diff --git a/modules/statistics/statistics.install b/modules/statistics/statistics.install
index 39aa5e4..5366b01 100644
--- a/modules/statistics/statistics.install
+++ b/modules/statistics/statistics.install
@@ -49,64 +49,64 @@ function statistics_uninstall() {
  */
 function statistics_schema() {
   $schema['accesslog'] = array(
-    'description' => t('Stores site access information for statistics.'),
+    'description' => 'Stores site access information for statistics.',
     'fields' => array(
       'aid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique accesslog ID.'),
+        'description' => 'Primary Key: Unique accesslog ID.',
       ),
       'sid' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Browser session ID of user that visited page.'),
+        'description' => 'Browser session ID of user that visited page.',
       ),
       'title' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => FALSE,
-        'description' => t('Title of page visited.'),
+        'description' => 'Title of page visited.',
       ),
       'path' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => FALSE,
-        'description' => t('Internal path to page visited (relative to Drupal root.)'),
+        'description' => 'Internal path to page visited (relative to Drupal root.)',
       ),
       'url' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => FALSE,
-        'description' => t('Referrer URI.'),
+        'description' => 'Referrer URI.',
       ),
       'hostname' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => FALSE,
-        'description' => t('Hostname of user that visited the page.'),
+        'description' => 'Hostname of user that visited the page.',
       ),
       'uid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => FALSE,
         'default' => 0,
-        'description' => t('User {users}.uid that visited the page.'),
+        'description' => 'User {users}.uid that visited the page.',
       ),
       'timer' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Time in milliseconds that the page took to load.'),
+        'description' => 'Time in milliseconds that the page took to load.',
       ),
       'timestamp' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Timestamp of when the page was visited.'),
+        'description' => 'Timestamp of when the page was visited.',
       ),
     ),
     'indexes' => array(
diff --git a/modules/system/system.admin.inc b/modules/system/system.admin.inc
index 731b951..aa2678e 100644
--- a/modules/system/system.admin.inc
+++ b/modules/system/system.admin.inc
@@ -1346,6 +1346,9 @@ function system_performance_settings() {
     '#submit' => array('system_clear_cache_submit'),
   );
 
+  $form['#submit'][] = 'drupal_clear_css_cache';
+  $form['#submit'][] = 'drupal_clear_js_cache';
+
   return system_settings_form($form);
 }
 
diff --git a/modules/system/system.install b/modules/system/system.install
index 7982623..1775b06 100644
--- a/modules/system/system.install
+++ b/modules/system/system.install
@@ -268,8 +268,8 @@ function system_requirements($phase) {
   include_once './includes/unicode.inc';
   $requirements = array_merge($requirements, unicode_requirements());
 
-  // Check for update status module.
   if ($phase == 'runtime') {
+    // Check for update status module.
     if (!module_exists('update')) {
       $requirements['update status'] = array(
         'value' => $t('Not enabled'),
@@ -281,16 +281,18 @@ function system_requirements($phase) {
       $requirements['update status'] = array(
         'value' => $t('Enabled'),
       );
-      if (variable_get('drupal_http_request_fails', FALSE)) {
-        $requirements['http requests'] = array(
-          'title' => $t('HTTP request status'),
-          'value' => $t('Fails'),
-          'severity' => REQUIREMENT_ERROR,
-          'description' => $t('Your system or network configuration does not allow Drupal to access web pages, resulting in reduced functionality. This could be due to your webserver configuration or PHP settings, and should be resolved in order to download information about available updates, fetch aggregator feeds, sign in via OpenID, or use other network-dependent services.'),
-        );
-      }
     }
     $requirements['update status']['title'] = $t('Update notifications');
+
+    // Check that Drupal can issue HTTP requests.
+    if (variable_get('drupal_http_request_fails', TRUE) && !system_check_http_request()) {
+      $requirements['http requests'] = array(
+        'title' => $t('HTTP request status'),
+        'value' => $t('Fails'),
+        'severity' => REQUIREMENT_ERROR,
+        'description' => $t('Your system or network configuration does not allow Drupal to access web pages, resulting in reduced functionality. This could be due to your webserver configuration or PHP settings, and should be resolved in order to download information about available updates, fetch aggregator feeds, sign in via OpenID, or use other network-dependent services.'),
+      );
+    }
   }
 
   return $requirements;
@@ -301,10 +303,22 @@ function system_requirements($phase) {
  */
 function system_install() {
   if ($GLOBALS['db_type'] == 'pgsql') {
+    // We create some custom types and functions using global names instead of
+    // prefixing them like we do with table names. If this function is ever
+    // called again (for example, by the test framework when creating prefixed
+    // test databases), the global names will already exist. We therefore avoid
+    // trying to create them again in that case.
+
     // Create unsigned types.
-    db_query("CREATE DOMAIN int_unsigned integer CHECK (VALUE >= 0)");
-    db_query("CREATE DOMAIN smallint_unsigned smallint CHECK (VALUE >= 0)");
-    db_query("CREATE DOMAIN bigint_unsigned bigint CHECK (VALUE >= 0)");
+    if (!db_result(db_query("SELECT COUNT(*) FROM pg_constraint WHERE conname = 'int_unsigned_check'"))) {
+      db_query("CREATE DOMAIN int_unsigned integer CHECK (VALUE >= 0)");
+    }
+    if (!db_result(db_query("SELECT COUNT(*) FROM pg_constraint WHERE conname = 'smallint_unsigned_check'"))) {
+      db_query("CREATE DOMAIN smallint_unsigned smallint CHECK (VALUE >= 0)");
+    }
+    if (!db_result(db_query("SELECT COUNT(*) FROM pg_constraint WHERE conname = 'bigint_unsigned_check'"))) {
+      db_query("CREATE DOMAIN bigint_unsigned bigint CHECK (VALUE >= 0)");
+    }
 
     // Create functions.
     db_query('CREATE OR REPLACE FUNCTION "greatest"(numeric, numeric) RETURNS numeric AS
@@ -414,16 +428,16 @@ function system_schema() {
   // some database drivers, e.g. Oracle and DB2, will require variable_get()
   // and variable_set() for overcoming some database specific limitations.
   $schema['variable'] = array(
-    'description' => t('Named variable/value pairs created by Drupal core or any other module or theme. All variables are cached in memory at the start of every Drupal request so developers should not be careless about what is stored here.'),
+    'description' => 'Named variable/value pairs created by Drupal core or any other module or theme. All variables are cached in memory at the start of every Drupal request so developers should not be careless about what is stored here.',
     'fields' => array(
       'name' => array(
-        'description' => t('The name of the variable.'),
+        'description' => 'The name of the variable.',
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => ''),
       'value' => array(
-        'description' => t('The value of the variable.'),
+        'description' => 'The value of the variable.',
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big'),
@@ -432,33 +446,33 @@ function system_schema() {
     );
 
   $schema['actions'] = array(
-    'description' => t('Stores action information.'),
+    'description' => 'Stores action information.',
     'fields' => array(
       'aid' => array(
-        'description' => t('Primary Key: Unique actions ID.'),
+        'description' => 'Primary Key: Unique actions ID.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '0'),
       'type' => array(
-        'description' => t('The object that that action acts on (node, user, comment, system or custom types.)'),
+        'description' => 'The object that that action acts on (node, user, comment, system or custom types.)',
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => ''),
       'callback' => array(
-        'description' => t('The callback function that executes when the action runs.'),
+        'description' => 'The callback function that executes when the action runs.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'parameters' => array(
-        'description' => t('Parameters to be passed to the callback function.'),
+        'description' => 'Parameters to be passed to the callback function.',
         'type' => 'text',
         'not null' => TRUE,
         'size' => 'big'),
       'description' => array(
-        'description' => t('Description of the action.'),
+        'description' => 'Description of the action.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
@@ -468,10 +482,10 @@ function system_schema() {
     );
 
   $schema['actions_aid'] = array(
-    'description' => t('Stores action IDs for non-default actions.'),
+    'description' => 'Stores action IDs for non-default actions.',
     'fields' => array(
       'aid' => array(
-        'description' => t('Primary Key: Unique actions ID.'),
+        'description' => 'Primary Key: Unique actions ID.',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE),
@@ -483,21 +497,21 @@ function system_schema() {
     'description' => t('Stores details about batches (processes that run in multiple HTTP requests).'),
     'fields' => array(
       'bid' => array(
-        'description' => t('Primary Key: Unique batch ID.'),
+        'description' => 'Primary Key: Unique batch ID.',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE),
       'token' => array(
-        'description' => t("A string token generated against the current user's session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it."),
+        'description' => "A string token generated against the current user's session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it.",
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE),
       'timestamp' => array(
-        'description' => t('A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time.'),
+        'description' => 'A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time.',
         'type' => 'int',
         'not null' => TRUE),
       'batch' => array(
-        'description' => t('A serialized array containing the processing data for the batch.'),
+        'description' => 'A serialized array containing the processing data for the batch.',
         'type' => 'text',
         'not null' => FALSE,
         'size' => 'big')
@@ -507,35 +521,35 @@ function system_schema() {
     );
 
   $schema['cache'] = array(
-    'description' => t('Generic cache table for caching things not separated out into their own tables. Contributed modules may also use this to store cached items.'),
+    'description' => 'Generic cache table for caching things not separated out into their own tables. Contributed modules may also use this to store cached items.',
     'fields' => array(
       'cid' => array(
-        'description' => t('Primary Key: Unique cache ID.'),
+        'description' => 'Primary Key: Unique cache ID.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'data' => array(
-        'description' => t('A collection of data to cache.'),
+        'description' => 'A collection of data to cache.',
         'type' => 'blob',
         'not null' => FALSE,
         'size' => 'big'),
       'expire' => array(
-        'description' => t('A Unix timestamp indicating when the cache entry should expire, or 0 for never.'),
+        'description' => 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'created' => array(
-        'description' => t('A Unix timestamp indicating when the cache entry was created.'),
+        'description' => 'A Unix timestamp indicating when the cache entry was created.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'headers' => array(
-        'description' => t('Any custom HTTP headers to be added to cached data.'),
+        'description' => 'Any custom HTTP headers to be added to cached data.',
         'type' => 'text',
         'not null' => FALSE),
       'serialized' => array(
-        'description' => t('A flag to indicate whether content is serialized (1) or not (0).'),
+        'description' => 'A flag to indicate whether content is serialized (1) or not (0).',
         'type' => 'int',
         'size' => 'small',
         'not null' => TRUE,
@@ -546,57 +560,57 @@ function system_schema() {
     );
 
   $schema['cache_form'] = $schema['cache'];
-  $schema['cache_form']['description'] = t('Cache table for the form system to store recently built forms and their storage data, to be used in subsequent page requests.');
+  $schema['cache_form']['description'] = 'Cache table for the form system to store recently built forms and their storage data, to be used in subsequent page requests.';
   $schema['cache_page'] = $schema['cache'];
-  $schema['cache_page']['description'] = t('Cache table used to store compressed pages for anonymous users, if page caching is enabled.');
+  $schema['cache_page']['description'] = 'Cache table used to store compressed pages for anonymous users, if page caching is enabled.';
   $schema['cache_menu'] = $schema['cache'];
-  $schema['cache_menu']['description'] = t('Cache table for the menu system to store router information as well as generated link trees for various menu/page/user combinations.');
+  $schema['cache_menu']['description'] = 'Cache table for the menu system to store router information as well as generated link trees for various menu/page/user combinations.';
 
   $schema['files'] = array(
-    'description' => t('Stores information for uploaded files.'),
+    'description' => 'Stores information for uploaded files.',
     'fields' => array(
       'fid' => array(
-        'description' => t('Primary Key: Unique files ID.'),
+        'description' => 'Primary Key: Unique files ID.',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE),
       'uid' => array(
-        'description' => t('The {users}.uid of the user who is associated with the file.'),
+        'description' => 'The {users}.uid of the user who is associated with the file.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'filename' => array(
-        'description' => t('Name of the file.'),
+        'description' => 'Name of the file.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'filepath' => array(
-        'description' => t('Path of the file relative to Drupal root.'),
+        'description' => 'Path of the file relative to Drupal root.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'filemime' => array(
-        'description' => t('The file MIME type.'),
+        'description' => 'The file MIME type.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'filesize' => array(
-        'description' => t('The size of the file in bytes.'),
+        'description' => 'The size of the file in bytes.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'status' => array(
-        'description' => t('A flag indicating whether file is temporary (1) or permanent (0).'),
+        'description' => 'A flag indicating whether file is temporary (1) or permanent (0).',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'timestamp' => array(
-        'description' => t('UNIX timestamp for when the file was added.'),
+        'description' => 'UNIX timestamp for when the file was added.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
@@ -611,26 +625,26 @@ function system_schema() {
     );
 
   $schema['flood'] = array(
-    'description' => t('Flood controls the threshold of events, such as the number of contact attempts.'),
+    'description' => 'Flood controls the threshold of events, such as the number of contact attempts.',
     'fields' => array(
       'fid' => array(
-        'description' => t('Unique flood event ID.'),
+        'description' => 'Unique flood event ID.',
         'type' => 'serial',
         'not null' => TRUE),
       'event' => array(
-        'description' => t('Name of event (e.g. contact).'),
+        'description' => 'Name of event (e.g. contact).',
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => ''),
       'hostname' => array(
-        'description' => t('Hostname of the visitor.'),
+        'description' => 'Hostname of the visitor.',
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => ''),
       'timestamp' => array(
-        'description' => t('Timestamp of the event.'),
+        'description' => 'Timestamp of the event.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0)
@@ -642,20 +656,20 @@ function system_schema() {
     );
 
   $schema['history'] = array(
-    'description' => t('A record of which {users} have read which {node}s.'),
+    'description' => 'A record of which {users} have read which {node}s.',
     'fields' => array(
       'uid' => array(
-        'description' => t('The {users}.uid that read the {node} nid.'),
+        'description' => 'The {users}.uid that read the {node} nid.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'nid' => array(
-        'description' => t('The {node}.nid that was read.'),
+        'description' => 'The {node}.nid that was read.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'timestamp' => array(
-        'description' => t('The Unix timestamp at which the read occurred.'),
+        'description' => 'The Unix timestamp at which the read occurred.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0)
@@ -666,111 +680,111 @@ function system_schema() {
     ),
     );
   $schema['menu_router'] = array(
-    'description' => t('Maps paths to various callbacks (access, page and title)'),
+    'description' => 'Maps paths to various callbacks (access, page and title)',
     'fields' => array(
       'path' => array(
-        'description' => t('Primary Key: the Drupal path this entry describes'),
+        'description' => 'Primary Key: the Drupal path this entry describes',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'load_functions' => array(
-        'description' => t('A serialized array of function names (like node_load) to be called to load an object corresponding to a part of the current path.'),
+        'description' => 'A serialized array of function names (like node_load) to be called to load an object corresponding to a part of the current path.',
         'type' => 'text',
         'not null' => TRUE,),
       'to_arg_functions' => array(
-        'description' => t('A serialized array of function names (like user_uid_optional_to_arg) to be called to replace a part of the router path with another string.'),
+        'description' => 'A serialized array of function names (like user_uid_optional_to_arg) to be called to replace a part of the router path with another string.',
         'type' => 'text',
         'not null' => TRUE,),
       'access_callback' => array(
-        'description' => t('The callback which determines the access to this router path. Defaults to user_access.'),
+        'description' => 'The callback which determines the access to this router path. Defaults to user_access.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'access_arguments' => array(
-        'description' => t('A serialized array of arguments for the access callback.'),
+        'description' => 'A serialized array of arguments for the access callback.',
         'type' => 'text',
         'not null' => FALSE),
       'page_callback' => array(
-        'description' => t('The name of the function that renders the page.'),
+        'description' => 'The name of the function that renders the page.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'page_arguments' => array(
-        'description' => t('A serialized array of arguments for the page callback.'),
+        'description' => 'A serialized array of arguments for the page callback.',
         'type' => 'text',
         'not null' => FALSE),
       'fit' => array(
-        'description' => t('A numeric representation of how specific the path is.'),
+        'description' => 'A numeric representation of how specific the path is.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'number_parts' => array(
-        'description' => t('Number of parts in this router path.'),
+        'description' => 'Number of parts in this router path.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'small'),
       'tab_parent' => array(
-        'description' => t('Only for local tasks (tabs) - the router path of the parent page (which may also be a local task).'),
+        'description' => 'Only for local tasks (tabs) - the router path of the parent page (which may also be a local task).',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'tab_root' => array(
-        'description' => t('Router path of the closest non-tab parent page. For pages that are not local tasks, this will be the same as the path.'),
+        'description' => 'Router path of the closest non-tab parent page. For pages that are not local tasks, this will be the same as the path.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'title' => array(
-        'description' => t('The title for the current page, or the title for the tab if this is a local task.'),
+        'description' => 'The title for the current page, or the title for the tab if this is a local task.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'title_callback' => array(
-        'description' => t('A function which will alter the title. Defaults to t()'),
+        'description' => 'A function which will alter the title. Defaults to t()',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'title_arguments' => array(
-        'description' => t('A serialized array of arguments for the title callback. If empty, the title will be used as the sole argument for the title callback.'),
+        'description' => 'A serialized array of arguments for the title callback. If empty, the title will be used as the sole argument for the title callback.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'type' => array(
-        'description' => t('Numeric representation of the type of the menu item, like MENU_LOCAL_TASK.'),
+        'description' => 'Numeric representation of the type of the menu item, like MENU_LOCAL_TASK.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'block_callback' => array(
-        'description' => t('Name of a function used to render the block on the system administration page for this item.'),
+        'description' => 'Name of a function used to render the block on the system administration page for this item.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'description' => array(
-        'description' => t('A description of this item.'),
+        'description' => 'A description of this item.',
         'type' => 'text',
         'not null' => TRUE),
       'position' => array(
-        'description' => t('The position of the block (left or right) on the system administration page for this item.'),
+        'description' => 'The position of the block (left or right) on the system administration page for this item.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'weight' => array(
-        'description' => t('Weight of the element. Lighter weights are higher up, heavier weights go down.'),
+        'description' => 'Weight of the element. Lighter weights are higher up, heavier weights go down.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'file' => array(
-        'description' => t('The file to include for this element, usually the page callback function lives in this file.'),
+        'description' => 'The file to include for this element, usually the page callback function lives in this file.',
         'type' => 'text',
         'size' => 'medium')
       ),
@@ -782,150 +796,150 @@ function system_schema() {
     );
 
   $schema['menu_links'] = array(
-    'description' => t('Contains the individual links within a menu.'),
+    'description' => 'Contains the individual links within a menu.',
     'fields' => array(
      'menu_name' => array(
-        'description' => t("The menu name. All links with the same menu name (such as 'navigation') are part of the same menu."),
+        'description' => "The menu name. All links with the same menu name (such as 'navigation') are part of the same menu.",
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => ''),
       'mlid' => array(
-        'description' => t('The menu link ID (mlid) is the integer primary key.'),
+        'description' => 'The menu link ID (mlid) is the integer primary key.',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE),
       'plid' => array(
-        'description' => t('The parent link ID (plid) is the mlid of the link above in the hierarchy, or zero if the link is at the top level in its menu.'),
+        'description' => 'The parent link ID (plid) is the mlid of the link above in the hierarchy, or zero if the link is at the top level in its menu.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'link_path' => array(
-        'description' => t('The Drupal path or external path this link points to.'),
+        'description' => 'The Drupal path or external path this link points to.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'router_path' => array(
-        'description' => t('For links corresponding to a Drupal path (external = 0), this connects the link to a {menu_router}.path for joins.'),
+        'description' => 'For links corresponding to a Drupal path (external = 0), this connects the link to a {menu_router}.path for joins.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'link_title' => array(
-      'description' => t('The text displayed for the link, which may be modified by a title callback stored in {menu_router}.'),
+      'description' => 'The text displayed for the link, which may be modified by a title callback stored in {menu_router}.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'options' => array(
-        'description' => t('A serialized array of options to be passed to the url() or l() function, such as a query string or HTML attributes.'),
+        'description' => 'A serialized array of options to be passed to the url() or l() function, such as a query string or HTML attributes.',
         'type' => 'text',
         'not null' => FALSE),
       'module' => array(
-        'description' => t('The name of the module that generated this link.'),
+        'description' => 'The name of the module that generated this link.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => 'system'),
       'hidden' => array(
-        'description' => t('A flag for whether the link should be rendered in menus. (1 = a disabled menu item that may be shown on admin screens, -1 = a menu callback, 0 = a normal, visible link)'),
+        'description' => 'A flag for whether the link should be rendered in menus. (1 = a disabled menu item that may be shown on admin screens, -1 = a menu callback, 0 = a normal, visible link)',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'small'),
       'external' => array(
-        'description' => t('A flag to indicate if the link points to a full URL starting with a protocol, like http:// (1 = external, 0 = internal).'),
+        'description' => 'A flag to indicate if the link points to a full URL starting with a protocol, like http:// (1 = external, 0 = internal).',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'small'),
       'has_children' => array(
-        'description' => t('Flag indicating whether any links have this link as a parent (1 = children exist, 0 = no children).'),
+        'description' => 'Flag indicating whether any links have this link as a parent (1 = children exist, 0 = no children).',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'small'),
       'expanded' => array(
-        'description' => t('Flag for whether this link should be rendered as expanded in menus - expanded links always have their child links displayed, instead of only when the link is in the active trail (1 = expanded, 0 = not expanded)'),
+        'description' => 'Flag for whether this link should be rendered as expanded in menus - expanded links always have their child links displayed, instead of only when the link is in the active trail (1 = expanded, 0 = not expanded)',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'small'),
       'weight' => array(
-        'description' => t('Link weight among links in the same menu at the same depth.'),
+        'description' => 'Link weight among links in the same menu at the same depth.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'depth' => array(
-        'description' => t('The depth relative to the top level. A link with plid == 0 will have depth == 1.'),
+        'description' => 'The depth relative to the top level. A link with plid == 0 will have depth == 1.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'small'),
       'customized' => array(
-        'description' => t('A flag to indicate that the user has manually created or edited the link (1 = customized, 0 = not customized).'),
+        'description' => 'A flag to indicate that the user has manually created or edited the link (1 = customized, 0 = not customized).',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'small'),
       'p1' => array(
-        'description' => t('The first mlid in the materialized path. If N = depth, then pN must equal the mlid. If depth > 1 then p(N-1) must equal the plid. All pX where X > depth must equal zero. The columns p1 .. p9 are also called the parents.'),
+        'description' => 'The first mlid in the materialized path. If N = depth, then pN must equal the mlid. If depth > 1 then p(N-1) must equal the plid. All pX where X > depth must equal zero. The columns p1 .. p9 are also called the parents.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'p2' => array(
-        'description' => t('The second mlid in the materialized path. See p1.'),
+        'description' => 'The second mlid in the materialized path. See p1.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'p3' => array(
-        'description' => t('The third mlid in the materialized path. See p1.'),
+        'description' => 'The third mlid in the materialized path. See p1.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'p4' => array(
-        'description' => t('The fourth mlid in the materialized path. See p1.'),
+        'description' => 'The fourth mlid in the materialized path. See p1.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'p5' => array(
-        'description' => t('The fifth mlid in the materialized path. See p1.'),
+        'description' => 'The fifth mlid in the materialized path. See p1.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'p6' => array(
-        'description' => t('The sixth mlid in the materialized path. See p1.'),
+        'description' => 'The sixth mlid in the materialized path. See p1.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'p7' => array(
-        'description' => t('The seventh mlid in the materialized path. See p1.'),
+        'description' => 'The seventh mlid in the materialized path. See p1.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'p8' => array(
-        'description' => t('The eighth mlid in the materialized path. See p1.'),
+        'description' => 'The eighth mlid in the materialized path. See p1.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'p9' => array(
-        'description' => t('The ninth mlid in the materialized path. See p1.'),
+        'description' => 'The ninth mlid in the materialized path. See p1.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0),
       'updated' => array(
-        'description' => t('Flag that indicates that this link was generated during the update from Drupal 5.'),
+        'description' => 'Flag that indicates that this link was generated during the update from Drupal 5.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
@@ -943,37 +957,37 @@ function system_schema() {
     );
 
   $schema['sessions'] = array(
-    'description' => t("Drupal's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated."),
+    'description' => "Drupal's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.",
     'fields' => array(
       'uid' => array(
-        'description' => t('The {users}.uid corresponding to a session, or 0 for anonymous user.'),
+        'description' => 'The {users}.uid corresponding to a session, or 0 for anonymous user.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE),
       'sid' => array(
-        'description' => t("Primary key: A session ID. The value is generated by PHP's Session API."),
+        'description' => "Primary key: A session ID. The value is generated by PHP's Session API.",
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => ''),
       'hostname' => array(
-        'description' => t('The IP address that last used this session ID (sid).'),
+        'description' => 'The IP address that last used this session ID (sid).',
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => ''),
       'timestamp' => array(
-        'description' => t('The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.'),
+        'description' => 'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'cache' => array(
-        'description' => t("The time of this user's last post. This is used when the site has specified a minimum_cache_lifetime. See cache_get()."),
+        'description' => "The time of this user's last post. This is used when the site has specified a minimum_cache_lifetime. See cache_get().",
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'session' => array(
-        'description' => t('The serialized contents of $_SESSION, an array of name/value pairs that persists across page requests by this session ID. Drupal loads $_SESSION from here at the start of each request and saves it at the end.'),
+        'description' => 'The serialized contents of $_SESSION, an array of name/value pairs that persists across page requests by this session ID. Drupal loads $_SESSION from here at the start of each request and saves it at the end.',
         'type' => 'text',
         'not null' => FALSE,
         'size' => 'big')
@@ -986,61 +1000,61 @@ function system_schema() {
     );
 
   $schema['system'] = array(
-    'description' => t("A list of all modules, themes, and theme engines that are or have been installed in Drupal's file system."),
+    'description' => "A list of all modules, themes, and theme engines that are or have been installed in Drupal's file system.",
     'fields' => array(
       'filename' => array(
-        'description' => t('The path of the primary file for this item, relative to the Drupal root; e.g. modules/node/node.module.'),
+        'description' => 'The path of the primary file for this item, relative to the Drupal root; e.g. modules/node/node.module.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'name' => array(
-        'description' => t('The name of the item; e.g. node.'),
+        'description' => 'The name of the item; e.g. node.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'type' => array(
-        'description' => t('The type of the item, either module, theme, or theme_engine.'),
+        'description' => 'The type of the item, either module, theme, or theme_engine.',
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'owner' => array(
-        'description' => t("A theme's 'parent'. Can be either a theme or an engine."),
+        'description' => "A theme's 'parent'. Can be either a theme or an engine.",
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => ''),
       'status' => array(
-        'description' => t('Boolean indicating whether or not this item is enabled.'),
+        'description' => 'Boolean indicating whether or not this item is enabled.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'throttle' => array(
-        'description' => t('Boolean indicating whether this item is disabled when the throttle.module disables throttleable items.'),
+        'description' => 'Boolean indicating whether this item is disabled when the throttle.module disables throttleable items.',
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny'),
       'bootstrap' => array(
-        'description' => t("Boolean indicating whether this module is loaded during Drupal's early bootstrapping phase (e.g. even before the page cache is consulted)."),
+        'description' => "Boolean indicating whether this module is loaded during Drupal's early bootstrapping phase (e.g. even before the page cache is consulted).",
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'schema_version' => array(
-        'description' => t("The module's database schema version number. -1 if the module is not installed (its tables do not exist); 0 or the largest N of the module's hook_update_N() function that has either been run or existed when the module was first installed."),
+        'description' => "The module's database schema version number. -1 if the module is not installed (its tables do not exist); 0 or the largest N of the module's hook_update_N() function that has either been run or existed when the module was first installed.",
         'type' => 'int',
         'not null' => TRUE,
         'default' => -1,
         'size' => 'small'),
       'weight' => array(
-        'description' => t("The order in which this module's hooks should be invoked relative to other modules. Equal-weighted modules are ordered by name."),
+        'description' => "The order in which this module's hooks should be invoked relative to other modules. Equal-weighted modules are ordered by name.",
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0),
       'info' => array(
-        'description' => t("A serialized array containing information from the module's .info file; keys can include name, description, package, version, core, dependencies, dependents, and php."),
+        'description' => "A serialized array containing information from the module's .info file; keys can include name, description, package, version, core, dependencies, dependents, and php.",
         'type' => 'text',
         'not null' => FALSE)
       ),
@@ -1053,27 +1067,27 @@ function system_schema() {
     );
 
   $schema['url_alias'] = array(
-    'description' => t('A list of URL aliases for Drupal paths; a user may visit either the source or destination path.'),
+    'description' => 'A list of URL aliases for Drupal paths; a user may visit either the source or destination path.',
     'fields' => array(
       'pid' => array(
-        'description' => t('A unique path alias identifier.'),
+        'description' => 'A unique path alias identifier.',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE),
       'src' => array(
-        'description' => t('The Drupal path this alias is for; e.g. node/12.'),
+        'description' => 'The Drupal path this alias is for; e.g. node/12.',
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => ''),
       'dst' => array(
-        'description' => t('The alias for this path; e.g. title-of-the-story.'),
+        'description' => 'The alias for this path; e.g. title-of-the-story.',
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => ''),
       'language' => array(
-        'description' => t('The language this alias is for; if blank, the alias will be used for unknown languages. Each Drupal path can have an alias for each supported language.'),
+        'description' => 'The language this alias is for; if blank, the alias will be used for unknown languages. Each Drupal path can have an alias for each supported language.',
         'type' => 'varchar',
         'length' => 12,
         'not null' => TRUE,
diff --git a/modules/system/system.module b/modules/system/system.module
index 9ff9312..200fc6e 100644
--- a/modules/system/system.module
+++ b/modules/system/system.module
@@ -9,7 +9,7 @@
 /**
  * The current system version.
  */
-define('VERSION', '6.8');
+define('VERSION', '6.9');
 
 /**
  * Core API compatibility.
@@ -468,15 +468,6 @@ function system_menu() {
     'access callback' => TRUE,
     'type' => MENU_CALLBACK,
   );
-  // Menu handler to test that drupal_http_request() works locally.
-  // @see system_check_http_request()
-  $items['admin/reports/request-test'] = array(
-    'title' => 'Request test',
-    'page callback' => 'printf',
-    'page arguments' => array('request test'),
-    'access callback' => TRUE,
-    'type' => MENU_CALLBACK,
-  );
 
   // Reports:
   $items['admin/reports'] = array(
@@ -1870,20 +1861,14 @@ function _system_zonelist() {
  * will contain an error.
  *
  * @return
- *  Whether the admin/reports/request-test page can be requested via HTTP
- *  and contains the same output as if called via the menu system.
+ *  TRUE if this installation can issue HTTP requests.
  */
 function system_check_http_request() {
-  // Check whether we can do any request at all. First get the results for
-  // a very simple page which has access TRUE set via the menu system. Then,
-  // try to drupal_http_request() the same page and compare.
-  ob_start();
-  $path = 'admin/reports/request-test';
-  menu_execute_active_handler($path);
-  $nothing = ob_get_contents();
-  ob_end_clean();
-  $result = drupal_http_request(url($path, array('absolute' => TRUE)));
-  $works = isset($result->data) && $result->data == $nothing;
+  // Try to get the content of the front page via drupal_http_request().
+  $result = drupal_http_request(url('', array('absolute' => TRUE)));
+  // We only care that we get a http response - this means that Drupal
+  // can make a http request.
+  $works = isset($result->code) && ($result->code >= 100) && ($result->code < 600);
   variable_set('drupal_http_request_fails', !$works);
   return $works;
 }
diff --git a/modules/taxonomy/taxonomy.install b/modules/taxonomy/taxonomy.install
index fa17ede..12e99c6 100644
--- a/modules/taxonomy/taxonomy.install
+++ b/modules/taxonomy/taxonomy.install
@@ -6,40 +6,40 @@
  */
 function taxonomy_schema() {
   $schema['term_data'] = array(
-    'description' => t('Stores term information.'),
+    'description' => 'Stores term information.',
     'fields' => array(
       'tid' => array(
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique term ID.'),
+        'description' => 'Primary Key: Unique term ID.',
       ),
       'vid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {vocabulary}.vid of the vocabulary to which the term is assigned.'),
+        'description' => 'The {vocabulary}.vid of the vocabulary to which the term is assigned.',
       ),
       'name' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The term name.'),
+        'description' => 'The term name.',
       ),
       'description' => array(
         'type' => 'text',
         'not null' => FALSE,
         'size' => 'big',
-        'description' => t('A description of the term.'),
+        'description' => 'A description of the term.',
       ),
       'weight' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('The weight of this term in relation to other terms.'),
+        'description' => 'The weight of this term in relation to other terms.',
       ),
     ),
     'primary key' => array('tid'),
@@ -50,21 +50,21 @@ function taxonomy_schema() {
   );
 
   $schema['term_hierarchy'] = array(
-    'description' => t('Stores the hierarchical relationship between terms.'),
+    'description' => 'Stores the hierarchical relationship between terms.',
     'fields' => array(
       'tid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Primary Key: The {term_data}.tid of the term.'),
+        'description' => 'Primary Key: The {term_data}.tid of the term.',
       ),
       'parent' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t("Primary Key: The {term_data}.tid of the term's parent. 0 indicates no parent."),
+        'description' => "Primary Key: The {term_data}.tid of the term's parent. 0 indicates no parent.",
       ),
     ),
     'indexes' => array(
@@ -74,28 +74,28 @@ function taxonomy_schema() {
   );
 
   $schema['term_node'] = array(
-    'description' => t('Stores the relationship of terms to nodes.'),
+    'description' => 'Stores the relationship of terms to nodes.',
     'fields' => array(
       'nid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Primary Key: The {node}.nid of the node.'),
+        'description' => 'Primary Key: The {node}.nid of the node.',
       ),
       'vid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Primary Key: The {node}.vid of the node.'),
+        'description' => 'Primary Key: The {node}.vid of the node.',
       ),
       'tid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Primary Key: The {term_data}.tid of a term assigned to the node.'),
+        'description' => 'Primary Key: The {term_data}.tid of a term assigned to the node.',
       ),
     ),
     'indexes' => array(
@@ -106,26 +106,26 @@ function taxonomy_schema() {
   );
 
   $schema['term_relation'] = array(
-    'description' => t('Stores non-hierarchical relationships between terms.'),
+    'description' => 'Stores non-hierarchical relationships between terms.',
     'fields' => array(
       'trid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique term relation ID.'),
+        'description' => 'Primary Key: Unique term relation ID.',
       ),
       'tid1' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {term_data}.tid of the first term in a relationship.'),
+        'description' => 'The {term_data}.tid of the first term in a relationship.',
       ),
       'tid2' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {term_data}.tid of the second term in a relationship.'),
+        'description' => 'The {term_data}.tid of the second term in a relationship.',
       ),
     ),
     'unique keys' => array(
@@ -138,26 +138,26 @@ function taxonomy_schema() {
   );
 
   $schema['term_synonym'] = array(
-    'description' => t('Stores term synonyms.'),
+    'description' => 'Stores term synonyms.',
     'fields' => array(
       'tsid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique term synonym ID.'),
+        'description' => 'Primary Key: Unique term synonym ID.',
       ),
       'tid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {term_data}.tid of the term.'),
+        'description' => 'The {term_data}.tid of the term.',
       ),
       'name' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The name of the synonym.'),
+        'description' => 'The name of the synonym.',
       ),
     ),
     'indexes' => array(
@@ -168,33 +168,33 @@ function taxonomy_schema() {
   );
 
   $schema['vocabulary'] = array(
-    'description' => t('Stores vocabulary information.'),
+    'description' => 'Stores vocabulary information.',
     'fields' => array(
       'vid' => array(
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique vocabulary ID.'),
+        'description' => 'Primary Key: Unique vocabulary ID.',
       ),
       'name' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Name of the vocabulary.'),
+        'description' => 'Name of the vocabulary.',
       ),
       'description' => array(
         'type' => 'text',
         'not null' => FALSE,
         'size' => 'big',
-        'description' => t('Description of the vocabulary.'),
+        'description' => 'Description of the vocabulary.',
       ),
       'help' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Help text to display for the vocabulary.'),
+        'description' => 'Help text to display for the vocabulary.',
       ),
       'relations' => array(
         'type' => 'int',
@@ -202,7 +202,7 @@ function taxonomy_schema() {
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Whether or not related terms are enabled within the vocabulary. (0 = disabled, 1 = enabled)'),
+        'description' => 'Whether or not related terms are enabled within the vocabulary. (0 = disabled, 1 = enabled)',
       ),
       'hierarchy' => array(
         'type' => 'int',
@@ -210,7 +210,7 @@ function taxonomy_schema() {
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('The type of hierarchy allowed within the vocabulary. (0 = disabled, 1 = single, 2 = multiple)'),
+        'description' => 'The type of hierarchy allowed within the vocabulary. (0 = disabled, 1 = single, 2 = multiple)',
       ),
       'multiple' => array(
         'type' => 'int',
@@ -218,7 +218,7 @@ function taxonomy_schema() {
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Whether or not multiple terms from this vocabulary may be assigned to a node. (0 = disabled, 1 = enabled)'),
+        'description' => 'Whether or not multiple terms from this vocabulary may be assigned to a node. (0 = disabled, 1 = enabled)',
       ),
       'required' => array(
         'type' => 'int',
@@ -226,7 +226,7 @@ function taxonomy_schema() {
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Whether or not terms are required for nodes using this vocabulary. (0 = disabled, 1 = enabled)'),
+        'description' => 'Whether or not terms are required for nodes using this vocabulary. (0 = disabled, 1 = enabled)',
       ),
       'tags' => array(
         'type' => 'int',
@@ -234,21 +234,21 @@ function taxonomy_schema() {
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Whether or not free tagging is enabled for the vocabulary. (0 = disabled, 1 = enabled)'),
+        'description' => 'Whether or not free tagging is enabled for the vocabulary. (0 = disabled, 1 = enabled)',
       ),
       'module' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The module which created the vocabulary.'),
+        'description' => 'The module which created the vocabulary.',
       ),
       'weight' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('The weight of the vocabulary in relation to other vocabularies.'),
+        'description' => 'The weight of the vocabulary in relation to other vocabularies.',
       ),
     ),
     'primary key' => array('vid'),
@@ -258,21 +258,21 @@ function taxonomy_schema() {
   );
 
   $schema['vocabulary_node_types'] = array(
-    'description' => t('Stores which node types vocabularies may be used with.'),
+    'description' => 'Stores which node types vocabularies may be used with.',
     'fields' => array(
       'vid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Primary Key: the {vocabulary}.vid of the vocabulary.'),
+        'description' => 'Primary Key: the {vocabulary}.vid of the vocabulary.',
       ),
       'type' => array(
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('The {node}.type of the node type for which the vocabulary may be used.'),
+        'description' => 'The {node}.type of the node type for which the vocabulary may be used.',
       ),
     ),
     'primary key' => array('type', 'vid'),
diff --git a/modules/translation/translation.module b/modules/translation/translation.module
index 39432d6..5aa1bd3 100644
--- a/modules/translation/translation.module
+++ b/modules/translation/translation.module
@@ -76,10 +76,7 @@ function translation_menu() {
  * all languages).
  */
 function _translation_tab_access($node) {
-  if (!empty($node->language) && translation_supported_type($node->type)) {
-    return user_access('translate content');
-  }
-  return FALSE;
+  return !empty($node->language) && translation_supported_type($node->type) && node_access('view', $node) && user_access('translate content');
 }
 
 /**
@@ -192,15 +189,27 @@ function translation_nodeapi(&$node, $op, $teaser, $page) {
 
   switch ($op) {
     case 'prepare':
-      if (empty($node->nid) && isset($_GET['translation']) && isset($_GET['language']) &&
-          ($source_nid = $_GET['translation']) && ($language = $_GET['language']) &&
-          (user_access('translate content'))) {
-        // We are translating a node from a source node, so
-        // load the node to be translated and populate fields.
-        $node->language = $language;
-        $node->translation_source = node_load($source_nid);
-        $node->title = $node->translation_source->title;
-        $node->body = $node->translation_source->body;
+      if (empty($node->nid) && user_access('translate content') && isset($_GET['translation']) && isset($_GET['language']) && is_numeric($_GET['translation'])) {
+        $translation_source = node_load($_GET['translation']);
+        if (empty($translation_source) || !node_access('view', $translation_source)) {
+          // Source node not found or no access to view. We should not check
+          // for edit access, since the translator might not have permissions
+          // to edit the source node but should still be able to translate.
+          return;
+        }
+        $language_list = language_list();
+        if (!isset($language_list[$_GET['language']]) || ($translation_source->language == $_GET['language'])) {
+          // If not supported language, or same language as source node, break.
+          return;
+        }
+        // Populate fields based on source node.
+        $node->language = $_GET['language'];
+        $node->translation_source = $translation_source;
+        $node->title = $translation_source->title;
+        // If user has no access to the filter used for the body, Drupal core
+        // does not let the edit form to appear, so we should avoid exposing
+        // the source text here too.
+        $node->body = filter_access($translation_source->format) ? $translation_source->body : '';
         // Let every module add custom translated fields.
         node_invoke_nodeapi($node, 'prepare translation');
       }
diff --git a/modules/trigger/trigger.install b/modules/trigger/trigger.install
index 981ad5d..03c8585 100644
--- a/modules/trigger/trigger.install
+++ b/modules/trigger/trigger.install
@@ -25,34 +25,34 @@ function trigger_uninstall() {
  */
 function trigger_schema() {
   $schema['trigger_assignments'] = array(
-    'description' => t('Maps trigger to hook and operation assignments from trigger.module.'),
+    'description' => 'Maps trigger to hook and operation assignments from trigger.module.',
     'fields' => array(
       'hook' => array(
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Primary Key: The name of the internal Drupal hook upon which an action is firing; for example, nodeapi.'),
+        'description' => 'Primary Key: The name of the internal Drupal hook upon which an action is firing; for example, nodeapi.',
       ),
       'op' => array(
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Primary Key: The specific operation of the hook upon which an action is firing: for example, presave.'),
+        'description' => 'Primary Key: The specific operation of the hook upon which an action is firing: for example, presave.',
       ),
       'aid' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t("Primary Key: Action's {actions}.aid."),
+        'description' => "Primary Key: Action's {actions}.aid.",
       ),
       'weight' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The weight of the trigger assignment in relation to other triggers.'),
+        'description' => 'The weight of the trigger assignment in relation to other triggers.',
       ),
     ),
     'primary key' => array('hook', 'op', 'aid'),
diff --git a/modules/update/update.fetch.inc b/modules/update/update.fetch.inc
index 3edda9c..8e66b74 100644
--- a/modules/update/update.fetch.inc
+++ b/modules/update/update.fetch.inc
@@ -57,7 +57,6 @@ function _update_refresh() {
     watchdog('update', 'Fetched information about all available new releases and updates.', array(), WATCHDOG_NOTICE, l(t('view'), 'admin/reports/updates'));
   }
   else {
-    module_invoke('system', 'check_http_request');
     watchdog('update', 'Unable to fetch any information about available new releases and updates.', array(), WATCHDOG_ERROR, l(t('view'), 'admin/reports/updates'));
   }
   return $available;
diff --git a/modules/update/update.install b/modules/update/update.install
index 001dd7c..95208cc 100644
--- a/modules/update/update.install
+++ b/modules/update/update.install
@@ -36,7 +36,7 @@ function update_uninstall() {
  */
 function update_schema() {
   $schema['cache_update'] = drupal_get_schema_unprocessed('system', 'cache');
-  $schema['cache_update']['description'] = t('Cache table for the Update module to store information about available releases, fetched from central server.');
+  $schema['cache_update']['description'] = 'Cache table for the Update module to store information about available releases, fetched from central server.';
   return $schema;
 }
 
diff --git a/modules/upload/upload.install b/modules/upload/upload.install
index e440771..22334d7 100644
--- a/modules/upload/upload.install
+++ b/modules/upload/upload.install
@@ -26,35 +26,35 @@ function upload_uninstall() {
  */
 function upload_schema() {
   $schema['upload'] = array(
-    'description' => t('Stores uploaded file information and table associations.'),
+    'description' => 'Stores uploaded file information and table associations.',
     'fields' => array(
       'fid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Primary Key: The {files}.fid.'),
+        'description' => 'Primary Key: The {files}.fid.',
       ),
       'nid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {node}.nid associated with the uploaded file.'),
+        'description' => 'The {node}.nid associated with the uploaded file.',
       ),
       'vid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Primary Key: The {node}.vid associated with the uploaded file.'),
+        'description' => 'Primary Key: The {node}.vid associated with the uploaded file.',
       ),
       'description' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Description of the uploaded file.'),
+        'description' => 'Description of the uploaded file.',
       ),
       'list' => array(
         'type' => 'int',
@@ -62,14 +62,14 @@ function upload_schema() {
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Whether the file should be visibly listed on the node: yes(1) or no(0).'),
+        'description' => 'Whether the file should be visibly listed on the node: yes(1) or no(0).',
       ),
       'weight' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Weight of this upload in relation to other uploads in this node.'),
+        'description' => 'Weight of this upload in relation to other uploads in this node.',
       ),
     ),
     'primary key' => array('vid', 'fid'),
diff --git a/modules/upload/upload.module b/modules/upload/upload.module
index 2c5ab44..bf1dc04 100644
--- a/modules/upload/upload.module
+++ b/modules/upload/upload.module
@@ -256,8 +256,8 @@ function upload_form_alter(&$form, $form_state, $form_id) {
         $form['attachments']['wrapper'] += _upload_form($node);
         $form['#attributes']['enctype'] = 'multipart/form-data';
       }
+      $form['#submit'][] = 'upload_node_form_submit';
     }
-    $form['#submit'][] = 'upload_node_form_submit';
   }
 }
 
diff --git a/modules/user/user.install b/modules/user/user.install
index 6df206e..d04a397 100644
--- a/modules/user/user.install
+++ b/modules/user/user.install
@@ -6,43 +6,43 @@
  */
 function user_schema() {
   $schema['access'] = array(
-    'description' => t('Stores site access rules.'),
+    'description' => 'Stores site access rules.',
     'fields' => array(
       'aid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique access ID.'),
+        'description' => 'Primary Key: Unique access ID.',
       ),
       'mask' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Text mask used for filtering access.'),
+        'description' => 'Text mask used for filtering access.',
       ),
       'type' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Type of access rule: name, mail or host.'),
+        'description' => 'Type of access rule: name, mail or host.',
       ),
       'status' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Whether rule is to allow(1) or deny(0) access.'),
+        'description' => 'Whether rule is to allow(1) or deny(0) access.',
       ),
     ),
     'primary key' => array('aid'),
   );
 
   $schema['authmap'] = array(
-    'description' => t('Stores distributed authentication mapping.'),
+    'description' => 'Stores distributed authentication mapping.',
     'fields' => array(
       'aid' => array(
-        'description' => t('Primary Key: Unique authmap ID.'),
+        'description' => 'Primary Key: Unique authmap ID.',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE,
@@ -51,21 +51,21 @@ function user_schema() {
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t("User's {users}.uid."),
+        'description' => "User's {users}.uid.",
       ),
       'authname' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Unique authentication name.'),
+        'description' => 'Unique authentication name.',
       ),
       'module' => array(
         'type' => 'varchar',
         'length' => 128,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Module which is controlling the authentication.'),
+        'description' => 'Module which is controlling the authentication.',
       ),
     ),
     'unique keys' => array('authname' => array('authname')),
@@ -73,32 +73,32 @@ function user_schema() {
   );
 
   $schema['permission'] = array(
-    'description' => t('Stores permissions for users.'),
+    'description' => 'Stores permissions for users.',
     'fields' => array(
       'pid' => array(
         'type' => 'serial',
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique permission ID.'),
+        'description' => 'Primary Key: Unique permission ID.',
       ),
       'rid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('The {role}.rid to which the permissions are assigned.'),
+        'description' => 'The {role}.rid to which the permissions are assigned.',
       ),
       'perm' => array(
         'type' => 'text',
         'not null' => FALSE,
         'size' => 'big',
-        'description' => t('List of permissions being assigned.'),
+        'description' => 'List of permissions being assigned.',
       ),
       'tid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Originally intended for taxonomy-based permissions, but never used.'),
+        'description' => 'Originally intended for taxonomy-based permissions, but never used.',
       ),
     ),
     'primary key' => array('pid'),
@@ -106,20 +106,20 @@ function user_schema() {
   );
 
   $schema['role'] = array(
-    'description' => t('Stores user roles.'),
+    'description' => 'Stores user roles.',
     'fields' => array(
       'rid' => array(
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique role id.'),
+        'description' => 'Primary Key: Unique role id.',
       ),
       'name' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Unique role name.'),
+        'description' => 'Unique role name.',
       ),
     ),
     'unique keys' => array('name' => array('name')),
@@ -127,127 +127,127 @@ function user_schema() {
   );
 
   $schema['users'] = array(
-    'description' => t('Stores user data.'),
+    'description' => 'Stores user data.',
     'fields' => array(
       'uid' => array(
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE,
-        'description' => t('Primary Key: Unique user ID.'),
+        'description' => 'Primary Key: Unique user ID.',
       ),
       'name' => array(
         'type' => 'varchar',
         'length' => 60,
         'not null' => TRUE,
         'default' => '',
-        'description' => t('Unique user name.'),
+        'description' => 'Unique user name.',
       ),
       'pass' => array(
         'type' => 'varchar',
         'length' => 32,
         'not null' => TRUE,
         'default' => '',
-        'description' => t("User's password (md5 hash)."),
+        'description' => "User's password (md5 hash).",
       ),
       'mail' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => FALSE,
         'default' => '',
-        'description' => t("User's email address."),
+        'description' => "User's email address.",
       ),
       'mode' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Per-user comment display mode (threaded vs. flat), used by the {comment} module.'),
+        'description' => 'Per-user comment display mode (threaded vs. flat), used by the {comment} module.',
       ),
       'sort' => array(
         'type' => 'int',
         'not null' => FALSE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Per-user comment sort order (newest vs. oldest first), used by the {comment} module.'),
+        'description' => 'Per-user comment sort order (newest vs. oldest first), used by the {comment} module.',
       ),
       'threshold' => array(
         'type' => 'int',
         'not null' => FALSE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Previously used by the {comment} module for per-user preferences; no longer used.'),
+        'description' => 'Previously used by the {comment} module for per-user preferences; no longer used.',
       ),
       'theme' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t("User's default theme."),
+        'description' => "User's default theme.",
       ),
       'signature' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t("User's signature."),
+        'description' => "User's signature.",
       ),
       'created' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Timestamp for when user was created.'),
+        'description' => 'Timestamp for when user was created.',
       ),
       'access' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Timestamp for previous time user accessed the site.'),
+        'description' => 'Timestamp for previous time user accessed the site.',
       ),
       'login' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
-        'description' => t("Timestamp for user's last login."),
+        'description' => "Timestamp for user's last login.",
       ),
       'status' => array(
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'size' => 'tiny',
-        'description' => t('Whether the user is active(1) or blocked(0).'),
+        'description' => 'Whether the user is active(1) or blocked(0).',
       ),
       'timezone' => array(
         'type' => 'varchar',
         'length' => 8,
         'not null' => FALSE,
-        'description' => t("User's timezone."),
+        'description' => "User's timezone.",
       ),
       'language' => array(
         'type' => 'varchar',
         'length' => 12,
         'not null' => TRUE,
         'default' => '',
-        'description' => t("User's default language."),
+        'description' => "User's default language.",
       ),
       'picture' => array(
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
-        'description' => t("Path to the user's uploaded picture."),
+        'description' => "Path to the user's uploaded picture.",
       ),
       'init' => array(
         'type' => 'varchar',
         'length' => 64,
         'not null' => FALSE,
         'default' => '',
-        'description' => t('Email address used for initial account creation.'),
+        'description' => 'Email address used for initial account creation.',
       ),
       'data' => array(
         'type' => 'text',
         'not null' => FALSE,
         'size' => 'big',
-        'description' => t('A serialized array of name value pairs that are related to the user. Any form values posted during user edit are stored and are loaded into the $user object during user_load(). Use of this field is discouraged and it will likely disappear in a future version of Drupal.'),
+        'description' => 'A serialized array of name value pairs that are related to the user. Any form values posted during user edit are stored and are loaded into the $user object during user_load(). Use of this field is discouraged and it will likely disappear in a future version of Drupal.',
       ),
     ),
     'indexes' => array(
@@ -262,21 +262,21 @@ function user_schema() {
   );
 
   $schema['users_roles'] = array(
-    'description' => t('Maps users to roles.'),
+    'description' => 'Maps users to roles.',
     'fields' => array(
       'uid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Primary Key: {users}.uid for user.'),
+        'description' => 'Primary Key: {users}.uid for user.',
       ),
       'rid' => array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
-        'description' => t('Primary Key: {role}.rid for role.'),
+        'description' => 'Primary Key: {role}.rid for role.',
       ),
     ),
     'primary key' => array('uid', 'rid'),
diff --git a/modules/user/user.module b/modules/user/user.module
index 34d7377..3ca3e5b 100644
--- a/modules/user/user.module
+++ b/modules/user/user.module
@@ -270,7 +270,9 @@ function user_save($account, $array = array(), $category = 'account') {
     // the current one.
     if (!empty($array['pass'])) {
       sess_destroy_uid($account->uid);
-      sess_regenerate();
+      if ($account->uid == $GLOBALS['user']->uid) {
+        sess_regenerate();
+      }
     }
 
     // Refresh user object.
@@ -1532,6 +1534,7 @@ function user_edit_form(&$form_state, $uid, $edit, $register = FALSE) {
       $form['picture']['picture_delete'] = array('#type' => 'hidden');
     }
     $form['picture']['picture_upload'] = array('#type' => 'file', '#title' => t('Upload picture'), '#size' => 48, '#description' => t('Your virtual face or picture. Maximum dimensions are %dimensions and the maximum size is %size kB.', array('%dimensions' => variable_get('user_picture_dimensions', '85x85'), '%size' => variable_get('user_picture_file_size', '30'))) .' '. variable_get('user_picture_guidelines', ''));
+    $form['#validate'][] = 'user_profile_form_validate';
     $form['#validate'][] = 'user_validate_picture';
   }
   $form['#uid'] = $uid;
