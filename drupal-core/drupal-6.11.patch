diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index b31bc66..72a6e18 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,5 +1,13 @@
 // $Id$
 
+Drupal 6.11, 2009-04-29
+----------------------
+- Fixed security issues (Cross site scripting and limited information
+  disclosure), see SA-CORE-2009-005
+- Fixed performance issues with the menu router cache, the update
+  status cache and improved cache invalidation
+- Fixed a variety of small bugs.
+
 Drupal 6.10, 2009-02-25
 ----------------------
 - Fixed a security issue, (Local file inclusion on Windows),
@@ -173,6 +181,16 @@ Drupal 6.0, 2008-02-13
 - Removed old system updates. Updates from Drupal versions prior to 5.x will
   require upgrading to 5.x before upgrading to 6.x.
 
+Drupal 5.17, 2009-04-29
+-----------------------
+- Fixed security issues (Cross site scripting and limited information disclosure) see SA-CORE-2009-005.
+- Fixed a variety of small bugs.
+
+Drupal 5.16, 2009-02-25
+-----------------------
+- Fixed a security issue, (Local file inclusion on Windows), see SA-CORE-2009-004.
+- Fixed a variety of small bugs.
+
 Drupal 5.15, 2009-01-14
 ----------------------
 - Fixed security issues, (Hardening against SQL injection), see SA-CORE-2009-001
diff --git a/MAINTAINERS.txt b/MAINTAINERS.txt
index 4f1c6f3..9e68124 100644
--- a/MAINTAINERS.txt
+++ b/MAINTAINERS.txt
@@ -72,7 +72,6 @@ S: maintained
 
 UPDATE MODULE
 M: Derek Wright <http://drupal.org/user/46549/contact>
-   Earl Miles <http://drupal.org/user/26979/contact>
 S: maintained
 
 XML-RPC SERVER/CLIENT
diff --git a/includes/bootstrap.inc b/includes/bootstrap.inc
index 49aa63e..f2f61a4 100644
--- a/includes/bootstrap.inc
+++ b/includes/bootstrap.inc
@@ -791,6 +791,8 @@ function request_uri() {
       $uri = $_SERVER['SCRIPT_NAME'];
     }
   }
+  // Prevent multiple slashes to avoid cross site requests via the FAPI.
+  $uri = '/'. ltrim($uri, '/');
 
   return $uri;
 }
diff --git a/includes/cache.inc b/includes/cache.inc
index 9fe7602..bd21c8e 100644
--- a/includes/cache.inc
+++ b/includes/cache.inc
@@ -15,10 +15,10 @@ function cache_get($cid, $table = 'cache') {
   global $user;
 
   // Garbage collection necessary when enforcing a minimum cache lifetime
-  $cache_flush = variable_get('cache_flush', 0);
+  $cache_flush = variable_get('cache_flush_'. $table, 0);
   if ($cache_flush && ($cache_flush + variable_get('cache_lifetime', 0) <= time())) {
     // Reset the variable immediately to prevent a meltdown in heavy load situations.
-    variable_set('cache_flush', 0);
+    variable_set('cache_flush_'. $table, 0);
     // Time to flush old cache data
     db_query("DELETE FROM {". $table ."} WHERE expire != %d AND expire <= %d", CACHE_PERMANENT, $cache_flush);
   }
@@ -149,16 +149,16 @@ function cache_clear_all($cid = NULL, $table = NULL, $wildcard = FALSE) {
       // cached data that was cached before the timestamp.
       $user->cache = time();
 
-      $cache_flush = variable_get('cache_flush', 0);
+      $cache_flush = variable_get('cache_flush_'. $table, 0);
       if ($cache_flush == 0) {
         // This is the first request to clear the cache, start a timer.
-        variable_set('cache_flush', time());
+        variable_set('cache_flush_'. $table, time());
       }
       else if (time() > ($cache_flush + variable_get('cache_lifetime', 0))) {
         // Clear the cache for everyone, cache_flush_delay seconds have
         // passed since the first request to clear the cache.
         db_query("DELETE FROM {". $table ."} WHERE expire != %d AND expire < %d", CACHE_PERMANENT, time());
-        variable_set('cache_flush', 0);
+        variable_set('cache_flush_'. $table, 0);
       }
     }
     else {
diff --git a/includes/common.inc b/includes/common.inc
index 22ac3b2..ed8ebab 100644
--- a/includes/common.inc
+++ b/includes/common.inc
@@ -152,6 +152,15 @@ function drupal_get_headers() {
 }
 
 /**
+ * Make any final alterations to the rendered xhtml.
+ */
+function drupal_final_markup($content) {
+  // Make sure that the charset is always specified as the first element of the
+  // head region to prevent encoding-based attacks.
+  return preg_replace('/<head[^>]*>/i', "\$0\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />", $content, 1);
+}
+
+/**
  * Add a feed URL for the current page.
  *
  * @param $url
diff --git a/includes/database.pgsql.inc b/includes/database.pgsql.inc
index eda55cb..7149ef1 100644
--- a/includes/database.pgsql.inc
+++ b/includes/database.pgsql.inc
@@ -474,7 +474,7 @@ function db_type_map() {
     'blob:big' => 'bytea',
     'blob:normal' => 'bytea',
 
-    'datetime:normal' => 'timestamp',
+    'datetime:normal' => 'timestamp without time zone',
 
     'serial:tiny' => 'serial',
     'serial:small' => 'serial',
diff --git a/includes/file.inc b/includes/file.inc
index 8f266e1..d2679e3 100644
--- a/includes/file.inc
+++ b/includes/file.inc
@@ -463,8 +463,8 @@ function file_space_used($uid = NULL) {
  * @param $validators
  *   An optional, associative array of callback functions used to validate the
  *   file. The keys are function names and the values arrays of callback
- *   parameters which will be passed in after the user and file objects. The
- *   functions should return an array of error messages, an empty array
+ *   parameters which will be passed in after the file object. The
+ *   functions should return an array of error messages; an empty array
  *   indicates that the file passed validation. The functions will be called in
  *   the order specified.
  * @param $dest
diff --git a/includes/form.inc b/includes/form.inc
index 747cdb0..3e48dcb 100644
--- a/includes/form.inc
+++ b/includes/form.inc
@@ -624,6 +624,12 @@ function drupal_redirect_form($form, $redirect = NULL) {
   }
   if (!isset($goto) || ($goto !== FALSE)) {
     if (isset($goto)) {
+      // Remove any fake destination set by drupal_not_found() or
+      // drupal_access_denied() so that we can properly redirect from those
+      // pages.
+      if (isset($_REQUEST['destination']) && $_REQUEST['destination'] == $_GET['q']) {
+        unset($_REQUEST['destination']);
+      }
       if (is_array($goto)) {
         call_user_func_array('drupal_goto', $goto);
       }
@@ -756,7 +762,10 @@ function form_execute_handlers($type, &$form, &$form_state) {
 
   foreach ($handlers as $function) {
     if (function_exists($function))  {
-      if ($type == 'submit' && ($batch =& batch_get())) {
+      // Check to see if a previous _submit handler has set a batch, but 
+      // make sure we do not react to a batch that is already being processed 
+      // (for instance if a batch operation performs a drupal_execute()).
+      if ($type == 'submit' && ($batch =& batch_get()) && !isset($batch['current_set'])) {
         // Some previous _submit handler has set a batch. We store the call
         // in a special 'control' batch set, for execution at the correct
         // time during the batch processing workflow.
diff --git a/includes/locale.inc b/includes/locale.inc
index 3c05efa..e46eb3d 100644
--- a/includes/locale.inc
+++ b/includes/locale.inc
@@ -2433,7 +2433,7 @@ function _locale_get_predefined_list() {
     "se" => array("Northern Sami"),
     "sg" => array("Sango"),
     "sh" => array("Serbo-Croatian"),
-    "si" => array("Singhalese"),
+    "si" => array("Sinhala", "සිංහල"),
     "sk" => array("Slovak", "Slovenčina"),
     "sl" => array("Slovenian", "Slovenščina"),
     "sm" => array("Samoan"),
diff --git a/includes/mail.inc b/includes/mail.inc
index 81ccd8e..84f6450 100644
--- a/includes/mail.inc
+++ b/includes/mail.inc
@@ -70,7 +70,7 @@
  * @param $params
  *   Optional parameters to build the e-mail.
  * @param $from
- *   Sets From, Reply-To, Return-Path and Error-To to this value, if given.
+ *   Sets From to this value, if given.
  * @param $send
  *   Send the message directly, without calling drupal_mail_send() manually.
  * @return
@@ -105,10 +105,10 @@ function drupal_mail($module, $key, $to, $language, $params = array(), $from = N
     // To prevent e-mail from looking like spam, the addresses in the Sender and
     // Return-Path headers should have a domain authorized to use the originating
     // SMTP server. Errors-To is redundant, but shouldn't hurt.
-    $headers['From'] = $headers['Reply-To'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $default_from;
+    $headers['From'] = $headers['Sender'] = $headers['Return-Path'] = $headers['Errors-To'] = $default_from;
   }
   if ($from) {
-    $headers['From'] = $headers['Reply-To'] = $from;
+    $headers['From'] = $from;
   }
   $message['headers'] = $headers;
 
@@ -132,7 +132,7 @@ function drupal_mail($module, $key, $to, $language, $params = array(), $from = N
     // Log errors
     if (!$message['result']) {
       watchdog('mail', 'Error sending e-mail (from %from to %to).', array('%from' => $message['from'], '%to' => $message['to']), WATCHDOG_ERROR);
-      drupal_set_message(t('Unable to send e-mail. Please contact the site admin, if the problem persists.'), 'error');
+      drupal_set_message(t('Unable to send e-mail. Please contact the site administrator if the problem persists.'), 'error');
     }
   }
 
diff --git a/includes/menu.inc b/includes/menu.inc
index d69fb8a..36c95cc 100644
--- a/includes/menu.inc
+++ b/includes/menu.inc
@@ -482,9 +482,13 @@ function _menu_check_access(&$item, $map) {
 function _menu_item_localize(&$item, $map, $link_translate = FALSE) {
   $callback = $item['title_callback'];
   $item['localized_options'] = $item['options'];
-  // If we are not doing link translation or if the title matches the
-  // link title of its router item, localize it.
-  if (!$link_translate || (!empty($item['title']) && ($item['title'] == $item['link_title']))) {
+  // If we are translating the title of a menu link, and its title is the same
+  // as the corresponding router item, then we can use the title information
+  // from the router. If it's customized, then we need to use the link title
+  // itself; can't localize.
+  // If we are translating a router item (tabs, page, breadcrumb), then we
+  // can always use the information from the router item.
+  if (!$link_translate || ($item['title'] == $item['link_title'])) {
     // t() is a special case. Since it is used very close to all the time,
     // we handle it directly instead of using indirect, slower methods.
     if ($callback == 't') {
@@ -963,6 +967,11 @@ function _menu_tree_cid($menu_name, $data) {
 
 /**
  * Recursive helper function - collect node links.
+ *
+ * @param $tree
+ *   The menu tree you wish to collect node links from.
+ * @param $node_links
+ *   An array in which to store the collected node links.
  */
 function menu_tree_collect_node_links(&$tree, &$node_links) {
   foreach ($tree as $key => $v) {
@@ -981,6 +990,12 @@ function menu_tree_collect_node_links(&$tree, &$node_links) {
 
 /**
  * Check access and perform other dynamic operations for each link in the tree.
+ *
+ * @param $tree
+ *   The menu tree you wish to operate on.
+ * @param $node_links
+ *   A collection of node link references generated from $tree by
+ *   menu_tree_collect_node_links().
  */
 function menu_tree_check_access(&$tree, $node_links = array()) {
 
@@ -1655,10 +1670,10 @@ function menu_cache_clear_all() {
  */
 function menu_rebuild() {
   variable_del('menu_rebuild_needed');
-  menu_cache_clear_all();
   $menu = menu_router_build(TRUE);
   _menu_navigation_links_rebuild($menu);
-  // Clear the page and block caches.
+  // Clear the menu, page and block caches.
+  menu_cache_clear_all();
   _menu_clear_page_cache();
   if (defined('MAINTENANCE_MODE')) {
     variable_set('menu_rebuild_needed', TRUE);
@@ -1672,26 +1687,34 @@ function menu_router_build($reset = FALSE) {
   static $menu;
 
   if (!isset($menu) || $reset) {
-    if (!$reset && ($cache = cache_get('router:', 'cache_menu')) && isset($cache->data)) {
-      $menu = $cache->data;
-    }
-    else {
-      // We need to manually call each module so that we can know which module
-      // a given item came from.
-      $callbacks = array();
-      foreach (module_implements('menu') as $module) {
-        $router_items = call_user_func($module .'_menu');
-        if (isset($router_items) && is_array($router_items)) {
-          foreach (array_keys($router_items) as $path) {
-            $router_items[$path]['module'] = $module;
-          }
-          $callbacks = array_merge($callbacks, $router_items);
+    // We need to manually call each module so that we can know which module
+    // a given item came from.
+    $callbacks = array();
+    foreach (module_implements('menu') as $module) {
+      $router_items = call_user_func($module .'_menu');
+      if (isset($router_items) && is_array($router_items)) {
+        foreach (array_keys($router_items) as $path) {
+          $router_items[$path]['module'] = $module;
         }
+        $callbacks = array_merge($callbacks, $router_items);
       }
-      // Alter the menu as defined in modules, keys are like user/%user.
-      drupal_alter('menu', $callbacks);
-      $menu = _menu_router_build($callbacks);
     }
+    // Alter the menu as defined in modules, keys are like user/%user.
+    drupal_alter('menu', $callbacks);
+    $menu = _menu_router_build($callbacks);
+    _menu_router_cache($menu);
+  }
+  return $menu;
+}
+
+/**
+ * Helper function to store the menu router if we have it in memory.
+ */
+function _menu_router_cache($new_menu = NULL) {
+  static $menu = NULL;
+
+  if (isset($new_menu)) {
+    $menu = $new_menu;
   }
   return $menu;
 }
@@ -1758,7 +1781,7 @@ function _menu_navigation_links_rebuild($menu) {
   // Updated and customized items whose router paths are gone need new ones.
   $result = db_query("SELECT ml.link_path, ml.mlid, ml.router_path, ml.updated FROM {menu_links} ml WHERE ml.updated = 1 OR (router_path NOT IN ($placeholders) AND external = 0 AND customized = 1)", $paths);
   while ($item = db_fetch_array($result)) {
-    $router_path = _menu_find_router_path($menu, $item['link_path']);
+    $router_path = _menu_find_router_path($item['link_path']);
     if (!empty($router_path) && ($router_path != $item['router_path'] || $item['updated'])) {
       // If the router path and the link path matches, it's surely a working
       // item, so we clear the updated flag.
@@ -1841,8 +1864,10 @@ function _menu_delete_item($item, $force = FALSE) {
  *   saved.
  */
 function menu_link_save(&$item) {
-  $menu = menu_router_build();
 
+  // Get the router if it's already in memory. $menu will be NULL, unless this
+  // is during a menu rebuild
+  $menu = _menu_router_cache();
   drupal_alter('menu_link', $item, $menu);
 
   // This is the easiest way to handle the unique internal path '<front>',
@@ -1960,7 +1985,7 @@ function menu_link_save(&$item) {
     else {
       // Find the router path which will serve this path.
       $item['parts'] = explode('/', $item['link_path'], MENU_MAX_PARTS);
-      $item['router_path'] = _menu_find_router_path($menu, $item['link_path']);
+      $item['router_path'] = _menu_find_router_path($item['link_path']);
     }
   }
   db_query("UPDATE {menu_links} SET menu_name = '%s', plid = %d, link_path = '%s',
@@ -2021,25 +2046,35 @@ function _menu_set_expanded_menus() {
 /**
  * Find the router path which will serve this path.
  *
- * @param $menu
- *  The full built menu.
  * @param $link_path
  *  The path for we are looking up its router path.
  * @return
  *  A path from $menu keys or empty if $link_path points to a nonexisting
  *  place.
  */
-function _menu_find_router_path($menu, $link_path) {
-  $parts = explode('/', $link_path, MENU_MAX_PARTS);
+function _menu_find_router_path($link_path) {
+  // $menu will only have data during a menu rebuild.
+  $menu = _menu_router_cache();
+
   $router_path = $link_path;
-  if (!isset($menu[$router_path])) {
-    list($ancestors) = menu_get_ancestors($parts);
+  $parts = explode('/', $link_path, MENU_MAX_PARTS);
+  list($ancestors, $placeholders) = menu_get_ancestors($parts);
+
+  if (empty($menu)) {
+    // Not during a menu rebuild, so look up in the database.
+    $router_path = (string)db_result(db_query_range('SELECT path FROM {menu_router} WHERE path IN ('. implode (',', $placeholders) .') ORDER BY fit DESC', $ancestors, 0, 1));
+  }
+  elseif (!isset($menu[$router_path])) {
+    // Add an empty path as a fallback.
     $ancestors[] = '';
     foreach ($ancestors as $key => $router_path) {
       if (isset($menu[$router_path])) {
+        // Exit the loop leaving $router_path as the first match.
         break;
       }
     }
+    // If we did not find the path, $router_path will be the empty string
+    // at the end of $ancestors.
   }
   return $router_path;
 }
@@ -2391,7 +2426,7 @@ function _menu_router_build($callbacks) {
   $masks = array_keys($masks);
   rsort($masks);
   variable_set('menu_masks', $masks);
-  cache_set('router:', $menu, 'cache_menu');
+
   return $menu;
 }
 
diff --git a/includes/theme.inc b/includes/theme.inc
index dac0371..cfa4ad3 100644
--- a/includes/theme.inc
+++ b/includes/theme.inc
@@ -687,6 +687,10 @@ function theme() {
   }
   // restore path_to_theme()
   $theme_path = $temp;
+  // Add final markup to the full page.
+  if ($hook == 'page') {
+    $output = drupal_final_markup($output);
+  }
   return $output;
 }
 
@@ -698,11 +702,16 @@ function theme() {
 function drupal_discover_template($paths, $suggestions, $extension = '.tpl.php') {
   global $theme_engine;
 
+  // Remove slashes or null to prevent files from being included from
+  // an unexpected location (especially on Windows servers).
+  $extension = str_replace(array("/", "\\", "\0"), '', $extension);
+
   // Loop through all paths and suggestions in FIFO order.
   $suggestions = array_reverse($suggestions);
   $paths = array_reverse($paths);
   foreach ($suggestions as $suggestion) {
     if (!empty($suggestion)) {
+      $suggestion = str_replace(array("/", "\\", "\0"), '', $suggestion);
       foreach ($paths as $path) {
         if (file_exists($file = $path .'/'. $suggestion . $extension)) {
           return $file;
@@ -1868,7 +1877,7 @@ function template_preprocess_page(&$variables) {
   $suggestion = 'page';
   $suggestions = array();
   while ($arg = arg($i++)) {
-    $arg = str_replace(array('/', '\\', '\0'), '', $arg);
+    $arg = str_replace(array("/", "\\", "\0"), '', $arg);
     $suggestions[] = $suggestion .'-'. $arg;
     if (!is_numeric($arg)) {
       $suggestion .= '-'. $arg;
diff --git a/install.php b/install.php
index fda7d4e..3917339 100644
--- a/install.php
+++ b/install.php
@@ -257,7 +257,6 @@ function install_settings_form(&$form_state, $profile, $install_locale, $setting
       '#title' => st('Database name'),
       '#default_value' => $db_path,
       '#size' => 45,
-      '#maxlength' => 45,
       '#required' => TRUE,
       '#description' => $db_path_description
     );
@@ -268,7 +267,6 @@ function install_settings_form(&$form_state, $profile, $install_locale, $setting
       '#title' => st('Database username'),
       '#default_value' => $db_user,
       '#size' => 45,
-      '#maxlength' => 45,
       '#required' => TRUE,
     );
 
@@ -278,7 +276,6 @@ function install_settings_form(&$form_state, $profile, $install_locale, $setting
       '#title' => st('Database password'),
       '#default_value' => $db_pass,
       '#size' => 45,
-      '#maxlength' => 45,
     );
 
     $form['advanced_options'] = array(
@@ -295,7 +292,8 @@ function install_settings_form(&$form_state, $profile, $install_locale, $setting
       '#title' => st('Database host'),
       '#default_value' => $db_host,
       '#size' => 45,
-      '#maxlength' => 45,
+      // Hostnames can be 255 characters long.
+      '#maxlength' => 255,
       '#required' => TRUE,
       '#description' => st('If your database is located on a different server, change this.'),
     );
@@ -306,7 +304,8 @@ function install_settings_form(&$form_state, $profile, $install_locale, $setting
       '#title' => st('Database port'),
       '#default_value' => $db_port,
       '#size' => 45,
-      '#maxlength' => 45,
+      // The maximum port number is 65536, 5 digits.
+      '#maxlength' => 5,
       '#description' => st('If your database server is listening to a non-standard port, enter its number.'),
     );
 
@@ -317,7 +316,6 @@ function install_settings_form(&$form_state, $profile, $install_locale, $setting
       '#title' => st('Table prefix'),
       '#default_value' => $db_prefix,
       '#size' => 45,
-      '#maxlength' => 45,
       '#description' => st('If more than one application will be sharing this database, enter a table prefix such as %prefix for your @drupal site here.', array('@drupal' => drupal_install_profile_name(), '%prefix' => $prefix)),
     );
 
diff --git a/misc/tableheader.js b/misc/tableheader.js
index a3064fb..9931c17 100644
--- a/misc/tableheader.js
+++ b/misc/tableheader.js
@@ -70,8 +70,12 @@ Drupal.behaviors.tableHeader = function (context) {
     // Get the height of the header table and scroll up that amount.
     if (prevAnchor != location.hash) {
       if (location.hash != '') {
-        var scrollLocation = $('td'+ location.hash).offset().top - $(e).height();
-        $('body, html').scrollTop(scrollLocation);
+        var offset = $('td' + location.hash).offset();
+        if (offset) {
+          var top = offset.top;
+          var scrollLocation = top - $(e).height();
+          $('body, html').scrollTop(scrollLocation);
+        }
       }
       prevAnchor = location.hash;
     }
diff --git a/modules/aggregator/aggregator.module b/modules/aggregator/aggregator.module
index 7652720..91b509f 100644
--- a/modules/aggregator/aggregator.module
+++ b/modules/aggregator/aggregator.module
@@ -390,7 +390,7 @@ function aggregator_save_category($edit) {
   else if (!empty($edit['title'])) {
     // A single unique id for bundles and feeds, to use in blocks
     db_query("INSERT INTO {aggregator_category} (title, description, block) VALUES ('%s', '%s', 5)", $edit['title'], $edit['description']);
-    $link_path .= db_last_insert_id('aggregator', 'cid');
+    $link_path .= db_last_insert_id('aggregator_category', 'cid');
     $op = 'insert';
   }
   if (isset($op)) {
diff --git a/modules/comment/comment.module b/modules/comment/comment.module
index 791bd5d..39a40ff 100644
--- a/modules/comment/comment.module
+++ b/modules/comment/comment.module
@@ -1051,7 +1051,9 @@ function comment_render($node, $cid = 0) {
       $output .= comment_form_box(array('nid' => $nid), t('Post new comment'));
     }
 
-    $output = theme('comment_wrapper', $output, $node);
+    if ($output) {
+      $output = theme('comment_wrapper', $output, $node);
+    }
   }
 
   return $output;
@@ -1523,7 +1525,7 @@ function _comment_form_submit(&$comment_values) {
     // 2) Strip out all HTML tags
     // 3) Convert entities back to plain-text.
     // Note: format is checked by check_markup().
-    $comment_values['subject'] = trim(truncate_utf8(decode_entities(strip_tags(check_markup($comment_values['comment'], $comment_values['format']))), 29, TRUE));
+    $comment_values['subject'] = truncate_utf8(trim(decode_entities(strip_tags(check_markup($comment_values['comment'], $comment_values['format'])))), 29, TRUE);
     // Edge cases where the comment body is populated only by HTML tags will
     // require a default subject.
     if ($comment_values['subject'] == '') {
diff --git a/modules/contact/contact.pages.inc b/modules/contact/contact.pages.inc
index 82d1bb9..ac85174 100644
--- a/modules/contact/contact.pages.inc
+++ b/modules/contact/contact.pages.inc
@@ -177,11 +177,11 @@ function contact_mail_user(&$form_state, $recipient) {
   $form['recipient'] = array('#type' => 'value', '#value' => $recipient);
   $form['from'] = array('#type' => 'item',
     '#title' => t('From'),
-    '#value' => check_plain($user->name) .' &lt;'. check_plain($user->mail) .'&gt;',
+    '#value' => theme('username', $user) .' &lt;'. check_plain($user->mail) .'&gt;',
   );
   $form['to'] = array('#type' => 'item',
     '#title' => t('To'),
-    '#value' => check_plain($recipient->name),
+    '#value' => theme('username', $recipient),
   );
   $form['subject'] = array('#type' => 'textfield',
     '#title' => t('Subject'),
diff --git a/modules/forum/forum.module b/modules/forum/forum.module
index 6dbd62d..46e0e1e 100644
--- a/modules/forum/forum.module
+++ b/modules/forum/forum.module
@@ -468,19 +468,11 @@ function forum_form(&$node, $form_state) {
   return $form;
 }
 
-function forum_link_alter(&$links, $node) {
-  foreach ($links as $module => $link) {
-    if (strstr($module, 'taxonomy_term')) {
-      // Link back to the forum and not the taxonomy term page. We'll only
-      // do this if the taxonomy term in question belongs to forums.
-      $tid = str_replace('taxonomy/term/', '', $link['href']);
-      $vid = variable_get('forum_nav_vocabulary', '');
-      $term = taxonomy_get_term($tid);
-      if ($term->vid == $vid) {
-        $links[$module]['href'] = str_replace('taxonomy/term', 'forum', $link['href']);
-      }
-    }
-  }
+/**
+ * Implementation of hook_term_path().
+ */
+function forum_term_path($term) {
+  return 'forum/'. $term->tid;
 }
 
 /**
diff --git a/modules/menu/menu.module b/modules/menu/menu.module
index 85f0fbe..7d7379b 100644
--- a/modules/menu/menu.module
+++ b/modules/menu/menu.module
@@ -256,8 +256,7 @@ function _menu_parents_recurse($tree, $menu_name, $indent, &$options, $exclude,
  * Reset a system-defined menu item.
  */
 function menu_reset_item($item) {
-  $router = menu_router_build();
-  $new_item = _menu_link_build($router[$item['router_path']]);
+  $new_item = _menu_link_build(menu_get_item($item['router_path']));
   foreach (array('mlid', 'has_children') as $key) {
     $new_item[$key] = $item[$key];
   }
diff --git a/modules/node/content_types.inc b/modules/node/content_types.inc
index 6a064f7..99a474d 100644
--- a/modules/node/content_types.inc
+++ b/modules/node/content_types.inc
@@ -135,7 +135,7 @@ function node_type_form(&$form_state, $type = NULL) {
     '#type' => 'select',
     '#title' => t('Minimum number of words'),
     '#default_value' => $type->min_word_count,
-    '#options' => drupal_map_assoc(array(0, 10, 25, 50, 75, 100, 125, 150, 175, 200)),
+    '#options' => drupal_map_assoc(array(0, 1, 10, 25, 50, 75, 100, 125, 150, 175, 200)),
     '#description' => t('The minimum number of words for the body field to be considered valid for this content type. This can be useful to rule out submissions that do not meet the site\'s standards, such as short test posts.')
   );
   $form['submission']['help']  = array(
diff --git a/modules/node/node.pages.inc b/modules/node/node.pages.inc
index 8fa8cb7..3a65010 100644
--- a/modules/node/node.pages.inc
+++ b/modules/node/node.pages.inc
@@ -79,6 +79,8 @@ function node_object_prepare(&$node) {
   }
   else {
     $node->date = format_date($node->created, 'custom', 'Y-m-d H:i:s O');
+    // Remove the log message from the original node object.
+    $node->log = NULL;
   }
   // Always use the default revision setting.
   $node->revision = in_array('revision', $node_options);
@@ -159,6 +161,7 @@ function node_form(&$form_state, $node) {
     $form['revision_information']['log'] = array(
       '#type' => 'textarea',
       '#title' => t('Log message'),
+      '#default_value' => (isset($node->log) ? $node->log : ''),
       '#rows' => 2,
       '#description' => t('An explanation of the additions or updates being made to help other authors understand your motivations.'),
     );
diff --git a/modules/openid/openid.css b/modules/openid/openid.css
index 5a05d63..844696f 100644
--- a/modules/openid/openid.css
+++ b/modules/openid/openid.css
@@ -6,38 +6,35 @@
   background-repeat: no-repeat;
   padding-left: 20px;
 }
-
 div#edit-openid-identifier-wrapper {
   display: block;
 }
-
 html.js #user-login-form div#edit-openid-identifier-wrapper,
 html.js #user-login div#edit-openid-identifier-wrapper {
   display: none;
 }
-
 html.js #user-login-form li.openid-link,
 html.js #user-login li.openid-link {
   display : block;
+  list-style: none;
 }
-
 #user-login-form ul {
   margin-top: 0;
 }
-
+#user-login ul {
+  margin: 0 0 5px;
+}
+#user-login ul li {
+  margin: 0;
+}
 #user-login-form li.openid-link,
 #user-login-form li.user-link,
 #user-login li.openid-link,
 #user-login li.user-link {
   display: none;
 }
-
-#user-login-form li.openid-link,
-#user-login-form li.user-link {
-  text-align : left;
-}
-
-#user-login-form li.openid-link,
-#user-login li.openid-link {
-  background: transparent url(login-bg.png) no-repeat scroll 1px 0.35em;
-}
+#user-login-form li.openid-link a, 
+#user-login li.openid-link a {
+  background: transparent url("login-bg.png") no-repeat 0 2px;
+  padding: 0 20px;
+}
\ No newline at end of file
diff --git a/modules/openid/openid.module b/modules/openid/openid.module
index 4dc835a..3de00f1 100644
--- a/modules/openid/openid.module
+++ b/modules/openid/openid.module
@@ -43,8 +43,7 @@ function openid_menu() {
  */
 function openid_help($path, $arg) {
   switch ($path) {
-
-  case 'user/%/openid':
+    case 'user/%/openid':
       $output = '<p>'. t('This site supports <a href="@openid-net">OpenID</a>, a secure way to log into many websites using a single username and password. OpenID can reduce the necessity of managing many usernames and passwords for many websites.', array('@openid-net' => url('http://openid.net'))) .'</p>';
       $output .= '<p>'. t('To use OpenID you must first establish an identity on a public or private OpenID server. If you do not have an OpenID and would like one, look into one of the <a href="@openid-providers">free public providers</a>. You can find out more about OpenID at <a href="@openid-net">this website</a>.', array('@openid-providers' => url('http://openid.net/wiki/index.php/OpenIDServers'), '@openid-net' => url('http://openid.net'))) .'</p>';
       $output .= '<p>'. t('If you already have an OpenID, enter the URL to your OpenID server below (e.g. myusername.openidprovider.com). Next time you login, you will be able to use this URL instead of a regular username and password. You can have multiple OpenID servers if you like; just keep adding them here.') .'</p>';
diff --git a/modules/search/search.module b/modules/search/search.module
index 47721ae..0fb8509 100644
--- a/modules/search/search.module
+++ b/modules/search/search.module
@@ -640,6 +640,7 @@ function search_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
       if (count($output)) {
         return '<a>('. implode(', ', $output) .')</a>';
       }
+      break;
     // Reindex the node when it is updated.  The node is automatically indexed
     // when it is added, simply by being added to the node table.
     case 'update':
diff --git a/modules/statistics/statistics.module b/modules/statistics/statistics.module
index 1242e97..eb69d65 100644
--- a/modules/statistics/statistics.module
+++ b/modules/statistics/statistics.module
@@ -79,7 +79,7 @@ function statistics_link($type, $node = NULL, $teaser = FALSE) {
   global $id;
   $links = array();
 
-  if ($type != 'comment' && user_access('view post access counter')) {
+  if ($type == 'node' && user_access('view post access counter')) {
     $statistics = statistics_get($node->nid);
     if ($statistics) {
       $links['statistics_counter']['title'] = format_plural($statistics['totalcount'], '1 read', '@count reads');
diff --git a/modules/statistics/statistics.pages.inc b/modules/statistics/statistics.pages.inc
index 84dca6d..db94129 100644
--- a/modules/statistics/statistics.pages.inc
+++ b/modules/statistics/statistics.pages.inc
@@ -15,7 +15,7 @@ function statistics_node_tracker() {
         array('data' => t('User'), 'field' => 'u.name'),
         array('data' => t('Operations')));
 
-    $result = pager_query('SELECT a.aid, a.timestamp, a.url, a.uid, u.name FROM {accesslog} a LEFT JOIN {users} u ON a.uid = u.uid WHERE a.path LIKE \'node/%d%%\''. tablesort_sql($header), 30, 0, NULL, $node->nid);
+    $result = pager_query("SELECT a.aid, a.timestamp, a.url, a.uid, u.name FROM {accesslog} a LEFT JOIN {users} u ON a.uid = u.uid WHERE a.path = 'node/%d' OR a.path LIKE 'node/%d/%%'". tablesort_sql($header), 30, 0, NULL, $node->nid, $node->nid);
     $rows = array();
     while ($log = db_fetch_object($result)) {
       $rows[] = array(
diff --git a/modules/system/maintenance-page.tpl.php b/modules/system/maintenance-page.tpl.php
index e29f2cb..4e4e409 100644
--- a/modules/system/maintenance-page.tpl.php
+++ b/modules/system/maintenance-page.tpl.php
@@ -19,8 +19,8 @@
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>">
 
 <head>
-  <title><?php print $head_title; ?></title>
   <?php print $head; ?>
+  <title><?php print $head_title; ?></title>
   <?php print $styles; ?>
   <?php print $scripts; ?>
   <script type="text/javascript"><?php /* Needed to avoid Flash of Unstyled Content in IE */ ?> </script>
diff --git a/modules/system/page.tpl.php b/modules/system/page.tpl.php
index 95a53db..d4cfe92 100644
--- a/modules/system/page.tpl.php
+++ b/modules/system/page.tpl.php
@@ -80,8 +80,8 @@
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>">
 
 <head>
-  <title><?php print $head_title; ?></title>
   <?php print $head; ?>
+  <title><?php print $head_title; ?></title>
   <?php print $styles; ?>
   <?php print $scripts; ?>
   <script type="text/javascript"><?php /* Needed to avoid Flash of Unstyled Content in IE */ ?> </script>
diff --git a/modules/system/system.install b/modules/system/system.install
index e20442a..7ef4f1d 100644
--- a/modules/system/system.install
+++ b/modules/system/system.install
@@ -2526,6 +2526,15 @@ function system_update_6047() {
 }
 
 /**
+ * @} End of "defgroup updates-5.x-to-6.x"
+ */
+
+/**
+ * @defgroup updates-6.x-extra Extra system updates for 6.x
+ * @{
+ */
+
+/**
 * Increase the size of the 'load_functions' and 'to_arg_functions' fields in table 'menu_router'.
 */
 function system_update_6048() {
@@ -2536,7 +2545,6 @@ function system_update_6048() {
   return $ret;
 }
 
-
 /**
  * Replace src index on the {url_alias} table with src, language.
  */
@@ -2548,6 +2556,16 @@ function system_update_6049() {
 }
 
 /**
- * @} End of "defgroup updates-5.x-to-6.x"
+ * Clear any menu router blobs stored in the cache table.
+ */
+function system_update_6050() {
+  $ret = array();
+  cache_clear_all('router:', 'cache_menu', TRUE);
+  return $ret;
+}
+
+/**
+ * @} End of "defgroup updates-6.x-extra"
  * The next series of updates should start at 7000.
  */
+
diff --git a/modules/system/system.module b/modules/system/system.module
index 37ee7f9..0bc059b 100644
--- a/modules/system/system.module
+++ b/modules/system/system.module
@@ -9,7 +9,7 @@
 /**
  * The current system version.
  */
-define('VERSION', '6.10');
+define('VERSION', '6.11');
 
 /**
  * Core API compatibility.
diff --git a/modules/taxonomy/taxonomy.module b/modules/taxonomy/taxonomy.module
index e79c981..736b618 100644
--- a/modules/taxonomy/taxonomy.module
+++ b/modules/taxonomy/taxonomy.module
@@ -96,7 +96,6 @@ function taxonomy_link($type, $node = NULL) {
  * @return
  *   An internal Drupal path.
  */
-
 function taxonomy_term_path($term) {
   $vocabulary = taxonomy_vocabulary_load($term->vid);
   if ($vocabulary->module != 'taxonomy' && $path = module_invoke($vocabulary->module, 'term_path', $term)) {
@@ -1226,7 +1225,7 @@ function taxonomy_rss_item($node) {
   $output = array();
   foreach ($node->taxonomy as $term) {
     $output[] = array('key'   => 'category',
-                      'value' => check_plain($term->name),
+                      'value' => $term->name,
                       'attributes' => array('domain' => url('taxonomy/term/'. $term->tid, array('absolute' => TRUE))));
   }
   return $output;
diff --git a/modules/taxonomy/taxonomy.pages.inc b/modules/taxonomy/taxonomy.pages.inc
index fdc2b09..f272ef9 100644
--- a/modules/taxonomy/taxonomy.pages.inc
+++ b/modules/taxonomy/taxonomy.pages.inc
@@ -25,8 +25,8 @@ function taxonomy_term_page($str_tids = '', $depth = 0, $op = 'page') {
     }
 
     if ($names) {
-      $title = check_plain(implode(', ', $names));
-      drupal_set_title($title);
+      $title = implode(', ', $names);
+      drupal_set_title(check_plain($title));
 
       switch ($op) {
         case 'page':
diff --git a/modules/trigger/trigger.module b/modules/trigger/trigger.module
index d9d9793..a7df9dc 100644
--- a/modules/trigger/trigger.module
+++ b/modules/trigger/trigger.module
@@ -240,7 +240,7 @@ function trigger_nodeapi(&$node, $op, $a3, $a4) {
       }
       // Since we know about the node, we pass that info along to the action.
       $context['node'] = $node;
-      $result = actions_do($aid, $objects[$action_info['type']], $context, $a4, $a4);
+      $result = actions_do($aid, $objects[$action_info['type']], $context, $a3, $a4);
     }
     else {
       actions_do($aid, $node, $context, $a3, $a4);
diff --git a/modules/update/update.compare.inc b/modules/update/update.compare.inc
index 743a660..ec7b59a 100644
--- a/modules/update/update.compare.inc
+++ b/modules/update/update.compare.inc
@@ -16,9 +16,18 @@
  * that logic is only required when preparing the status report, not for
  * fetching the available release data.
  *
+ * This array is fairly expensive to construct, since it involves a lot of
+ * disk I/O, so we cache the results into the {cache_update} table using the
+ * 'update_project_projects' cache ID. However, since this is not the data
+ * about available updates fetched from the network, it is ok to invalidate it
+ * somewhat quickly. If we keep this data for very long, site administrators
+ * are more likely to see incorrect results if they upgrade to a newer version
+ * of a module or theme but do not visit certain pages that automatically
+ * clear this cache.
+ *
  * @see update_process_project_info()
  * @see update_calculate_project_data()
- *
+ * @see update_project_cache()
  */
 function update_get_projects() {
   static $projects = array();
@@ -29,8 +38,8 @@ function update_get_projects() {
       // Still empty, so we have to rebuild the cache.
       _update_process_info_list($projects, module_rebuild_cache(), 'module');
       _update_process_info_list($projects, system_theme_data(), 'theme');
-      // Set the projects array into the cache table.
-      cache_set('update_project_projects', $projects, 'cache_update', time() + 3600);
+      // Cache the site's project data for at most 1 hour.
+      _update_cache_set('update_project_projects', $projects, time() + 3600);
     }
   }
   return $projects;
@@ -223,12 +232,23 @@ function update_process_project_info(&$projects) {
  * version (e.g. 5.x-1.5-beta1, 5.x-1.5-beta2, and 5.x-1.5). Development
  * snapshots for a given major version are always listed last.
  *
+ * The results of this function are expensive to compute, especially on sites
+ * with lots of modules or themes, since it involves a lot of comparisons and
+ * other operations. Therefore, we cache the results into the {cache_update}
+ * table using the 'update_project_data' cache ID. However, since this is not
+ * the data about available updates fetched from the network, it is ok to
+ * invalidate it somewhat quickly. If we keep this data for very long, site
+ * administrators are more likely to see incorrect results if they upgrade to
+ * a newer version of a module or theme but do not visit certain pages that
+ * automatically clear this cache.
+ *
  * @param $available
  *  Array of data about available project releases.
  *
  * @see update_get_available()
  * @see update_get_projects()
  * @see update_process_project_info()
+ * @see update_project_cache()
  */
 function update_calculate_project_data($available) {
   // Retrieve the projects from cache, if present.
@@ -444,7 +464,7 @@ function update_calculate_project_data($available) {
 
         // If we're running a dev snapshot and have a timestamp, stop
         // searching for security updates once we hit an official release
-        // older than what we've got.  Allow 100 seconds of leeway to handle
+        // older than what we've got. Allow 100 seconds of leeway to handle
         // differences between the datestamp in the .info file and the
         // timestamp of the tarball itself (which are usually off by 1 or 2
         // seconds) so that we don't flag that as a new release.
@@ -550,8 +570,8 @@ function update_calculate_project_data($available) {
   // projects or releases).
   drupal_alter('update_status', $projects);
 
-  // Set the projects array into the cache table.
-  cache_set('update_project_data', $projects, 'cache_update', time() + 3600);
+  // Cache the site's update status for at most 1 hour.
+  _update_cache_set('update_project_data', $projects, time() + 3600);
   return $projects;
 }
 
@@ -567,6 +587,13 @@ function update_calculate_project_data($available) {
  * administration pages, since we should always recompute the most current
  * values on any of those pages.
  *
+ * Note: while both of these arrays are expensive to compute (in terms of disk
+ * I/O and some fairly heavy CPU processing), neither of these is the actual
+ * data about available updates that we have to fetch over the network from
+ * updates.drupal.org. That information is stored with the
+ * 'update_available_releases' cache ID -- it needs to persist longer than 1
+ * hour and never get invalidated just by visiting a page on the site.
+ *
  * @param $cid
  *   The cache id of data to return from the cache. Valid options are
  *   'update_project_data' and 'update_project_projects'.
@@ -579,15 +606,15 @@ function update_calculate_project_data($available) {
 function update_project_cache($cid) {
   $projects = array();
 
-  // In some cases, we must clear the cache.  Rather than do so on a time
-  // basis, we check for specific paths.
+  // On certain paths, we should clear the cache and recompute the projects or
+  // update status of the site to avoid presenting stale information.
   $q = $_GET['q'];
   $paths = array('admin/build/modules', 'admin/build/themes', 'admin/reports', 'admin/reports/updates', 'admin/reports/status', 'admin/reports/updates/check');
   if (in_array($q, $paths)) {
-    cache_clear_all($cid, 'cache_update');
+    _update_cache_clear($cid);
   }
   else {
-    $cache = cache_get($cid, 'cache_update');
+    $cache = _update_cache_get($cid);
     if (!empty($cache->data) && $cache->expire > time()) {
       $projects = $cache->data;
     }
diff --git a/modules/update/update.css b/modules/update/update.css
index d6895a5..ce0dcd6 100644
--- a/modules/update/update.css
+++ b/modules/update/update.css
@@ -56,6 +56,10 @@
   direction: ltr; /* Note: version numbers should always be LTR. */
 }
 
+.update tr.unknown {
+  background: #ddd;
+}
+
 table.update,
 .update table.version {
   width: 100%;
diff --git a/modules/update/update.fetch.inc b/modules/update/update.fetch.inc
index 8e66b74..da5146a 100644
--- a/modules/update/update.fetch.inc
+++ b/modules/update/update.fetch.inc
@@ -27,17 +27,24 @@ function _update_refresh() {
   module_load_include('inc', 'update', 'update.compare');
 
   // Since we're fetching new available update data, we want to clear
-  // everything in our cache, to ensure we recompute the status. Note that
-  // this does not cause update_get_projects() to be recomputed twice in the
-  // same page load (e.g. when manually checking) since that function stashes
-  // its answer in a static array.
-  update_invalidate_cache();
+  // our cache of both the projects we care about, and the current update
+  // status of the site. We do *not* want to clear the cache of available
+  // releases just yet, since that data (even if it's stale) can be useful
+  // during update_get_projects(); for example, to modules that implement
+  // hook_system_info_alter() such as cvs_deploy.
+  _update_cache_clear('update_project_projects');
+  _update_cache_clear('update_project_data');
 
   $available = array();
   $data = array();
   $site_key = md5($base_url . drupal_get_private_key());
   $projects = update_get_projects();
 
+  // Now that we have the list of projects, we should also clear our cache of
+  // available release data, since even if we fail to fetch new data, we need
+  // to clear out the stale data at this point.
+  _update_cache_clear('update_available_releases');
+  
   foreach ($projects as $key => $project) {
     $url = _update_build_fetch_url($project, $site_key);
     $xml = drupal_http_request($url);
@@ -52,7 +59,7 @@ function _update_refresh() {
   }
   if (!empty($available) && is_array($available)) {
     $frequency = variable_get('update_check_frequency', 1);
-    cache_set('update_info', $available, 'cache_update', time() + (60 * 60 * 24 * $frequency));
+    _update_cache_set('update_available_releases', $available, time() + (60 * 60 * 24 * $frequency));
     variable_set('update_last_check', time());
     watchdog('update', 'Fetched information about all available new releases and updates.', array(), WATCHDOG_NOTICE, l(t('view'), 'admin/reports/updates'));
   }
@@ -101,7 +108,7 @@ function _update_build_fetch_url($project, $site_key = '') {
  * Perform any notifications that should be done once cron fetches new data.
  *
  * This method checks the status of the site using the new data and depending
- * on the configuration of the site, notifys administrators via email if there
+ * on the configuration of the site, notifies administrators via email if there
  * are new releases or missing security updates.
  *
  * @see update_requirements()
@@ -110,10 +117,11 @@ function _update_cron_notify() {
   include_once './includes/install.inc';
   $status = update_requirements('runtime');
   $params = array();
+  $notify_all = (variable_get('update_notification_threshold', 'all') == 'all');
   foreach (array('core', 'contrib') as $report_type) {
     $type = 'update_'. $report_type;
     if (isset($status[$type]['severity'])
-        && $status[$type]['severity'] == REQUIREMENT_ERROR) {
+        && ($status[$type]['severity'] == REQUIREMENT_ERROR || ($notify_all && $status[$type]['reason'] == UPDATE_NOT_CURRENT))) {
       $params[$report_type] = $status[$type]['reason'];
     }
   }
diff --git a/modules/update/update.module b/modules/update/update.module
index 5aeb018..73d6c04 100644
--- a/modules/update/update.module
+++ b/modules/update/update.module
@@ -168,7 +168,7 @@ function update_theme() {
 }
 
 /**
- * Implementation of hook_requirements.
+ * Implementation of hook_requirements().
  *
  * @return
  *   An array describing the status of the site regarding available updates.
@@ -263,7 +263,7 @@ function _update_requirement_check($project, $type) {
       break;
     case UPDATE_NOT_CURRENT:
       $requirement_label = t('Out of date');
-      $requirement['severity'] = variable_get('update_notification_threshold', 'all') == 'all' ? REQUIREMENT_ERROR : REQUIREMENT_WARNING;
+      $requirement['severity'] = REQUIREMENT_WARNING;
       break;
     case UPDATE_UNKNOWN:
     case UPDATE_NOT_CHECKED:
@@ -286,9 +286,9 @@ function _update_requirement_check($project, $type) {
 function update_cron() {
   $frequency = variable_get('update_check_frequency', 1);
   $interval = 60 * 60 * 24 * $frequency;
-  // Cron should check for updates if there is no update data cached or if the configured
-  // update interval has elapsed.
-  if (!cache_get('update_info', 'cache_update') || ((time() - variable_get('update_last_check', 0)) > $interval)) {
+  // Cron should check for updates if there is no update data cached or if the
+  // configured update interval has elapsed.
+  if (!_update_cache_get('update_available_releases') || ((time() - variable_get('update_last_check', 0)) > $interval)) {
     update_refresh();
     _update_cron_notify();
   }
@@ -353,8 +353,7 @@ function update_get_available($refresh = FALSE) {
       break;
     }
   }
-  if (!$needs_refresh && ($cache = cache_get('update_info', 'cache_update'))
-       && $cache->expire > time()) {
+  if (!$needs_refresh && ($cache = _update_cache_get('update_available_releases')) && $cache->expire > time()) {
     $available = $cache->data;
   }
   elseif ($needs_refresh || $refresh) {
@@ -367,24 +366,6 @@ function update_get_available($refresh = FALSE) {
 }
 
 /**
- * Implementation of hook_flush_caches().
- *
- * The function update.php (among others) calls this hook to flush the caches.
- * Since we're running update.php, we are likely to install a new version of
- * something, in which case, we want to check for available update data again.
- */
-function update_flush_caches() {
-  return array('cache_update');
-}
-
-/**
- * Invalidates any cached data relating to update status.
- */
-function update_invalidate_cache() {
-  cache_clear_all('*', 'cache_update', TRUE);
-}
-
-/**
  * Wrapper to load the include file and then refresh the release data.
  */
 function update_refresh() {
@@ -514,3 +495,122 @@ function _update_project_status_sort($a, $b) {
   $b_status = $b['status'] > 0 ? $b['status'] : (-10 * $b['status']);
   return $a_status - $b_status;
 }
+
+/**
+ * @defgroup update_status_cache Private update status cache system
+ * @{
+ *
+ * We specifically do NOT use the core cache API for saving the fetched data
+ * about available updates. It is vitally important that this cache is only
+ * cleared when we're populating it after successfully fetching new available
+ * update data. Usage of the core cache API results in all sorts of potential
+ * problems that would result in attempting to fetch available update data all
+ * the time, including if a site has a "minimum cache lifetime" (which is both
+ * a minimum and a maximum) defined, or if a site uses memcache or another
+ * plug-able cache system that assumes volatile caches.
+ *
+ * Update module still uses the {cache_update} table, but instead of using
+ * cache_set(), cache_get(), and cache_clear_all(), there are private helper
+ * functions that implement these same basic tasks but ensure that the cache
+ * is not prematurely cleared, and that the data is always stored in the
+ * database, even if memcache or another cache backend is in use.
+ */
+
+/**
+ * Store data in the private update status cache table.
+ *
+ * Note: this function completely ignores the {cache_update}.headers field
+ * since that is meaningless for the kinds of data we're caching.
+ *
+ * @param $cid
+ *   The cache ID to save the data with.
+ * @param $data
+ *   The data to store.
+ * @param $expire
+ *   One of the following values:
+ *   - CACHE_PERMANENT: Indicates that the item should never be removed except
+ *     by explicitly using _update_cache_clear() or update_invalidate_cache().
+ *   - A Unix timestamp: Indicates that the item should be kept at least until
+ *     the given time, after which it will be invalidated.
+ */
+function _update_cache_set($cid, $data, $expire) {
+  $serialized = 0;
+  if (is_object($data) || is_array($data)) {
+    $data = serialize($data);
+    $serialized = 1;
+  }
+  $created = time();
+  db_query("UPDATE {cache_update} SET data = %b, created = %d, expire = %d, serialized = %d WHERE cid = '%s'", $data, $created, $expire, $serialized, $cid);
+  if (!db_affected_rows()) {
+    @db_query("INSERT INTO {cache_update} (cid, data, created, expire, serialized) VALUES ('%s', %b, %d, %d, %d)", $cid, $data, $created, $expire, $serialized);
+  }
+}
+
+/** 
+ * Retrieve data from the private update status cache table.
+ *
+ * @param $cid
+ *   The cache ID to retrieve.
+ * @return
+ *   The data for the given cache ID, or NULL if the ID was not found.
+ */
+function _update_cache_get($cid) {
+  $cache = db_fetch_object(db_query("SELECT data, created, expire, serialized FROM {cache_update} WHERE cid = '%s'", $cid));
+  if (isset($cache->data)) {
+    $cache->data = db_decode_blob($cache->data);
+    if ($cache->serialized) {
+      $cache->data = unserialize($cache->data);
+    }
+  }
+  return $cache;
+}
+
+/**
+ * Invalidates specific cached data relating to update status.
+ *
+ * @param $cid
+ *   Optional cache ID of the record to clear from the private update module
+ *   cache. If empty, all records will be cleared from the table.
+ */
+function _update_cache_clear($cid = NULL) {
+  if (empty($cid)) {
+    db_query("DELETE FROM {cache_update}");
+  }
+  else {
+    db_query("DELETE FROM {cache_update} WHERE cid = '%s'", $cid);
+  }
+}
+
+/**
+ * Implementation of hook_flush_caches().
+ *
+ * Called from update.php (among others) to flush the caches.
+ * Since we're running update.php, we are likely to install a new version of
+ * something, in which case, we want to check for available update data again.
+ * However, because we have our own caching system, we need to directly clear
+ * the database table ourselves at this point and return nothing, for example,
+ * on sites that use memcache where cache_clear_all() won't know how to purge
+ * this data.
+ *
+ * However, we only want to do this from update.php, since otherwise, we'd
+ * lose all the available update data on every cron run. So, we specifically
+ * check if the site is in MAINTENANCE_MODE == 'update' (which indicates
+ * update.php is running, not update module... alas for overloaded names).
+ */
+function update_flush_caches() {
+  if (defined('MAINTENANCE_MODE') && MAINTENANCE_MODE == 'update') {
+    _update_cache_clear();
+  }
+  return array();
+}
+
+/**
+ * Invalidates all cached data relating to update status.
+ */
+function update_invalidate_cache() {
+  _update_cache_clear();
+}
+
+/**
+ * @} End of "defgroup update_status_cache".
+ */
diff --git a/modules/update/update.report.inc b/modules/update/update.report.inc
index c7e154a..9721062 100644
--- a/modules/update/update.report.inc
+++ b/modules/update/update.report.inc
@@ -47,17 +47,18 @@ function theme_update_report($data) {
         $class = 'ok';
         $icon = theme('image', 'misc/watchdog-ok.png', t('ok'), t('ok'));
         break;
+      case UPDATE_UNKNOWN:
+        $class = 'unknown';
+        $icon = theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning'));
+        break;
       case UPDATE_NOT_SECURE:
       case UPDATE_REVOKED:
       case UPDATE_NOT_SUPPORTED:
+        $class = 'error';
+        $icon = theme('image', 'misc/watchdog-error.png', t('error'), t('error'));
+        break;
+      case UPDATE_NOT_CHECKED:
       case UPDATE_NOT_CURRENT:
-        if ($notification_level == 'all'
-            || $project['status'] != UPDATE_NOT_CURRENT) {
-          $class = 'error';
-          $icon = theme('image', 'misc/watchdog-error.png', t('error'), t('error'));
-          break;
-        }
-        // Otherwise, deliberate no break and use the warning class/icon.
       default:
         $class = 'warning';
         $icon = theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning'));
diff --git a/modules/update/update.settings.inc b/modules/update/update.settings.inc
index 855ee64..15a1cd8 100644
--- a/modules/update/update.settings.inc
+++ b/modules/update/update.settings.inc
@@ -34,13 +34,13 @@ function update_settings() {
 
   $form['update_notification_threshold'] = array(
     '#type' => 'radios',
-    '#title' => t('Notification threshold'),
+    '#title' => t('E-mail notification threshold'),
     '#default_value' => variable_get('update_notification_threshold', 'all'),
     '#options' => array(
       'all' => t('All newer versions'),
       'security' => t('Only security updates'),
     ),
-    '#description' => t('If there are updates available of Drupal core or any of your installed modules and themes, your site will print an error message on the <a href="@status_report">status report</a>, the <a href="@modules_page">modules page</a>, and the <a href="@themes_page">themes page</a>. You can choose to only see these error messages if a security update is available, or to be notified about any newer versions.', array('@status_report' => url('admin/reports/status'), '@modules_page' => url('admin/build/modules'), '@themes_page' => url('admin/build/themes')))
+    '#description' => t('You can choose to send e-mail only if a security update is available, or to be notified about all newer versions. If there are updates available of Drupal core or any of your installed modules and themes, your site will always print a message on the <a href="@status_report">status report</a> page, and will also display an error message on administration pages if there is a security update.', array('@status_report' => url('admin/reports/status')))
   );
 
   $form = system_settings_form($form);
diff --git a/modules/user/user.module b/modules/user/user.module
index 3cc7dab..72e1e7b 100644
--- a/modules/user/user.module
+++ b/modules/user/user.module
@@ -1249,7 +1249,6 @@ function user_login(&$form_state) {
     '#size' => 60,
     '#maxlength' => USERNAME_MAX_LENGTH,
     '#required' => TRUE,
-    '#attributes' => array('tabindex' => '1'),
   );
 
   $form['name']['#description'] = t('Enter your @s username.', array('@s' => variable_get('site_name', 'Drupal')));
@@ -1257,10 +1256,9 @@ function user_login(&$form_state) {
     '#title' => t('Password'),
     '#description' => t('Enter the password that accompanies your username.'),
     '#required' => TRUE,
-    '#attributes' => array('tabindex' => '2'),
   );
   $form['#validate'] = user_login_default_validators();
-  $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'), '#weight' => 2, '#attributes' => array('tabindex' => '3'));
+  $form['submit'] = array('#type' => 'submit', '#value' => t('Log in'), '#weight' => 2);
 
   return $form;
 }
diff --git a/themes/bluemarine/page.tpl.php b/themes/bluemarine/page.tpl.php
index b83111a..cd324f9 100644
--- a/themes/bluemarine/page.tpl.php
+++ b/themes/bluemarine/page.tpl.php
@@ -4,8 +4,8 @@
 <html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language ?>" xml:lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>">
 
 <head>
-  <title><?php print $head_title ?></title>
   <?php print $head ?>
+  <title><?php print $head_title ?></title>
   <?php print $styles ?>
   <?php print $scripts ?>
   <script type="text/javascript"><?php /* Needed to avoid Flash of Unstyle Content in IE */ ?> </script>
diff --git a/themes/chameleon/chameleon.theme b/themes/chameleon/chameleon.theme
index 8f3a519..d10b127 100644
--- a/themes/chameleon/chameleon.theme
+++ b/themes/chameleon/chameleon.theme
@@ -30,8 +30,8 @@ function chameleon_page($content, $show_blocks = TRUE, $show_messages = TRUE) {
   $output  = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n";
   $output .= "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"$language\" xml:lang=\"$language\" dir=\"$direction\">\n";
   $output .= "<head>\n";
-  $output .= " <title>". ($title ? strip_tags($title) ." | ". variable_get("site_name", "Drupal") : variable_get("site_name", "Drupal") ." | ". variable_get("site_slogan", "")) ."</title>\n";
   $output .= drupal_get_html_head();
+  $output .= " <title>". ($title ? strip_tags($title) ." | ". variable_get("site_name", "Drupal") : variable_get("site_name", "Drupal") ." | ". variable_get("site_slogan", "")) ."</title>\n";
   $output .= drupal_get_css();
   $output .= drupal_get_js();
   $output .= "</head>";
diff --git a/themes/garland/maintenance-page.tpl.php b/themes/garland/maintenance-page.tpl.php
index e3d1b9d..1a422cd 100644
--- a/themes/garland/maintenance-page.tpl.php
+++ b/themes/garland/maintenance-page.tpl.php
@@ -15,8 +15,8 @@
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>">
   <head>
-    <title><?php print $head_title ?></title>
     <?php print $head ?>
+    <title><?php print $head_title ?></title>
     <?php print $styles ?>
     <?php print $scripts ?>
     <!--[if lt IE 7]>
diff --git a/themes/garland/page.tpl.php b/themes/garland/page.tpl.php
index 92559d8..773869c 100644
--- a/themes/garland/page.tpl.php
+++ b/themes/garland/page.tpl.php
@@ -4,8 +4,8 @@
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php print $language->language ?>" lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>">
   <head>
-    <title><?php print $head_title ?></title>
     <?php print $head ?>
+    <title><?php print $head_title ?></title>
     <?php print $styles ?>
     <?php print $scripts ?>
     <!--[if lt IE 7]>
diff --git a/themes/garland/style.css b/themes/garland/style.css
index 6e791af..8dac717 100644
--- a/themes/garland/style.css
+++ b/themes/garland/style.css
@@ -659,7 +659,7 @@ ul.secondary li.active a {
  */
 .node {
   border-bottom: 1px solid #e9eff3;
-  margin: -1.5em -26px 1.5em;
+  margin: 0 -26px 1.5em;
   padding: 1.5em 26px;
 }
 
diff --git a/themes/pushbutton/page.tpl.php b/themes/pushbutton/page.tpl.php
index d6f3541..d3dce0d 100644
--- a/themes/pushbutton/page.tpl.php
+++ b/themes/pushbutton/page.tpl.php
@@ -3,9 +3,9 @@
 ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" lang="<?php print $language->language ?>" xml:lang="<?php print $language->language ?>" dir="<?php print $language->dir ?>">
 <head>
-  <title><?php print $head_title ?></title>
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <?php print $head ?>
+  <title><?php print $head_title ?></title>
   <?php print $styles ?>
   <?php print $scripts ?>
 </head>
diff --git a/update.php b/update.php
index dec8b10..6bb019d 100644
--- a/update.php
+++ b/update.php
@@ -247,7 +247,6 @@ function update_script_selection_form() {
   $form['has_js'] = array(
     '#type' => 'hidden',
     '#default_value' => FALSE,
-    '#attributes' => array('id' => 'edit-has_js'),
   );
   $form['submit'] = array(
     '#type' => 'submit',
@@ -378,7 +377,7 @@ function update_info_page() {
   $output .= "<li>Install your new files in the appropriate location, as described in the handbook.</li>\n";
   $output .= "</ol>\n";
   $output .= "<p>When you have performed the steps above, you may proceed.</p>\n";
-  $output .= '<form method="post" action="update.php?op=selection&token='. $token .'"><input type="submit" value="Continue" /></form>';
+  $output .= '<form method="post" action="update.php?op=selection&amp;token='. $token .'"><p><input type="submit" value="Continue" /></p></form>';
   $output .= "\n";
   return $output;
 }
