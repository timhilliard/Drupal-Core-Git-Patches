diff --git a/.htaccess b/.htaccess
deleted file mode 100644
index e59cd99..0000000
--- a/.htaccess
+++ /dev/null
@@ -1,131 +0,0 @@
-#
-# Apache/PHP/Drupal settings:
-#
-
-# Protect files and directories from prying eyes.
-<FilesMatch "\.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)$|^(\..*|Entries.*|Repository|Root|Tag|Template)$">
-  Order allow,deny
-</FilesMatch>
-
-# Don't show directory listings for URLs which map to a directory.
-Options -Indexes
-
-# Follow symbolic links in this directory.
-Options +FollowSymLinks
-
-# Make Drupal handle any 404 errors.
-ErrorDocument 404 /index.php
-
-# Set the default handler.
-DirectoryIndex index.php index.html index.htm
-
-# Override PHP settings that cannot be changed at runtime. See
-# sites/default/default.settings.php and drupal_initialize_variables() in
-# includes/bootstrap.inc for settings that can be changed at runtime.
-
-# PHP 5, Apache 1 and 2.
-<IfModule mod_php5.c>
-  php_flag magic_quotes_gpc                 off
-  php_flag magic_quotes_sybase              off
-  php_flag register_globals                 off
-  php_flag session.auto_start               off
-  php_value mbstring.http_input             pass
-  php_value mbstring.http_output            pass
-  php_flag mbstring.encoding_translation    off
-</IfModule>
-
-# Requires mod_expires to be enabled.
-<IfModule mod_expires.c>
-  # Enable expirations.
-  ExpiresActive On
-
-  # Cache all files for 2 weeks after access (A).
-  ExpiresDefault A1209600
-
-  <FilesMatch \.php$>
-    # Do not allow PHP scripts to be cached unless they explicitly send cache
-    # headers themselves. Otherwise all scripts would have to overwrite the
-    # headers set by mod_expires if they want another caching behavior. This may
-    # fail if an error occurs early in the bootstrap process, and it may cause
-    # problems if a non-Drupal PHP file is installed in a subdirectory.
-    ExpiresActive Off
-  </FilesMatch>
-</IfModule>
-
-# Various rewrite rules.
-<IfModule mod_rewrite.c>
-  RewriteEngine on
-
-  # Block access to "hidden" directories whose names begin with a period. This
-  # includes directories used by version control systems such as Subversion or
-  # Git to store control files. Files whose names begin with a period, as well
-  # as the control files used by CVS, are protected by the FilesMatch directive
-  # above.
-  #
-  # NOTE: This only works when mod_rewrite is loaded. Without mod_rewrite, it is
-  # not possible to block access to entire directories from .htaccess, because
-  # <DirectoryMatch> is not allowed here.
-  #
-  # If you do not have mod_rewrite installed, you should remove these
-  # directories from your webroot or otherwise protect them from being
-  # downloaded.
-  RewriteRule "(^|/)\." - [F]
-
-  # If your site can be accessed both with and without the 'www.' prefix, you
-  # can use one of the following settings to redirect users to your preferred
-  # URL, either WITH or WITHOUT the 'www.' prefix. Choose ONLY one option:
-  #
-  # To redirect all users to access the site WITH the 'www.' prefix,
-  # (http://example.com/... will be redirected to http://www.example.com/...)
-  # uncomment the following:
-  # RewriteCond %{HTTP_HOST} !^www\. [NC]
-  # RewriteRule ^ http://www.%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
-  #
-  # To redirect all users to access the site WITHOUT the 'www.' prefix,
-  # (http://www.example.com/... will be redirected to http://example.com/...)
-  # uncomment the following:
-  # RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]
-  # RewriteRule ^ http://%1%{REQUEST_URI} [L,R=301]
-
-  # Modify the RewriteBase if you are using Drupal in a subdirectory or in a
-  # VirtualDocumentRoot and the rewrite rules are not working properly.
-  # For example if your site is at http://example.com/drupal uncomment and
-  # modify the following line:
-  # RewriteBase /drupal
-  #
-  # If your site is running in a VirtualDocumentRoot at http://example.com/,
-  # uncomment the following line:
-  # RewriteBase /
-
-  # Pass all requests not referring directly to files in the filesystem to
-  # index.php. Clean URLs are handled in drupal_environment_initialize().
-  RewriteCond %{REQUEST_FILENAME} !-f
-  RewriteCond %{REQUEST_FILENAME} !-d
-  RewriteCond %{REQUEST_URI} !=/favicon.ico
-  RewriteRule ^ index.php [L]
-
-  # Rules to correctly serve gzip compressed CSS and JS files.
-  # Requires both mod_rewrite and mod_headers to be enabled.
-  <IfModule mod_headers.c>
-    # Serve gzip compressed CSS files if they exist and the client accepts gzip.
-    RewriteCond %{HTTP:Accept-encoding} gzip
-    RewriteCond %{REQUEST_FILENAME}\.gz -s
-    RewriteRule ^(.*)\.css $1\.css\.gz [QSA]
-
-    # Serve gzip compressed JS files if they exist and the client accepts gzip.
-    RewriteCond %{HTTP:Accept-encoding} gzip
-    RewriteCond %{REQUEST_FILENAME}\.gz -s
-    RewriteRule ^(.*)\.js $1\.js\.gz [QSA]
-
-    # Serve correct content types, and prevent mod_deflate double gzip.
-    RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1]
-    RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1]
-
-    <FilesMatch "(\.js\.gz|\.css\.gz)$">
-      # Serve correct encoding type.
-      Header set Content-Encoding gzip
-      # Force proxies to cache gzipped & non-gzipped css/js files separately.
-      Header append Vary Accept-Encoding
-    </FilesMatch>
-  </IfModule>
-</IfModule>
diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index 231618d..09662cf 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -1,4 +1,55 @@
 
+Drupal 7.15, 2012-08-01
+-----------------------
+- Introduced a 'user_password_reset_timeout' variable to allow the 24-hour
+  expiration for user password reset links to be adjusted (API addition).
+- Fixed database errors due to ambiguous column names that occurred when
+  EntityFieldQuery was used in certain situations.
+- Changed the drupal_array_get_nested_value() function to return a reference
+  (API addition).
+- Changed the System module's hook_block_info() implementation to assign the
+  "Main page content" and "System help" blocks to appropriate regions by
+  default and prevent error messages on the block administration page (data
+  structure change).
+- Fixed regression: Non-node entities couldn't be accessed with
+  EntityFieldQuery.
+- Fixed regression: Optional radio buttons with an empty, non-NULL default
+  value led to an illegal choice error when none were selected.
+- Reorganized the testing framework to split setUp() into specific sub-methods
+  and fix several regressions in the process.
+- Fixed bug which made it impossible to search for strings that have not been
+  translated into a particular language.
+- Renamed the "Field" column on the Manage Fields screen to "Field type", since
+  the former was confusing and inaccurate (UI change).
+- Performance improvement: Removed needless call to system_rebuild_module_data()
+  in field_sync_field_status(), greatly speeding up bulk module enable/disable.
+- Fixed bug which prevented notifications from being sent when core, module, and
+  theme updates are available.
+- Fixed bug which prevented sub-themes from inheriting the default values of
+  theme settings defined by the base theme.
+- Fixed bug which prevented the jQuery UI Datepicker from being localized.
+- Made Ajax alert dialogs respect error reporting settings.
+- Fixed bug which prevented image styles from being deleted on PHP 5.4.
+- Fixed bug: Language detection by domain only worked on port 80.
+- Fixed regression: The first plural index on a page was not calculated
+  correctly.
+- Introduced generic entity language support. Entities may now declare their
+  language property in hook_entity_info(), and modules working with entities
+  may access the language using entity_language() (API change:
+  http://drupal.org/node/1626346).
+- Added EntityFieldQuery support for taxonomy bundles.
+- Fixed issue where field form structure was incomplete if field_access()
+  returned FALSE. Instead of being incomplete, the form structure now has
+  #access set to FALSE and field form validation is skipped (data structure
+  change: http://drupal.org/node/1663020).
+- Fixed data loss issue due to field_has_data() returning inconsistent results.
+  The fix adds an optional DANGEROUS_ACCESS_CHECK_OPT_OUT tag to entity field
+  queries which field storage engines can respond to (API addition:
+  http://drupal.org/node/1597378).
+- Fixed notice: Undefined index: default_image in image_field_prepare_view()
+- Numerous API documentation improvements.
+- Additional automated test coverage.
+
 Drupal 7.14 2012-05-02
 ----------------------
 - Fixed "integrity constraint" fatal errors when rebuilding registry.
@@ -48,7 +99,6 @@ Drupal 7.14 2012-05-02
   - system_update_7061() converts filepaths too aggressively.
   - Trigger upgrade path: Node triggers removed when upgrading to 7-x from 6.25.
 
-
 Drupal 7.13 2012-05-02
 ----------------------
 - Fixed security issues (Multiple vulnerabilities), see SA-CORE-2012-002.
diff --git a/COPYRIGHT.txt b/COPYRIGHT.txt
index e983474..a2a6511 100644
--- a/COPYRIGHT.txt
+++ b/COPYRIGHT.txt
@@ -1,5 +1,4 @@
-
-All Drupal code is Copyright 2001 - 2010 by the original authors.
+All Drupal code is Copyright 2001 - 2012 by the original authors.
 
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
@@ -21,5 +20,25 @@ Drupal includes works under other copyright notices and distributed
 according to the terms of the GNU General Public License or a compatible
 license, including:
 
-  jQuery - Copyright (c) 2008 - 2009 John Resig
+Javascript
+
+  Farbtastic - Copyright (c) 2010 Matt Farina
+
+  jQuery - Copyright (c) 2010 John Resig
+
+  jQuery BBQ - Copyright (c) 2010 "Cowboy" Ben Alman
+
+  jQuery Cookie - Copyright (c) 2006 Klaus Hartl
+
+  jQuery Form - Copyright (c) 2010 Mike Alsup
+
+  jQuery Once - Copyright (c) 2009 Konstantin K�fer
+
+  jQuery UI - Copyright (c) 2010 by the original authors
+    (http://jqueryui.com/about)
+
+  Sizzle.js - Copyright (c) 2010 The Dojo Foundation (http://sizzlejs.com/)
+
+PHP
 
+  ArchiveTar - Copyright (c) 1997 - 2008 Vincent Blavet
diff --git a/MAINTAINERS.txt b/MAINTAINERS.txt
index aff2590..aa14215 100644
--- a/MAINTAINERS.txt
+++ b/MAINTAINERS.txt
@@ -11,6 +11,7 @@ The branch maintainers for Drupal 7 are:
 
 - Dries Buytaert 'dries' <http://drupal.org/user/1>
 - Angela Byron 'webchick' <http://drupal.org/user/24967>
+- David Rothstein 'David_Rothstein' <http://drupal.org/user/124982>
 
 
 Component maintainers
@@ -23,7 +24,6 @@ maintainer. Current component maintainers for Drupal 7:
 
 Ajax system
 - Alex Bronstein 'effulgentsia' <http://drupal.org/user/78040>
-- Randy Fay 'rfay' <http://drupal.org/user/30906>
 - Earl Miles 'merlinofchaos' <http://drupal.org/user/26979>
 
 Base system
@@ -147,6 +147,10 @@ User experience and usability
 - Roy Scholten 'yoroy' <http://drupal.org/user/41502>
 - Bojhan Somers 'Bojhan' <http://drupal.org/user/87969>
 
+Node Access
+- Moshe Weitzman 'moshe weitzman' <http://drupal.org/user/23>
+- Ken Rickard 'agentrickard' <http://drupal.org/user/20975>
+- Jess Myrbo 'xjm' <http://drupal.org/user/65776>
 
 Module maintainers
 ------------------
diff --git a/UPGRADE.txt b/UPGRADE.txt
index c993df7..e870ff0 100644
--- a/UPGRADE.txt
+++ b/UPGRADE.txt
@@ -141,7 +141,7 @@ following the instructions in the INTRODUCTION section at the top of this file:
    download Drupal 6.x and follow the instructions in its UPGRADE.txt. This
    document only applies for upgrades from 6.x to 7.x.
 
-3. In addition to updating to the latest available version of Drupal 7.x core,
+3. In addition to updating to the latest available version of Drupal 6.x core,
    you must also upgrade all of your contributed modules for Drupal to their
    latest Drupal 6.x versions.
 
diff --git a/authorize.php b/authorize.php
index 3c0bd7b..d14fa6e 100644
--- a/authorize.php
+++ b/authorize.php
@@ -60,7 +60,6 @@ function authorize_access_allowed() {
 // *** Real work of the script begins here. ***
 
 require_once DRUPAL_ROOT . '/includes/bootstrap.inc';
-require_once DRUPAL_ROOT . '/includes/session.inc';
 require_once DRUPAL_ROOT . '/includes/common.inc';
 require_once DRUPAL_ROOT . '/includes/file.inc';
 require_once DRUPAL_ROOT . '/includes/module.inc';
diff --git a/htaccess.standard.txt b/htaccess.standard.txt
new file mode 100644
index 0000000..246edc2
--- /dev/null
+++ b/htaccess.standard.txt
@@ -0,0 +1,131 @@
+#
+# Apache/PHP/Drupal settings:
+#
+
+# Protect files and directories from prying eyes.
+<FilesMatch "\.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)$|^(\..*|Entries.*|Repository|Root|Tag|Template)$">
+  Order allow,deny
+</FilesMatch>
+
+# Don't show directory listings for URLs which map to a directory.
+Options -Indexes
+
+# Follow symbolic links in this directory.
+Options +FollowSymLinks
+
+# Make Drupal handle any 404 errors.
+ErrorDocument 404 /index.php
+
+# Set the default handler.
+DirectoryIndex index.php index.html index.htm
+
+# Override PHP settings that cannot be changed at runtime. See
+# sites/default/default.settings.php and drupal_environment_initialize() in
+# includes/bootstrap.inc for settings that can be changed at runtime.
+
+# PHP 5, Apache 1 and 2.
+<IfModule mod_php5.c>
+  php_flag magic_quotes_gpc                 off
+  php_flag magic_quotes_sybase              off
+  php_flag register_globals                 off
+  php_flag session.auto_start               off
+  php_value mbstring.http_input             pass
+  php_value mbstring.http_output            pass
+  php_flag mbstring.encoding_translation    off
+</IfModule>
+
+# Requires mod_expires to be enabled.
+<IfModule mod_expires.c>
+  # Enable expirations.
+  ExpiresActive On
+
+  # Cache all files for 2 weeks after access (A).
+  ExpiresDefault A1209600
+
+  <FilesMatch \.php$>
+    # Do not allow PHP scripts to be cached unless they explicitly send cache
+    # headers themselves. Otherwise all scripts would have to overwrite the
+    # headers set by mod_expires if they want another caching behavior. This may
+    # fail if an error occurs early in the bootstrap process, and it may cause
+    # problems if a non-Drupal PHP file is installed in a subdirectory.
+    ExpiresActive Off
+  </FilesMatch>
+</IfModule>
+
+# Various rewrite rules.
+<IfModule mod_rewrite.c>
+  RewriteEngine on
+
+  # Block access to "hidden" directories whose names begin with a period. This
+  # includes directories used by version control systems such as Subversion or
+  # Git to store control files. Files whose names begin with a period, as well
+  # as the control files used by CVS, are protected by the FilesMatch directive
+  # above.
+  #
+  # NOTE: This only works when mod_rewrite is loaded. Without mod_rewrite, it is
+  # not possible to block access to entire directories from .htaccess, because
+  # <DirectoryMatch> is not allowed here.
+  #
+  # If you do not have mod_rewrite installed, you should remove these
+  # directories from your webroot or otherwise protect them from being
+  # downloaded.
+  RewriteRule "(^|/)\." - [F]
+
+  # If your site can be accessed both with and without the 'www.' prefix, you
+  # can use one of the following settings to redirect users to your preferred
+  # URL, either WITH or WITHOUT the 'www.' prefix. Choose ONLY one option:
+  #
+  # To redirect all users to access the site WITH the 'www.' prefix,
+  # (http://example.com/... will be redirected to http://www.example.com/...)
+  # uncomment the following:
+  # RewriteCond %{HTTP_HOST} !^www\. [NC]
+  # RewriteRule ^ http://www.%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
+  #
+  # To redirect all users to access the site WITHOUT the 'www.' prefix,
+  # (http://www.example.com/... will be redirected to http://example.com/...)
+  # uncomment the following:
+  # RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]
+  # RewriteRule ^ http://%1%{REQUEST_URI} [L,R=301]
+
+  # Modify the RewriteBase if you are using Drupal in a subdirectory or in a
+  # VirtualDocumentRoot and the rewrite rules are not working properly.
+  # For example if your site is at http://example.com/drupal uncomment and
+  # modify the following line:
+  # RewriteBase /drupal
+  #
+  # If your site is running in a VirtualDocumentRoot at http://example.com/,
+  # uncomment the following line:
+  # RewriteBase /
+
+  # Pass all requests not referring directly to files in the filesystem to
+  # index.php. Clean URLs are handled in drupal_environment_initialize().
+  RewriteCond %{REQUEST_FILENAME} !-f
+  RewriteCond %{REQUEST_FILENAME} !-d
+  RewriteCond %{REQUEST_URI} !=/favicon.ico
+  RewriteRule ^ index.php [L]
+
+  # Rules to correctly serve gzip compressed CSS and JS files.
+  # Requires both mod_rewrite and mod_headers to be enabled.
+  <IfModule mod_headers.c>
+    # Serve gzip compressed CSS files if they exist and the client accepts gzip.
+    RewriteCond %{HTTP:Accept-encoding} gzip
+    RewriteCond %{REQUEST_FILENAME}\.gz -s
+    RewriteRule ^(.*)\.css $1\.css\.gz [QSA]
+
+    # Serve gzip compressed JS files if they exist and the client accepts gzip.
+    RewriteCond %{HTTP:Accept-encoding} gzip
+    RewriteCond %{REQUEST_FILENAME}\.gz -s
+    RewriteRule ^(.*)\.js $1\.js\.gz [QSA]
+
+    # Serve correct content types, and prevent mod_deflate double gzip.
+    RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1]
+    RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1]
+
+    <FilesMatch "(\.js\.gz|\.css\.gz)$">
+      # Serve correct encoding type.
+      Header set Content-Encoding gzip
+      # Force proxies to cache gzipped & non-gzipped css/js files separately.
+      Header append Vary Accept-Encoding
+    </FilesMatch>
+  </IfModule>
+</IfModule>
diff --git a/includes/bootstrap.inc b/includes/bootstrap.inc
index 21d3423..b94718c 100644
--- a/includes/bootstrap.inc
+++ b/includes/bootstrap.inc
@@ -8,7 +8,7 @@
 /**
  * The current system version.
  */
-define('VERSION', '7.14');
+define('VERSION', '7.15');
 
 /**
  * Core API compatibility.
@@ -1759,22 +1759,37 @@ function watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NO
 }
 
 /**
- * Sets a message which reflects the status of the performed operation.
+ * Sets a message to display to the user.
  *
- * If the function is called with no arguments, this function returns all set
- * messages without clearing them.
+ * Messages are stored in a session variable and displayed in page.tpl.php via
+ * the $messages theme variable.
  *
- * @param $message
- *   The message to be displayed to the user. For consistency with other
- *   messages, it should begin with a capital letter and end with a period.
- * @param $type
- *   The type of the message. One of the following values are possible:
+ * Example usage:
+ * @code
+ * drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
+ * @endcode
+ *
+ * @param string $message
+ *   (optional) The translated message to be displayed to the user. For
+ *   consistency with other messages, it should begin with a capital letter and
+ *   end with a period.
+ * @param string $type
+ *   (optional) The message's type. Defaults to 'status'. These values are
+ *   supported:
  *   - 'status'
  *   - 'warning'
  *   - 'error'
- * @param $repeat
- *   If this is FALSE and the message is already set, then the message won't
- *   be repeated.
+ * @param bool $repeat
+ *   (optional) If this is FALSE and the message is already set, then the
+ *   message won't be repeated. Defaults to TRUE.
+ *
+ * @return array|null
+ *   A multidimensional array with keys corresponding to the set message types.
+ *   The indexed array values of each contain the set messages for that type.
+ *   Or, if there are no messages set, the function returns NULL.
+ *
+ * @see drupal_get_messages()
+ * @see theme_status_messages()
  */
 function drupal_set_message($message = NULL, $type = 'status', $repeat = TRUE) {
   if ($message) {
@@ -2711,7 +2726,7 @@ function request_path() {
     return $path;
   }
 
-  if (isset($_GET['q'])) {
+  if (isset($_GET['q']) && is_string($_GET['q'])) {
     // This is a request with a ?q=foo/bar query string. $_GET['q'] is
     // overwritten in drupal_path_initialize(), but request_path() is called
     // very early in the bootstrap process, so the original value is saved in
@@ -2842,7 +2857,7 @@ function ip_address() {
 }
 
 /**
- * @ingroup schemaapi
+ * @addtogroup schemaapi
  * @{
  */
 
@@ -2964,12 +2979,12 @@ function drupal_get_complete_schema($rebuild = FALSE) {
 }
 
 /**
- * @} End of "ingroup schemaapi".
+ * @} End of "addtogroup schemaapi".
  */
 
 
 /**
- * @ingroup registry
+ * @addtogroup registry
  * @{
  */
 
@@ -3131,7 +3146,7 @@ function registry_update() {
 }
 
 /**
- * @} End of "ingroup registry".
+ * @} End of "addtogroup registry".
  */
 
 /**
diff --git a/includes/common.inc b/includes/common.inc
index f3c936e..f80496b 100644
--- a/includes/common.inc
+++ b/includes/common.inc
@@ -647,20 +647,23 @@ function drupal_encode_path($path) {
  * callback.
  *
  * @param $path
- *   A Drupal path or a full URL.
+ *   (optional) A Drupal path or a full URL, which will be passed to url() to
+ *   compute the redirect for the URL.
  * @param $options
- *   An associative array of additional URL options to pass to url().
+ *   (optional) An associative array of additional URL options to pass to url().
  * @param $http_response_code
- *   Valid values for an actual "goto" as per RFC 2616 section 10.3 are:
- *   - 301 Moved Permanently (the recommended value for most redirects)
- *   - 302 Found (default in Drupal and PHP, sometimes used for spamming search
- *         engines)
- *   - 303 See Other
- *   - 304 Not Modified
- *   - 305 Use Proxy
- *   - 307 Temporary Redirect (alternative to "503 Site Down for Maintenance")
- *   Note: Other values are defined by RFC 2616, but are rarely used and poorly
- *   supported.
+ *   (optional) The HTTP status code to use for the redirection, defaults to
+ *   302. The valid values for 3xx redirection status codes are defined in
+ *   @link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3 RFC 2616 @endlink
+ *   and the
+ *   @link http://tools.ietf.org/html/draft-reschke-http-status-308-07 draft for the new HTTP status codes: @endlink
+ *   - 301: Moved Permanently (the recommended value for most redirects).
+ *   - 302: Found (default in Drupal and PHP, sometimes used for spamming search
+ *     engines).
+ *   - 303: See Other.
+ *   - 304: Not Modified.
+ *   - 305: Use Proxy.
+ *   - 307: Temporary Redirect.
  *
  * @see drupal_get_destination()
  * @see url()
@@ -1099,7 +1102,7 @@ function fix_gpc_magic() {
 /**
  * Verifies the syntax of the given e-mail address.
  *
- * Empty e-mail addresses are allowed. See RFC 2822 for details.
+ * See @link http://tools.ietf.org/html/rfc5321 RFC 5321 @endlink for details.
  *
  * @param $mail
  *   A string containing an e-mail address.
@@ -2041,8 +2044,9 @@ function format_username($account) {
  * alternative than url().
  *
  * @param $path
- *   The internal path or external URL being linked to, such as "node/34" or
- *   "http://example.com/foo". A few notes:
+ *   (optional) The internal path or external URL being linked to, such as
+ *   "node/34" or "http://example.com/foo". The default value is equivalent to
+ *   passing in '<front>'. A few notes:
  *   - If you provide a full URL, it will be considered an external URL.
  *   - If you provide only the path (e.g. "node/34"), it will be
  *     considered an internal link. In this case, it should be a system URL,
@@ -2058,7 +2062,8 @@ function format_username($account) {
  *     include them in $path, or use $options['query'] to let this function
  *     URL encode them.
  * @param $options
- *   An associative array of additional options, with the following elements:
+ *   (optional) An associative array of additional options, with the following
+ *   elements:
  *   - 'query': An array of query key/value-pairs (without any URL-encoding) to
  *     append to the URL.
  *   - 'fragment': A fragment identifier (named anchor) to append to the URL.
@@ -5650,8 +5655,9 @@ function drupal_render_page($page) {
  * any children, it is the responsibility of the theme function to render
  * these children. For elements that are not allowed to have any children,
  * e.g. buttons or textfields, the theme function can be used to render the
- * element itself. If #theme is not present and the element has children, they
- * are rendered and concatenated into a string by drupal_render_children().
+ * element itself. If #theme is not present and the element has children, each
+ * child is itself rendered by a call to drupal_render(), and the results are
+ * concatenated.
  *
  * The #theme_wrappers property contains an array of theme functions which will
  * be called, in order, after #theme has run. These can be used to add further
@@ -6213,7 +6219,19 @@ function element_info_property($type, $property_name, $default = NULL) {
 }
 
 /**
- * Function used by uasort to sort structured arrays by weight, without the property weight prefix.
+ * Sorts a structured array by the 'weight' element.
+ *
+ * Note that the sorting is by the 'weight' array element, not by the render
+ * element property '#weight'.
+ *
+ * Callback for uasort() used in various functions.
+ *
+ * @param $a
+ *   First item for comparison. The compared items should be associative arrays
+ *   that optionally include a 'weight' element. For items without a 'weight'
+ *   element, a default value of 0 will be used.
+ * @param $b
+ *   Second item for comparison.
  */
 function drupal_sort_weight($a, $b) {
   $a_weight = (is_array($a) && isset($a['weight'])) ? $a['weight'] : 0;
@@ -6487,7 +6505,7 @@ function drupal_array_set_nested_value(array &$array, array $parents, $value, $f
  *
  * @see drupal_array_set_nested_value()
  */
-function drupal_array_get_nested_value(array &$array, array $parents, &$key_exists = NULL) {
+function &drupal_array_get_nested_value(array &$array, array $parents, &$key_exists = NULL) {
   $ref = &$array;
   foreach ($parents as $parent) {
     if (is_array($ref) && array_key_exists($parent, $ref)) {
@@ -6495,7 +6513,8 @@ function drupal_array_get_nested_value(array &$array, array $parents, &$key_exis
     }
     else {
       $key_exists = FALSE;
-      return NULL;
+      $null = NULL;
+      return $null;
     }
   }
   $key_exists = TRUE;
@@ -6745,7 +6764,7 @@ function drupal_common_theme() {
 }
 
 /**
- * @ingroup schemaapi
+ * @addtogroup schemaapi
  * @{
  */
 
@@ -6893,6 +6912,10 @@ function drupal_schema_fields_sql($table, $prefix = NULL) {
 /**
  * Saves (inserts or updates) a record to the database based upon the schema.
  *
+ * Do not use drupal_write_record() within hook_update_N() functions, since the
+ * database schema cannot be relied upon when a user is running a series of
+ * updates. Instead, use db_insert() or db_update() to save the record.
+ *
  * @param $table
  *   The name of the table; this must be defined by a hook_schema()
  *   implementation.
@@ -7048,7 +7071,7 @@ function drupal_write_record($table, &$record, $primary_keys = array()) {
 }
 
 /**
- * @} End of "ingroup schemaapi".
+ * @} End of "addtogroup schemaapi".
  */
 
 /**
@@ -7772,6 +7795,44 @@ function entity_label($entity_type, $entity) {
 }
 
 /**
+ * Returns the language of an entity.
+ *
+ * @param $entity_type
+ *   The entity type; e.g., 'node' or 'user'.
+ * @param $entity
+ *   The entity for which to get the language.
+ *
+ * @return
+ *   A valid language code or NULL if the entity has no language support.
+ */
+function entity_language($entity_type, $entity) {
+  $info = entity_get_info($entity_type);
+
+  // Invoke the callback to get the language. If there is no callback, try to
+  // get it from a property of the entity, otherwise NULL.
+  if (isset($info['language callback']) && function_exists($info['language callback'])) {
+    $langcode = $info['language callback']($entity_type, $entity);
+  }
+  elseif (!empty($info['entity keys']['language']) && isset($entity->{$info['entity keys']['language']})) {
+    $langcode = $entity->{$info['entity keys']['language']};
+  }
+  else {
+    // The value returned in D8 would be LANGUAGE_NONE, we cannot use it here to
+    // preserve backward compatibility. In fact this function has been
+    // introduced very late in the D7 life cycle, mainly as the proper default
+    // for field_attach_form(). By returning LANGUAGE_NONE when no language
+    // information is available, we would introduce a potentially BC-breaking
+    // API change, since field_attach_form() defaults to the default language
+    // instead of LANGUAGE_NONE. Moreover this allows us to distinguish between
+    // entities that have no language specified from ones that do not have
+    // language support at all.
+    $langcode = NULL;
+  }
+
+  return $langcode;
+}
+
+/**
  * Helper function for attaching field API validation to entity forms.
  */
 function entity_form_field_validate($entity_type, $form, &$form_state) {
diff --git a/includes/database/database.inc b/includes/database/database.inc
index 6efe298..5bcae67 100644
--- a/includes/database/database.inc
+++ b/includes/database/database.inc
@@ -41,7 +41,7 @@
  * $result = db_query_range('SELECT n.nid, n.title, n.created
  *   FROM {node} n WHERE n.uid = :uid', 0, 10, array(':uid' => $uid));
  * foreach ($result as $record) {
- *   // Perform operations on $node->title, etc. here.
+ *   // Perform operations on $record->title, etc. here.
  * }
  * @endcode
  * Curly braces are used around "node" to provide table prefixing via
@@ -988,6 +988,9 @@ abstract class DatabaseConnection extends PDO {
    * @param $name
    *   Optional name of the savepoint.
    *
+   * @return DatabaseTransaction
+   *   A DatabaseTransaction object.
+   *
    * @see DatabaseTransaction
    */
   public function startTransaction($name = '') {
@@ -2669,7 +2672,7 @@ function db_condition($conjunction) {
 
 
 /**
- * @ingroup schemaapi
+ * @addtogroup schemaapi
  * @{
  */
 
@@ -2986,7 +2989,7 @@ function db_change_field($table, $field, $field_new, $spec, $keys_new = array())
 }
 
 /**
- * @} End of "ingroup schemaapi".
+ * @} End of "addtogroup schemaapi".
  */
 
 /**
diff --git a/includes/database/mysql/database.inc b/includes/database/mysql/database.inc
index 7278a2b..7ad019e 100644
--- a/includes/database/mysql/database.inc
+++ b/includes/database/mysql/database.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * @ingroup database
+ * @addtogroup database
  * @{
  */
 
@@ -198,5 +198,5 @@ class DatabaseConnection_mysql extends DatabaseConnection {
 
 
 /**
- * @} End of "ingroup database".
+ * @} End of "addtogroup database".
  */
diff --git a/includes/database/mysql/query.inc b/includes/database/mysql/query.inc
index 888b6a5..2609aba 100644
--- a/includes/database/mysql/query.inc
+++ b/includes/database/mysql/query.inc
@@ -1,7 +1,7 @@
 <?php
 
 /**
- * @ingroup database
+ * @addtogroup database
  * @{
  */
 
@@ -103,5 +103,5 @@ class TruncateQuery_mysql extends TruncateQuery {
 }
 
 /**
- * @} End of "ingroup database".
+ * @} End of "addtogroup database".
  */
diff --git a/includes/database/mysql/schema.inc b/includes/database/mysql/schema.inc
index d6aea4d..949cf4e 100644
--- a/includes/database/mysql/schema.inc
+++ b/includes/database/mysql/schema.inc
@@ -7,7 +7,7 @@
 
 
 /**
- * @ingroup schemaapi
+ * @addtogroup schemaapi
  * @{
  */
 
@@ -532,5 +532,5 @@ class DatabaseSchema_mysql extends DatabaseSchema {
 }
 
 /**
- * @} End of "ingroup schemaapi".
+ * @} End of "addtogroup schemaapi".
  */
diff --git a/includes/database/pgsql/database.inc b/includes/database/pgsql/database.inc
index d80b475..79c16b2 100644
--- a/includes/database/pgsql/database.inc
+++ b/includes/database/pgsql/database.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * @ingroup database
+ * @addtogroup database
  * @{
  */
 
@@ -208,5 +208,5 @@ class DatabaseConnection_pgsql extends DatabaseConnection {
 }
 
 /**
- * @} End of "ingroup database".
+ * @} End of "addtogroup database".
  */
diff --git a/includes/database/pgsql/select.inc b/includes/database/pgsql/select.inc
index d1d8382..f6a83db 100644
--- a/includes/database/pgsql/select.inc
+++ b/includes/database/pgsql/select.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * @ingroup database
+ * @addtogroup database
  * @{
  */
 
@@ -103,6 +103,6 @@ class SelectQuery_pgsql extends SelectQuery {
 }
 
 /**
- * @} End of "ingroup database".
+ * @} End of "addtogroup database".
  */
 
diff --git a/includes/database/prefetch.inc b/includes/database/prefetch.inc
index 4f2b19d..3b36a4e 100644
--- a/includes/database/prefetch.inc
+++ b/includes/database/prefetch.inc
@@ -9,7 +9,7 @@
  */
 
 /**
- * @ingroup database
+ * @addtogroup database
  * @{
  */
 
@@ -502,6 +502,6 @@ class DatabaseStatementPrefetch implements Iterator, DatabaseStatementInterface
 }
 
 /**
- * @} End of "ingroup database".
+ * @} End of "addtogroup database".
  */
 
diff --git a/includes/database/query.inc b/includes/database/query.inc
index 750aea7..612985e 100644
--- a/includes/database/query.inc
+++ b/includes/database/query.inc
@@ -1,7 +1,7 @@
 <?php
 
 /**
- * @ingroup database
+ * @addtogroup database
  * @{
  */
 
@@ -1955,5 +1955,5 @@ class DatabaseCondition implements QueryConditionInterface, Countable {
 }
 
 /**
- * @} End of "ingroup database".
+ * @} End of "addtogroup database".
  */
diff --git a/includes/database/select.inc b/includes/database/select.inc
index 7e2af85..e036904 100644
--- a/includes/database/select.inc
+++ b/includes/database/select.inc
@@ -1,7 +1,7 @@
 <?php
 
 /**
- * @ingroup database
+ * @addtogroup database
  * @{
  */
 
@@ -1609,5 +1609,5 @@ class SelectQuery extends Query implements SelectQueryInterface {
 }
 
 /**
- * @} End of "ingroup database".
+ * @} End of "addtogroup database".
  */
diff --git a/includes/database/sqlite/database.inc b/includes/database/sqlite/database.inc
index ea91e91..b302b3e 100644
--- a/includes/database/sqlite/database.inc
+++ b/includes/database/sqlite/database.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * @ingroup database
+ * @addtogroup database
  * @{
  */
 
@@ -515,5 +515,5 @@ class DatabaseStatement_sqlite extends DatabaseStatementPrefetch implements Iter
 }
 
 /**
- * @} End of "ingroup database".
+ * @} End of "addtogroup database".
  */
diff --git a/includes/database/sqlite/query.inc b/includes/database/sqlite/query.inc
index 6b8a72f..74ff9ba 100644
--- a/includes/database/sqlite/query.inc
+++ b/includes/database/sqlite/query.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * @ingroup database
+ * @addtogroup database
  * @{
  */
 
@@ -156,5 +156,5 @@ class TruncateQuery_sqlite extends TruncateQuery {
 }
 
 /**
- * @} End of "ingroup database".
+ * @} End of "addtogroup database".
  */
diff --git a/includes/database/sqlite/select.inc b/includes/database/sqlite/select.inc
index fb926ef..9037a0e 100644
--- a/includes/database/sqlite/select.inc
+++ b/includes/database/sqlite/select.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * @ingroup database
+ * @addtogroup database
  * @{
  */
 
@@ -21,7 +21,7 @@ class SelectQuery_sqlite extends SelectQuery {
 }
 
 /**
- * @} End of "ingroup database".
+ * @} End of "addtogroup database".
  */
 
 
diff --git a/includes/entity.inc b/includes/entity.inc
index ae78077..832abe2 100644
--- a/includes/entity.inc
+++ b/includes/entity.inc
@@ -634,6 +634,9 @@ class EntityFieldQuery {
 
   /**
    * Adds a condition on field values.
+   * 
+   * Note that entities with empty field values will be excluded from the
+   * EntityFieldQuery results when using this method.
    *
    * @param $field
    *   Either a field name or a field array.
@@ -858,7 +861,9 @@ class EntityFieldQuery {
    * Orders the result set by a given field column.
    *
    * If called multiple times, the query will order by each specified column in
-   * the order this method is called.
+   * the order this method is called. Note that entities with empty field
+   * values will be excluded from the EntityFieldQuery results when using this
+   * method.
    *
    * @param $field
    *   Either a field name or a field array.
@@ -1199,7 +1204,7 @@ class EntityFieldQuery {
     $select_query->addExpression(':entity_type', 'entity_type', array(':entity_type' => $entity_type));
     // Process the property conditions.
     foreach ($this->propertyConditions as $property_condition) {
-      $this->addCondition($select_query, "$base_table." . $property_condition['column'], $property_condition);
+      $this->addCondition($select_query, $base_table . '.' . $property_condition['column'], $property_condition);
     }
     // Process the four possible entity condition.
     // The id field is always present in entity keys.
@@ -1207,7 +1212,7 @@ class EntityFieldQuery {
     $id_map['entity_id'] = $sql_field;
     $select_query->addField($base_table, $sql_field, 'entity_id');
     if (isset($this->entityConditions['entity_id'])) {
-      $this->addCondition($select_query, $sql_field, $this->entityConditions['entity_id']);
+      $this->addCondition($select_query, $base_table . '.' . $sql_field, $this->entityConditions['entity_id']);
     }
 
     // If there is a revision key defined, use it.
@@ -1215,7 +1220,7 @@ class EntityFieldQuery {
       $sql_field = $entity_info['entity keys']['revision'];
       $select_query->addField($base_table, $sql_field, 'revision_id');
       if (isset($this->entityConditions['revision_id'])) {
-        $this->addCondition($select_query, $sql_field, $this->entityConditions['revision_id']);
+        $this->addCondition($select_query, $base_table . '.' . $sql_field, $this->entityConditions['revision_id']);
       }
     }
     else {
@@ -1240,7 +1245,13 @@ class EntityFieldQuery {
     }
     $id_map['bundle'] = $sql_field;
     if (isset($this->entityConditions['bundle'])) {
-      $this->addCondition($select_query, $sql_field, $this->entityConditions['bundle'], $having);
+      if (!empty($entity_info['entity keys']['bundle'])) {
+        $this->addCondition($select_query, $base_table . '.' . $sql_field, $this->entityConditions['bundle'], $having);
+      }
+      else {
+        // This entity has no bundle, so invalidate the query.
+        $select_query->where('1 = 0');
+      }
     }
 
     // Order the query.
@@ -1253,7 +1264,7 @@ class EntityFieldQuery {
         $select_query->orderBy($id_map[$key], $order['direction']);
       }
       elseif ($order['type'] == 'property') {
-        $select_query->orderBy("$base_table." . $order['specifier'], $order['direction']);
+        $select_query->orderBy($base_table . '.' . $order['specifier'], $order['direction']);
       }
     }
 
diff --git a/includes/errors.inc b/includes/errors.inc
index f62bf06..9d0df05 100644
--- a/includes/errors.inc
+++ b/includes/errors.inc
@@ -230,8 +230,10 @@ function _drupal_log_error($error, $fatal = FALSE) {
 
   if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest') {
     if ($fatal) {
-      // When called from JavaScript, simply output the error message.
-      print t('%type: !message in %function (line %line of %file).', $error);
+      if (error_displayable($error)) {
+        // When called from JavaScript, simply output the error message.
+        print t('%type: !message in %function (line %line of %file).', $error);
+      }
       exit;
     }
   }
diff --git a/includes/form.inc b/includes/form.inc
index 3ef32ab..d7350b3 100644
--- a/includes/form.inc
+++ b/includes/form.inc
@@ -164,6 +164,8 @@ function drupal_get_form($form_id) {
  *       automatically loaded by form_get_cache(). By default the current menu
  *       router item's 'file' definition is added, if any. Use
  *       form_load_include() to add include files from a form constructor.
+ *     - form_id: Identification of the primary form being constructed and
+ *       processed.
  *     - base_form_id: Identification for a base form, as declared in a
  *       hook_forms() implementation.
  *   - rebuild_info: Internal. Similar to 'build_info', but pertaining to
@@ -572,7 +574,7 @@ function form_state_keys_no_cache() {
 }
 
 /**
- * Ensures an include file is loaded loaded whenever the form is processed.
+ * Ensures an include file is loaded whenever the form is processed.
  *
  * Example:
  * @code
@@ -721,6 +723,9 @@ function drupal_form_submit($form_id, &$form_state) {
 function drupal_retrieve_form($form_id, &$form_state) {
   $forms = &drupal_static(__FUNCTION__);
 
+  // Record the $form_id.
+  $form_state['build_info']['form_id'] = $form_id;
+
   // Record the filepath of the include file containing the original form, so
   // the form builder callbacks can be loaded when the form is being rebuilt
   // from cache on a different path (such as 'system/ajax'). See
@@ -977,6 +982,10 @@ function drupal_prepare_form($form_id, &$form, &$form_state) {
     '#value' => $form['#build_id'],
     '#id' => $form['#build_id'],
     '#name' => 'form_build_id',
+    // Form processing and validation requires this value, so ensure the
+    // submitted form value appears literally, regardless of custom #tree
+    // and #parents being set elsewhere.
+    '#parents' => array('form_build_id'),
   );
 
   // Add a token, based on either #token or form_id, to any form displayed to
@@ -1000,6 +1009,10 @@ function drupal_prepare_form($form_id, &$form, &$form_state) {
         '#id' => drupal_html_id('edit-' . $form_id . '-form-token'),
         '#type' => 'token',
         '#default_value' => drupal_get_token($form['#token']),
+        // Form processing and validation requires this value, so ensure the
+        // submitted form value appears literally, regardless of custom #tree
+        // and #parents being set elsewhere.
+        '#parents' => array('form_token'),
       );
     }
   }
@@ -1009,6 +1022,10 @@ function drupal_prepare_form($form_id, &$form, &$form_state) {
       '#type' => 'hidden',
       '#value' => $form_id,
       '#id' => drupal_html_id("edit-$form_id"),
+      // Form processing and validation requires this value, so ensure the
+      // submitted form value appears literally, regardless of custom #tree
+      // and #parents being set elsewhere.
+      '#parents' => array('form_id'),
     );
   }
   if (!isset($form['#id'])) {
@@ -1086,7 +1103,7 @@ function drupal_prepare_form($form_id, &$form, &$form_state) {
  *   A keyed array containing the current state of the form. The current
  *   user-submitted data is stored in $form_state['values'], though
  *   form validation functions are passed an explicit copy of the
- *   values for the sake of simplicity. Validation handlers can also
+ *   values for the sake of simplicity. Validation handlers can also use
  *   $form_state to pass information on to submit handlers. For example:
  *     $form_state['data_for_submission'] = $data;
  *   This technique is useful when validation requires file parsing,
@@ -2149,12 +2166,12 @@ function form_state_values_clean(&$form_state) {
     // $form_state['values']['foo']['bar'], which is the level where we can
     // unset 'baz' (that is stored in $last_parent).
     $parents = $button['#parents'];
-    $values = &$form_state['values'];
     $last_parent = array_pop($parents);
-    foreach ($parents as $parent) {
-      $values = &$values[$parent];
+    $key_exists = NULL;
+    $values = &drupal_array_get_nested_value($form_state['values'], $parents, $key_exists);
+    if ($key_exists && is_array($values)) {
+      unset($values[$last_parent]);
     }
-    unset($values[$last_parent]);
   }
 }
 
@@ -2339,30 +2356,27 @@ function form_type_tableselect_value($element, $input = FALSE) {
  */
 function form_type_radios_value(&$element, $input = FALSE) {
   if ($input !== FALSE) {
-    // There may not be a submitted value for multiple radio buttons, if none of
-    // the options was checked by default. If there is no submitted input value
-    // for this element (NULL), _form_builder_handle_input_element()
-    // automatically attempts to use the #default_value (if set) or an empty
-    // string (''). However, an empty string would fail validation in
-    // _form_validate(), in case it is not contained in the list of allowed
-    // values in #options.
-    if (!isset($input)) {
-      // Signify a garbage value to disable the #default_value handling and take
-      // over NULL as #value.
-      $element['#has_garbage_value'] = TRUE;
-      // There was a user submission so validation is a must. If this element is
-      // #required, then an appropriate error message will be output. While an
-      // optional #type 'radios' does not necessarily make sense from a user
-      // interaction perspective, there may be use-cases for that and it is not
-      // the job of Form API to artificially limit possibilities.
+    // When there's user input (including NULL), return it as the value.
+    // However, if NULL is submitted, _form_builder_handle_input_element() will
+    // apply the default value, and we want that validated against #options
+    // unless it's empty. (An empty #default_value, such as NULL or FALSE, can
+    // be used to indicate that no radio button is selected by default.)
+    if (!isset($input) && !empty($element['#default_value'])) {
       $element['#needs_validation'] = TRUE;
     }
-    // The value stays the same, but the flags above will ensure it is
-    // processed properly.
     return $input;
   }
-  elseif (isset($element['#default_value'])) {
-    return $element['#default_value'];
+  else {
+    // For default value handling, simply return #default_value. Additionally,
+    // for a NULL default value, set #has_garbage_value to prevent
+    // _form_builder_handle_input_element() converting the NULL to an empty
+    // string, so that code can distinguish between nothing selected and the
+    // selection of a radio button whose value is an empty string.
+    $value = isset($element['#default_value']) ? $element['#default_value'] : NULL;
+    if (!isset($value)) {
+      $element['#has_garbage_value'] = TRUE;
+    }
+    return $value;
   }
 }
 
diff --git a/includes/graph.inc b/includes/graph.inc
index 9ef86a1..35e6830 100644
--- a/includes/graph.inc
+++ b/includes/graph.inc
@@ -2,12 +2,12 @@
 
 /**
  * @file
- * Directed acyclic graph functions.
+ * Directed acyclic graph manipulation.
  */
 
 
 /**
- * Performs a depth-first sort on a directed acyclic graph.
+ * Performs a depth-first search and sort on a directed acyclic graph.
  *
  * @param $graph
  *   A three dimensional associated array, with the first keys being the names
@@ -52,7 +52,7 @@ function drupal_depth_first_search(&$graph) {
     // The components of the graph.
     'components' => array(),
   );
-  // Perform the actual sort.
+  // Perform the actual search.
   foreach ($graph as $start => $data) {
     _drupal_depth_first_search($graph, $state, $start);
   }
@@ -72,7 +72,7 @@ function drupal_depth_first_search(&$graph) {
 }
 
 /**
- * Performs a depth-first sort on a graph.
+ * Performs a depth-first search on a graph.
  *
  * @param $graph
  *   A three dimensional associated graph array.
diff --git a/includes/locale.inc b/includes/locale.inc
index 7fb8d64..c168da0 100644
--- a/includes/locale.inc
+++ b/includes/locale.inc
@@ -279,6 +279,12 @@ function locale_language_from_url($languages) {
       break;
 
     case LOCALE_LANGUAGE_NEGOTIATION_URL_DOMAIN:
+      // Get only the host, not the port.
+      $http_host= $_SERVER['HTTP_HOST'];
+      if (strpos($http_host, ':') !== FALSE) {
+        $http_host_tmp = explode(':', $http_host);
+        $http_host = current($http_host_tmp);
+      }
       foreach ($languages as $language) {
         // Skip check if the language doesn't have a domain.
         if ($language->domain) {
@@ -286,7 +292,7 @@ function locale_language_from_url($languages) {
           // Remove protocol and add http:// so parse_url works
           $host = 'http://' . str_replace(array('http://', 'https://'), '', $language->domain);
           $host = parse_url($host, PHP_URL_HOST);
-          if ($_SERVER['HTTP_HOST'] == $host) {
+          if ($http_host == $host) {
             $language_url = $language->language;
             break;
           }
@@ -1854,7 +1860,16 @@ function _locale_translate_seek() {
   }
 
   $sql_query = db_select('locales_source', 's');
-  $sql_query->leftJoin('locales_target', 't', 't.lid = s.lid');
+
+  $limit_language = NULL;
+  if ($query['language'] != 'en' && $query['language'] != 'all') {
+    $sql_query->leftJoin('locales_target', 't', "t.lid = s.lid AND t.language = :langcode", array(':langcode' => $query['language']));
+    $limit_language = $query['language'];
+  }
+  else {
+    $sql_query->leftJoin('locales_target', 't', 't.lid = s.lid');
+  }
+
   $sql_query->fields('s', array('source', 'location', 'context', 'lid', 'textgroup'));
   $sql_query->fields('t', array('translation', 'language'));
 
@@ -1883,12 +1898,6 @@ function _locale_translate_seek() {
       break;
   }
 
-  $limit_language = NULL;
-  if ($query['language'] != 'en' && $query['language'] != 'all') {
-    $sql_query->condition('language', $query['language']);
-    $limit_language = $query['language'];
-  }
-
   // Add a condition on the text group.
   if (!empty($query['group']) && $query['group'] != 'all') {
     $sql_query->condition('s.textgroup', $query['group']);
diff --git a/includes/module.inc b/includes/module.inc
index 500bc5e..28bca23 100644
--- a/includes/module.inc
+++ b/includes/module.inc
@@ -178,6 +178,33 @@ function system_list($type) {
           $lists['filepaths'][] = array('type' => $record->type, 'name' => $record->name, 'filepath' => $record->filename);
         }
       }
+      foreach ($lists['theme'] as $key => $theme) {
+        if (!empty($theme->info['base theme'])) {
+          // Make a list of the theme's base themes.
+          $lists['theme'][$key]->base_themes = drupal_find_base_themes($lists['theme'], $key);
+          // Don't proceed if there was a problem with the root base theme.
+          if (!current($lists['theme'][$key]->base_themes)) {
+            continue;
+          }
+          // Determine the root base theme.
+          $base_key = key($lists['theme'][$key]->base_themes);
+          // Add to the list of sub-themes for each of the theme's base themes.
+          foreach (array_keys($lists['theme'][$key]->base_themes) as $base_theme) {
+            $lists['theme'][$base_theme]->sub_themes[$key] = $lists['theme'][$key]->info['name'];
+          }
+          // Add the base theme's theme engine info.
+          $lists['theme'][$key]->info['engine'] = isset($lists['theme'][$base_key]->info['engine']) ? $lists['theme'][$base_key]->info['engine'] : 'theme';
+        }
+        else {
+          // A plain theme is its own engine.
+          $base_key = $key;
+          if (!isset($lists['theme'][$key]->info['engine'])) {
+            $lists['theme'][$key]->info['engine'] = 'theme';
+          }
+        }
+        // Set the theme engine prefix.
+        $lists['theme'][$key]->prefix = ($lists['theme'][$key]->info['engine'] == 'theme') ? $base_key : $lists['theme'][$key]->info['engine'];
+      }
       cache_set('system_list', $lists, 'cache_bootstrap');
     }
     // To avoid a separate database lookup for the filepath, prime the
diff --git a/includes/theme.inc b/includes/theme.inc
index 51e1075..c4b7122 100644
--- a/includes/theme.inc
+++ b/includes/theme.inc
@@ -734,21 +734,40 @@ function _theme_build_registry($theme, $base_theme, $theme_engine) {
  *
  * @return
  *   An associative array of the currently available themes. The keys are the
- *   names of the themes and the values are objects having the following
+ *   themes' machine names and the values are objects having the following
  *   properties:
- *   - 'filename': The name of the .info file.
- *   - 'name': The name of the theme.
- *   - 'status': 1 for enabled, 0 for disabled themes.
- *   - 'info': The contents of the .info file.
- *   - 'stylesheets': A two dimensional array, using the first key for the
- *     'media' attribute (e.g. 'all'), the second for the name of the file
- *     (e.g. style.css). The value is a complete filepath
- *     (e.g. themes/bartik/style.css).
- *   - 'scripts': An associative array of JavaScripts, using the filename as key
- *     and the complete filepath as value.
- *   - 'engine': The name of the theme engine.
- *   - 'base theme': The name of the base theme.
- */
+ *   - filename: The filepath and name of the .info file.
+ *   - name: The machine name of the theme.
+ *   - status: 1 for enabled, 0 for disabled themes.
+ *   - info: The contents of the .info file.
+ *   - stylesheets: A two dimensional array, using the first key for the
+ *     media attribute (e.g. 'all'), the second for the name of the file
+ *     (e.g. style.css). The value is a complete filepath (e.g.
+ *     themes/bartik/style.css). Not set if no stylesheets are defined in the
+ *     .info file.
+ *   - scripts: An associative array of JavaScripts, using the filename as key
+ *     and the complete filepath as value. Not set if no scripts are defined in
+ *     the .info file.
+ *   - prefix: The base theme engine prefix.
+ *   - engine: The machine name of the theme engine.
+ *   - base_theme: If this is a sub-theme, the machine name of the base theme
+ *     defined in the .info file. Otherwise, the element is not set.
+ *   - base_themes: If this is a sub-theme, an associative array of the
+ *     base-theme ancestors of this theme, starting with this theme's base
+ *     theme, then the base theme's own base theme, etc. Each entry has an
+ *     array key equal to the theme's machine name, and a value equal to the
+ *     human-readable theme name; if a theme with matching machine name does
+ *     not exist in the system, the value will instead be NULL (and since the
+ *     system would not know whether that theme itself has a base theme, that
+ *     will end the array of base themes). This is not set if the theme is not
+ *     a sub-theme.
+ *   - sub_themes: An associative array of themes on the system that are
+ *     either direct sub-themes (that is, they declare this theme to be
+ *     their base theme), direct sub-themes of sub-themes, etc. The keys are
+ *     the themes' machine names, and the values are the themes' human-readable
+ *     names. This element is not set if there are no themes on the system that
+ *     declare this theme as their base theme. 
+*/
 function list_themes($refresh = FALSE) {
   $list = &drupal_static(__FUNCTION__, array());
 
@@ -804,6 +823,47 @@ function list_themes($refresh = FALSE) {
 }
 
 /**
+ * Find all the base themes for the specified theme.
+ *
+ * Themes can inherit templates and function implementations from earlier themes.
+ *
+ * @param $themes
+ *   An array of available themes.
+ * @param $key
+ *   The name of the theme whose base we are looking for.
+ * @param $used_keys
+ *   A recursion parameter preventing endless loops.
+ * @return
+ *   Returns an array of all of the theme's ancestors; the first element's value
+ *   will be NULL if an error occurred.
+ */
+function drupal_find_base_themes($themes, $key, $used_keys = array()) {
+  $base_key = $themes[$key]->info['base theme'];
+  // Does the base theme exist?
+  if (!isset($themes[$base_key])) {
+    return array($base_key => NULL);
+  }
+
+  $current_base_theme = array($base_key => $themes[$base_key]->info['name']);
+
+  // Is the base theme itself a child of another theme?
+  if (isset($themes[$base_key]->info['base theme'])) {
+    // Do we already know the base themes of this theme?
+    if (isset($themes[$base_key]->base_themes)) {
+      return $themes[$base_key]->base_themes + $current_base_theme;
+    }
+    // Prevent loops.
+    if (!empty($used_keys[$base_key])) {
+      return array($base_key => NULL);
+    }
+    $used_keys[$base_key] = TRUE;
+    return drupal_find_base_themes($themes, $base_key, $used_keys) + $current_base_theme;
+  }
+  // If we get here, then this is our parent theme.
+  return $current_base_theme;
+}
+
+/**
  * Generates themed output.
  *
  * All requests for themed output must go through this function. It examines
@@ -811,11 +871,28 @@ function list_themes($refresh = FALSE) {
  * @link themeable theme function or template @endlink, by checking the theme
  * registry.
  *
- * The first argument to this function is the name of the theme hook. For
- * instance, to theme a table, the theme hook name is 'table'. By default, this
- * theme hook could be implemented by a function called 'theme_table' or a
- * template file called 'table.tpl.php', but hook_theme() can override the
- * default function or template name.
+ * Most commonly, the first argument to this function is the name of the theme
+ * hook. For instance, to theme a taxonomy term, the theme hook name is
+ * 'taxonomy_term'. Modules register theme hooks within a hook_theme()
+ * implementation and provide a default implementation via a function named
+ * theme_HOOK() (e.g., theme_taxonomy_term()) or via a template file named
+ * according to the value of the 'template' key registered with the theme hook
+ * (see hook_theme() for details). Default templates are implemented with the
+ * PHPTemplate rendering engine and are named the same as the theme hook, with
+ * underscores changed to hyphens, so for the 'taxonomy_term' theme hook, the
+ * default template is 'taxonomy-term.tpl.php'.
+ *
+ * Themes may also register new theme hooks within a hook_theme()
+ * implementation, but it is more common for themes to override default
+ * implementations provided by modules than to register entirely new theme
+ * hooks. Themes can override a default implementation by implementing a
+ * function named THEME_HOOK() (for example, the 'bartik' theme overrides the
+ * default implementation of the 'menu_tree' theme hook by implementing a
+ * bartik_menu_tree() function), or by adding a template file within its folder
+ * structure that follows the template naming structure used by the theme's
+ * rendering engine (for example, since the Bartik theme uses the PHPTemplate
+ * rendering engine, it overrides the default implementation of the 'page' theme
+ * hook by containing a 'page.tpl.php' file within its folder structure).
  *
  * If the implementation is a template file, several functions are called
  * before the template file is invoked, to modify the $variables array. These
@@ -824,42 +901,44 @@ function list_themes($refresh = FALSE) {
  * list, HOOK indicates the theme hook name, MODULE indicates a module name,
  * THEME indicates a theme name, and ENGINE indicates a theme engine name):
  * - template_preprocess(&$variables, $hook): Creates a default set of variables
- *   for all theme hooks.
- * - template_preprocess_HOOK(&$variables): Should be implemented by
- *   the module that registers the theme hook, to set up default variables.
+ *   for all theme hooks with template implementations.
+ * - template_preprocess_HOOK(&$variables): Should be implemented by the module
+ *   that registers the theme hook, to set up default variables.
  * - MODULE_preprocess(&$variables, $hook): hook_preprocess() is invoked on all
  *   implementing modules.
  * - MODULE_preprocess_HOOK(&$variables): hook_preprocess_HOOK() is invoked on
  *   all implementing modules, so that modules that didn't define the theme hook
  *   can alter the variables.
  * - ENGINE_engine_preprocess(&$variables, $hook): Allows the theme engine to
- *   set necessary variables for all theme hooks.
+ *   set necessary variables for all theme hooks with template implementations.
  * - ENGINE_engine_preprocess_HOOK(&$variables): Allows the theme engine to set
  *   necessary variables for the particular theme hook.
  * - THEME_preprocess(&$variables, $hook): Allows the theme to set necessary
- *   variables for all theme hooks.
+ *   variables for all theme hooks with template implementations.
  * - THEME_preprocess_HOOK(&$variables): Allows the theme to set necessary
  *   variables specific to the particular theme hook.
- * - template_process(&$variables, $hook): Creates a default set of variables
- *   for all theme hooks.
- * - template_process_HOOK(&$variables): This is the first processor specific
- *   to the theme hook; it should be implemented by the module that registers
- *   it.
+ * - template_process(&$variables, $hook): Creates an additional set of default
+ *   variables for all theme hooks with template implementations. The variables
+ *   created in this function are derived from ones created by
+ *   template_preprocess(), but potentially altered by the other preprocess
+ *   functions listed above. For example, any preprocess function can add to or
+ *   modify the $variables['attributes_array'] variable, and after all of them
+ *   have finished executing, template_process() flattens it into a
+ *   $variables['attributes'] string for convenient use by templates.
+ * - template_process_HOOK(&$variables): Should be implemented by the module
+ *   that registers the theme hook, if it needs to perform additional variable
+ *   processing after all preprocess functions have finished.
  * - MODULE_process(&$variables, $hook): hook_process() is invoked on all
  *   implementing modules.
  * - MODULE_process_HOOK(&$variables): hook_process_HOOK() is invoked on
  *   on all implementing modules, so that modules that didn't define the theme
  *   hook can alter the variables.
- * - ENGINE_engine_process(&$variables, $hook): Allows the theme engine to set
- *   necessary variables for all theme hooks.
- * - ENGINE_engine_process_HOOK(&$variables): Allows the theme engine to set
- *   necessary variables for the particular theme hook.
- * - ENGINE_process(&$variables, $hook): Allows the theme engine to process the
- *   variables.
- * - ENGINE_process_HOOK(&$variables): Allows the theme engine to process the
- *   variables specific to the theme hook.
+ * - ENGINE_engine_process(&$variables, $hook): Allows the theme engine to
+ *   process variables for all theme hooks with template implementations.
+ * - ENGINE_engine_process_HOOK(&$variables): Allows the theme engine to process
+ *   the variables specific to the theme hook.
  * - THEME_process(&$variables, $hook):  Allows the theme to process the
- *   variables.
+ *   variables for all theme hooks with template implementations.
  * - THEME_process_HOOK(&$variables):  Allows the theme to process the
  *   variables specific to the theme hook.
  *
@@ -911,6 +990,9 @@ function list_themes($refresh = FALSE) {
  *   An HTML string representing the themed output.
  *
  * @see themeable
+ * @see hook_theme()
+ * @see template_preprocess()
+ * @see template_process()
  */
 function theme($hook, $variables = array()) {
   // If called before all modules are loaded, we do not necessarily have a full
@@ -1473,7 +1555,7 @@ function theme_disable($theme_list) {
 }
 
 /**
- * @ingroup themeable
+ * @addtogroup themeable
  * @{
  */
 
@@ -2172,7 +2254,7 @@ function theme_indentation($variables) {
 }
 
 /**
- * @} End of "ingroup themeable".
+ * @} End of "addtogroup themeable".
  */
 
 /**
@@ -2218,11 +2300,15 @@ function _theme_table_cell($cell, $header = FALSE) {
 
 /**
  * Adds a default set of helper variables for variable processors and templates.
- * This comes in before any other preprocess function which makes it possible to
- * be used in default theme implementations (non-overridden theme functions).
  *
- * For more detailed information, see theme().
+ * This function is called for theme hooks implemented as templates only, not
+ * for theme hooks implemented as functions. This preprocess function is the
+ * first in the sequence of preprocessing and processing functions that is
+ * called when preparing variables for a template. See theme() for more details
+ * about the full sequence.
  *
+ * @see theme()
+ * @see template_process()
  */
 function template_preprocess(&$variables, $hook) {
   global $user;
@@ -2299,10 +2385,19 @@ function _template_preprocess_default_variables() {
 }
 
 /**
- * A default process function used to alter variables as late as possible.
+ * Adds helper variables derived from variables defined during preprocessing.
  *
- * For more detailed information, see theme().
+ * When preparing variables for a theme hook implementation, all 'preprocess'
+ * functions run first, then all 'process' functions (see theme() for details
+ * about the full sequence).
  *
+ * This function serializes array variables manipulated during the preprocessing
+ * phase into strings for convenient use by templates. As with
+ * template_preprocess(), this function does not get called for theme hooks
+ * implemented as functions.
+ *
+ * @see theme()
+ * @see template_preprocess()
  */
 function template_process(&$variables, $hook) {
   // Flatten out classes.
diff --git a/includes/update.inc b/includes/update.inc
index 6588fac..f7c7b66 100644
--- a/includes/update.inc
+++ b/includes/update.inc
@@ -1486,5 +1486,5 @@ function update_retrieve_dependencies() {
  */
 
 /**
- * @} End of "defgroup update-api-6.x-to-7.x"
+ * @} End of "defgroup update-api-6.x-to-7.x".
  */
diff --git a/misc/autocomplete.js b/misc/autocomplete.js
index 267d4b7..8f7ac60 100644
--- a/misc/autocomplete.js
+++ b/misc/autocomplete.js
@@ -99,10 +99,12 @@ Drupal.jsAC.prototype.onkeyup = function (input, e) {
       return true;
 
     default: // All other keys.
-      if (input.value.length > 0)
+      if (input.value.length > 0 && !input.readOnly) {
         this.populatePopup();
-      else
+      }
+      else {
         this.hidePopup(e.keyCode);
+      }
       return true;
   }
 };
diff --git a/misc/states.js b/misc/states.js
index 00eeba1..594f818 100644
--- a/misc/states.js
+++ b/misc/states.js
@@ -16,10 +16,11 @@ var states = Drupal.states = {
  */
 Drupal.behaviors.states = {
   attach: function (context, settings) {
+    var $context = $(context);
     for (var selector in settings.states) {
       for (var state in settings.states[selector]) {
         new states.Dependent({
-          element: $(selector),
+          element: $context.find(selector),
           state: states.State.sanitize(state),
           constraints: settings.states[selector][state]
         });
diff --git a/misc/tableselect.js b/misc/tableselect.js
index 5a88ac2..fee63a9 100644
--- a/misc/tableselect.js
+++ b/misc/tableselect.js
@@ -17,7 +17,8 @@ Drupal.tableSelect = function () {
   var table = this, checkboxes, lastChecked;
   var strings = { 'selectAll': Drupal.t('Select all rows in this table'), 'selectNone': Drupal.t('Deselect all rows in this table') };
   var updateSelectAll = function (state) {
-    $('th.select-all input:checkbox', table).each(function () {
+    // Update table's select-all checkbox (and sticky header's if available).
+    $(table).prev('table.sticky-header').andSelf().find('th.select-all input:checkbox').each(function() {
       $(this).attr('title', state ? strings.selectNone : strings.selectAll);
       this.checked = state;
     });
diff --git a/modules/aggregator/aggregator.info b/modules/aggregator/aggregator.info
index 7cda3c4..82d79aa 100644
--- a/modules/aggregator/aggregator.info
+++ b/modules/aggregator/aggregator.info
@@ -7,10 +7,10 @@ files[] = aggregator.test
 configure = admin/config/services/aggregator/settings
 stylesheets[all][] = aggregator.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/aggregator/tests/aggregator_test.info b/modules/aggregator/tests/aggregator_test.info
index 46281c4..1c2d903 100644
--- a/modules/aggregator/tests/aggregator_test.info
+++ b/modules/aggregator/tests/aggregator_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/block/block.info b/modules/block/block.info
index 5e6322b..871ceaa 100644
--- a/modules/block/block.info
+++ b/modules/block/block.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = block.test
 configure = admin/structure/block
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/block/block.install b/modules/block/block.install
index b2ab477..a78c885 100644
--- a/modules/block/block.install
+++ b/modules/block/block.install
@@ -457,6 +457,15 @@ function block_update_7007() {
 }
 
 /**
+ * @} End of "addtogroup updates-6.x-to-7.x".
+ */
+
+/**
+ * @addtogroup updates-7.x-extra
+ * @{
+ */
+
+/**
  * Update database to match Drupal 7 schema.
  */
 function block_update_7008() {
@@ -464,5 +473,5 @@ function block_update_7008() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-7.x-extra".
  */
diff --git a/modules/block/block.test b/modules/block/block.test
index cdd0d45..8e6e470 100644
--- a/modules/block/block.test
+++ b/modules/block/block.test
@@ -97,7 +97,7 @@ class BlockTestCase extends DrupalWebTestCase {
 
     // Set visibility only for authenticated users, to verify delete functionality.
     $edit = array();
-    $edit['roles[2]'] = TRUE;
+    $edit['roles[' . DRUPAL_AUTHENTICATED_RID . ']'] = TRUE;
     $this->drupalPost('admin/structure/block/manage/block/' . $bid . '/configure', $edit, t('Save block'));
 
     // Delete the created custom block & verify that it's been deleted and no longer appearing on the page.
@@ -171,7 +171,7 @@ class BlockTestCase extends DrupalWebTestCase {
     // authenticated users.
     $edit = array();
     $edit['pages'] = 'user*';
-    $edit['roles[2]'] = TRUE;
+    $edit['roles[' . DRUPAL_AUTHENTICATED_RID . ']'] = TRUE;
     $this->drupalPost('admin/structure/block/manage/' . $block['module'] . '/' . $block['delta'] . '/configure', $edit, t('Save block'));
 
     // Move block to the first sidebar.
diff --git a/modules/block/tests/block_test.info b/modules/block/tests/block_test.info
index 0de07c9..95bc848 100644
--- a/modules/block/tests/block_test.info
+++ b/modules/block/tests/block_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/block/tests/themes/block_test_theme/block_test_theme.info b/modules/block/tests/themes/block_test_theme/block_test_theme.info
index 4a2dea6..ca84691 100644
--- a/modules/block/tests/themes/block_test_theme/block_test_theme.info
+++ b/modules/block/tests/themes/block_test_theme/block_test_theme.info
@@ -13,10 +13,10 @@ regions[footer] = Footer
 regions[highlighted] = Highlighted
 regions[help] = Help
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/blog/blog.info b/modules/blog/blog.info
index 8a499f1..34816a8 100644
--- a/modules/blog/blog.info
+++ b/modules/blog/blog.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 files[] = blog.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/book/book.info b/modules/book/book.info
index fbe6d5a..3596ed0 100644
--- a/modules/book/book.info
+++ b/modules/book/book.info
@@ -7,10 +7,10 @@ files[] = book.test
 configure = admin/content/book/settings
 stylesheets[all][] = book.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/book/book.module b/modules/book/book.module
index 61061f0..1fb0c0b 100644
--- a/modules/book/book.module
+++ b/modules/book/book.module
@@ -213,7 +213,17 @@ function _book_outline_access($node) {
  * @see book_menu()
  */
 function _book_outline_remove_access($node) {
-  return isset($node->book) && ($node->book['bid'] != $node->nid) && _book_outline_access($node);
+  return _book_node_is_removable($node) && _book_outline_access($node);
+}
+
+/**
+ * Determines if a node can be removed from the book.
+ *
+ * A node can be removed from a book if it is actually in a book and it either
+ * is not a top-level page or is a top-level page with no children.
+ */
+function _book_node_is_removable($node) {
+  return (!empty($node->book['bid']) && (($node->book['bid'] != $node->nid) || !$node->book['has_children']));
 }
 
 /**
@@ -518,13 +528,12 @@ function _book_add_form_elements(&$form, &$form_state, $node) {
     '#collapsed' => TRUE,
     '#group' => 'additional_settings',
     '#attributes' => array(
-      'class' => array('book-form'),
+      'class' => array('book-outline-form'),
     ),
     '#attached' => array(
       'js' => array(drupal_get_path('module', 'book') . '/book.js'),
     ),
     '#tree' => TRUE,
-    '#attributes' => array('class' => array('book-outline-form')),
   );
   foreach (array('menu_name', 'mlid', 'nid', 'router_path', 'has_children', 'options', 'module', 'original_bid', 'parent_depth_limit') as $key) {
     $form['book'][$key] = array(
diff --git a/modules/book/book.pages.inc b/modules/book/book.pages.inc
index 5a05c9f..583eb7a 100644
--- a/modules/book/book.pages.inc
+++ b/modules/book/book.pages.inc
@@ -137,7 +137,7 @@ function book_outline_form($form, &$form_state, $node) {
   $form['remove'] = array(
     '#type' => 'submit',
     '#value' => t('Remove from book outline'),
-    '#access' => $node->nid != $node->book['bid'] && $node->book['bid'],
+    '#access' => _book_node_is_removable($node),
     '#weight' => 20,
     '#submit' => array('book_remove_button_submit'),
   );
@@ -216,8 +216,7 @@ function book_remove_form($form, &$form_state, $node) {
  */
 function book_remove_form_submit($form, &$form_state) {
   $node = $form['#node'];
-  if ($node->nid != $node->book['bid']) {
-    // Only allowed when this is not a book (top-level page).
+  if (_book_node_is_removable($node)) {
     menu_link_delete($node->book['mlid']);
     db_delete('book')
       ->condition('nid', $node->nid)
diff --git a/modules/book/book.test b/modules/book/book.test
index 6c351b8..d1f5273 100644
--- a/modules/book/book.test
+++ b/modules/book/book.test
@@ -32,7 +32,7 @@ class BookTestCase extends DrupalWebTestCase {
     // Create users.
     $this->book_author = $this->drupalCreateUser(array('create new books', 'create book content', 'edit own book content', 'add content to books'));
     $this->web_user = $this->drupalCreateUser(array('access printer-friendly version', 'node test view'));
-    $this->admin_user = $this->drupalCreateUser(array('create new books', 'create book content', 'edit own book content', 'add content to books', 'administer blocks', 'administer permissions'));
+    $this->admin_user = $this->drupalCreateUser(array('create new books', 'create book content', 'edit own book content', 'add content to books', 'administer blocks', 'administer permissions', 'administer book outlines', 'node test view'));
   }
 
   /**
@@ -279,8 +279,8 @@ class BookTestCase extends DrupalWebTestCase {
 
      // Give anonymous users the permission 'node test view'.
      $edit = array();
-     $edit['1[node test view]'] = TRUE;
-     $this->drupalPost('admin/people/permissions/1', $edit, t('Save permissions'));
+     $edit[DRUPAL_ANONYMOUS_RID . '[node test view]'] = TRUE;
+     $this->drupalPost('admin/people/permissions/' . DRUPAL_ANONYMOUS_RID, $edit, t('Save permissions'));
      $this->assertText(t('The changes have been saved.'), t("Permission 'node test view' successfully assigned to anonymous users."));
 
     // Test correct display of the block.
@@ -315,8 +315,8 @@ class BookTestCase extends DrupalWebTestCase {
 
      // Give anonymous users the permission 'node test view'.
      $edit = array();
-     $edit['1[node test view]'] = TRUE;
-     $this->drupalPost('admin/people/permissions/1', $edit, t('Save permissions'));
+     $edit[DRUPAL_ANONYMOUS_RID . '[node test view]'] = TRUE;
+     $this->drupalPost('admin/people/permissions/' . DRUPAL_ANONYMOUS_RID, $edit, t('Save permissions'));
      $this->assertText(t('The changes have been saved.'), t('Permission \'node test view\' successfully assigned to anonymous users.'));
 
      // Create a book.
@@ -332,4 +332,29 @@ class BookTestCase extends DrupalWebTestCase {
      $this->drupalGet('node/' . $this->book->nid);
      $this->assertText($block_title, t('Book navigation block is displayed to anonymous users.'));
    }
+
+  /**
+   * Tests the access for deleting top-level book nodes.
+   */
+   function testBookDelete() {
+     $nodes = $this->createBook();
+     $this->drupalLogin($this->admin_user);
+     $edit = array();
+
+     // Test access to delete top-level and child book nodes.
+     $this->drupalGet('node/' . $this->book->nid . '/outline/remove');
+     $this->assertResponse('403', t('Deleting top-level book node properly forbidden.'));
+     $this->drupalPost('node/' . $nodes[4]->nid . '/outline/remove', $edit, t('Remove'));
+     $node4 = node_load($nodes[4]->nid, NULL, TRUE);
+     $this->assertTrue(empty($node4->book), t('Deleting child book node properly allowed.'));
+
+     // Delete all child book nodes and retest top-level node deletion.
+     foreach ($nodes as $node) {
+       $nids[] = $node->nid;
+     }
+     node_delete_multiple($nids);
+     $this->drupalPost('node/' . $this->book->nid . '/outline/remove', $edit, t('Remove'));
+     $node = node_load($this->book->nid, NULL, TRUE);
+     $this->assertTrue(empty($node->book), t('Deleting childless top-level book node properly allowed.'));
+   }
 }
diff --git a/modules/color/color.info b/modules/color/color.info
index 54fc2a5..798d7b3 100644
--- a/modules/color/color.info
+++ b/modules/color/color.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 files[] = color.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/color/color.install b/modules/color/color.install
index 2a6b9cd..3a9aea3 100644
--- a/modules/color/color.install
+++ b/modules/color/color.install
@@ -42,6 +42,11 @@ function color_requirements($phase) {
 }
 
 /**
+ * @addtogroup updates-7.x-extra
+ * @{
+ */
+
+/**
  * Warn site administrator if unsafe CSS color codes are found in the database.
  */
 function color_update_7001() {
@@ -55,3 +60,7 @@ function color_update_7001() {
     }
   }
 }
+
+/**
+ * @} End of "addtogroup updates-7.x-extra".
+ */
diff --git a/modules/comment/comment.info b/modules/comment/comment.info
index 8783fae..09ecbc6 100644
--- a/modules/comment/comment.info
+++ b/modules/comment/comment.info
@@ -9,10 +9,10 @@ files[] = comment.test
 configure = admin/content/comment
 stylesheets[all][] = comment.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/comment/comment.install b/modules/comment/comment.install
index 7312e2a..e4da58f 100644
--- a/modules/comment/comment.install
+++ b/modules/comment/comment.install
@@ -345,6 +345,15 @@ function comment_update_7006(&$sandbox) {
 }
 
 /**
+ * @} End of "addtogroup updates-6.x-to-7.x".
+ */
+
+/**
+ * @addtogroup updates-7.x-extra
+ * @{
+ */
+
+/**
  * Add an index to the created column.
  */
 function comment_update_7007() {
@@ -372,15 +381,6 @@ function comment_update_7008() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
- */
-
-/**
- * @addtogroup updates-7.x-extra
- * @{
- */
-
-/**
  * Change the last_comment_timestamp column description.
  */
 function comment_update_7009() {
@@ -393,7 +393,7 @@ function comment_update_7009() {
 }
 
 /**
- * @} End of "addtogroup updates-7.x-extra"
+ * @} End of "addtogroup updates-7.x-extra".
  */
 
 /**
diff --git a/modules/comment/comment.module b/modules/comment/comment.module
index 6938833..429c3b0 100644
--- a/modules/comment/comment.module
+++ b/modules/comment/comment.module
@@ -103,6 +103,7 @@ function comment_entity_info() {
         'id' => 'cid',
         'bundle' => 'node_type',
         'label' => 'subject',
+        'language' => 'language',
       ),
       'bundles' => array(),
       'view modes' => array(
diff --git a/modules/comment/comment.pages.inc b/modules/comment/comment.pages.inc
index 7e88bff..482e3f2 100644
--- a/modules/comment/comment.pages.inc
+++ b/modules/comment/comment.pages.inc
@@ -23,8 +23,12 @@
  *   Some comments are replies to other comments. In those cases, $pid is the parent
  *   comment's cid.
  *
- * @return
- *   The rendered parent node or comment plus the new comment form.
+ * @return array
+ *   An associative array containing:
+ *   - An array for rendering the node or parent comment.
+ *     - comment_node: If the comment is a reply to the node.
+ *     - comment_parent: If the comment is a reply to another comment.
+ *   - comment_form: The comment form as a renderable array.
  */
 function comment_reply($node, $pid = NULL) {
   // Set the breadcrumb trail.
diff --git a/modules/comment/comment.test b/modules/comment/comment.test
index 4c67555..e787d25 100644
--- a/modules/comment/comment.test
+++ b/modules/comment/comment.test
@@ -2196,3 +2196,28 @@ class CommentThreadingTestCase extends CommentHelperCase {
     $this->assertEqual($reply_loaded->thread, '02.01/');
   }
 }
+
+/**
+ * Tests that comments behave correctly when the node is changed.
+ */
+class CommentNodeChangesTestCase extends CommentHelperCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => 'Comment deletion on node changes',
+      'description' => 'Tests that comments behave correctly when the node is changed.',
+      'group' => 'Comment',
+    );
+  }
+
+  /**
+   * Tests that comments are deleted with the node.
+   */
+  function testNodeDeletion() {
+    $this->drupalLogin($this->web_user);
+    $comment = $this->postComment($this->node, $this->randomName(), $this->randomName());
+    $this->assertTrue(comment_load($comment->id), 'The comment could be loaded.');
+    node_delete($this->node->nid);
+    $this->assertFalse(comment_load($comment->id), 'The comment could not be loaded after the node was deleted.');
+  }
+}
diff --git a/modules/contact/contact.info b/modules/contact/contact.info
index e52e343..c32a01c 100644
--- a/modules/contact/contact.info
+++ b/modules/contact/contact.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = contact.test
 configure = admin/structure/contact
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/contact/contact.install b/modules/contact/contact.install
index f601558..fba5cfd 100644
--- a/modules/contact/contact.install
+++ b/modules/contact/contact.install
@@ -164,5 +164,5 @@ function contact_update_7003() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-6.x-to-7.x".
  */
diff --git a/modules/contextual/contextual.info b/modules/contextual/contextual.info
index 5ce7b44..85e15d2 100644
--- a/modules/contextual/contextual.info
+++ b/modules/contextual/contextual.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 files[] = contextual.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/dashboard/dashboard.info b/modules/dashboard/dashboard.info
index 4a3fb78..b338be3 100644
--- a/modules/dashboard/dashboard.info
+++ b/modules/dashboard/dashboard.info
@@ -7,10 +7,10 @@ files[] = dashboard.test
 dependencies[] = block
 configure = admin/dashboard/customize
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/dblog/dblog.info b/modules/dblog/dblog.info
index d243a86..dea1ba9 100644
--- a/modules/dblog/dblog.info
+++ b/modules/dblog/dblog.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 files[] = dblog.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/dblog/dblog.install b/modules/dblog/dblog.install
index 759c7bc..1eedcb0 100644
--- a/modules/dblog/dblog.install
+++ b/modules/dblog/dblog.install
@@ -138,5 +138,5 @@ function dblog_update_7001() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-6.x-to-7.x".
  */
diff --git a/modules/dblog/dblog.test b/modules/dblog/dblog.test
index 2e9810b..a91356c 100644
--- a/modules/dblog/dblog.test
+++ b/modules/dblog/dblog.test
@@ -424,7 +424,7 @@ class DBLogTestCase extends DrupalWebTestCase {
       $severity = WATCHDOG_EMERGENCY;
       for ($j = 0; $j < 3; $j++) {
         $types[] = $type = array(
-          'count' => mt_rand(1, 5),
+          'count' => $j + 1,
           'type' => $type_name,
           'severity' => $severity++,
         );
@@ -473,7 +473,7 @@ class DBLogTestCase extends DrupalWebTestCase {
       $count = $this->getTypeCount($types);
       $this->assertEqual(array_sum($count), $type['count'], 'Count matched');
     }
-    
+
     // Clear all logs and make sure the confirmation message is found.
     $this->drupalPost('admin/reports/dblog', array(), t('Clear log messages'));
     $this->assertText(t('Database log cleared.'), t('Confirmation message found'));
diff --git a/modules/field/field.api.php b/modules/field/field.api.php
index 134af66..0d01c59 100644
--- a/modules/field/field.api.php
+++ b/modules/field/field.api.php
@@ -676,7 +676,7 @@ function hook_field_is_empty($item, $field) {
 }
 
 /**
- * @} End of "defgroup field_types"
+ * @} End of "defgroup field_types".
  */
 
 /**
@@ -935,6 +935,38 @@ function hook_field_widget_WIDGET_TYPE_form_alter(&$element, &$form_state, $cont
 }
 
 /**
+ * Alters the widget properties of a field instance before it gets displayed.
+ *
+ * Note that instead of hook_field_widget_properties_alter(), which is called
+ * for all fields on all entity types,
+ * hook_field_widget_properties_ENTITY_TYPE_alter() may be used to alter widget
+ * properties for fields on a specific entity type only.
+ *
+ * This hook is called once per field per added or edit entity. If the result
+ * of the hook involves reading from the database, it is highly recommended to
+ * statically cache the information.
+ *
+ * @param $widget
+ *   The instance's widget properties.
+ * @param $context
+ *   An associative array containing:
+ *   - entity_type: The entity type; e.g., 'node' or 'user'.
+ *   - entity: The entity object.
+ *   - field: The field that the widget belongs to.
+ *   - instance: The instance of the field.
+ *
+ * @see hook_field_widget_properties_ENTITY_TYPE_alter()
+ */
+function hook_field_widget_properties_alter(&$widget, $context) {
+  // Change a widget's type according to the time of day.
+  $field = $context['field'];
+  if ($context['entity_type'] == 'node' && $field['field_name'] == 'field_foo') {
+    $time = date('H');
+    $widget['type'] = $time < 12 ? 'widget_am' : 'widget_pm';
+  }
+}
+
+/**
  * Flag a field-level validation error.
  *
  * @param $element
@@ -954,12 +986,12 @@ function hook_field_widget_WIDGET_TYPE_form_alter(&$element, &$form_state, $cont
  *   An associative array containing the current state of the form.
  */
 function hook_field_widget_error($element, $error, $form, &$form_state) {
-  form_error($element['value'], $error['message']);
+  form_error($element, $error['message']);
 }
 
 
 /**
- * @} End of "defgroup field_widget"
+ * @} End of "defgroup field_widget".
  */
 
 
@@ -1198,7 +1230,7 @@ function hook_field_formatter_view($entity_type, $entity, $field, $instance, $la
 }
 
 /**
- * @} End of "defgroup field_formatter"
+ * @} End of "defgroup field_formatter".
  */
 
 /**
@@ -1554,11 +1586,11 @@ function hook_field_attach_delete_bundle($entity_type, $bundle, $instances) {
 }
 
 /**
- * @} End of "defgroup field_attach"
+ * @} End of "defgroup field_attach".
  */
 
 /**
- * @ingroup field_storage
+ * @addtogroup field_storage
  * @{
  */
 
@@ -2327,38 +2359,6 @@ function hook_field_extra_fields_display_alter(&$displays, $context) {
 }
 
 /**
- * Alters the widget properties of a field instance before it gets displayed.
- *
- * Note that instead of hook_field_widget_properties_alter(), which is called
- * for all fields on all entity types,
- * hook_field_widget_properties_ENTITY_TYPE_alter() may be used to alter widget
- * properties for fields on a specific entity type only.
- *
- * This hook is called once per field per added or edit entity. If the result
- * of the hook involves reading from the database, it is highly recommended to
- * statically cache the information.
- *
- * @param $widget
- *   The instance's widget properties.
- * @param $context
- *   An associative array containing:
- *   - entity_type: The entity type; e.g., 'node' or 'user'.
- *   - entity: The entity object.
- *   - field: The field that the widget belongs to.
- *   - instance: The instance of the field.
- *
- * @see hook_field_widget_properties_ENTITY_TYPE_alter()
- */
-function hook_field_widget_properties_alter(&$widget, $context) {
-  // Change a widget's type according to the time of day.
-  $field = $context['field'];
-  if ($context['entity_type'] == 'node' && $field['field_name'] == 'field_foo') {
-    $time = date('H');
-    $widget['type'] = $time < 12 ? 'widget_am' : 'widget_pm';
-  }
-}
-
-/**
  * Alters the widget properties of a field instance on a given entity type
  * before it gets displayed.
  *
@@ -2391,11 +2391,11 @@ function hook_field_widget_properties_ENTITY_TYPE_alter(&$widget, $context) {
 }
 
 /**
- * @} End of "ingroup field_storage"
+ * @} End of "addtogroup field_storage".
  */
 
 /**
- * @ingroup field_crud
+ * @addtogroup field_crud
  * @{
  */
 
@@ -2644,7 +2644,7 @@ function hook_field_storage_purge($entity_type, $entity, $field, $instance) {
 }
 
 /**
- * @} End of "ingroup field_crud"
+ * @} End of "addtogroup field_crud".
  */
 
 /**
@@ -2675,5 +2675,5 @@ function hook_field_access($op, $field, $entity_type, $entity, $account) {
 }
 
 /**
- * @} End of "addtogroup hooks"
+ * @} End of "addtogroup hooks".
  */
diff --git a/modules/field/field.attach.inc b/modules/field/field.attach.inc
index 36117eb..868d7bd 100644
--- a/modules/field/field.attach.inc
+++ b/modules/field/field.attach.inc
@@ -65,7 +65,7 @@ define('FIELD_STORAGE_UPDATE', 'update');
 define('FIELD_STORAGE_INSERT', 'insert');
 
 /**
- * @} End of "defgroup field_storage"
+ * @} End of "defgroup field_storage".
  */
 
 /**
@@ -1365,5 +1365,5 @@ function field_attach_delete_bundle($entity_type, $bundle) {
 
 
 /**
- * @} End of "defgroup field_attach"
+ * @} End of "defgroup field_attach".
  */
diff --git a/modules/field/field.form.inc b/modules/field/field.form.inc
index 5641375..6c27c43 100644
--- a/modules/field/field.form.inc
+++ b/modules/field/field.form.inc
@@ -37,90 +37,86 @@ function field_default_form($entity_type, $entity, $field, $instance, $langcode,
 
   // Collect widget elements.
   $elements = array();
-  if (field_access('edit', $field, $entity_type, $entity)) {
-    // Store field information in $form_state.
-    if (!field_form_get_state($parents, $field_name, $langcode, $form_state)) {
-      $field_state = array(
-        'field' => $field,
-        'instance' => $instance,
-        'items_count' => count($items),
-        'array_parents' => array(),
-        'errors' => array(),
-      );
-      field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
-    }
 
-    // If field module handles multiple values for this form element, and we
-    // are displaying an individual element, process the multiple value form.
-    if (!isset($get_delta) && field_behaviors_widget('multiple values', $instance) == FIELD_BEHAVIOR_DEFAULT) {
-      // Store the entity in the form.
-      $form['#entity'] = $entity;
-      $elements = field_multiple_value_form($field, $instance, $langcode, $items, $form, $form_state);
-    }
-    // If the widget is handling multiple values (e.g Options), or if we are
-    // displaying an individual element, just get a single form element and
-    // make it the $delta value.
-    else {
-      $delta = isset($get_delta) ? $get_delta : 0;
-      $function = $instance['widget']['module'] . '_field_widget_form';
-      if (function_exists($function)) {
-        $element = array(
-          '#entity' => $entity,
-          '#entity_type' => $instance['entity_type'],
-          '#bundle' => $instance['bundle'],
-          '#field_name' => $field_name,
-          '#language' => $langcode,
-          '#field_parents' => $parents,
-          '#columns' => array_keys($field['columns']),
-          '#title' => check_plain($instance['label']),
-          '#description' => field_filter_xss($instance['description']),
-          // Only the first widget should be required.
-          '#required' => $delta == 0 && $instance['required'],
-          '#delta' => $delta,
+  // Store field information in $form_state.
+  if (!field_form_get_state($parents, $field_name, $langcode, $form_state)) {
+    $field_state = array(
+      'field' => $field,
+      'instance' => $instance,
+      'items_count' => count($items),
+      'array_parents' => array(),
+      'errors' => array(),
+    );
+    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
+  }
+
+  // If field module handles multiple values for this form element, and we are
+  // displaying an individual element, process the multiple value form.
+  if (!isset($get_delta) && field_behaviors_widget('multiple values', $instance) == FIELD_BEHAVIOR_DEFAULT) {
+    // Store the entity in the form.
+    $form['#entity'] = $entity;
+    $elements = field_multiple_value_form($field, $instance, $langcode, $items, $form, $form_state);
+  }
+  // If the widget is handling multiple values (e.g Options), or if we are
+  // displaying an individual element, just get a single form element and make
+  // it the $delta value.
+  else {
+    $delta = isset($get_delta) ? $get_delta : 0;
+    $function = $instance['widget']['module'] . '_field_widget_form';
+    if (function_exists($function)) {
+      $element = array(
+        '#entity' => $entity,
+        '#entity_type' => $instance['entity_type'],
+        '#bundle' => $instance['bundle'],
+        '#field_name' => $field_name,
+        '#language' => $langcode,
+        '#field_parents' => $parents,
+        '#columns' => array_keys($field['columns']),
+        '#title' => check_plain($instance['label']),
+        '#description' => field_filter_xss($instance['description']),
+        // Only the first widget should be required.
+        '#required' => $delta == 0 && $instance['required'],
+        '#delta' => $delta,
+      );
+      if ($element = $function($form, $form_state, $field, $instance, $langcode, $items, $delta, $element)) {
+        // Allow modules to alter the field widget form element.
+        $context = array(
+          'form' => $form,
+          'field' => $field,
+          'instance' => $instance,
+          'langcode' => $langcode,
+          'items' => $items,
+          'delta' => $delta,
         );
-        if ($element = $function($form, $form_state, $field, $instance, $langcode, $items, $delta, $element)) {
-          // Allow modules to alter the field widget form element.
-          $context = array(
-            'form' => $form,
-            'field' => $field,
-            'instance' => $instance,
-            'langcode' => $langcode,
-            'items' => $items,
-            'delta' => $delta,
-          );
-          drupal_alter(array('field_widget_form', 'field_widget_' . $instance['widget']['type'] . '_form'), $element, $form_state, $context);
-
-          // If we're processing a specific delta value for a field where the
-          // field module handles multiples, set the delta in the result.
-          // For fields that handle their own processing, we can't make
-          // assumptions about how the field is structured, just merge in the
-          // returned element.
-          if (field_behaviors_widget('multiple values', $instance) == FIELD_BEHAVIOR_DEFAULT) {
-            $elements[$delta] = $element;
-          }
-          else {
-            $elements = $element;
-          }
+        drupal_alter(array('field_widget_form', 'field_widget_' . $instance['widget']['type'] . '_form'), $element, $form_state, $context);
+
+        // If we're processing a specific delta value for a field where the
+        // field module handles multiples, set the delta in the result.
+        // For fields that handle their own processing, we can't make
+        // assumptions about how the field is structured, just merge in the
+        // returned element.
+        if (field_behaviors_widget('multiple values', $instance) == FIELD_BEHAVIOR_DEFAULT) {
+          $elements[$delta] = $element;
+        }
+        else {
+          $elements = $element;
         }
       }
     }
   }
 
-  if ($elements) {
-    // Also aid in theming of field widgets by rendering a classified
-    // container.
-    $addition[$field_name] = array(
-      '#type' => 'container',
-      '#attributes' => array(
-        'class' => array(
-          'field-type-' . drupal_html_class($field['type']),
-          'field-name-' . drupal_html_class($field_name),
-          'field-widget-' . drupal_html_class($instance['widget']['type']),
-        ),
+  // Also aid in theming of field widgets by rendering a classified container.
+  $addition[$field_name] = array(
+    '#type' => 'container',
+    '#attributes' => array(
+      'class' => array(
+        'field-type-' . drupal_html_class($field['type']),
+        'field-name-' . drupal_html_class($field_name),
+        'field-widget-' . drupal_html_class($instance['widget']['type']),
       ),
-      '#weight' => $instance['widget']['weight'],
-    );
-  }
+    ),
+    '#weight' => $instance['widget']['weight'],
+  );
 
   // Populate the 'array_parents' information in $form_state['field'] after
   // the form is built, so that we catch changes in the form structure performed
@@ -136,6 +132,7 @@ function field_default_form($entity_type, $entity, $field, $instance, $langcode,
     // when $langcode is unknown.
     '#language' => $langcode,
     $langcode => $elements,
+    '#access' => field_access('edit', $field, $entity_type, $entity),
   );
 
   return $addition;
@@ -362,31 +359,33 @@ function field_default_form_errors($entity_type, $entity, $field, $instance, $la
   $field_state = field_form_get_state($form['#parents'], $field['field_name'], $langcode, $form_state);
 
   if (!empty($field_state['errors'])) {
-    $function = $instance['widget']['module'] . '_field_widget_error';
-    $function_exists = function_exists($function);
-
-    // Locate the correct element in the the form.
+    // Locate the correct element in the form.
     $element = drupal_array_get_nested_value($form_state['complete form'], $field_state['array_parents']);
-
-    $multiple_widget = field_behaviors_widget('multiple values', $instance) != FIELD_BEHAVIOR_DEFAULT;
-    foreach ($field_state['errors'] as $delta => $delta_errors) {
-      // For multiple single-value widgets, pass errors by delta.
-      // For a multiple-value widget, all errors are passed to the main widget.
-      $error_element = $multiple_widget ? $element : $element[$delta];
-      foreach ($delta_errors as $error) {
-        if ($function_exists) {
-          $function($error_element, $error, $form, $form_state);
-        }
-        else {
-          // Make sure that errors are reported (even incorrectly flagged) if
-          // the widget module fails to implement hook_field_widget_error().
-          form_error($error_element, $error['error']);
+    // Only set errors if the element is accessible.
+    if (!isset($element['#access']) || $element['#access']) {
+      $function = $instance['widget']['module'] . '_field_widget_error';
+      $function_exists = function_exists($function);
+
+      $multiple_widget = field_behaviors_widget('multiple values', $instance) != FIELD_BEHAVIOR_DEFAULT;
+      foreach ($field_state['errors'] as $delta => $delta_errors) {
+        // For multiple single-value widgets, pass errors by delta.
+        // For a multiple-value widget, pass all errors to the main widget.
+        $error_element = $multiple_widget ? $element : $element[$delta];
+        foreach ($delta_errors as $error) {
+          if ($function_exists) {
+            $function($error_element, $error, $form, $form_state);
+          }
+          else {
+            // Make sure that errors are reported (even incorrectly flagged) if
+            // the widget module fails to implement hook_field_widget_error().
+            form_error($error_element, $error['message']);
+          }
         }
       }
+      // Reinitialize the errors list for the next submit.
+      $field_state['errors'] = array();
+      field_form_set_state($form['#parents'], $field['field_name'], $langcode, $form_state, $field_state);
     }
-    // Reinitialize the errors list for the next submit.
-    $field_state['errors'] = array();
-    field_form_set_state($form['#parents'], $field['field_name'], $langcode, $form_state, $field_state);
   }
 }
 
diff --git a/modules/field/field.info b/modules/field/field.info
index c2f56f3..1f13b69 100644
--- a/modules/field/field.info
+++ b/modules/field/field.info
@@ -10,10 +10,10 @@ dependencies[] = field_sql_storage
 required = TRUE
 stylesheets[all][] = theme/field.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/field/field.info.inc b/modules/field/field.info.inc
index e7eaaf0..eb5cc5c 100644
--- a/modules/field/field.info.inc
+++ b/modules/field/field.info.inc
@@ -613,7 +613,8 @@ function field_info_fields() {
  * @return
  *   The field array, as returned by field_read_fields(), with an
  *   additional element 'bundles', whose value is an array of all the bundles
- *   this field belongs to keyed by entity type.
+ *   this field belongs to keyed by entity type. NULL if the field was not
+ *   found.
  *
  * @see field_info_field_by_id()
  */
@@ -890,5 +891,5 @@ function field_info_storage_settings($type) {
 }
 
 /**
- * @} End of "defgroup field_info"
+ * @} End of "defgroup field_info".
  */
diff --git a/modules/field/field.install b/modules/field/field.install
index dff3949..5934a26 100644
--- a/modules/field/field.install
+++ b/modules/field/field.install
@@ -434,7 +434,7 @@ function field_update_7001() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-6.x-to-7.x".
  */
 
 /**
@@ -458,5 +458,5 @@ function field_update_7002() {
 }
 
 /**
- * @} End of "addtogroup updates-7.x-extra"
+ * @} End of "addtogroup updates-7.x-extra".
  */
diff --git a/modules/field/field.module b/modules/field/field.module
index dedf847..6fc97a2 100644
--- a/modules/field/field.module
+++ b/modules/field/field.module
@@ -423,13 +423,9 @@ function field_modules_disabled($modules) {
 function field_sync_field_status() {
   // Refresh the 'active' and 'storage_active' columns according to the current
   // set of enabled modules.
-  $all_modules = system_rebuild_module_data();
-  $modules = array();
-  foreach ($all_modules as $module_name => $module) {
-    if ($module->status) {
-      $modules[] = $module_name;
-      field_associate_fields($module_name);
-    }
+  $modules = module_list();
+  foreach ($modules as $module_name) {
+    field_associate_fields($module_name);
   }
   db_update('field_config')
     ->fields(array('active' => 0))
@@ -555,51 +551,33 @@ function _field_sort_items_value_helper($a, $b) {
 /**
  * Gets or sets administratively defined bundle settings.
  *
- * For each bundle, settings are provided as a nested array with the following
- * structure:
- * @code
- * array(
- *   'view_modes' => array(
- *     // One sub-array per view mode for the entity type:
- *     'full' => array(
- *       'custom_display' => Whether the view mode uses custom display
- *         settings or settings of the 'default' mode,
- *     ),
- *     'teaser' => ...
- *   ),
- *   'extra_fields' => array(
- *     'form' => array(
- *       // One sub-array per pseudo-field in displayed entities:
- *       'extra_field_1' => array(
- *         'weight' => The weight of the pseudo-field,
- *       ),
- *       'extra_field_2' => ...
- *     ),
- *     'display' => array(
- *       // One sub-array per pseudo-field in displayed entities:
- *       'extra_field_1' => array(
- *         // One sub-array per view mode for the entity type, including
- *         // the 'default' mode:
- *         'default' => array(
- *           'weight' => The weight of the pseudo-field,
- *           'visible' => TRUE if the pseudo-field is visible, FALSE if hidden,
- *         ),
- *         'full' => ...
- *       ),
- *       'extra_field_2' => ...
- *     ),
- *   ),
- * );
- * @endcode
- *
- * @param $entity_type
+ * @param string $entity_type
  *   The type of $entity; e.g., 'node' or 'user'.
- * @param $bundle
+ * @param string $bundle
  *   The bundle name.
- * @param $settings
- *   (optional) The settings to store.
+ * @param array|null $settings
+ *   (optional) The settings to store, an associative array with the following
+ *   elements:
+ *   - view_modes: An associative array keyed by view mode, with the following
+ *     key/value pairs:
+ *     - custom_settings: Boolean specifying whether the view mode uses a
+ *       dedicated set of display options (TRUE), or the 'default' options
+ *       (FALSE). Defaults to FALSE.
+ *   - extra_fields: An associative array containing the form and display
+ *     settings for extra fields (also known as pseudo-fields):
+ *     - form: An associative array whose keys are the names of extra fields,
+ *       and whose values are associative arrays with the following elements:
+ *       - weight: The weight of the extra field, determining its position on an
+ *         entity form.
+ *     - display: An associative array whose keys are the names of extra fields,
+ *       and whose values are associative arrays keyed by the name of view
+ *       modes. This array must include an item for the 'default' view mode.
+ *       Each view mode sub-array contains the following elements:
+ *       - weight: The weight of the extra field, determining its position when
+ *         an entity is viewed.
+ *       - visible: TRUE if the extra field is visible, FALSE otherwise.
  *
- * @return
+ * @return array|null
  *   If no $settings are passed, the current settings are returned.
  */
 function field_bundle_settings($entity_type, $bundle, $settings = NULL) {
@@ -972,6 +950,10 @@ function field_has_data($field) {
     ->fieldCondition($field)
     ->range(0, 1)
     ->count()
+    // Neutralize the 'entity_field_access' query tag added by
+    // field_sql_storage_field_storage_query(). The result cannot depend on the
+    // access grants of the current user.
+    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
     ->execute();
 }
 
@@ -1112,7 +1094,7 @@ function template_process_field(&$variables, $hook) {
   }
 }
 /**
- * @} End of "defgroup field"
+ * @} End of "defgroup field".
  */
 
 /**
diff --git a/modules/field/modules/field_sql_storage/field_sql_storage.info b/modules/field/modules/field_sql_storage/field_sql_storage.info
index a7f8a17..d26d273 100644
--- a/modules/field/modules/field_sql_storage/field_sql_storage.info
+++ b/modules/field/modules/field_sql_storage/field_sql_storage.info
@@ -7,10 +7,10 @@ dependencies[] = field
 files[] = field_sql_storage.test
 required = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/field/modules/field_sql_storage/field_sql_storage.install b/modules/field/modules/field_sql_storage/field_sql_storage.install
index 647296e..78c520f 100644
--- a/modules/field/modules/field_sql_storage/field_sql_storage.install
+++ b/modules/field/modules/field_sql_storage/field_sql_storage.install
@@ -211,5 +211,5 @@ function field_sql_storage_update_7002() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-6.x-to-7.x".
  */
diff --git a/modules/field/modules/field_sql_storage/field_sql_storage.module b/modules/field/modules/field_sql_storage/field_sql_storage.module
index 2ed7835..a756194 100644
--- a/modules/field/modules/field_sql_storage/field_sql_storage.module
+++ b/modules/field/modules/field_sql_storage/field_sql_storage.module
@@ -512,7 +512,12 @@ function field_sql_storage_field_storage_query(EntityFieldQuery $query) {
     }
     else {
       $select_query = db_select($tablename, $table_alias);
-      $select_query->addTag('entity_field_access');
+      // Allow queries internal to the Field API to opt out of the access
+      // check, for situations where the query's results should not depend on
+      // the access grants for the current user.
+      if (!isset($query->tags['DANGEROUS_ACCESS_CHECK_OPT_OUT'])) {
+        $select_query->addTag('entity_field_access');
+      }
       $select_query->addMetaData('base_table', $tablename);
       $select_query->fields($table_alias, array('entity_type', 'entity_id', 'revision_id', 'bundle'));
       $field_base_table = $table_alias;
diff --git a/modules/field/modules/list/list.info b/modules/field/modules/list/list.info
index 17848b5..43fa1c4 100644
--- a/modules/field/modules/list/list.info
+++ b/modules/field/modules/list/list.info
@@ -7,10 +7,10 @@ dependencies[] = field
 dependencies[] = options
 files[] = tests/list.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/field/modules/list/list.install b/modules/field/modules/list/list.install
index 91c7649..2386f04 100644
--- a/modules/field/modules/list/list.install
+++ b/modules/field/modules/list/list.install
@@ -117,6 +117,11 @@ function _list_update_7001_extract_allowed_values($string, $position_keys) {
 }
 
 /**
+ * @addtogroup updates-7.x-extra
+ * @{
+ */
+
+/**
  * Re-apply list_update_7001() for deleted fields.
  */
 function list_update_7002() {
@@ -126,4 +131,8 @@ function list_update_7002() {
   // list_update_7001() has the required checks to ensure it is reentrant, so
   // it can simply be executed once more..
   list_update_7001();
-}
\ No newline at end of file
+}
+
+/**
+ * @} End of "addtogroup updates-7.x-extra".
+ */
diff --git a/modules/field/modules/list/tests/list_test.info b/modules/field/modules/list/tests/list_test.info
index 1819015..9f211ae 100644
--- a/modules/field/modules/list/tests/list_test.info
+++ b/modules/field/modules/list/tests/list_test.info
@@ -5,10 +5,10 @@ package = Testing
 version = VERSION
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/field/modules/number/number.info b/modules/field/modules/number/number.info
index 5ca6804..ebf7b2d 100644
--- a/modules/field/modules/number/number.info
+++ b/modules/field/modules/number/number.info
@@ -6,10 +6,10 @@ core = 7.x
 dependencies[] = field
 files[] = number.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/field/modules/options/options.info b/modules/field/modules/options/options.info
index 72788a2..1d4462b 100644
--- a/modules/field/modules/options/options.info
+++ b/modules/field/modules/options/options.info
@@ -6,10 +6,10 @@ core = 7.x
 dependencies[] = field
 files[] = options.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/field/modules/text/text.info b/modules/field/modules/text/text.info
index 67e2b46..a644437 100644
--- a/modules/field/modules/text/text.info
+++ b/modules/field/modules/text/text.info
@@ -7,10 +7,10 @@ dependencies[] = field
 files[] = text.test
 required = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/field/tests/field.test b/modules/field/tests/field.test
index f7d9ddd..739ddbe 100644
--- a/modules/field/tests/field.test
+++ b/modules/field/tests/field.test
@@ -1650,6 +1650,18 @@ class FieldFormTestCase extends FieldTestCase {
 
     $langcode = LANGUAGE_NONE;
 
+    // Test that the form structure includes full information for each delta
+    // apart from #access.
+    $entity_type = 'test_entity';
+    $entity = field_test_create_stub_entity(0, 0, $this->instance['bundle']);
+
+    $form = array();
+    $form_state = form_state_defaults();
+    field_attach_form($entity_type, $entity, $form, $form_state);
+
+    $this->assertEqual($form[$field_name_no_access][$langcode][0]['value']['#entity_type'], $entity_type, 'The correct entity type is set in the field structure.');
+    $this->assertFalse($form[$field_name_no_access]['#access'], 'Field #access is FALSE for the field without edit access.');
+
     // Display creation form.
     $this->drupalGet('test-entity/add/test-bundle');
     $this->assertNoFieldByName("{$field_name_no_access}[$langcode][0][value]", '', t('Widget is not displayed if field access is denied.'));
@@ -2794,7 +2806,7 @@ class FieldTranslationsTestCase extends FieldTestCase {
     $options = array();
     $entities = array();
     $entity_type = 'test_entity';
-    $entity_count = mt_rand(2, 5);
+    $entity_count = 5;
     $available_languages = field_available_languages($this->entity_type, $this->field);
 
     for ($id = 1; $id <= $entity_count; ++$id) {
diff --git a/modules/field/tests/field_test.info b/modules/field/tests/field_test.info
index 0969302..b65dcb1 100644
--- a/modules/field/tests/field_test.info
+++ b/modules/field/tests/field_test.info
@@ -6,10 +6,10 @@ files[] = field_test.entity.inc
 version = VERSION
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/field/tests/field_test.module b/modules/field/tests/field_test.module
index 0015cd9..37ea7b1 100644
--- a/modules/field/tests/field_test.module
+++ b/modules/field/tests/field_test.module
@@ -259,3 +259,14 @@ function field_test_field_widget_form_alter(&$element, &$form_state, $context) {
       break;
   }
 }
+
+/**
+ * Implements hook_query_TAG_alter() for tag 'efq_table_prefixing_test'.
+ *
+ * @see EntityFieldQueryTestCase::testTablePrefixing()
+ */
+function field_test_query_efq_table_prefixing_test_alter(&$query) {
+  // Add an additional join onto the entity base table. This will cause an
+  // exception if the EFQ does not properly prefix the base table.
+  $query->join('test_entity','te2','%alias.ftid = test_entity.ftid');
+}
diff --git a/modules/field_ui/field_ui.admin.inc b/modules/field_ui/field_ui.admin.inc
index 33ce2f0..44770ac 100644
--- a/modules/field_ui/field_ui.admin.inc
+++ b/modules/field_ui/field_ui.admin.inc
@@ -162,7 +162,8 @@ function field_ui_table_pre_render($elements) {
 
         // Add tabledrag indentation to the first row cell.
         if ($depth = count($parents[$name])) {
-          $cell = current(element_children($row));
+          $children = element_children($row);
+          $cell = current($children);
           $row[$cell]['#prefix'] = theme('indentation', array('size' => $depth)) . (isset($row[$cell]['#prefix']) ? $row[$cell]['#prefix'] : '');
         }
 
@@ -317,7 +318,7 @@ function field_ui_field_overview_form($form, &$form_state, $entity_type, $bundle
       t('Weight'),
       t('Parent'),
       t('Machine name'),
-      t('Field'),
+      t('Field type'),
       t('Widget'),
       array('data' => t('Operations'), 'colspan' => 2),
     ),
diff --git a/modules/field_ui/field_ui.api.php b/modules/field_ui/field_ui.api.php
index 882f467..05d9f05 100644
--- a/modules/field_ui/field_ui.api.php
+++ b/modules/field_ui/field_ui.api.php
@@ -200,5 +200,5 @@ function hook_field_formatter_settings_summary($field, $instance, $view_mode) {
 }
 
 /**
- * @} End of "addtogroup field_types"
+ * @} End of "addtogroup field_types".
  */
diff --git a/modules/field_ui/field_ui.info b/modules/field_ui/field_ui.info
index d6bd46e..d2a3870 100644
--- a/modules/field_ui/field_ui.info
+++ b/modules/field_ui/field_ui.info
@@ -6,10 +6,10 @@ core = 7.x
 dependencies[] = field
 files[] = field_ui.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/field_ui/field_ui.js b/modules/field_ui/field_ui.js
index 1017937..65b28d0 100644
--- a/modules/field_ui/field_ui.js
+++ b/modules/field_ui/field_ui.js
@@ -97,7 +97,7 @@ jQuery.fn.fieldUIPopulateOptions = function (options, selected) {
       html += '<option value="' + value + '"' + (is_selected ? ' selected="selected"' : '') + '>' + text + '</option>';
     });
 
-    $(this).html(html).attr('disabled', disabled ? 'disabled' : '');
+    $(this).html(html).attr('disabled', disabled ? 'disabled' : false);
   });
 };
 
diff --git a/modules/field_ui/field_ui.test b/modules/field_ui/field_ui.test
index 75a7084..d0a822a 100644
--- a/modules/field_ui/field_ui.test
+++ b/modules/field_ui/field_ui.test
@@ -173,7 +173,7 @@ class FieldUIManageFieldsTestCase extends FieldUITestCase {
     $table_headers = array(
       t('Label'),
       t('Machine name'),
-      t('Field'),
+      t('Field type'),
       t('Widget'),
       t('Operations'),
     );
diff --git a/modules/file/file.field.inc b/modules/file/file.field.inc
index 7a5697c..1189704 100644
--- a/modules/file/file.field.inc
+++ b/modules/file/file.field.inc
@@ -261,11 +261,8 @@ function file_field_update($entity_type, $entity, $field, $instance, $langcode,
     $current_fids[] = $item['fid'];
   }
 
-  // Create a bare-bones entity so that we can load its previous values.
-  $original = entity_create_stub_entity($entity_type, array($id, $vid, $bundle));
-  field_attach_load($entity_type, array($id => $original), FIELD_LOAD_CURRENT, array('field_id' => $field['id']));
-
   // Compare the original field values with the ones that are being saved.
+  $original = $entity->original;
   $original_fids = array();
   if (!empty($original->{$field['field_name']}[$langcode])) {
     foreach ($original->{$field['field_name']}[$langcode] as $original_item) {
@@ -630,10 +627,9 @@ function file_field_widget_process($element, &$form_state, $form) {
   // Add the description field if enabled.
   if (!empty($instance['settings']['description_field']) && $item['fid']) {
     $element['description'] = array(
-      '#type' => 'textfield',
+      '#type' => variable_get('file_description_type', 'textfield'),
       '#title' => t('Description'),
       '#value' => isset($item['description']) ? $item['description'] : '',
-      '#type' => variable_get('file_description_type', 'textfield'),
       '#maxlength' => variable_get('file_description_length', 128),
       '#description' => t('The description may be used as the label of the link to the file.'),
     );
diff --git a/modules/file/file.info b/modules/file/file.info
index 74f326d..0e1e5e7 100644
--- a/modules/file/file.info
+++ b/modules/file/file.info
@@ -6,10 +6,10 @@ core = 7.x
 dependencies[] = field
 files[] = tests/file.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/file/file.js b/modules/file/file.js
index 1a9f87e..577480b 100644
--- a/modules/file/file.js
+++ b/modules/file/file.js
@@ -110,7 +110,7 @@ Drupal.file = Drupal.file || {
     var $fieldsToTemporarilyDisable = $('div.form-managed-file input.form-file').not($enabledFields).not(':disabled');
     $fieldsToTemporarilyDisable.attr('disabled', 'disabled');
     setTimeout(function (){
-      $fieldsToTemporarilyDisable.attr('disabled', '');
+      $fieldsToTemporarilyDisable.attr('disabled', false);
     }, 1000);
   },
   /**
diff --git a/modules/file/tests/file.test b/modules/file/tests/file.test
index 7fa6d6f..76708a3 100644
--- a/modules/file/tests/file.test
+++ b/modules/file/tests/file.test
@@ -551,7 +551,7 @@ class FileFieldWidgetTestCase extends FileFieldTestCase {
 
     // Remove access comments permission from anon user.
     $edit = array(
-      '1[access comments]' => FALSE,
+      DRUPAL_ANONYMOUS_RID . '[access comments]' => FALSE,
     );
     $this->drupalPost('admin/people/permissions', $edit, t('Save permissions'));
 
diff --git a/modules/file/tests/file_module_test.info b/modules/file/tests/file_module_test.info
index 5655e2b..63867a9 100644
--- a/modules/file/tests/file_module_test.info
+++ b/modules/file/tests/file_module_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/filter/filter.info b/modules/filter/filter.info
index 94d80cc..ee50c18 100644
--- a/modules/filter/filter.info
+++ b/modules/filter/filter.info
@@ -7,10 +7,10 @@ files[] = filter.test
 required = TRUE
 configure = admin/config/content/formats
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/filter/filter.install b/modules/filter/filter.install
index 19fd8aa..9d17eb5 100644
--- a/modules/filter/filter.install
+++ b/modules/filter/filter.install
@@ -490,5 +490,5 @@ function filter_update_7010() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-6.x-to-7.x".
  */
diff --git a/modules/filter/filter.test b/modules/filter/filter.test
index 1a21ecb..aa1693f 100644
--- a/modules/filter/filter.test
+++ b/modules/filter/filter.test
@@ -314,7 +314,7 @@ class FilterAdminTestCase extends DrupalWebTestCase {
     $edit = array();
     $edit['format'] = drupal_strtolower($this->randomName());
     $edit['name'] = $this->randomName();
-    $edit['roles[2]'] = 1;
+    $edit['roles[' . DRUPAL_AUTHENTICATED_RID . ']'] = 1;
     $edit['filters[' . $second_filter . '][status]'] = TRUE;
     $edit['filters[' . $first_filter . '][status]'] = TRUE;
     $this->drupalPost('admin/config/content/formats/add', $edit, t('Save configuration'));
@@ -324,7 +324,7 @@ class FilterAdminTestCase extends DrupalWebTestCase {
     $format = filter_format_load($edit['format']);
     $this->assertNotNull($format, t('Format found in database.'));
 
-    $this->assertFieldByName('roles[2]', '', t('Role found.'));
+    $this->assertFieldByName('roles[' . DRUPAL_AUTHENTICATED_RID . ']', '', t('Role found.'));
     $this->assertFieldByName('filters[' . $second_filter . '][status]', '', t('Line break filter found.'));
     $this->assertFieldByName('filters[' . $first_filter . '][status]', '', t('Url filter found.'));
 
@@ -335,8 +335,8 @@ class FilterAdminTestCase extends DrupalWebTestCase {
     // Allow authenticated users on full HTML.
     $format = filter_format_load($full);
     $edit = array();
-    $edit['roles[1]'] = 0;
-    $edit['roles[2]'] = 1;
+    $edit['roles[' . DRUPAL_ANONYMOUS_RID . ']'] = 0;
+    $edit['roles[' . DRUPAL_AUTHENTICATED_RID . ']'] = 1;
     $this->drupalPost('admin/config/content/formats/' . $full, $edit, t('Save configuration'));
     $this->assertRaw(t('The text format %format has been updated.', array('%format' => $format->name)), t('Full HTML format successfully updated.'));
 
@@ -386,10 +386,10 @@ class FilterAdminTestCase extends DrupalWebTestCase {
 
     // Full HTML.
     $edit = array();
-    $edit['roles[2]'] = FALSE;
+    $edit['roles[' . DRUPAL_AUTHENTICATED_RID . ']'] = FALSE;
     $this->drupalPost('admin/config/content/formats/' . $full, $edit, t('Save configuration'));
     $this->assertRaw(t('The text format %format has been updated.', array('%format' => $format->name)), t('Full HTML format successfully reverted.'));
-    $this->assertFieldByName('roles[2]', $edit['roles[2]'], t('Changes reverted.'));
+    $this->assertFieldByName('roles[' . DRUPAL_AUTHENTICATED_RID . ']', $edit['roles[' . DRUPAL_AUTHENTICATED_RID . ']'], t('Changes reverted.'));
 
     // Filter order.
     $edit = array();
@@ -1195,6 +1195,11 @@ class FilterUnitTestCase extends DrupalUnitTestCase {
     // - absolute, mail, partial
     // - characters/encoding, surrounding markup, security
 
+    // Create a e-mail that is too long.
+    $long_email = str_repeat('a', 254) . '@example.com';
+    $too_long_email = str_repeat('b', 255) . '@example.com';
+
+
     // Filter selection/pattern matching.
     $tests = array(
       // HTTP URLs.
@@ -1206,10 +1211,12 @@ http://example.com or www.example.com
       ),
       // MAILTO URLs.
       '
-person@example.com or mailto:person2@example.com
+person@example.com or mailto:person2@example.com or ' . $long_email . ' but not ' . $too_long_email . '
 ' => array(
         '<a href="mailto:person@example.com">person@example.com</a>' => TRUE,
         '<a href="mailto:person2@example.com">mailto:person2@example.com</a>' => TRUE,
+        '<a href="mailto:' . $long_email . '">' . $long_email . '</a>' => TRUE,
+        '<a href="mailto:' . $too_long_email . '">' . $too_long_email . '</a>' => FALSE,
       ),
       // URI parts and special characters.
       '
@@ -1800,7 +1807,7 @@ class FilterHooksTestCase extends DrupalWebTestCase {
     $edit = array();
     $edit['format'] = drupal_strtolower($this->randomName());
     $edit['name'] = $name;
-    $edit['roles[1]'] = 1;
+    $edit['roles[' . DRUPAL_ANONYMOUS_RID . ']'] = 1;
     $this->drupalPost('admin/config/content/formats/add', $edit, t('Save configuration'));
     $this->assertRaw(t('Added text format %format.', array('%format' => $name)), t('New format created.'));
     $this->assertText('hook_filter_format_insert invoked.', t('hook_filter_format_insert was invoked.'));
@@ -1809,7 +1816,7 @@ class FilterHooksTestCase extends DrupalWebTestCase {
 
     // Update text format.
     $edit = array();
-    $edit['roles[2]'] = 1;
+    $edit['roles[' . DRUPAL_AUTHENTICATED_RID . ']'] = 1;
     $this->drupalPost('admin/config/content/formats/' . $format_id, $edit, t('Save configuration'));
     $this->assertRaw(t('The text format %format has been updated.', array('%format' => $name)), t('Format successfully updated.'));
     $this->assertText('hook_filter_format_update invoked.', t('hook_filter_format_update() was invoked.'));
diff --git a/modules/forum/forum-icon.tpl.php b/modules/forum/forum-icon.tpl.php
index 9cf2cd8..fd1cd13 100644
--- a/modules/forum/forum-icon.tpl.php
+++ b/modules/forum/forum-icon.tpl.php
@@ -2,7 +2,7 @@
 
 /**
  * @file
- * Default theme implementation to display an appropriate icon for a forum post.
+ * Displays an appropriate icon for a forum post.
  *
  * Available variables:
  * - $new_posts: Indicates whether or not the topic contains new posts.
@@ -12,6 +12,8 @@
  *
  * @see template_preprocess_forum_icon()
  * @see theme_forum_icon()
+ *
+ * @ingroup themeable
  */
 ?>
 <div class="topic-status-<?php print $icon_class ?>" title="<?php print $icon_title ?>">
diff --git a/modules/forum/forum-list.tpl.php b/modules/forum/forum-list.tpl.php
index 257cea9..01c74a3 100644
--- a/modules/forum/forum-list.tpl.php
+++ b/modules/forum/forum-list.tpl.php
@@ -2,34 +2,35 @@
 
 /**
  * @file
- * Default theme implementation to display a list of forums and containers.
+ * Displays a list of forums and containers.
  *
  * Available variables:
  * - $forums: An array of forums and containers to display. It is keyed to the
- *   numeric id's of all child forums and containers.
- * - $forum_id: Forum id for the current forum. Parent to all items within
- *   the $forums array.
- *
- * Each $forum in $forums contains:
- * - $forum->is_container: Is TRUE if the forum can contain other forums. Is
- *   FALSE if the forum can contain only topics.
- * - $forum->depth: How deep the forum is in the current hierarchy.
- * - $forum->zebra: 'even' or 'odd' string used for row class.
- * - $forum->icon_class: 'default' or 'new' string used for forum icon class.
- * - $forum->icon_title: Text alternative for the forum icon.
- * - $forum->name: The name of the forum.
- * - $forum->link: The URL to link to this forum.
- * - $forum->description: The description of this forum.
- * - $forum->new_topics: True if the forum contains unread posts.
- * - $forum->new_url: A URL to the forum's unread posts.
- * - $forum->new_text: Text for the above URL which tells how many new posts.
- * - $forum->old_topics: A count of posts that have already been read.
- * - $forum->num_posts: The total number of posts in the forum.
- * - $forum->last_reply: Text representing the last time a forum was posted or
- *   commented in.
+ *   numeric IDs of all child forums and containers. Each $forum in $forums
+ *   contains:
+ *   - $forum->is_container: TRUE if the forum can contain other forums. FALSE
+ *     if the forum can contain only topics.
+ *   - $forum->depth: How deep the forum is in the current hierarchy.
+ *   - $forum->zebra: 'even' or 'odd' string used for row class.
+ *   - $forum->icon_class: 'default' or 'new' string used for forum icon class.
+ *   - $forum->icon_title: Text alternative for the forum icon.
+ *   - $forum->name: The name of the forum.
+ *   - $forum->link: The URL to link to this forum.
+ *   - $forum->description: The description of this forum.
+ *   - $forum->new_topics: TRUE if the forum contains unread posts.
+ *   - $forum->new_url: A URL to the forum's unread posts.
+ *   - $forum->new_text: Text for the above URL, which tells how many new posts.
+ *   - $forum->old_topics: A count of posts that have already been read.
+ *   - $forum->num_posts: The total number of posts in the forum.
+ *   - $forum->last_reply: Text representing the last time a forum was posted or
+ *     commented in.
+ * - $forum_id: Forum ID for the current forum. Parent to all items within the
+ *   $forums array.
  *
  * @see template_preprocess_forum_list()
  * @see theme_forum_list()
+ *
+ * @ingroup themeable
  */
 ?>
 <table id="forum-<?php print $forum_id; ?>">
diff --git a/modules/forum/forum-rtl.css b/modules/forum/forum-rtl.css
index 81dd4d3..b475e42 100644
--- a/modules/forum/forum-rtl.css
+++ b/modules/forum/forum-rtl.css
@@ -1,3 +1,7 @@
+/**
+ * @file
+ * Right-to-left styling for the Forum module.
+ */
 
 #forum td.forum .icon {
   float: right;
diff --git a/modules/forum/forum-submitted.tpl.php b/modules/forum/forum-submitted.tpl.php
index d310448..18fea8f 100644
--- a/modules/forum/forum-submitted.tpl.php
+++ b/modules/forum/forum-submitted.tpl.php
@@ -2,18 +2,20 @@
 
 /**
  * @file
- * Default theme implementation to format a simple string indicated when and
- * by whom a topic was submitted.
+ * Formats a forum post submission string.
  *
- * Available variables:
+ * The submission string indicates when and by whom a topic was submitted.
  *
+ * Available variables:
  * - $author: The author of the post.
  * - $time: How long ago the post was created.
- * - $topic: An object with the raw data of the post. Unsafe, be sure
- *   to clean this data before printing.
+ * - $topic: An object with the raw data of the post. Potentially unsafe. Be
+ *   sure to clean this data before printing.
  *
  * @see template_preprocess_forum_submitted()
  * @see theme_forum_submitted()
+ *
+ * @ingroup themeable
  */
 ?>
 <?php if ($time): ?>
diff --git a/modules/forum/forum-topic-list.tpl.php b/modules/forum/forum-topic-list.tpl.php
index 3390703..6427814 100644
--- a/modules/forum/forum-topic-list.tpl.php
+++ b/modules/forum/forum-topic-list.tpl.php
@@ -2,35 +2,39 @@
 
 /**
  * @file
- * Default theme implementation to display a list of forum topics.
+ * Displays a list of forum topics.
  *
  * Available variables:
  * - $header: The table header. This is pre-generated with click-sorting
  *   information. If you need to change this, see
  *   template_preprocess_forum_topic_list().
  * - $pager: The pager to display beneath the table.
- * - $topics: An array of topics to be displayed.
- * - $topic_id: Numeric id for the current forum topic.
- *
- * Each $topic in $topics contains:
- * - $topic->icon: The icon to display.
- * - $topic->moved: A flag to indicate whether the topic has been moved to
- *   another forum.
- * - $topic->title: The title of the topic. Safe to output.
- * - $topic->message: If the topic has been moved, this contains an
- *   explanation and a link.
- * - $topic->zebra: 'even' or 'odd' string used for row class.
- * - $topic->comment_count: The number of replies on this topic.
- * - $topic->new_replies: A flag to indicate whether there are unread comments.
- * - $topic->new_url: If there are unread replies, this is a link to them.
- * - $topic->new_text: Text containing the translated, properly pluralized count.
- * - $topic->created: An outputtable string represented when the topic was posted.
- * - $topic->last_reply: An outputtable string representing when the topic was
- *   last replied to.
- * - $topic->timestamp: The raw timestamp this topic was posted.
+ * - $topics: An array of topics to be displayed. Each $topic in $topics
+ *   contains:
+ *   - $topic->icon: The icon to display.
+ *   - $topic->moved: A flag to indicate whether the topic has been moved to
+ *     another forum.
+ *   - $topic->title: The title of the topic. Safe to output.
+ *   - $topic->message: If the topic has been moved, this contains an
+ *     explanation and a link.
+ *   - $topic->zebra: 'even' or 'odd' string used for row class.
+ *   - $topic->comment_count: The number of replies on this topic.
+ *   - $topic->new_replies: A flag to indicate whether there are unread
+ *     comments.
+ *   - $topic->new_url: If there are unread replies, this is a link to them.
+ *   - $topic->new_text: Text containing the translated, properly pluralized
+ *     count.
+ *   - $topic->created: A string representing when the topic was posted. Safe
+ *     to output.
+ *   - $topic->last_reply: An outputtable string representing when the topic was
+ *     last replied to.
+ *   - $topic->timestamp: The raw timestamp this topic was posted.
+ * - $topic_id: Numeric ID for the current forum topic.
  *
  * @see template_preprocess_forum_topic_list()
  * @see theme_forum_topic_list()
+ *
+ * @ingroup themeable
  */
 ?>
 <table id="forum-topic-<?php print $topic_id; ?>">
diff --git a/modules/forum/forum.admin.inc b/modules/forum/forum.admin.inc
index 49c71d9..712cf54 100644
--- a/modules/forum/forum.admin.inc
+++ b/modules/forum/forum.admin.inc
@@ -2,7 +2,22 @@
 
 /**
  * @file
- * Administrative page callbacks for the forum module.
+ * Administrative page callbacks for the Forum module.
+ */
+
+/**
+ * Page callback: Returns a form for creating a new forum or container.
+ *
+ * @param $type
+ *   What is being added. Possible values are 'forum' and 'container'.
+ * @param $edit
+ *   (optional) Associative array containing a forum term to be edited.
+ *   Defaults to an empty array.
+ *
+ * @return
+ *   A form for creating a new forum or container.
+ *
+ * @see forum_menu()
  */
 function forum_form_main($type, $edit = array()) {
   $edit = (array) $edit;
@@ -20,11 +35,14 @@ function forum_form_main($type, $edit = array()) {
 }
 
 /**
- * Returns a form for adding a forum to the forum vocabulary
+ * Form constructor for adding and editing a forum.
+ *
+ * @param $edit
+ *   (optional) Associative array containing a forum term to be added or edited.
+ *   Defaults to an empty array.
  *
- * @param $edit Associative array containing a forum term to be added or edited.
- * @ingroup forms
  * @see forum_form_submit()
+ * @ingroup forms
  */
 function forum_form_forum($form, &$form_state, $edit = array()) {
   $edit += array(
@@ -67,7 +85,7 @@ function forum_form_forum($form, &$form_state, $edit = array()) {
 }
 
 /**
- * Process forum form and container form submissions.
+ * Form submission handler for forum_form_forum() and forum_form_container().
  */
 function forum_form_submit($form, &$form_state) {
   if ($form['form_id']['#value'] == 'forum_form_container') {
@@ -104,8 +122,8 @@ function forum_form_submit($form, &$form_state) {
 /**
  * Returns HTML for a forum form.
  *
- * By default this does not alter the appearance of a form at all,
- * but is provided as a convenience for themers.
+ * By default this does not alter the appearance of a form at all, but is
+ * provided as a convenience for themers.
  *
  * @param $variables
  *   An associative array containing:
@@ -118,11 +136,14 @@ function theme_forum_form($variables) {
 }
 
 /**
- * Returns a form for adding a container to the forum vocabulary
+ * Form constructor for adding and editing forum containers.
+ *
+ * @param $edit
+ *   (optional) Associative array containing a container term to be added or edited.
+ *   Defaults to an empty array.
  *
- * @param $edit Associative array containing a container term to be added or edited.
- * @ingroup forms
  * @see forum_form_submit()
+ * @ingroup forms
  */
 function forum_form_container($form, &$form_state, $edit = array()) {
   $edit += array(
@@ -176,9 +197,13 @@ function forum_form_container($form, &$form_state, $edit = array()) {
 }
 
 /**
- * Returns a confirmation page for deleting a forum taxonomy term.
+ * Form constructor for confirming deletion of a forum taxonomy term.
+ *
+ * @param $tid
+ *   ID of the term to be deleted.
  *
- * @param $tid ID of the term to be deleted
+ * @see forum_confirm_delete_submit()
+ * @ingroup forms
  */
 function forum_confirm_delete($form, &$form_state, $tid) {
   $term = taxonomy_term_load($tid);
@@ -190,7 +215,7 @@ function forum_confirm_delete($form, &$form_state, $tid) {
 }
 
 /**
- * Implement forms api _submit call. Deletes a forum after confirmation.
+ * Form submission handler for forum_confirm_delete().
  */
 function forum_confirm_delete_submit($form, &$form_state) {
   taxonomy_term_delete($form_state['values']['tid']);
@@ -202,9 +227,11 @@ function forum_confirm_delete_submit($form, &$form_state) {
 }
 
 /**
- * Form builder for the forum settings page.
+ * Form constructor for the forum settings page.
  *
+ * @see forum_menu()
  * @see system_settings_form()
+ * @ingroup forms
  */
 function forum_admin_settings($form) {
   $number = drupal_map_assoc(array(5, 10, 15, 20, 25, 30, 35, 40, 50, 60, 80, 100, 150, 200, 250, 300, 350, 400, 500));
@@ -232,7 +259,13 @@ function forum_admin_settings($form) {
 }
 
 /**
- * Returns an overview list of existing forums and containers
+ * Form constructor for the forum overview form.
+ *
+ * Returns a form for controlling the hierarchy of existing forums and
+ * containers.
+ *
+ * @see forum_menu()
+ * @ingroup forms
  */
 function forum_overview($form, &$form_state) {
   module_load_include('inc', 'taxonomy', 'taxonomy.admin');
@@ -267,11 +300,17 @@ function forum_overview($form, &$form_state) {
 }
 
 /**
- * Returns a select box for available parent terms
+ * Returns a select box for available parent terms.
+ *
+ * @param $tid
+ *   ID of the term that is being added or edited.
+ * @param $title
+ *   Title for the select box.
+ * @param $child_type
+ *   Whether the child is a forum or a container.
  *
- * @param $tid ID of the term which is being added or edited
- * @param $title Title to display the select box with
- * @param $child_type Whether the child is forum or container
+ * @return
+ *   A select form element.
  */
 function _forum_parent_select($tid, $title, $child_type) {
 
diff --git a/modules/forum/forum.css b/modules/forum/forum.css
index 4a67c8b..a758bc6 100644
--- a/modules/forum/forum.css
+++ b/modules/forum/forum.css
@@ -1,3 +1,7 @@
+/**
+ * @file
+ * Styling for the Forum module.
+ */
 
 #forum .description {
   font-size: 0.9em;
diff --git a/modules/forum/forum.info b/modules/forum/forum.info
index 019ad1a..3799e08 100644
--- a/modules/forum/forum.info
+++ b/modules/forum/forum.info
@@ -9,10 +9,10 @@ files[] = forum.test
 configure = admin/structure/forum
 stylesheets[all][] = forum.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/forum/forum.install b/modules/forum/forum.install
index 32a9bb9..57e116b 100644
--- a/modules/forum/forum.install
+++ b/modules/forum/forum.install
@@ -2,7 +2,7 @@
 
 /**
  * @file
- * Install, update and uninstall functions for the forum module.
+ * Install, update, and uninstall functions for the Forum module.
  */
 
 /**
@@ -219,6 +219,8 @@ function forum_schema() {
     ),
     'indexes' => array(
       'forum_topics' => array('nid', 'tid', 'sticky', 'last_comment_timestamp'),
+      'created' => array('created'),
+      'last_comment_timestamp' => array('last_comment_timestamp'),
     ),
     'foreign keys' => array(
       'tracked_node' => array(
@@ -350,6 +352,11 @@ function forum_update_7001() {
 }
 
 /**
+ * @addtogroup updates-7.x-extra
+ * @{
+ */
+
+/**
  * Add new index to forum_index table.
  */
 function forum_update_7002() {
@@ -358,11 +365,6 @@ function forum_update_7002() {
 }
 
 /**
- * @addtogroup updates-7.x-extra
- * @{
- */
-
-/**
  * Rename field to 'taxonomy_forums'.
  */
 function forum_update_7003() {
@@ -440,11 +442,7 @@ function forum_update_7003() {
 }
 
 /**
- * @} End of "addtogroup updates-7.x-extra"
- */
-
-/**
- * Update {form_index} so that only published nodes are indexed.
+ * Update {forum_index} so that only published nodes are indexed.
  */
 function forum_update_7011() {
   $select = db_select('node', 'n')
@@ -455,3 +453,15 @@ function forum_update_7011() {
     ->condition('nid', $select, 'IN')
     ->execute();
 }
+
+/**
+ * Add 'created' and 'last_comment_timestamp' indexes.
+ */
+function forum_update_7012() {
+  db_add_index('forum_index', 'created', array('created'));
+  db_add_index('forum_index', 'last_comment_timestamp', array('last_comment_timestamp'));
+}
+
+/**
+ * @} End of "addtogroup updates-7.x-extra".
+ */
diff --git a/modules/forum/forum.module b/modules/forum/forum.module
index eddac79..7e8d81b 100644
--- a/modules/forum/forum.module
+++ b/modules/forum/forum.module
@@ -233,7 +233,7 @@ function forum_entity_info_alter(&$info) {
 }
 
 /**
- * Entity URI callback.
+ * Entity URI callback used in forum_entity_info_alter().
  */
 function forum_uri($forum) {
   return array(
@@ -242,7 +242,7 @@ function forum_uri($forum) {
 }
 
 /**
- * Check whether a content type can be used in a forum.
+ * Checks whether a node can be used in a forum, based on its content type.
  *
  * @param $node
  *   A node object.
@@ -283,7 +283,8 @@ function forum_node_view($node, $view_mode) {
 /**
  * Implements hook_node_validate().
  *
- * Check in particular that only a "leaf" term in the associated taxonomy.
+ * Checks in particular that the node is assigned only a "leaf" term in the
+ * forum taxonomy.
  */
 function forum_node_validate($node, $form) {
   if (_forum_node_check_node_type($node)) {
@@ -319,7 +320,7 @@ function forum_node_validate($node, $form) {
 /**
  * Implements hook_node_presave().
  *
- * Assign forum taxonomy when adding a topic from within a forum.
+ * Assigns the forum taxonomy when adding a topic from within a forum.
  */
 function forum_node_presave($node) {
   if (_forum_node_check_node_type($node)) {
@@ -481,7 +482,7 @@ function forum_taxonomy_term_delete($term) {
 /**
  * Implements hook_comment_publish().
  *
- * This actually handles the insert and update of published nodes since
+ * This actually handles the insertion and update of published nodes since
  * comment_save() calls hook_comment_publish() for all published comments.
  */
 function forum_comment_publish($comment) {
@@ -491,12 +492,12 @@ function forum_comment_publish($comment) {
 /**
  * Implements hook_comment_update().
  *
- * Comment module doesn't call hook_comment_unpublish() when saving individual
- * comments so we need to check for those here.
+ * The Comment module doesn't call hook_comment_unpublish() when saving
+ * individual comments, so we need to check for those here.
  */
 function forum_comment_update($comment) {
-  // comment_save() calls hook_comment_publish() for all published comments
-  // so we to handle all other values here.
+  // comment_save() calls hook_comment_publish() for all published comments,
+  // so we need to handle all other values here.
   if (!$comment->status) {
     _forum_update_forum_index($comment->nid);
   }
@@ -669,8 +670,8 @@ function forum_block_save($delta = '', $edit = array()) {
 /**
  * Implements hook_block_view().
  *
- * Generates a block containing the currently active forum topics and the
- * most recently added forum topics.
+ * Generates a block containing the currently active forum topics and the most
+ * recently added forum topics.
  */
 function forum_block_view($delta = '') {
   $query = db_select('forum_index', 'f')
@@ -700,13 +701,12 @@ function forum_block_view($delta = '') {
 }
 
 /**
-* A #pre_render callback. Lists nodes based on the element's #query property.
-*
-* @see forum_block_view()
-*
-* @return
-*   A renderable array.
-*/
+ * Render API callback: Lists nodes based on the element's #query property.
+ *
+ * This function can be used as a #pre_render callback.
+ *
+ * @see forum_block_view()
+ */
 function forum_block_view_pre_render($elements) {
   $result = $elements['#query']->execute();
   if ($node_title_list = node_title_list($result)) {
@@ -730,7 +730,7 @@ function forum_form($node, $form_state) {
 
   if (!empty($node->nid)) {
     $forum_terms = $node->taxonomy_forums;
-    // If editing, give option to leave shadows
+    // If editing, give option to leave shadows.
     $shadow = (count($forum_terms) > 1);
     $form['shadow'] = array('#type' => 'checkbox', '#title' => t('Leave shadow copy'), '#default_value' => $shadow, '#description' => t('If you move this topic, you can leave a link in the old forum to the new forum.'));
     $form['forum_tid'] = array('#type' => 'value', '#value' => $node->forum_tid);
@@ -743,13 +743,15 @@ function forum_form($node, $form_state) {
  * Returns a tree of all forums for a given taxonomy term ID.
  *
  * @param $tid
- *    (optional) Taxonomy ID of the forum, if not givin all forums will be returned.
+ *   (optional) Taxonomy term ID of the forum. If not given all forums will be
+ *   returned.
+ *
  * @return
  *   A tree of taxonomy objects, with the following additional properties:
- *    - 'num_topics': Number of topics in the forum
- *    - 'num_posts': Total number of posts in all topics
- *    - 'last_post': Most recent post for the forum
- *    - 'forums': An array of child forums
+ *   - num_topics: Number of topics in the forum.
+ *   - num_posts: Total number of posts in all topics.
+ *   - last_post: Most recent post for the forum.
+ *   - forums: An array of child forums.
  */
 function forum_forum_load($tid = NULL) {
   $cache = &drupal_static(__FUNCTION__, array());
@@ -857,8 +859,17 @@ function forum_forum_load($tid = NULL) {
 }
 
 /**
- * Calculate the number of nodes the user has not yet read and are newer
- * than NODE_NEW_LIMIT.
+ * Calculates the number of new posts in a forum that the user has not yet read.
+ *
+ * Nodes are new if they are newer than NODE_NEW_LIMIT.
+ *
+ * @param $term
+ *   The term ID of the forum.
+ * @param $uid
+ *   The user ID.
+ *
+ * @return
+ *   The number of new posts in the forum that have not been read by the user.
  */
 function _forum_topics_unread($term, $uid) {
   $query = db_select('node', 'n');
@@ -874,6 +885,23 @@ function _forum_topics_unread($term, $uid) {
     ->fetchField();
 }
 
+/**
+ * Gets all the topics in a forum.
+ *
+ * @param $tid
+ *   The term ID of the forum.
+ * @param $sortby
+ *   One of the following integers indicating the sort criteria:
+ *   - 1: Date - newest first.
+ *   - 2: Date - oldest first.
+ *   - 3: Posts with the most comments first.
+ *   - 4: Posts with the least comments first.
+ * @param $forum_per_page
+ *   The maximum number of topics to display per page.
+ *
+ * @return
+ *   A list of all the topics in a forum.
+ */
 function forum_get_topics($tid, $sortby, $forum_per_page) {
   global $user, $forum_topic_list_header;
 
@@ -944,7 +972,8 @@ function forum_get_topics($tid, $sortby, $forum_per_page) {
   $first_new_found = FALSE;
   foreach ($result as $topic) {
     if ($user->uid) {
-      // folder is new if topic is new or there are new comments since last visit
+      // A forum is new if the topic is new, or if there are new comments since
+      // the user's last visit.
       if ($topic->forum_tid != $tid) {
         $topic->new = 0;
       }
@@ -981,15 +1010,22 @@ function forum_get_topics($tid, $sortby, $forum_per_page) {
 }
 
 /**
- * Process variables for forums.tpl.php
+ * Preprocesses variables for forums.tpl.php.
  *
- * The $variables array contains the following arguments:
- * - $forums
- * - $topics
- * - $parents
- * - $tid
- * - $sortby
- * - $forum_per_page
+ * @param $variables
+ *   An array containing the following elements:
+ *   - forums: An array of all forum objects to display for the given taxonomy
+ *     term ID. If tid = 0 then all the top-level forums are displayed.
+ *   - topics: An array of all the topics in the current forum.
+ *   - parents: An array of taxonomy term objects that are ancestors of the
+ *     current term ID.
+ *   - tid: Taxonomy term ID of the current forum.
+ *   - sortby: One of the following integers indicating the sort criteria:
+ *     - 1: Date - newest first.
+ *     - 2: Date - oldest first.
+ *     - 3: Posts with the most comments first.
+ *     - 4: Posts with the least comments first.
+ *   - forum_per_page: The maximum number of topics to display per page.
  *
  * @see forums.tpl.php
  */
@@ -1060,12 +1096,15 @@ function template_preprocess_forums(&$variables) {
 }
 
 /**
- * Process variables to format a forum listing.
+ * Preprocesses variables for forum-list.tpl.php.
  *
- * $variables contains the following information:
- * - $forums
- * - $parents
- * - $tid
+ * @param $variables
+ *   An array containing the following elements:
+ *   - forums: An array of all forum objects to display for the given taxonomy
+ *     term ID. If tid = 0 then all the top-level forums are displayed.
+ *   - parents: An array of taxonomy term objects that are ancestors of the
+ *     current term ID.
+ *   - tid: Taxonomy term ID of the current forum.
  *
  * @see forum-list.tpl.php
  * @see theme_forum_list()
@@ -1106,13 +1145,13 @@ function template_preprocess_forum_list(&$variables) {
 }
 
 /**
- * Preprocess variables to format the topic listing.
+ * Preprocesses variables for forum-topic-list.tpl.php.
  *
- * $variables contains the following data:
- * - $tid
- * - $topics
- * - $sortby
- * - $forum_per_page
+ * @param $variables
+ *   An array containing the following elements:
+ *   - tid: Taxonomy term ID of the current forum.
+ *   - topics: An array of all the topics in the current forum.
+ *   - forum_per_page: The maximum number of topics to display per page.
  *
  * @see forum-topic-list.tpl.php
  * @see theme_forum_topic_list()
@@ -1162,7 +1201,7 @@ function template_preprocess_forum_topic_list(&$variables) {
     }
   }
   else {
-    // Make this safe for the template
+    // Make this safe for the template.
     $variables['topics'] = array();
   }
   // Give meaning to $tid for themers. $tid actually stands for term id.
@@ -1173,14 +1212,16 @@ function template_preprocess_forum_topic_list(&$variables) {
 }
 
 /**
- * Process variables to format the icon for each individual topic.
+ * Preprocesses variables for forum-icon.tpl.php.
  *
- * $variables contains the following data:
- * - $new_posts
- * - $num_posts = 0
- * - $comment_mode = 0
- * - $sticky = 0
- * - $first_new
+ * @param $variables
+ *   An array containing the following elements:
+ *   - new_posts: Indicates whether or not the topic contains new posts.
+ *   - num_posts: The total number of posts in all topics.
+ *   - comment_mode: An integer indicating whether comments are open, closed,
+ *     or hidden.
+ *   - sticky: Indicates whether the topic is sticky.
+ *   - first_new: Indicates whether this is the first topic with new posts.
  *
  * @see forum-icon.tpl.php
  * @see theme_forum_icon()
@@ -1208,9 +1249,14 @@ function template_preprocess_forum_icon(&$variables) {
 }
 
 /**
- * Process variables to format submission info for display in the forum list and topic list.
+ * Preprocesses variables for forum-submitted.tpl.php.
+ *
+ * The submission information will be displayed in the forum list and topic
+ * list.
  *
- * $variables will contain: $topic
+ * @param $variables
+ *   An array containing the following elements:
+ *   - topic: The topic object.
  *
  * @see forum-submitted.tpl.php
  * @see theme_forum_submitted()
@@ -1220,6 +1266,16 @@ function template_preprocess_forum_submitted(&$variables) {
   $variables['time'] = isset($variables['topic']->created) ? format_interval(REQUEST_TIME - $variables['topic']->created) : '';
 }
 
+/**
+ * Gets the last time the user viewed a node.
+ *
+ * @param $nid
+ *   The node ID.
+ *
+ * @return
+ *   The timestamp when the user last viewed this node, if the user has
+ *   previously viewed the node; otherwise NODE_NEW_LIMIT.
+ */
 function _forum_user_last_visit($nid) {
   global $user;
   $history = &drupal_static(__FUNCTION__, array());
@@ -1233,6 +1289,21 @@ function _forum_user_last_visit($nid) {
   return isset($history[$nid]) ? $history[$nid] : NODE_NEW_LIMIT;
 }
 
+/**
+ * Gets topic sorting information based on an integer code.
+ *
+ * @param $sortby
+ *   One of the following integers indicating the sort criteria:
+ *   - 1: Date - newest first.
+ *   - 2: Date - oldest first.
+ *   - 3: Posts with the most comments first.
+ *   - 4: Posts with the least comments first.
+ *
+ * @return
+ *   An array with the following values:
+ *   - field: A field for an SQL query.
+ *   - sort: 'asc' or 'desc'.
+ */
 function _forum_get_topic_order($sortby) {
   switch ($sortby) {
     case 1:
diff --git a/modules/forum/forum.pages.inc b/modules/forum/forum.pages.inc
index 29307e7..8538310 100644
--- a/modules/forum/forum.pages.inc
+++ b/modules/forum/forum.pages.inc
@@ -2,11 +2,20 @@
 
 /**
  * @file
- * User page callbacks for the forum module.
+ * User page callbacks for the Forum module.
  */
 
 /**
- * Menu callback; prints a forum listing.
+ * Page callback: Prints a forum listing.
+ *
+ * @param $forum_term
+ *   A tree of all forums for a given taxonomy term ID. Defaults to NULL. See
+ *   the return object of forum_forum_load() for a complete definition.
+ *
+ * @return
+ *   A string containing HTML representing the themed forum listing.
+ *
+ * @see forum_menu()
  */
 function forum_page($forum_term = NULL) {
   if (!isset($forum_term)) {
diff --git a/modules/forum/forum.test b/modules/forum/forum.test
index 612b09c..d78d962 100644
--- a/modules/forum/forum.test
+++ b/modules/forum/forum.test
@@ -5,14 +5,49 @@
  * Tests for forum.module.
  */
 
+/**
+ * Provides automated tests for the Forum module.
+ */
 class ForumTestCase extends DrupalWebTestCase {
+
+  /**
+   * A user with various administrative privileges.
+   */
   protected $admin_user;
+
+  /**
+   * A user that can create forum topics and edit its own topics.
+   */
   protected $edit_own_topics_user;
+
+  /**
+   * A user that can create, edit, and delete forum topics.
+   */
   protected $edit_any_topics_user;
+
+  /**
+   * A user with no special privileges.
+   */
   protected $web_user;
+
+  /**
+   * An array representing a container.
+   */
   protected $container;
+
+  /**
+   * An array representing a forum.
+   */
   protected $forum;
+
+  /**
+   * An array representing a root forum.
+   */
   protected $root_forum;
+
+  /**
+   * An array of forum topic node IDs.
+   */
   protected $nids;
 
   public static function getInfo() {
@@ -23,9 +58,6 @@ class ForumTestCase extends DrupalWebTestCase {
     );
   }
 
-  /**
-   * Enable modules and create users with specific permissions.
-   */
   function setUp() {
     parent::setUp('taxonomy', 'comment', 'forum');
     // Create users.
@@ -53,12 +85,12 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Tests disabling and re-enabling forum.
+   * Tests disabling and re-enabling the Forum module.
    */
   function testEnableForumField() {
     $this->drupalLogin($this->admin_user);
 
-    // Disable the forum module.
+    // Disable the Forum module.
     $edit = array();
     $edit['modules[Core][forum][enable]'] = FALSE;
     $this->drupalPost('admin/modules', $edit, t('Save configuration'));
@@ -66,7 +98,7 @@ class ForumTestCase extends DrupalWebTestCase {
     module_list(TRUE);
     $this->assertFalse(module_exists('forum'), t('Forum module is not enabled.'));
 
-    // Attempt to re-enable the forum module and ensure it does not try to
+    // Attempt to re-enable the Forum module and ensure it does not try to
     // recreate the taxonomy_forums field.
     $edit = array();
     $edit['modules[Core][forum][enable]'] = 'forum';
@@ -77,7 +109,7 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Login users, create forum nodes, and test forum functionality through the admin and user interfaces.
+   * Tests forum functionality through the admin and user interfaces.
    */
   function testForum() {
     //Check that the basic forum install creates a default forum topic
@@ -168,7 +200,10 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Forum nodes should not be created without choosing forum from select list.
+   * Tests that forum nodes can't be added without a parent.
+   *
+   * Verifies that forum nodes are not created without choosing "forum" from the
+   * select list.
    */
   function testAddOrphanTopic() {
     // Must remove forum topics to test creating orphan topics.
@@ -190,9 +225,10 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Run admin tests on the admin user.
+   * Runs admin tests on the admin user.
    *
-   * @param object $user The logged in user.
+   * @param object $user
+   *   The logged in user.
    */
   private function doAdminTests($user) {
     // Login the user.
@@ -270,7 +306,7 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Edit the forum taxonomy.
+   * Edits the forum taxonomy.
    */
   function editForumTaxonomy() {
     // Backup forum taxonomy.
@@ -308,15 +344,16 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Create a forum container or a forum.
+   * Creates a forum container or a forum.
    *
    * @param $type
-   *   Forum type (forum container or forum).
+   *   The forum type (forum container or forum).
    * @param $parent
-   *   Forum parent (default = 0 = a root forum; >0 = a forum container or
+   *   The forum parent. This defaults to 0, indicating a root forum.
    *   another forum).
+   *
    * @return
-   *   taxonomy_term_data created.
+   *   The created taxonomy term data.
    */
   function createForum($type, $parent = 0) {
     // Generate a random name/description.
@@ -349,7 +386,7 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Delete a forum.
+   * Deletes a forum.
    *
    * @param $tid
    *   The forum ID.
@@ -370,7 +407,7 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Run basic tests on the indicated user.
+   * Runs basic tests on the indicated user.
    *
    * @param $user
    *   The logged in user.
@@ -389,15 +426,15 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Create forum topic.
+   * Creates forum topic.
    *
    * @param array $forum
-   *   Forum array.
+   *   A forum array.
    * @param boolean $container
-   *   True if $forum is a container.
+   *   TRUE if $forum is a container; FALSE otherwise.
    *
    * @return object
-   *   Topic node created.
+   *   The created topic node.
    */
   function createForumTopic($forum, $container = FALSE) {
     // Generate a random subject/body.
@@ -439,7 +476,7 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Verify the logged in user has access to a forum nodes.
+   * Verifies that the logged in user has access to a forum nodes.
    *
    * @param $node_user
    *   The user who creates the node.
@@ -519,10 +556,12 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Verify display of forum page.
+   * Verifies display of forum page.
    *
    * @param $forum
-   *   A row from taxonomy_term_data table in array.
+   *   A row from the taxonomy_term_data table in an array.
+   * @param $parent
+   *   (optional) An array representing the forum's parent.
    */
   private function verifyForumView($forum, $parent = NULL) {
     // View forum page.
@@ -542,9 +581,10 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Generate forum topics to test display of active forum block.
+   * Generates forum topics to test the display of an active forum block.
    *
-   * @param array $forum Forum array (a row from taxonomy_term_data table).
+   * @param array $forum
+   *   The foorum array (a row from taxonomy_term_data table).
    */
   private function generateForumTopics($forum) {
     $this->nids = array();
@@ -555,10 +595,10 @@ class ForumTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * View forum topics to test display of active forum block.
+   * Views forum topics to test the display of an active forum block.
    *
-   * @todo The logic here is completely incorrect, since the active
-   * forum topics block is determined by comments on the node, not by views.
+   * @todo The logic here is completely incorrect, since the active forum topics
+   *   block is determined by comments on the node, not by views.
    * @todo DIE
    *
    * @param $nids
diff --git a/modules/forum/forums.tpl.php b/modules/forum/forums.tpl.php
index 55a760f..6a0e02e 100644
--- a/modules/forum/forums.tpl.php
+++ b/modules/forum/forums.tpl.php
@@ -2,16 +2,18 @@
 
 /**
  * @file
- * Default theme implementation to display a forum which may contain forum
- * containers as well as forum topics.
+ * Displays a forum.
  *
- * Variables available:
- * - $forums: The forums to display (as processed by forum-list.tpl.php)
- * - $topics: The topics to display (as processed by forum-topic-list.tpl.php)
+ * May contain forum containers as well as forum topics.
+ *
+ * Available variables:
+ * - $forums: The forums to display (as processed by forum-list.tpl.php).
+ * - $topics: The topics to display (as processed by forum-topic-list.tpl.php).
  * - $forums_defined: A flag to indicate that the forums are configured.
  *
  * @see template_preprocess_forums()
- * @see theme_forums()
+ *
+ * @ingroup themeable
  */
 ?>
 <?php if ($forums_defined): ?>
diff --git a/modules/help/help.info b/modules/help/help.info
index 5998bfb..e0d42d8 100644
--- a/modules/help/help.info
+++ b/modules/help/help.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 files[] = help.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/image/image.admin.inc b/modules/image/image.admin.inc
index abcfab4..ab99a49 100644
--- a/modules/image/image.admin.inc
+++ b/modules/image/image.admin.inc
@@ -292,7 +292,7 @@ function image_style_name_validate($element, $form_state) {
  * @ingroup forms
  * @see image_style_delete_form_submit()
  */
-function image_style_delete_form($form, $form_state, $style) {
+function image_style_delete_form($form, &$form_state, $style) {
   $form_state['image_style'] = $style;
 
   $replacement_styles = array_diff_key(image_style_options(), array($style['name'] => ''));
diff --git a/modules/image/image.field.inc b/modules/image/image.field.inc
index 854e630..1be1583 100644
--- a/modules/image/image.field.inc
+++ b/modules/image/image.field.inc
@@ -204,11 +204,11 @@ function image_field_prepare_view($entity_type, $entities, $field, $instances, $
     if (empty($items[$id])) {
       $fid = 0;
       // Use the default for the instance if one is available.
-      if ($instances[$id]['settings']['default_image']) {
+      if (!empty($instances[$id]['settings']['default_image'])) {
         $fid = $instances[$id]['settings']['default_image'];
       }
       // Otherwise, use the default for the field.
-      elseif ($field['settings']['default_image']) {
+      elseif (!empty($field['settings']['default_image'])) {
         $fid = $field['settings']['default_image'];
       }
 
diff --git a/modules/image/image.info b/modules/image/image.info
index 1c620f8..0809f5d 100644
--- a/modules/image/image.info
+++ b/modules/image/image.info
@@ -7,10 +7,10 @@ dependencies[] = file
 files[] = image.test
 configure = admin/config/media/image-styles
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/image/image.install b/modules/image/image.install
index 5595a33..b7aac71 100644
--- a/modules/image/image.install
+++ b/modules/image/image.install
@@ -254,6 +254,11 @@ function image_update_7000() {
 }
 
 /**
+ * @addtogroup updates-7.x-extra
+ * @{
+ */
+
+/**
  * Rename possibly misnamed {image_effect} table to {image_effects}.
  */
 function image_update_7001() {
@@ -443,6 +448,10 @@ function image_update_7004() {
 }
 
 /**
+ * @} End of "addtogroup updates-7.x-extra".
+ */
+
+/**
  * Implements hook_requirements() to check the PHP GD Library.
  *
  * @param $phase
diff --git a/modules/image/tests/image_module_test.info b/modules/image/tests/image_module_test.info
index e06f463..70ecb49 100644
--- a/modules/image/tests/image_module_test.info
+++ b/modules/image/tests/image_module_test.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = image_module_test.module
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/locale/locale.datepicker.js b/modules/locale/locale.datepicker.js
index 81f1e17..f819282 100644
--- a/modules/locale/locale.datepicker.js
+++ b/modules/locale/locale.datepicker.js
@@ -1,69 +1,79 @@
 (function ($) {
 
-$.datepicker.regional['drupal-locale'] = {
-  closeText: Drupal.t('Done'),
-  prevText: Drupal.t('Prev'),
-  nextText: Drupal.t('Next'),
-  currentText: Drupal.t('Today'),
-  monthNames: [
-    Drupal.t('January'),
-    Drupal.t('February'),
-    Drupal.t('March'),
-    Drupal.t('April'),
-    Drupal.t('May'),
-    Drupal.t('June'),
-    Drupal.t('July'),
-    Drupal.t('August'),
-    Drupal.t('September'),
-    Drupal.t('October'),
-    Drupal.t('November'),
-    Drupal.t('December')
-  ],
-  monthNamesShort: [
-    Drupal.t('Jan'),
-    Drupal.t('Feb'),
-    Drupal.t('Mar'),
-    Drupal.t('Apr'),
-    Drupal.t('May'),
-    Drupal.t('Jun'),
-    Drupal.t('Jul'),
-    Drupal.t('Aug'),
-    Drupal.t('Sep'),
-    Drupal.t('Oct'),
-    Drupal.t('Nov'),
-    Drupal.t('Dec')
-  ],
-  dayNames: [
-    Drupal.t('Sunday'),
-    Drupal.t('Monday'),
-    Drupal.t('Tuesday'),
-    Drupal.t('Wednesday'),
-    Drupal.t('Thursday'),
-    Drupal.t('Friday'),
-    Drupal.t('Saturday')
-  ],
-  dayNamesShort: [
-    Drupal.t('Sun'),
-    Drupal.t('Mon'),
-    Drupal.t('Tue'),
-    Drupal.t('Wed'),
-    Drupal.t('Thu'),
-    Drupal.t('Fri'),
-    Drupal.t('Sat')
-  ],
-  dayNamesMin: [
-    Drupal.t('Su'),
-    Drupal.t('Mo'),
-    Drupal.t('Tu'),
-    Drupal.t('We'),
-    Drupal.t('Th'),
-    Drupal.t('Fr'),
-    Drupal.t('Sa')
-  ],
-  dateFormat: Drupal.t('mm/dd/yy'),
-  firstDay: Drupal.settings.jqueryuidatepicker.firstDay,
-  isRTL: Drupal.settings.jqueryuidatepicker.rtl
+/**
+ * Attaches language support to the jQuery UI datepicker component.
+ */
+Drupal.behaviors.localeDatepicker = {
+  attach: function(context, settings) {
+    // This code accesses Drupal.settings and localized strings via Drupal.t().
+    // So this code should run after these are initialized. By placing it in an
+    // attach behavior this is assured.
+    $.datepicker.regional['drupal-locale'] = $.extend({
+      closeText: Drupal.t('Done'),
+      prevText: Drupal.t('Prev'),
+      nextText: Drupal.t('Next'),
+      currentText: Drupal.t('Today'),
+      monthNames: [
+        Drupal.t('January'),
+        Drupal.t('February'),
+        Drupal.t('March'),
+        Drupal.t('April'),
+        Drupal.t('May'),
+        Drupal.t('June'),
+        Drupal.t('July'),
+        Drupal.t('August'),
+        Drupal.t('September'),
+        Drupal.t('October'),
+        Drupal.t('November'),
+        Drupal.t('December')
+      ],
+      monthNamesShort: [
+        Drupal.t('Jan'),
+        Drupal.t('Feb'),
+        Drupal.t('Mar'),
+        Drupal.t('Apr'),
+        Drupal.t('May'),
+        Drupal.t('Jun'),
+        Drupal.t('Jul'),
+        Drupal.t('Aug'),
+        Drupal.t('Sep'),
+        Drupal.t('Oct'),
+        Drupal.t('Nov'),
+        Drupal.t('Dec')
+      ],
+      dayNames: [
+        Drupal.t('Sunday'),
+        Drupal.t('Monday'),
+        Drupal.t('Tuesday'),
+        Drupal.t('Wednesday'),
+        Drupal.t('Thursday'),
+        Drupal.t('Friday'),
+        Drupal.t('Saturday')
+      ],
+      dayNamesShort: [
+        Drupal.t('Sun'),
+        Drupal.t('Mon'),
+        Drupal.t('Tue'),
+        Drupal.t('Wed'),
+        Drupal.t('Thu'),
+        Drupal.t('Fri'),
+        Drupal.t('Sat')
+      ],
+      dayNamesMin: [
+        Drupal.t('Su'),
+        Drupal.t('Mo'),
+        Drupal.t('Tu'),
+        Drupal.t('We'),
+        Drupal.t('Th'),
+        Drupal.t('Fr'),
+        Drupal.t('Sa')
+      ],
+      dateFormat: Drupal.t('mm/dd/yy'),
+      firstDay: 0,
+      isRTL: 0
+    }, Drupal.settings.jquery.ui.datepicker);
+    $.datepicker.setDefaults($.datepicker.regional['drupal-locale']);
+  }
 };
-$.datepicker.setDefaults($.datepicker.regional['drupal-locale']);
 
 })(jQuery);
diff --git a/modules/locale/locale.info b/modules/locale/locale.info
index 225e784..2ccc879 100644
--- a/modules/locale/locale.info
+++ b/modules/locale/locale.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = locale.test
 configure = admin/config/regional/language
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/locale/locale.install b/modules/locale/locale.install
index cb7cefe..2d94c71 100644
--- a/modules/locale/locale.install
+++ b/modules/locale/locale.install
@@ -126,21 +126,21 @@ function locale_update_7002() {
 }
 
 /**
- * Update "language_count" variable.
+ * @} End of "addtogroup updates-6.x-to-7.x".
  */
-function locale_update_7003() {
-  $languages = language_list('enabled');
-  variable_set('language_count', count($languages[1]));
-}
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @addtogroup updates-7.x-extra
+ * @{
  */
 
 /**
- * @addtogroup updates-7.x-extra
- * @{
+ * Update "language_count" variable.
  */
+function locale_update_7003() {
+  $languages = language_list('enabled');
+  variable_set('language_count', count($languages[1]));
+}
 
 /**
  * Remove duplicates in {locales_source}.
@@ -202,7 +202,7 @@ function locale_update_7004() {
 }
 
 /**
- * @} End of "addtogroup updates-7.x-extra"
+ * @} End of "addtogroup updates-7.x-extra".
  */
 
 /**
diff --git a/modules/locale/locale.module b/modules/locale/locale.module
index e0981b2..a20f3d5 100644
--- a/modules/locale/locale.module
+++ b/modules/locale/locale.module
@@ -396,7 +396,7 @@ function locale_form_node_form_alter(&$form, &$form_state) {
 function locale_field_node_form_submit($form, &$form_state) {
   if (field_has_translation_handler('node', 'locale')) {
     $node = (object) $form_state['values'];
-    $available_languages = field_content_languages();
+    $current_language = entity_language('node', $node);
     list(, , $bundle) = entity_extract_ids('node', $node);
 
     foreach (field_info_instances('node', $bundle) as $instance) {
@@ -406,8 +406,8 @@ function locale_field_node_form_submit($form, &$form_state) {
 
       // Handle a possible language change: new language values are inserted,
       // previous ones are deleted.
-      if ($field['translatable'] && $previous_language != $node->language) {
-        $form_state['values'][$field_name][$node->language] = $node->{$field_name}[$previous_language];
+      if ($field['translatable'] && $previous_language != $current_language) {
+        $form_state['values'][$field_name][$current_language] = $node->{$field_name}[$previous_language];
         $form_state['values'][$field_name][$previous_language] = array();
       }
     }
@@ -758,9 +758,8 @@ function locale_get_plural($count, $langcode = NULL) {
   if (!isset($plural_indexes[$langcode][$count])) {
     // Retrieve and statically cache the plural formulas for all languages.
     if (empty($plural_formulas)) {
-      $language_list = language_list();
-      foreach ($language_list as $langcode => $lang) {
-        $plural_formulas[$langcode] = $lang->formula;
+      foreach (language_list() as $installed_language) {
+        $plural_formulas[$installed_language->language] = $installed_language->formula;
       }
     }
     // If there is a plural formula for the language, evaluate it for the given
@@ -951,15 +950,22 @@ function locale_css_alter(&$css) {
  * Provides the language support for the jQuery UI Date Picker.
  */
 function locale_library_alter(&$libraries, $module) {
-  global $language;
-  if ($module == 'system' && isset($libraries['system']['ui.datepicker'])) {
+  if ($module == 'system' && isset($libraries['ui.datepicker'])) {
+    global $language;
+    // locale.datepicker.js should be added in the JS_LIBRARY group, so that
+    // this attach behavior will execute early. JS_LIBRARY is the default for
+    // hook_library_info_alter(), thus does not have to be specified explicitly.
     $datepicker = drupal_get_path('module', 'locale') . '/locale.datepicker.js';
-    $libraries['system']['ui.datepicker']['js'][$datepicker] = array('group' => JS_THEME);
-    $libraries['system']['ui.datepicker']['js'][] = array(
+    $libraries['ui.datepicker']['js'][$datepicker] = array();
+    $libraries['ui.datepicker']['js'][] = array(
       'data' => array(
-        'jqueryuidatepicker' => array(
-          'rtl' => $language->direction == LANGUAGE_RTL,
-          'firstDay' => variable_get('date_first_day', 0),
+        'jquery' => array(
+          'ui' => array(
+            'datepicker' => array(
+              'isRTL' => $language->direction == LANGUAGE_RTL,
+              'firstDay' => variable_get('date_first_day', 0),
+            ),
+          ),
         ),
       ),
       'type' => 'setting',
diff --git a/modules/locale/locale.test b/modules/locale/locale.test
index ffda6f5..6f3135b 100644
--- a/modules/locale/locale.test
+++ b/modules/locale/locale.test
@@ -180,6 +180,36 @@ class LocaleConfigurationTest extends DrupalWebTestCase {
 }
 
 /**
+ * Tests localization of the JavaScript libraries.
+ *
+ * Currently, only the jQuery datepicker is localized using Drupal translations.
+ */
+class LocaleLibraryInfoAlterTest extends DrupalWebTestCase {
+  public static function getInfo() {
+    return array(
+      'name' => 'Javascript library localisation',
+      'description' => 'Tests the localisation of JavaScript libraries.',
+      'group' => 'Locale',
+    );
+  }
+
+  function setUp() {
+    parent::setUp('locale', 'locale_test');
+  }
+
+  /**
+   * Verifies that the datepicker can be localized.
+   *
+   * @see locale_library_info_alter()
+   */
+  public function testLibraryInfoAlter() {
+    drupal_add_library('system', 'ui.datepicker');
+    $scripts = drupal_get_js();
+    $this->assertTrue(strpos($scripts, 'locale.datepicker.js'), t('locale.datepicker.js added to scripts.'));
+  }
+}
+
+/**
  * Functional tests for JavaScript parsing for translatable strings.
  */
 class LocaleJavascriptTranslationTest extends DrupalWebTestCase {
@@ -605,7 +635,7 @@ class LocaleTranslationFunctionalTest extends DrupalWebTestCase {
     $this->assertText(t('No strings available.'), t("Search didn't find the string."));
 
     // Ensure untranslated string appears if searching on 'only untranslated
-    // strings'.
+    // strings' in "all" (hasn't been translated to any language).
     $search = array(
       'string' => $name,
       'language' => 'all',
@@ -615,6 +645,17 @@ class LocaleTranslationFunctionalTest extends DrupalWebTestCase {
     $this->drupalPost('admin/config/regional/translate/translate', $search, t('Filter'));
     $this->assertNoText(t('No strings available.'), t('Search found the string.'));
 
+    // Ensure untranslated string appears if searching on 'only untranslated
+    // strings' in the custom language (hasn't been translated to that specific language).
+    $search = array(
+      'string' => $name,
+      'language' => $langcode,
+      'translation' => 'untranslated',
+      'group' => 'all',
+    );
+    $this->drupalPost('admin/config/regional/translate/translate', $search, t('Filter'));
+    $this->assertNoText(t('No strings available.'), t('Search found the string.'));
+
     // Add translation.
     // Assume this is the only result, given the random name.
     $this->clickLink(t('edit'));
@@ -1515,7 +1556,6 @@ class LocaleUninstallFrenchFunctionalTest extends LocaleUninstallFunctionalTest
   }
 }
 
-
 /**
  * Functional tests for the language switching feature.
  */
@@ -1690,7 +1730,6 @@ class LocaleBrowserDetectionTest extends DrupalUnitTestCase {
       'eh' => 'eh-oh-laa-laa',
 
       // Different qvalues.
-      'en-US,en;q=0.5,fr;q=0.25' => 'en-US',
       'fr,en;q=0.5' => 'fr-CA',
       'fr,en;q=0.5,fr-CA;q=0.25' => 'fr',
 
@@ -2378,7 +2417,7 @@ class LocaleUILanguageNegotiationTest extends DrupalWebTestCase {
       array(
         'language_negotiation' => array(LOCALE_LANGUAGE_NEGOTIATION_URL, LANGUAGE_NEGOTIATION_DEFAULT),
         'locale_language_negotiation_url_part' => LOCALE_LANGUAGE_NEGOTIATION_URL_DOMAIN,
-        'locale_test_domain' => $language_domain,
+        'locale_test_domain' => $language_domain . ':88',
         'path' => 'admin/config',
         'expect' => $language_string,
         'expected_provider' => LOCALE_LANGUAGE_NEGOTIATION_URL,
@@ -2788,12 +2827,14 @@ class LocaleCommentLanguageFunctionalTest extends DrupalWebTestCase {
           ->orderBy('cid', 'DESC')
           ->execute()
           ->fetchObject();
-        $args = array('%node_language' => $node_langcode, '%comment_language' => $comment->language, '%langcode' => $langcode);
-        $this->assertEqual($comment->language, $langcode, t('The comment posted with content language %langcode and belonging to the node with language %node_language has language %comment_language', $args));
+        $comment_langcode = entity_language('comment', $comment);
+        $args = array('%node_language' => $node_langcode, '%comment_language' => $comment_langcode, '%langcode' => $langcode);
+        $this->assertEqual($comment_langcode, $langcode, t('The comment posted with content language %langcode and belonging to the node with language %node_language has language %comment_language', $args));
       }
     }
   }
 }
+
 /**
  * Functional tests for localizing date formats.
  */
diff --git a/modules/locale/tests/locale_test.info b/modules/locale/tests/locale_test.info
index c75853a..81381b4 100644
--- a/modules/locale/tests/locale_test.info
+++ b/modules/locale/tests/locale_test.info
@@ -5,10 +5,10 @@ package = Testing
 version = VERSION
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/menu/menu.info b/modules/menu/menu.info
index d43c951..f651f06 100644
--- a/modules/menu/menu.info
+++ b/modules/menu/menu.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = menu.test
 configure = admin/structure/menu
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/menu/menu.install b/modules/menu/menu.install
index 7877b99..346edf9 100644
--- a/modules/menu/menu.install
+++ b/modules/menu/menu.install
@@ -70,7 +70,7 @@ function menu_uninstall() {
 }
 
 /**
- * @defgroup updates-7.x-extra Extra updates for 7.x
+ * @addtogroup updates-7.x-extra
  * @{
  */
 
@@ -205,6 +205,6 @@ function menu_update_7003(&$sandbox) {
 }
 
 /**
- * @} End of "defgroup updates-7.x-extra"
+ * @} End of "addtogroup updates-7.x-extra".
  * The next series of updates should start at 8000.
  */
diff --git a/modules/node/content_types.inc b/modules/node/content_types.inc
index 71b3b1a..72adc34 100644
--- a/modules/node/content_types.inc
+++ b/modules/node/content_types.inc
@@ -437,7 +437,7 @@ function node_type_delete_confirm_submit($form, &$form_state) {
   variable_del('node_preview_' . $form_state['values']['type']);
   $t_args = array('%name' => $form_state['values']['name']);
   drupal_set_message(t('The content type %name has been deleted.', $t_args));
-  watchdog('menu', 'Deleted content type %name.', $t_args, WATCHDOG_NOTICE);
+  watchdog('node', 'Deleted content type %name.', $t_args, WATCHDOG_NOTICE);
 
   node_types_rebuild();
   menu_rebuild();
diff --git a/modules/node/node.admin.inc b/modules/node/node.admin.inc
index a1967c4..1508bc0 100644
--- a/modules/node/node.admin.inc
+++ b/modules/node/node.admin.inc
@@ -432,7 +432,8 @@ function node_admin_nodes() {
   $destination = drupal_get_destination();
   $options = array();
   foreach ($nodes as $node) {
-    $l_options = $node->language != LANGUAGE_NONE && isset($languages[$node->language]) ? array('language' => $languages[$node->language]) : array();
+    $langcode = entity_language('node', $node);
+    $l_options = $langcode != LANGUAGE_NONE && isset($languages[$langcode]) ? array('language' => $languages[$langcode]) : array();
     $options[$node->nid] = array(
       'title' => array(
         'data' => array(
@@ -449,11 +450,11 @@ function node_admin_nodes() {
       'changed' => format_date($node->changed, 'short'),
     );
     if ($multilanguage) {
-      if ($node->language == LANGUAGE_NONE || isset($languages[$node->language])) {
-        $options[$node->nid]['language'] = $node->language == LANGUAGE_NONE ? t('Language neutral') : t($languages[$node->language]->name);
+      if ($langcode == LANGUAGE_NONE || isset($languages[$langcode])) {
+        $options[$node->nid]['language'] = $langcode == LANGUAGE_NONE ? t('Language neutral') : t($languages[$langcode]->name);
       }
       else {
-        $options[$node->nid]['language'] = t('Undefined language (@langcode)', array('@langcode' => $node->language));
+        $options[$node->nid]['language'] = t('Undefined language (@langcode)', array('@langcode' => $langcode));
       }
     }
     // Build a list of all the accessible operations for the current node.
diff --git a/modules/node/node.info b/modules/node/node.info
index 9a6d838..8811b0f 100644
--- a/modules/node/node.info
+++ b/modules/node/node.info
@@ -9,10 +9,10 @@ required = TRUE
 configure = admin/structure/types
 stylesheets[all][] = node.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/node/node.install b/modules/node/node.install
index c54ebfb..434410c 100644
--- a/modules/node/node.install
+++ b/modules/node/node.install
@@ -847,6 +847,15 @@ function node_update_7010() {
 }
 
 /**
+ * @} End of "addtogroup updates-6.x-to-7.x".
+ */
+
+/**
+ * @addtogroup updates-7.x-extra
+ * @{
+ */
+
+/**
  * Update the database from Drupal 6 to match the schema.
  */
 function node_update_7011() {
@@ -890,7 +899,7 @@ function node_update_7012() {
       ->execute();
 
     // Switch field languages to LANGUAGE_NONE, since initially they were
-    // assigned $node->language.
+    // assigned the node language.
     foreach (array('field_data_body', 'field_revision_body') as $table) {
       db_update($table)
         ->fields(array('language' => LANGUAGE_NONE))
@@ -915,5 +924,5 @@ function node_update_7013() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-7.x-extra".
  */
diff --git a/modules/node/node.module b/modules/node/node.module
index 57133c6..264816c 100644
--- a/modules/node/node.module
+++ b/modules/node/node.module
@@ -177,6 +177,7 @@ function node_entity_info() {
         'revision' => 'vid',
         'bundle' => 'type',
         'label' => 'title',
+        'language' => 'language',
       ),
       'bundle keys' => array(
         'bundle' => 'type',
@@ -655,7 +656,7 @@ function node_type_update_nodes($old_type, $type) {
  * @param $rebuild
  *  TRUE to rebuild node types. Equivalent to calling node_types_rebuild().
  * @return
- *   Associative array with two components:
+ *   An object with two properties:
  *   - names: Associative array of the names of node types, keyed by the type.
  *   - types: Associative array of node type objects, keyed by the type.
  *   Both of these arrays will include new types that have been defined by
@@ -1002,8 +1003,6 @@ function node_validate($node, $form, &$form_state) {
  * Prepare node for saving by populating author and creation date.
  */
 function node_submit($node) {
-  global $user;
-
   // A user might assign the node author by entering a user name in the node
   // form, which we then need to translate to a user ID.
   if (isset($node->name)) {
@@ -1684,7 +1683,7 @@ function node_search_execute($keys = NULL, $conditions = NULL) {
       'extra' => $extra,
       'score' => $item->calculated_score,
       'snippet' => search_excerpt($keys, $node->rendered),
-      'language' => $node->language,
+      'language' => entity_language('node', $node),
     );
   }
   return $results;
@@ -3274,8 +3273,9 @@ function _node_query_node_access_alter($query, $type) {
     // @endcode
     //
     // So instead of directly adding to the query object, we need to collect
-    // in a separate db_and() object and then at the end add it to the query.
-    $entity_conditions = db_and();
+    // all of the node access conditions in a separate db_and() object and
+    // then add it to the query at the end.
+    $node_conditions = db_and();
   }
   foreach ($tables as $nalias => $tableinfo) {
     $table = $tableinfo['table'];
@@ -3309,16 +3309,24 @@ function _node_query_node_access_alter($query, $type) {
         $field = 'entity_id';
       }
       $subquery->where("$nalias.$field = na.nid");
-      $query->exists($subquery);
+
+      // For an entity query, attach the subquery to entity conditions.
+      if ($type == 'entity') {
+        $node_conditions->exists($subquery);
+      }
+      // Otherwise attach it to the node query itself.
+      else {
+        $query->exists($subquery);
+      }
     }
   }
 
   if ($type == 'entity' && count($subquery->conditions())) {
     // All the node access conditions are only for field values belonging to
     // nodes.
-    $entity_conditions->condition("$base_alias.entity_type", 'node');
+    $node_conditions->condition("$base_alias.entity_type", 'node');
     $or = db_or();
-    $or->condition($entity_conditions);
+    $or->condition($node_conditions);
     // If the field value belongs to a non-node entity type then this function
     // does not do anything with it.
     $or->condition("$base_alias.entity_type", 'node', '<>');
diff --git a/modules/node/node.pages.inc b/modules/node/node.pages.inc
index 89a1593..c6cb1bc 100644
--- a/modules/node/node.pages.inc
+++ b/modules/node/node.pages.inc
@@ -15,6 +15,13 @@ function node_page_edit($node) {
   return drupal_get_form($node->type . '_node_form', $node);
 }
 
+/**
+ * Page callback: Displays add content links for available content types.
+ *
+ * Redirects to node/add/[type] if only one content type is available.
+ *
+ * @see node_menu()
+ */
 function node_add_page() {
   $item = menu_get_item();
   $content = system_admin_menu_block($item);
@@ -299,7 +306,7 @@ function node_form($form, &$form_state, $node) {
   }
   $form += array('#submit' => array());
 
-  field_attach_form('node', $node, $form, $form_state, $node->language);
+  field_attach_form('node', $node, $form, $form_state, entity_language('node', $node));
   return $form;
 }
 
diff --git a/modules/node/node.test b/modules/node/node.test
index f46d2a1..37d05e5 100644
--- a/modules/node/node.test
+++ b/modules/node/node.test
@@ -6,6 +6,26 @@
  */
 
 /**
+ * Defines a base class for testing the Node module.
+ */
+class NodeWebTestCase extends DrupalWebTestCase {
+  function setUp() {
+    $modules = func_get_args();
+    if (isset($modules[0]) && is_array($modules[0])) {
+      $modules = $modules[0];
+    }
+    $modules[] = 'node';
+    parent::setUp($modules);
+
+    // Create Basic page and Article node types.
+    if ($this->profile != 'standard') {
+      $this->drupalCreateContentType(array('type' => 'page', 'name' => 'Basic page'));
+      $this->drupalCreateContentType(array('type' => 'article', 'name' => 'Article'));
+    }
+  }
+}
+
+/**
  * Test the node_load_multiple() function.
  */
 class NodeLoadMultipleTestCase extends DrupalWebTestCase {
@@ -2268,15 +2288,16 @@ class NodeTokenReplaceTestCase extends DrupalWebTestCase {
 
     // Generate and test sanitized tokens.
     $tests = array();
+    $langcode = entity_language('node', $node);
     $tests['[node:nid]'] = $node->nid;
     $tests['[node:vid]'] = $node->vid;
     $tests['[node:tnid]'] = $node->tnid;
     $tests['[node:type]'] = 'article';
     $tests['[node:type-name]'] = 'Article';
     $tests['[node:title]'] = check_plain($node->title);
-    $tests['[node:body]'] = _text_sanitize($instance, $node->language, $node->body[$node->language][0], 'value');
-    $tests['[node:summary]'] = _text_sanitize($instance, $node->language, $node->body[$node->language][0], 'summary');
-    $tests['[node:language]'] = check_plain($node->language);
+    $tests['[node:body]'] = _text_sanitize($instance, $langcode, $node->body[$langcode][0], 'value');
+    $tests['[node:summary]'] = _text_sanitize($instance, $langcode, $node->body[$langcode][0], 'summary');
+    $tests['[node:language]'] = check_plain($langcode);
     $tests['[node:url]'] = url('node/' . $node->nid, $url_options);
     $tests['[node:edit-url]'] = url('node/' . $node->nid . '/edit', $url_options);
     $tests['[node:author]'] = check_plain(format_username($account));
@@ -2295,9 +2316,9 @@ class NodeTokenReplaceTestCase extends DrupalWebTestCase {
 
     // Generate and test unsanitized tokens.
     $tests['[node:title]'] = $node->title;
-    $tests['[node:body]'] = $node->body[$node->language][0]['value'];
-    $tests['[node:summary]'] = $node->body[$node->language][0]['summary'];
-    $tests['[node:language]'] = $node->language;
+    $tests['[node:body]'] = $node->body[$langcode][0]['value'];
+    $tests['[node:summary]'] = $node->body[$langcode][0]['summary'];
+    $tests['[node:language]'] = $langcode;
     $tests['[node:author:name]'] = format_username($account);
 
     foreach ($tests as $input => $expected) {
@@ -2493,3 +2514,78 @@ class NodeAccessPagerTestCase extends DrupalWebTestCase {
     $this->assertNoRaw('page=2', t('No third page exists.'));
   }
 }
+
+
+/**
+ * Tests the interaction of the node access system with fields.
+ */
+class NodeAccessFieldTestCase extends NodeWebTestCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => 'Node access and fields',
+      'description' => 'Tests the interaction of the node access system with fields.',
+      'group' => 'Node',
+    );
+  }
+
+  public function setUp() {
+    parent::setUp('node_access_test', 'field_ui');
+    node_access_rebuild();
+
+    // Create some users.
+    $this->admin_user = $this->drupalCreateUser(array('access content', 'bypass node access'));
+    $this->content_admin_user = $this->drupalCreateUser(array('access content', 'administer content types'));
+
+    // Add a custom field to the page content type.
+    $this->field_name = drupal_strtolower($this->randomName() . '_field_name');
+    $this->field = field_create_field(array('field_name' => $this->field_name, 'type' => 'text'));
+    $this->instance = field_create_instance(array(
+      'field_name' => $this->field_name,
+      'entity_type' => 'node',
+      'bundle' => 'page',
+    ));
+  }
+
+  /**
+   * Tests administering fields when node access is restricted.
+   */
+  function testNodeAccessAdministerField() {
+    // Create a page node.
+    $langcode = LANGUAGE_NONE;
+    $field_data = array();
+    $value = $field_data[$langcode][0]['value'] = $this->randomName();
+    $node = $this->drupalCreateNode(array($this->field_name => $field_data));
+
+    // Log in as the administrator and confirm that the field value is present.
+    $this->drupalLogin($this->admin_user);
+    $this->drupalGet("node/{$node->nid}");
+    $this->assertText($value, 'The saved field value is visible to an administrator.');
+
+    // Log in as the content admin and try to view the node.
+    $this->drupalLogin($this->content_admin_user);
+    $this->drupalGet("node/{$node->nid}");
+    $this->assertText('Access denied', 'Access is denied for the content admin.');
+
+    // Modify the field default as the content admin.
+    $edit = array();
+    $default = 'Sometimes words have two meanings';
+    $edit["{$this->field_name}[$langcode][0][value]"] = $default;
+    $this->drupalPost(
+      "admin/structure/types/manage/page/fields/{$this->field_name}",
+      $edit,
+      t('Save settings')
+    );
+
+    // Log in as the administrator.
+    $this->drupalLogin($this->admin_user);
+
+    // Confirm that the existing node still has the correct field value.
+    $this->drupalGet("node/{$node->nid}");
+    $this->assertText($value, 'The original field value is visible to an administrator.');
+
+    // Confirm that the new default value appears when creating a new node.
+    $this->drupalGet('node/add/page');
+    $this->assertRaw($default, 'The updated default value is displayed when creating a new node.');
+  }
+}
diff --git a/modules/node/node.tokens.inc b/modules/node/node.tokens.inc
index 491ec81..e43db5e 100644
--- a/modules/node/node.tokens.inc
+++ b/modules/node/node.tokens.inc
@@ -144,7 +144,8 @@ function node_tokens($type, $tokens, array $data = array(), array $options = arr
           break;
 
         case 'language':
-          $replacements[$original] = $sanitize ? check_plain($node->language) : $node->language;
+          $langcode = entity_language('node', $node);
+          $replacements[$original] = $sanitize ? check_plain($langcode) : $langcode;
           break;
 
         case 'url':
diff --git a/modules/node/tests/node_access_test.info b/modules/node/tests/node_access_test.info
index d830a3b..c67fc94 100644
--- a/modules/node/tests/node_access_test.info
+++ b/modules/node/tests/node_access_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/node/tests/node_test.info b/modules/node/tests/node_test.info
index 7fbcd97..9524a0e 100644
--- a/modules/node/tests/node_test.info
+++ b/modules/node/tests/node_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/node/tests/node_test_exception.info b/modules/node/tests/node_test_exception.info
index 1ddd073..8b4e56a 100644
--- a/modules/node/tests/node_test_exception.info
+++ b/modules/node/tests/node_test_exception.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/openid/openid.info b/modules/openid/openid.info
index 0b2abdb..c06e642 100644
--- a/modules/openid/openid.info
+++ b/modules/openid/openid.info
@@ -5,10 +5,10 @@ package = Core
 core = 7.x
 files[] = openid.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/openid/openid.install b/modules/openid/openid.install
index 2df39aa..4b77b71 100644
--- a/modules/openid/openid.install
+++ b/modules/openid/openid.install
@@ -156,5 +156,5 @@ function openid_update_6000() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-6.x-to-7.x".
  */
diff --git a/modules/openid/tests/openid_test.info b/modules/openid/tests/openid_test.info
index 3d9d6ff..2974546 100644
--- a/modules/openid/tests/openid_test.info
+++ b/modules/openid/tests/openid_test.info
@@ -6,10 +6,10 @@ core = 7.x
 dependencies[] = openid
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/overlay/overlay.info b/modules/overlay/overlay.info
index 3e48a73..9aaf4e4 100644
--- a/modules/overlay/overlay.info
+++ b/modules/overlay/overlay.info
@@ -4,10 +4,10 @@ package = Core
 version = VERSION
 core = 7.x
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/path/path.info b/modules/path/path.info
index cd9fa00..2c7f41d 100644
--- a/modules/path/path.info
+++ b/modules/path/path.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = path.test
 configure = admin/config/search/path
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/path/path.module b/modules/path/path.module
index 9df4988..1bb06f4 100644
--- a/modules/path/path.module
+++ b/modules/path/path.module
@@ -99,8 +99,9 @@ function path_form_node_form_alter(&$form, $form_state) {
   $path = array();
   if (!empty($form['#node']->nid)) {
     $conditions = array('source' => 'node/' . $form['#node']->nid);
-    if ($form['#node']->language != LANGUAGE_NONE) {
-      $conditions['language'] = $form['#node']->language;
+    $langcode = entity_language('node', $form['#node']);
+    if ($langcode != LANGUAGE_NONE) {
+      $conditions['language'] = $langcode;
     }
     $path = path_load($conditions);
     if ($path === FALSE) {
@@ -111,7 +112,7 @@ function path_form_node_form_alter(&$form, $form_state) {
     'pid' => NULL,
     'source' => isset($form['#node']->nid) ? 'node/' . $form['#node']->nid : NULL,
     'alias' => '',
-    'language' => isset($form['#node']->language) ? $form['#node']->language : LANGUAGE_NONE,
+    'language' => isset($langcode) ? $langcode : LANGUAGE_NONE,
   );
 
   $form['path'] = array(
@@ -192,8 +193,9 @@ function path_node_insert($node) {
     // Only save a non-empty alias.
     if (!empty($path['alias'])) {
       // Ensure fields for programmatic executions.
+      $langcode = entity_language('node', $node);
       $path['source'] = 'node/' . $node->nid;
-      $path['language'] = isset($node->language) ? $node->language : LANGUAGE_NONE;
+      $path['language'] = isset($langcode) ? $langcode : LANGUAGE_NONE;
       path_save($path);
     }
   }
@@ -210,13 +212,7 @@ function path_node_update($node) {
     if (!empty($path['pid']) && empty($path['alias'])) {
       path_delete($path['pid']);
     }
-    // Only save a non-empty alias.
-    if (!empty($path['alias'])) {
-      // Ensure fields for programmatic executions.
-      $path['source'] = 'node/' . $node->nid;
-      $path['language'] = isset($node->language) ? $node->language : LANGUAGE_NONE;
-      path_save($path);
-    }
+    path_node_insert($node);
   }
 }
 
@@ -234,7 +230,10 @@ function path_node_delete($node) {
 function path_form_taxonomy_form_term_alter(&$form, $form_state) {
   // Make sure this does not show up on the delete confirmation form.
   if (empty($form_state['confirm_delete'])) {
-    $path = (isset($form['#term']['tid']) ? path_load('taxonomy/term/' . $form['#term']['tid']) : array());
+    $langcode = entity_language('taxonomy_term', (object) $form['#term']);
+    $langcode = !empty($langcode) ? $langcode : LANGUAGE_NONE;
+    $conditions = array('source' => 'taxonomy/term/' . $form['#term']['tid'], 'language' => $langcode);
+    $path = (isset($form['#term']['tid']) ? path_load($conditions) : array());
     if ($path === FALSE) {
       $path = array();
     }
@@ -242,7 +241,7 @@ function path_form_taxonomy_form_term_alter(&$form, $form_state) {
       'pid' => NULL,
       'source' => isset($form['#term']['tid']) ? 'taxonomy/term/' . $form['#term']['tid'] : NULL,
       'alias' => '',
-      'language' => LANGUAGE_NONE,
+      'language' => $langcode,
     );
     $form['path'] = array(
       '#access' => user_access('create url aliases') || user_access('administer url aliases'),
@@ -274,7 +273,10 @@ function path_taxonomy_term_insert($term) {
     if (!empty($path['alias'])) {
       // Ensure fields for programmatic executions.
       $path['source'] = 'taxonomy/term/' . $term->tid;
-      $path['language'] = LANGUAGE_NONE;
+      // Core does not provide a way to store the term language but contrib
+      // modules can do it so we need to take this into account.
+      $langcode = entity_language('taxonomy_term', $term);
+      $path['language'] = !empty($langcode) ? $langcode : LANGUAGE_NONE;
       path_save($path);
     }
   }
@@ -295,7 +297,10 @@ function path_taxonomy_term_update($term) {
     if (!empty($path['alias'])) {
       // Ensure fields for programmatic executions.
       $path['source'] = 'taxonomy/term/' . $term->tid;
-      $path['language'] = LANGUAGE_NONE;
+      // Core does not provide a way to store the term language but contrib
+      // modules can do it so we need to take this into account.
+      $langcode = entity_language('taxonomy_term', $term);
+      $path['language'] = !empty($langcode) ? $langcode : LANGUAGE_NONE;
       path_save($path);
     }
   }
diff --git a/modules/php/php.info b/modules/php/php.info
index 79d134f..20e9c52 100644
--- a/modules/php/php.info
+++ b/modules/php/php.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 files[] = php.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/php/php.test b/modules/php/php.test
index 50fb552..b68bd50 100644
--- a/modules/php/php.test
+++ b/modules/php/php.test
@@ -33,8 +33,8 @@ class PHPTestCase extends DrupalWebTestCase {
 
     // Verify that anonymous and authenticated user roles do not have access.
     $this->drupalGet('admin/config/content/formats/' . $php_format_id);
-    $this->assertFieldByName('roles[1]', FALSE, t('Anonymous users do not have access to PHP code format.'));
-    $this->assertFieldByName('roles[2]', FALSE, t('Authenticated users do not have access to PHP code format.'));
+    $this->assertFieldByName('roles[' . DRUPAL_ANONYMOUS_RID . ']', FALSE, t('Anonymous users do not have access to PHP code format.'));
+    $this->assertFieldByName('roles[' . DRUPAL_AUTHENTICATED_RID . ']', FALSE, t('Authenticated users do not have access to PHP code format.'));
   }
 
   /**
diff --git a/modules/poll/poll.info b/modules/poll/poll.info
index d68b346..08fb6d2 100644
--- a/modules/poll/poll.info
+++ b/modules/poll/poll.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = poll.test
 stylesheets[all][] = poll.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/poll/poll.install b/modules/poll/poll.install
index 8c73cf4..8c58025 100644
--- a/modules/poll/poll.install
+++ b/modules/poll/poll.install
@@ -198,9 +198,18 @@ function poll_update_7003() {
 }
 
 /**
+ * @addtogroup updates-7.x-extra
+ * @{
+ */
+
+/**
  * Update the database to match the schema.
  */
 function poll_update_7004() {
   // Remove field default.
   db_change_field('poll_vote', 'chid', 'chid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE));
 }
+
+/**
+ * @} End of "addtogroup updates-7.x-extra".
+ */
diff --git a/modules/profile/profile.info b/modules/profile/profile.info
index e2b7145..6244a10 100644
--- a/modules/profile/profile.info
+++ b/modules/profile/profile.info
@@ -11,10 +11,10 @@ configure = admin/config/people/profile
 ; See user_system_info_alter().
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/rdf/rdf.info b/modules/rdf/rdf.info
index ac6a090..42572e6 100644
--- a/modules/rdf/rdf.info
+++ b/modules/rdf/rdf.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 files[] = rdf.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/rdf/tests/rdf_test.info b/modules/rdf/tests/rdf_test.info
index 0ee4f46..545cf4e 100644
--- a/modules/rdf/tests/rdf_test.info
+++ b/modules/rdf/tests/rdf_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/search/search.info b/modules/search/search.info
index c3ffbe6..c7b9067 100644
--- a/modules/search/search.info
+++ b/modules/search/search.info
@@ -8,10 +8,10 @@ files[] = search.test
 configure = admin/config/search/settings
 stylesheets[all][] = search.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/search/tests/search_embedded_form.info b/modules/search/tests/search_embedded_form.info
index 6bce581..1ba2ab6 100644
--- a/modules/search/tests/search_embedded_form.info
+++ b/modules/search/tests/search_embedded_form.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/search/tests/search_extra_type.info b/modules/search/tests/search_extra_type.info
index a70d464..eac2658 100644
--- a/modules/search/tests/search_extra_type.info
+++ b/modules/search/tests/search_extra_type.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/shortcut/shortcut.info b/modules/shortcut/shortcut.info
index e6c3c22..c9ff26c 100644
--- a/modules/shortcut/shortcut.info
+++ b/modules/shortcut/shortcut.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = shortcut.test
 configure = admin/config/user-interface/shortcut
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/drupal_web_test_case.php b/modules/simpletest/drupal_web_test_case.php
index 251c5c1..d83dbeb 100644
--- a/modules/simpletest/drupal_web_test_case.php
+++ b/modules/simpletest/drupal_web_test_case.php
@@ -85,6 +85,10 @@ abstract class DrupalTestCase {
    */
   protected $setup = FALSE;
 
+  protected $setupDatabasePrefix = FALSE;
+
+  protected $setupEnvironment = FALSE;
+
   /**
    * Constructor for DrupalTestCase.
    *
@@ -562,14 +566,21 @@ abstract class DrupalTestCase {
   /**
    * Generates a random string of ASCII characters of codes 32 to 126.
    *
-   * The generated string includes alpha-numeric characters and common misc
-   * characters. Use this method when testing general input where the content
-   * is not restricted.
+   * The generated string includes alpha-numeric characters and common
+   * miscellaneous characters. Use this method when testing general input
+   * where the content is not restricted.
+   *
+   * Do not use this method when special characters are not possible (e.g., in
+   * machine or file names that have already been validated); instead,
+   * use DrupalWebTestCase::randomName().
    *
    * @param $length
    *   Length of random string to generate.
+   *
    * @return
    *   Randomly generated string.
+   *
+   * @see DrupalWebTestCase::randomName()
    */
   public static function randomString($length = 8) {
     $str = '';
@@ -588,10 +599,16 @@ abstract class DrupalTestCase {
    * require machine readable values (i.e. without spaces and non-standard
    * characters) this method is best.
    *
+   * Do not use this method when testing unvalidated user input. Instead, use
+   * DrupalWebTestCase::randomString().
+   *
    * @param $length
    *   Length of random string to generate.
+   *
    * @return
    *   Randomly generated string.
+   *
+   * @see DrupalWebTestCase::randomString()
    */
   public static function randomName($length = 8) {
     $values = array_merge(range(65, 90), range(97, 122), range(48, 57));
@@ -1251,29 +1268,46 @@ class DrupalWebTestCase extends DrupalTestCase {
   }
 
   /**
-   * Generates a random database prefix, runs the install scripts on the
-   * prefixed database and enable the specified modules. After installation
-   * many caches are flushed and the internal browser is setup so that the
-   * page requests will run on the new prefix. A temporary files directory
-   * is created with the same name as the database prefix.
+   * Generates a database prefix for running tests.
    *
-   * @param ...
-   *   List of modules to enable for the duration of the test. This can be
-   *   either a single array or a variable number of string arguments.
+   * The generated database table prefix is used for the Drupal installation
+   * being performed for the test. It is also used as user agent HTTP header
+   * value by the cURL-based browser of DrupalWebTestCase, which is sent
+   * to the Drupal installation of the test. During early Drupal bootstrap, the
+   * user agent HTTP header is parsed, and if it matches, all database queries
+   * use the database table prefix that has been generated here.
+   *
+   * @see DrupalWebTestCase::curlInitialize()
+   * @see drupal_valid_test_ua()
+   * @see DrupalWebTestCase::setUp()
    */
-  protected function setUp() {
-    global $user, $language, $conf;
-
-    // Generate a temporary prefixed database to ensure that tests have a clean starting point.
+  protected function prepareDatabasePrefix() {
     $this->databasePrefix = 'simpletest' . mt_rand(1000, 1000000);
+
+    // As soon as the database prefix is set, the test might start to execute.
+    // All assertions as well as the SimpleTest batch operations are associated
+    // with the testId, so the database prefix has to be associated with it.
     db_update('simpletest_test_id')
       ->fields(array('last_prefix' => $this->databasePrefix))
       ->condition('test_id', $this->testId)
       ->execute();
+  }
 
-    // Reset all statics and variables to perform tests in a clean environment.
-    $conf = array();
-    drupal_static_reset();
+  /**
+   * Changes the database connection to the prefixed one.
+   *
+   * @see DrupalWebTestCase::setUp()
+   */
+  protected function changeDatabasePrefix() {
+    if (empty($this->databasePrefix)) {
+      $this->prepareDatabasePrefix();
+      // If $this->prepareDatabasePrefix() failed to work, return without
+      // setting $this->setupDatabasePrefix to TRUE, so setUp() methods will
+      // know to bail out.
+      if (empty($this->databasePrefix)) {
+        return;
+      }
+    }
 
     // Clone the current connection and replace the current prefix.
     $connection_info = Database::getConnectionInfo('default');
@@ -1285,22 +1319,43 @@ class DrupalWebTestCase extends DrupalTestCase {
     }
     Database::addConnectionInfo('default', 'default', $connection_info['default']);
 
+    // Indicate the database prefix was set up correctly.
+    $this->setupDatabasePrefix = TRUE;
+  }
+
+  /**
+   * Prepares the current environment for running the test.
+   *
+   * Backups various current environment variables and resets them, so they do
+   * not interfere with the Drupal site installation in which tests are executed
+   * and can be restored in tearDown().
+   *
+   * Also sets up new resources for the testing environment, such as the public
+   * filesystem and configuration directories.
+   *
+   * @see DrupalWebTestCase::setUp()
+   * @see DrupalWebTestCase::tearDown()
+   */
+  protected function prepareEnvironment() {
+    global $user, $language, $conf;
+
     // Store necessary current values before switching to prefixed database.
     $this->originalLanguage = $language;
     $this->originalLanguageDefault = variable_get('language_default');
     $this->originalFileDirectory = variable_get('file_public_path', conf_path() . '/files');
     $this->originalProfile = drupal_get_profile();
-    $clean_url_original = variable_get('clean_url', 0);
+    $this->originalCleanUrl = variable_get('clean_url', 0);
+    $this->originalUser = $user;
 
     // Set to English to prevent exceptions from utf8_truncate() from t()
     // during install if the current language is not 'en'.
     // The following array/object conversion is copied from language_default().
     $language = (object) array('language' => 'en', 'name' => 'English', 'native' => 'English', 'direction' => 0, 'enabled' => 1, 'plurals' => 0, 'formula' => '', 'domain' => '', 'prefix' => '', 'weight' => 0, 'javascript' => '');
 
-    // Save and clean shutdown callbacks array because it static cached and
-    // will be changed by the test run. If we don't, then it will contain
-    // callbacks from both environments. So testing environment will try
-    // to call handlers from original environment.
+    // Save and clean the shutdown callbacks array because it is static cached
+    // and will be changed by the test run. Otherwise it will contain callbacks
+    // from both environments and the testing environment will try to call the
+    // handlers defined by the original one.
     $callbacks = &drupal_register_shutdown_function();
     $this->originalShutdownCallbacks = $callbacks;
     $callbacks = array();
@@ -1308,25 +1363,75 @@ class DrupalWebTestCase extends DrupalTestCase {
     // Create test directory ahead of installation so fatal errors and debug
     // information can be logged during installation process.
     // Use temporary files directory with the same prefix as the database.
-    $public_files_directory  = $this->originalFileDirectory . '/simpletest/' . substr($this->databasePrefix, 10);
-    $private_files_directory = $public_files_directory . '/private';
-    $temp_files_directory    = $private_files_directory . '/temp';
+    $this->public_files_directory = $this->originalFileDirectory . '/simpletest/' . substr($this->databasePrefix, 10);
+    $this->private_files_directory = $this->public_files_directory . '/private';
+    $this->temp_files_directory = $this->private_files_directory . '/temp';
 
     // Create the directories
-    file_prepare_directory($public_files_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
-    file_prepare_directory($private_files_directory, FILE_CREATE_DIRECTORY);
-    file_prepare_directory($temp_files_directory, FILE_CREATE_DIRECTORY);
+    file_prepare_directory($this->public_files_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
+    file_prepare_directory($this->private_files_directory, FILE_CREATE_DIRECTORY);
+    file_prepare_directory($this->temp_files_directory, FILE_CREATE_DIRECTORY);
     $this->generatedTestFiles = FALSE;
 
     // Log fatal errors.
     ini_set('log_errors', 1);
-    ini_set('error_log', $public_files_directory . '/error.log');
+    ini_set('error_log', $this->public_files_directory . '/error.log');
 
     // Set the test information for use in other parts of Drupal.
     $test_info = &$GLOBALS['drupal_test_info'];
     $test_info['test_run_id'] = $this->databasePrefix;
     $test_info['in_child_site'] = FALSE;
 
+    // Indicate the environment was set up correctly.
+    $this->setupEnvironment = TRUE;
+  }
+
+  /**
+   * Sets up a Drupal site for running functional and integration tests.
+   *
+   * Generates a random database prefix and installs Drupal with the specified
+   * installation profile in DrupalWebTestCase::$profile into the
+   * prefixed database. Afterwards, installs any additional modules specified by
+   * the test.
+   *
+   * After installation all caches are flushed and several configuration values
+   * are reset to the values of the parent site executing the test, since the
+   * default values may be incompatible with the environment in which tests are
+   * being executed.
+   *
+   * @param ...
+   *   List of modules to enable for the duration of the test. This can be
+   *   either a single array or a variable number of string arguments.
+   *
+   * @see DrupalWebTestCase::prepareDatabasePrefix()
+   * @see DrupalWebTestCase::changeDatabasePrefix()
+   * @see DrupalWebTestCase::prepareEnvironment()
+   */
+  protected function setUp() {
+    global $user, $language, $conf;
+
+    // Create the database prefix for this test.
+    $this->prepareDatabasePrefix();
+
+    // Prepare the environment for running tests.
+    $this->prepareEnvironment();
+    if (!$this->setupEnvironment) {
+      return FALSE;
+    }
+
+    // Reset all statics and variables to perform tests in a clean environment.
+    $conf = array();
+    drupal_static_reset();
+
+    // Change the database prefix.
+    // All static variables need to be reset before the database prefix is
+    // changed, since DrupalCacheArray implementations attempt to
+    // write back to persistent caches when they are destructed.
+    $this->changeDatabasePrefix();
+    if (!$this->setupDatabasePrefix) {
+      return FALSE;
+    }
+
     // Preset the 'install_profile' system variable, so the first call into
     // system_rebuild_module_data() (in drupal_install_system()) will register
     // the test's profile as a module. Without this, the installation profile of
@@ -1334,15 +1439,16 @@ class DrupalWebTestCase extends DrupalTestCase {
     // profile's hook_install() and other hook implementations are never invoked.
     $conf['install_profile'] = $this->profile;
 
+    // Perform the actual Drupal installation.
     include_once DRUPAL_ROOT . '/includes/install.inc';
     drupal_install_system();
 
     $this->preloadRegistry();
 
     // Set path variables.
-    variable_set('file_public_path', $public_files_directory);
-    variable_set('file_private_path', $private_files_directory);
-    variable_set('file_temporary_path', $temp_files_directory);
+    variable_set('file_public_path', $this->public_files_directory);
+    variable_set('file_private_path', $this->private_files_directory);
+    variable_set('file_temporary_path', $this->temp_files_directory);
 
     // Set the 'simpletest_parent_profile' variable to add the parent profile's
     // search path to the child site's search paths.
@@ -1385,18 +1491,20 @@ class DrupalWebTestCase extends DrupalTestCase {
     // the installation process.
     drupal_cron_run();
 
-    // Log in with a clean $user.
-    $this->originalUser = $user;
+    // Ensure that the session is not written to the new environment and replace
+    // the global $user session with uid 1 from the new test site.
     drupal_save_session(FALSE);
+    // Login as uid 1.
     $user = user_load(1);
 
     // Restore necessary variables.
     variable_set('install_task', 'done');
-    variable_set('clean_url', $clean_url_original);
+    variable_set('clean_url', $this->originalCleanUrl);
     variable_set('site_mail', 'simpletest@example.com');
     variable_set('date_default_timezone', date_default_timezone_get());
+
     // Set up English language.
-    unset($GLOBALS['conf']['language_default']);
+    unset($conf['language_default']);
     $language = language_default();
 
     // Use the test mail class instead of the default mail handler class.
@@ -1506,10 +1614,21 @@ class DrupalWebTestCase extends DrupalTestCase {
     // Delete temporary files directory.
     file_unmanaged_delete_recursive($this->originalFileDirectory . '/simpletest/' . substr($this->databasePrefix, 10));
 
-    // Remove all prefixed tables (all the tables in the schema).
-    $schema = drupal_get_schema(NULL, TRUE);
-    foreach ($schema as $name => $table) {
-      db_drop_table($name);
+    // Remove all prefixed tables.
+    $tables = db_find_tables($this->databasePrefix . '%');
+    $connection_info = Database::getConnectionInfo('default');
+    $tables = db_find_tables($connection_info['default']['prefix']['default'] . '%');
+    if (empty($tables)) {
+      $this->fail('Failed to find test tables to drop.');
+    }
+    $prefix_length = strlen($connection_info['default']['prefix']['default']);
+    foreach ($tables as $table) {
+      if (db_drop_table(substr($table, $prefix_length))) {
+        unset($tables[$table]);
+      }
+    }
+    if (!empty($tables)) {
+      $this->fail('Failed to drop all prefixed tables.');
     }
 
     // Get back to the original connection.
@@ -1540,6 +1659,9 @@ class DrupalWebTestCase extends DrupalTestCase {
     // Rebuild caches.
     $this->refreshVariables();
 
+    // Reset public files directory.
+    $GLOBALS['conf']['file_public_path'] = $this->originalFileDirectory;
+
     // Reset language.
     $language = $this->originalLanguage;
     if ($this->originalLanguageDefault) {
diff --git a/modules/simpletest/files/README.txt b/modules/simpletest/files/README.txt
index c8f39ad..680e7fe 100644
--- a/modules/simpletest/files/README.txt
+++ b/modules/simpletest/files/README.txt
@@ -1,4 +1,4 @@
-
-These files are use in some tests that upload files or other operations were
-a file is useful. These files are copied to the files directory as specified
-in the site settings. Other tests files are generated in order to save space.
+These files are useful in tests that upload files or otherwise need to
+manipulate files, in which case they are copied to the files directory as
+specified in the site settings. Dummy files can also be generated by tests in
+order to save space.
diff --git a/modules/simpletest/simpletest.info b/modules/simpletest/simpletest.info
index 949d48a..01816e9 100644
--- a/modules/simpletest/simpletest.info
+++ b/modules/simpletest/simpletest.info
@@ -54,10 +54,10 @@ files[] = tests/upgrade/upgrade.upload.test
 files[] = tests/upgrade/update.user.test
 files[] = tests/upgrade/upgrade.user.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/simpletest.js b/modules/simpletest/simpletest.js
index 9cab261..2199fed 100644
--- a/modules/simpletest/simpletest.js
+++ b/modules/simpletest/simpletest.js
@@ -7,49 +7,50 @@ Drupal.behaviors.simpleTestMenuCollapse = {
   attach: function (context, settings) {
     var timeout = null;
     // Adds expand-collapse functionality.
-    $('div.simpletest-image').each(function () {
-      direction = settings.simpleTest[$(this).attr('id')].imageDirection;
-      $(this).html(settings.simpleTest.images[direction]);
-    });
-
-    // Adds group toggling functionality to arrow images.
-    $('div.simpletest-image').click(function () {
-      var trs = $(this).closest('tbody').children('.' + settings.simpleTest[this.id].testClass);
+    $('div.simpletest-image').once('simpletest-image', function () {
+      var $this = $(this);
       var direction = settings.simpleTest[this.id].imageDirection;
-      var row = direction ? trs.length - 1 : 0;
+      $this.html(settings.simpleTest.images[direction]);
 
-      // If clicked in the middle of expanding a group, stop so we can switch directions.
-      if (timeout) {
-        clearTimeout(timeout);
-      }
+      // Adds group toggling functionality to arrow images.
+      $this.click(function () {
+        var trs = $this.closest('tbody').children('.' + settings.simpleTest[this.id].testClass);
+        var direction = settings.simpleTest[this.id].imageDirection;
+        var row = direction ? trs.length - 1 : 0;
 
-      // Function to toggle an individual row according to the current direction.
-      // We set a timeout of 20 ms until the next row will be shown/hidden to
-      // create a sliding effect.
-      function rowToggle() {
-        if (direction) {
-          if (row >= 0) {
-            $(trs[row]).hide();
-            row--;
-            timeout = setTimeout(rowToggle, 20);
-          }
+        // If clicked in the middle of expanding a group, stop so we can switch directions.
+        if (timeout) {
+          clearTimeout(timeout);
         }
-        else {
-          if (row < trs.length) {
-            $(trs[row]).removeClass('js-hide').show();
-            row++;
-            timeout = setTimeout(rowToggle, 20);
+
+        // Function to toggle an individual row according to the current direction.
+        // We set a timeout of 20 ms until the next row will be shown/hidden to
+        // create a sliding effect.
+        function rowToggle() {
+          if (direction) {
+            if (row >= 0) {
+              $(trs[row]).hide();
+              row--;
+              timeout = setTimeout(rowToggle, 20);
+            }
+          }
+          else {
+            if (row < trs.length) {
+              $(trs[row]).removeClass('js-hide').show();
+              row++;
+              timeout = setTimeout(rowToggle, 20);
+            }
           }
         }
-      }
 
-      // Kick-off the toggling upon a new click.
-      rowToggle();
+        // Kick-off the toggling upon a new click.
+        rowToggle();
 
-      // Toggle the arrow image next to the test group title.
-      $(this).html(settings.simpleTest.images[(direction ? 0 : 1)]);
-      settings.simpleTest[this.id].imageDirection = !direction;
+        // Toggle the arrow image next to the test group title.
+        $this.html(settings.simpleTest.images[(direction ? 0 : 1)]);
+        settings.simpleTest[this.id].imageDirection = !direction;
 
+      });
     });
   }
 };
@@ -60,7 +61,7 @@ Drupal.behaviors.simpleTestMenuCollapse = {
  */
 Drupal.behaviors.simpleTestSelectAll = {
   attach: function (context, settings) {
-    $('td.simpletest-select-all').each(function () {
+    $('td.simpletest-select-all').once('simpletest-select-all', function () {
       var testCheckboxes = settings.simpleTest['simpletest-test-group-' + $(this).attr('id')].testNames;
       var groupCheckbox = $('<input type="checkbox" class="form-checkbox" id="' + $(this).attr('id') + '-select-all" />');
 
diff --git a/modules/simpletest/tests/actions.test b/modules/simpletest/tests/actions.test
index 23587f0..4d58b59 100644
--- a/modules/simpletest/tests/actions.test
+++ b/modules/simpletest/tests/actions.test
@@ -97,7 +97,7 @@ class ActionLoopTestCase extends DrupalWebTestCase {
     // recursion level should be kept low enough to prevent the xdebug
     // infinite recursion protection mechanism from aborting the request.
     // See http://drupal.org/node/587634.
-    variable_set('actions_max_stack', mt_rand(3, 12));
+    variable_set('actions_max_stack', 7);
     $this->triggerActions();
   }
 
diff --git a/modules/simpletest/tests/actions_loop_test.info b/modules/simpletest/tests/actions_loop_test.info
index 0569f6a..10b4ead 100644
--- a/modules/simpletest/tests/actions_loop_test.info
+++ b/modules/simpletest/tests/actions_loop_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/ajax_forms_test.info b/modules/simpletest/tests/ajax_forms_test.info
index b5c854d..8cb3985 100644
--- a/modules/simpletest/tests/ajax_forms_test.info
+++ b/modules/simpletest/tests/ajax_forms_test.info
@@ -5,10 +5,10 @@ package = Testing
 version = VERSION
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/ajax_test.info b/modules/simpletest/tests/ajax_test.info
index a9757f9..0d20c4d 100644
--- a/modules/simpletest/tests/ajax_test.info
+++ b/modules/simpletest/tests/ajax_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/batch.test b/modules/simpletest/tests/batch.test
index f668e52..e41bc92 100644
--- a/modules/simpletest/tests/batch.test
+++ b/modules/simpletest/tests/batch.test
@@ -341,8 +341,6 @@ class BatchPercentagesUnitTestCase extends DrupalUnitTestCase {
       '33' => array('total' => 3, 'current' => 1),
       // 2/3 is closer to 67% than to 66%.
       '67' => array('total' => 3, 'current' => 2),
-      // A full 3/3 should equal 100%.
-      '100' => array('total' => 3, 'current' => 3),
       // 1/199 should round up to 1%.
       '1' => array('total' => 199, 'current' => 1),
       // 198/199 should round down to 99%.
diff --git a/modules/simpletest/tests/batch_test.info b/modules/simpletest/tests/batch_test.info
index ece931d..6617884 100644
--- a/modules/simpletest/tests/batch_test.info
+++ b/modules/simpletest/tests/batch_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/common_test.info b/modules/simpletest/tests/common_test.info
index 66343ed..8a332cc 100644
--- a/modules/simpletest/tests/common_test.info
+++ b/modules/simpletest/tests/common_test.info
@@ -7,10 +7,10 @@ stylesheets[all][] = common_test.css
 stylesheets[print][] = common_test.print.css
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/common_test_cron_helper.info b/modules/simpletest/tests/common_test_cron_helper.info
index 4141395..86712ce 100644
--- a/modules/simpletest/tests/common_test_cron_helper.info
+++ b/modules/simpletest/tests/common_test_cron_helper.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/database_test.info b/modules/simpletest/tests/database_test.info
index 7d28ba0..de9cd12 100644
--- a/modules/simpletest/tests/database_test.info
+++ b/modules/simpletest/tests/database_test.info
@@ -5,10 +5,10 @@ package = Testing
 version = VERSION
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/drupal_system_listing_compatible_test/drupal_system_listing_compatible_test.info b/modules/simpletest/tests/drupal_system_listing_compatible_test/drupal_system_listing_compatible_test.info
index 5cdd71b..24b7bed 100644
--- a/modules/simpletest/tests/drupal_system_listing_compatible_test/drupal_system_listing_compatible_test.info
+++ b/modules/simpletest/tests/drupal_system_listing_compatible_test/drupal_system_listing_compatible_test.info
@@ -5,8 +5,8 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
diff --git a/modules/simpletest/tests/drupal_system_listing_incompatible_test/drupal_system_listing_incompatible_test.info b/modules/simpletest/tests/drupal_system_listing_incompatible_test/drupal_system_listing_incompatible_test.info
index 474edde..5ebfd25 100644
--- a/modules/simpletest/tests/drupal_system_listing_incompatible_test/drupal_system_listing_incompatible_test.info
+++ b/modules/simpletest/tests/drupal_system_listing_incompatible_test/drupal_system_listing_incompatible_test.info
@@ -5,8 +5,8 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
diff --git a/modules/simpletest/tests/entity_cache_test.info b/modules/simpletest/tests/entity_cache_test.info
index 7b8303f..cfe602d 100644
--- a/modules/simpletest/tests/entity_cache_test.info
+++ b/modules/simpletest/tests/entity_cache_test.info
@@ -6,10 +6,10 @@ core = 7.x
 dependencies[] = entity_cache_test_dependency
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/entity_cache_test_dependency.info b/modules/simpletest/tests/entity_cache_test_dependency.info
index d9f6722..d4e8e76 100644
--- a/modules/simpletest/tests/entity_cache_test_dependency.info
+++ b/modules/simpletest/tests/entity_cache_test_dependency.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/entity_crud_hook_test.info b/modules/simpletest/tests/entity_crud_hook_test.info
index 086885a..dd0f126 100644
--- a/modules/simpletest/tests/entity_crud_hook_test.info
+++ b/modules/simpletest/tests/entity_crud_hook_test.info
@@ -5,10 +5,10 @@ package = Testing
 version = VERSION
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/entity_query.test b/modules/simpletest/tests/entity_query.test
index ddfd354..6d77c50 100644
--- a/modules/simpletest/tests/entity_query.test
+++ b/modules/simpletest/tests/entity_query.test
@@ -20,7 +20,7 @@ class EntityFieldQueryTestCase extends DrupalWebTestCase {
   }
 
   function setUp() {
-    parent::setUp(array('field_test'));
+    parent::setUp(array('node', 'field_test', 'entity_query_access_test', 'node_access_test'));
 
     field_test_create_bundle('bundle1');
     field_test_create_bundle('bundle2');
@@ -1607,6 +1607,26 @@ class EntityFieldQueryTestCase extends DrupalWebTestCase {
   }
 
   /**
+   * Tests EntityFieldQuery access on non-node entities.
+   */
+  function testEntityFieldQueryAccess() {
+    // Test as a user with ability to bypass node access.
+    $privileged_user = $this->drupalCreateUser(array('bypass node access', 'access content'));
+    $this->drupalLogin($privileged_user);
+    $this->drupalGet('entity-query-access/test/' . $this->fields[0]['field_name']);
+    $this->assertText('Found entity', 'Returned access response with entities.');
+    $this->drupalLogout();
+
+    // Test as a user that does not have ability to bypass node access or view
+    // all nodes.
+    $regular_user = $this->drupalCreateUser(array('access content'));
+    $this->drupalLogin($regular_user);
+    $this->drupalGet('entity-query-access/test/' . $this->fields[0]['field_name']);
+    $this->assertText('Found entity', 'Returned access response with entities.');
+    $this->drupalLogout();
+  }
+
+  /**
    * Fetches the results of an EntityFieldQuery and compares.
    *
    * @param $query
@@ -1639,4 +1659,23 @@ class EntityFieldQueryTestCase extends DrupalWebTestCase {
       $this->fail('Exception thrown: '. $e->getMessage());
     }
   }
+
+  /**
+   * Tests EFQ table prefixing with multiple conditions and an altered join.
+   *
+   * @see field_test_query_efq_table_prefixing_test_alter()
+   */
+  function testTablePrefixing() {
+    $query = new EntityFieldQuery();
+    $query = $query
+      ->entityCondition('entity_type', 'test_entity')
+      ->entityCondition('bundle', 'test_bundle')
+      ->entityCondition('entity_id', '1')
+      ->addTag('efq_table_prefixing_test');
+
+    $expected = array(array('test_entity', 1));
+
+    $this->assertEntityFieldQuery($query, $expected, 'An EntityFieldQuery returns the expected results when altered with an additional join on the base table.');
+  }
+
 }
diff --git a/modules/simpletest/tests/entity_query_access_test.info b/modules/simpletest/tests/entity_query_access_test.info
new file mode 100644
index 0000000..e1f7cb9
--- /dev/null
+++ b/modules/simpletest/tests/entity_query_access_test.info
@@ -0,0 +1,16 @@
+name = "Entity query access test"
+description = "Support module for checking entity query results."
+package = Testing
+version = VERSION
+core = 7.x
+hidden = TRUE
+
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
+project = "drupal"
+datestamp = "1343839327"
+
+
+; Information added by Acquia.com packaging script
+acquia = "1"
+
diff --git a/modules/simpletest/tests/entity_query_access_test.module b/modules/simpletest/tests/entity_query_access_test.module
new file mode 100644
index 0000000..53641af
--- /dev/null
+++ b/modules/simpletest/tests/entity_query_access_test.module
@@ -0,0 +1,54 @@
+<?php
+
+/**
+ * @file
+ * Helper module for testing EntityFieldQuery access on any type of entity.
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function entity_query_access_test_menu() {
+  $items['entity-query-access/test/%'] = array(
+    'title' => "Retrieve a sample of entity query access data",
+    'page callback' => 'entity_query_access_test_sample_query',
+    'page arguments' => array(2),
+    'access callback' => TRUE,
+    'type' => MENU_CALLBACK,
+  );
+
+  return $items;
+}
+
+/**
+ * Returns the results from an example EntityFieldQuery.
+ */
+function entity_query_access_test_sample_query($field_name) {
+  global $user;
+
+  // Simulate user does not have access to view all nodes.
+  $access = &drupal_static('node_access_view_all_nodes');
+  $access[$user->uid] = FALSE;
+
+  $query = new EntityFieldQuery();
+  $query
+    ->entityCondition('entity_type', 'test_entity_bundle_key')
+    ->fieldCondition($field_name, 'value', 0, '>')
+    ->entityOrderBy('entity_id', 'ASC');
+  $results = array(
+    'items' => array(),
+    'title' => t('EntityFieldQuery results'),
+  );
+  foreach ($query->execute() as $entity_type => $entity_ids) {
+    foreach ($entity_ids as $entity_id => $entity_stub) {
+      $results['items'][] = format_string('Found entity of type @entity_type with id @entity_id', array('@entity_type' => $entity_type, '@entity_id' => $entity_id));
+    }
+  }
+  if (count($results['items']) > 0) {
+    $output = theme('item_list', $results);
+  }
+  else {
+    $output = 'No results found with EntityFieldQuery.';
+  }
+  return $output;
+}
diff --git a/modules/simpletest/tests/error_test.info b/modules/simpletest/tests/error_test.info
index ee1110b..aa6f7b0 100644
--- a/modules/simpletest/tests/error_test.info
+++ b/modules/simpletest/tests/error_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/file_test.info b/modules/simpletest/tests/file_test.info
index 4401f4f..1e1a9be 100644
--- a/modules/simpletest/tests/file_test.info
+++ b/modules/simpletest/tests/file_test.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = file_test.module
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/filter_test.info b/modules/simpletest/tests/filter_test.info
index 5e02a2e..92bc933 100644
--- a/modules/simpletest/tests/filter_test.info
+++ b/modules/simpletest/tests/filter_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/form.test b/modules/simpletest/tests/form.test
index 2f5a9cd..985abe3 100644
--- a/modules/simpletest/tests/form.test
+++ b/modules/simpletest/tests/form.test
@@ -52,7 +52,7 @@ class FormsTestCase extends DrupalWebTestCase {
     $elements['radios']['element'] = array('#title' => $this->randomName(), '#type' => 'radios', '#options' => array('' => t('None'), $this->randomName(), $this->randomName(), $this->randomName()));
     $elements['radios']['empty_values'] = $empty_arrays;
 
-    $elements['checkbox']['element'] = array('#title' => $this->randomName(), '#type' => 'checkbox', '#required' => TRUE, '#title' => $this->randomName());
+    $elements['checkbox']['element'] = array('#title' => $this->randomName(), '#type' => 'checkbox', '#required' => TRUE);
     $elements['checkbox']['empty_values'] = $empty_checkbox;
 
     $elements['checkboxes']['element'] = array('#title' => $this->randomName(), '#type' => 'checkboxes', '#options' => array($this->randomName(), $this->randomName(), $this->randomName()));
@@ -173,6 +173,8 @@ class FormsTestCase extends DrupalWebTestCase {
     $this->assertNoFieldChecked('edit-radios-bar');
     $this->assertNoFieldChecked('edit-radios-optional-foo');
     $this->assertNoFieldChecked('edit-radios-optional-bar');
+    $this->assertNoFieldChecked('edit-radios-optional-default-value-false-foo');
+    $this->assertNoFieldChecked('edit-radios-optional-default-value-false-bar');
 
     // Submit again with required fields set and verify that there are no
     // error messages.
@@ -587,7 +589,7 @@ class FormValidationTestCase extends DrupalWebTestCase {
    */
   function testValidateLimitErrors() {
     $edit = array(
-      'test' => 'invalid', 
+      'test' => 'invalid',
       'test_numeric_index[0]' => 'invalid',
       'test_substring[foo]' => 'invalid',
     );
@@ -1168,6 +1170,51 @@ class FormStateValuesCleanTestCase extends DrupalWebTestCase {
 }
 
 /**
+ * Tests $form_state clearance with form elements having buttons.
+ */
+class FormStateValuesCleanAdvancedTestCase extends DrupalWebTestCase {
+  /**
+   * An image file path for uploading.
+   */
+  protected $image;
+
+  public static function getInfo() {
+    return array(
+      'name' => 'Form state values clearance (advanced)',
+      'description' => 'Test proper removal of submitted form values using form_state_values_clean() when having forms with elements containing buttons like "managed_file".',
+      'group' => 'Form API',
+    );
+  }
+
+  function setUp() {
+    parent::setUp('form_test');
+  }
+
+  /**
+   * Tests form_state_values_clean().
+   */
+  function testFormStateValuesCleanAdvanced() {
+
+    // Get an image for uploading.
+    $image_files = $this->drupalGetTestFiles('image');
+    $this->image = current($image_files);
+
+    // Check if the physical file is there.
+    $this->assertTrue(is_file($this->image->uri), t("The image file we're going to upload exists."));
+
+    // "Browse" for the desired file.
+    $edit = array('files[image]' => drupal_realpath($this->image->uri));
+
+    // Post the form.
+    $this->drupalPost('form_test/form-state-values-clean-advanced', $edit, t('Submit'));
+
+    // Expecting a 200 HTTP code.
+    $this->assertResponse(200, t('Received a 200 response for posted test file.'));
+    $this->assertRaw(t('You WIN!'), t('Found the success message.'));
+  }
+}
+
+/**
  * Tests form rebuilding.
  *
  * @todo Add tests for other aspects of form rebuilding.
diff --git a/modules/simpletest/tests/form_test.info b/modules/simpletest/tests/form_test.info
index 614b3db..36c77c9 100644
--- a/modules/simpletest/tests/form_test.info
+++ b/modules/simpletest/tests/form_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/form_test.module b/modules/simpletest/tests/form_test.module
index 43a6cbe..e4ac77b 100644
--- a/modules/simpletest/tests/form_test.module
+++ b/modules/simpletest/tests/form_test.module
@@ -99,6 +99,14 @@ function form_test_menu() {
     'type' => MENU_CALLBACK,
   );
 
+  $items['form_test/form-state-values-clean-advanced'] = array(
+    'title' => 'Form state values clearance advanced test',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('form_test_form_state_values_clean_advanced_form'),
+    'access arguments' => array('access content'),
+    'type' => MENU_CALLBACK,
+  );
+
   $items['form-test/checkbox'] = array(
     'title' => t('Form test'),
     'page callback' => 'drupal_get_form',
@@ -372,6 +380,12 @@ function form_test_validate_required_form($form, &$form_state) {
     '#title' => 'Radios (optional)',
     '#options' => $options,
   );
+  $form['radios_optional_default_value_false'] = array(
+    '#type' => 'radios',
+    '#title' => 'Radios (optional, with a default value of FALSE)',
+    '#options' => $options,
+    '#default_value' => FALSE,
+  );
   $form['actions'] = array('#type' => 'actions');
   $form['actions']['submit'] = array('#type' => 'submit', '#value' => 'Submit');
   return $form;
@@ -873,6 +887,33 @@ function form_test_form_state_values_clean_form_submit($form, &$form_state) {
 }
 
 /**
+ * Form constructor for the form_state_values_clean() test.
+ */
+function form_test_form_state_values_clean_advanced_form($form, &$form_state) {
+  // Build an example form containing a managed file and a submit form element.
+  $form['image'] = array(
+    '#type' => 'managed_file',
+    '#title' => t('Image'),
+    '#upload_location' => 'public://',
+    '#default_value' => 0,
+  );
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Submit'),
+  );
+  return $form;
+}
+
+/**
+ * Form submission handler for form_test_form_state_values_clean_advanced_form().
+ */
+function form_test_form_state_values_clean_advanced_form_submit($form, &$form_state) {
+  form_state_values_clean($form_state);
+  print t('You WIN!');
+  exit;
+}
+
+/**
  * Build a form to test a checkbox.
  */
 function _form_test_checkbox($form, &$form_state) {
diff --git a/modules/simpletest/tests/image_test.info b/modules/simpletest/tests/image_test.info
index e8aa2d5..b79fbf1 100644
--- a/modules/simpletest/tests/image_test.info
+++ b/modules/simpletest/tests/image_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/menu.test b/modules/simpletest/tests/menu.test
index a7fb8a4..b31fee6 100644
--- a/modules/simpletest/tests/menu.test
+++ b/modules/simpletest/tests/menu.test
@@ -242,12 +242,12 @@ class MenuRouterTestCase extends DrupalWebTestCase {
     $loggedInUser = $this->drupalCreateUser(array());
     $this->drupalLogin($loggedInUser);
 
-    $this->DrupalGet('user/login');
+    $this->drupalGet('user/login');
     // Check that we got to 'user'.
     $this->assertTrue($this->url == url('user', array('absolute' => TRUE)), t("Logged-in user redirected to q=user on accessing q=user/login"));
 
     // user/register should redirect to user/UID/edit.
-    $this->DrupalGet('user/register');
+    $this->drupalGet('user/register');
     $this->assertTrue($this->url == url('user/' . $this->loggedInUser->uid . '/edit', array('absolute' => TRUE)), t("Logged-in user redirected to q=user/UID/edit on accessing q=user/register"));
   }
 
diff --git a/modules/simpletest/tests/menu_test.info b/modules/simpletest/tests/menu_test.info
index f3fd13d..bd5d4df 100644
--- a/modules/simpletest/tests/menu_test.info
+++ b/modules/simpletest/tests/menu_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/module_test.info b/modules/simpletest/tests/module_test.info
index 6f741a0..b145caa 100644
--- a/modules/simpletest/tests/module_test.info
+++ b/modules/simpletest/tests/module_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/path_test.info b/modules/simpletest/tests/path_test.info
index fe2506e..7321c12 100644
--- a/modules/simpletest/tests/path_test.info
+++ b/modules/simpletest/tests/path_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/requirements1_test.info b/modules/simpletest/tests/requirements1_test.info
index 768bd34..9875341 100644
--- a/modules/simpletest/tests/requirements1_test.info
+++ b/modules/simpletest/tests/requirements1_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/requirements2_test.info b/modules/simpletest/tests/requirements2_test.info
index ea2f1ba..9f55ff8 100644
--- a/modules/simpletest/tests/requirements2_test.info
+++ b/modules/simpletest/tests/requirements2_test.info
@@ -7,10 +7,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/session_test.info b/modules/simpletest/tests/session_test.info
index 00ec9c1..d8161a6 100644
--- a/modules/simpletest/tests/session_test.info
+++ b/modules/simpletest/tests/session_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/system_dependencies_test.info b/modules/simpletest/tests/system_dependencies_test.info
index c6c38da..d91b011 100644
--- a/modules/simpletest/tests/system_dependencies_test.info
+++ b/modules/simpletest/tests/system_dependencies_test.info
@@ -6,10 +6,10 @@ core = 7.x
 hidden = TRUE
 dependencies[] = _missing_dependency
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/system_incompatible_core_version_dependencies_test.info b/modules/simpletest/tests/system_incompatible_core_version_dependencies_test.info
index fe8fa52..8b21d8b 100644
--- a/modules/simpletest/tests/system_incompatible_core_version_dependencies_test.info
+++ b/modules/simpletest/tests/system_incompatible_core_version_dependencies_test.info
@@ -6,10 +6,10 @@ core = 7.x
 hidden = TRUE
 dependencies[] = system_incompatible_core_version_test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/system_incompatible_core_version_test.info b/modules/simpletest/tests/system_incompatible_core_version_test.info
index 6b230f5..7eda00d 100644
--- a/modules/simpletest/tests/system_incompatible_core_version_test.info
+++ b/modules/simpletest/tests/system_incompatible_core_version_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 5.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/system_incompatible_module_version_dependencies_test.info b/modules/simpletest/tests/system_incompatible_module_version_dependencies_test.info
index 3c71aff..0de8e71 100644
--- a/modules/simpletest/tests/system_incompatible_module_version_dependencies_test.info
+++ b/modules/simpletest/tests/system_incompatible_module_version_dependencies_test.info
@@ -7,10 +7,10 @@ hidden = TRUE
 ; system_incompatible_module_version_test declares version 1.0
 dependencies[] = system_incompatible_module_version_test (>2.0)
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/system_incompatible_module_version_test.info b/modules/simpletest/tests/system_incompatible_module_version_test.info
index 4b11550..028ad38 100644
--- a/modules/simpletest/tests/system_incompatible_module_version_test.info
+++ b/modules/simpletest/tests/system_incompatible_module_version_test.info
@@ -5,10 +5,10 @@ version = 1.0
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/system_test.info b/modules/simpletest/tests/system_test.info
index 4e5286f..5652e43 100644
--- a/modules/simpletest/tests/system_test.info
+++ b/modules/simpletest/tests/system_test.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = system_test.module
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/taxonomy_test.info b/modules/simpletest/tests/taxonomy_test.info
index b23599d..089172d 100644
--- a/modules/simpletest/tests/taxonomy_test.info
+++ b/modules/simpletest/tests/taxonomy_test.info
@@ -6,10 +6,10 @@ core = 7.x
 hidden = TRUE
 dependencies[] = taxonomy
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/theme.test b/modules/simpletest/tests/theme.test
index ba64400..27a8e47 100644
--- a/modules/simpletest/tests/theme.test
+++ b/modules/simpletest/tests/theme.test
@@ -124,6 +124,37 @@ class ThemeTestCase extends DrupalWebTestCase {
     module_enable(array('theme_test'), FALSE);
     $this->assertIdentical(theme('theme_test_foo', array('foo' => 'c')), 'c', 'The theme registry contains theme_test_foo again after re-enabling the module.');
   }
+
+  /**
+   * Test the list_themes() function.
+   */
+  function testListThemes() {
+    $themes = list_themes();
+    // Check if drupal_theme_access() retrieves enabled themes properly from list_themes().
+    $this->assertTrue(drupal_theme_access('test_theme'), t('Enabled theme detected'));
+    // Check if list_themes() returns disabled themes.
+    $this->assertTrue(array_key_exists('test_basetheme', $themes), t('Disabled theme detected'));
+    // Check for base theme and subtheme lists.
+    $base_theme_list = array('test_basetheme' => 'Theme test base theme');
+    $sub_theme_list = array('test_subtheme' => 'Theme test subtheme');
+    $this->assertIdentical($themes['test_basetheme']->sub_themes, $sub_theme_list, t('Base theme\'s object includes list of subthemes.'));
+    $this->assertIdentical($themes['test_subtheme']->base_themes, $base_theme_list, t('Subtheme\'s object includes list of base themes.'));
+    // Check for theme engine in subtheme.
+    $this->assertIdentical($themes['test_subtheme']->engine, 'phptemplate', t('Subtheme\'s object includes the theme engine.'));
+    // Check for theme engine prefix.
+    $this->assertIdentical($themes['test_basetheme']->prefix, 'phptemplate', t('Base theme\'s object includes the theme engine prefix.'));
+    $this->assertIdentical($themes['test_subtheme']->prefix, 'phptemplate', t('Subtheme\'s object includes the theme engine prefix.'));
+  }
+
+  /**
+   * Test the theme_get_setting() function.
+   */
+  function testThemeGetSetting() {
+    $GLOBALS['theme_key'] = 'test_theme';
+    $this->assertIdentical(theme_get_setting('theme_test_setting'), 'default value', t('theme_get_setting() uses the default theme automatically.'));
+    $this->assertNotEqual(theme_get_setting('subtheme_override', 'test_basetheme'), theme_get_setting('subtheme_override', 'test_subtheme'), t('Base theme\'s default settings values can be overridden by subtheme.'));
+    $this->assertIdentical(theme_get_setting('basetheme_only', 'test_subtheme'), 'base theme value', t('Base theme\'s default settings values are inherited by subtheme.'));
+  }
 }
 
 /**
diff --git a/modules/simpletest/tests/theme_test.info b/modules/simpletest/tests/theme_test.info
index a5b0d27..52518df 100644
--- a/modules/simpletest/tests/theme_test.info
+++ b/modules/simpletest/tests/theme_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/theme_test.module b/modules/simpletest/tests/theme_test.module
index a9bd2ad..61a12bb 100644
--- a/modules/simpletest/tests/theme_test.module
+++ b/modules/simpletest/tests/theme_test.module
@@ -25,6 +25,8 @@ function theme_test_theme($existing, $type, $theme, $path) {
  */
 function theme_test_system_theme_info() {
   $themes['test_theme'] = drupal_get_path('module', 'theme_test') . '/themes/test_theme/test_theme.info';
+  $themes['test_basetheme'] = drupal_get_path('module', 'theme_test') . '/themes/test_basetheme/test_basetheme.info';
+  $themes['test_subtheme'] = drupal_get_path('module', 'theme_test') . '/themes/test_subtheme/test_subtheme.info';
   return $themes;
 }
 
diff --git a/modules/simpletest/tests/themes/test_basetheme/test_basetheme.info b/modules/simpletest/tests/themes/test_basetheme/test_basetheme.info
new file mode 100644
index 0000000..3510fdd
--- /dev/null
+++ b/modules/simpletest/tests/themes/test_basetheme/test_basetheme.info
@@ -0,0 +1,17 @@
+name = Theme test base theme
+description = Test theme which acts as a base theme for other test subthemes.
+core = 7.x
+hidden = TRUE
+
+settings[basetheme_only] = base theme value
+settings[subtheme_override] = base theme value
+
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
+project = "drupal"
+datestamp = "1343839327"
+
+
+; Information added by Acquia.com packaging script
+acquia = "1"
+
diff --git a/modules/simpletest/tests/themes/test_subtheme/test_subtheme.info b/modules/simpletest/tests/themes/test_subtheme/test_subtheme.info
new file mode 100644
index 0000000..3a88094
--- /dev/null
+++ b/modules/simpletest/tests/themes/test_subtheme/test_subtheme.info
@@ -0,0 +1,17 @@
+name = Theme test subtheme
+description = Test theme which uses test_basetheme as the base theme.
+core = 7.x
+base theme = test_basetheme
+hidden = TRUE
+
+settings[subtheme_override] = subtheme value
+
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
+project = "drupal"
+datestamp = "1343839327"
+
+
+; Information added by Acquia.com packaging script
+acquia = "1"
+
diff --git a/modules/simpletest/tests/themes/test_theme/test_theme.info b/modules/simpletest/tests/themes/test_theme/test_theme.info
index 6dd0b13..6736ed0 100644
--- a/modules/simpletest/tests/themes/test_theme/test_theme.info
+++ b/modules/simpletest/tests/themes/test_theme/test_theme.info
@@ -15,10 +15,12 @@ hidden = TRUE
 ; file within the theme folder.
 stylesheets[all][] = system.base.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+settings[theme_test_setting] = default value
+
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/update_script_test.info b/modules/simpletest/tests/update_script_test.info
index ed65943..057fba6 100644
--- a/modules/simpletest/tests/update_script_test.info
+++ b/modules/simpletest/tests/update_script_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/update_test_1.info b/modules/simpletest/tests/update_test_1.info
index 29d1f4d..c51708d 100644
--- a/modules/simpletest/tests/update_test_1.info
+++ b/modules/simpletest/tests/update_test_1.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/update_test_2.info b/modules/simpletest/tests/update_test_2.info
index 29d1f4d..c51708d 100644
--- a/modules/simpletest/tests/update_test_2.info
+++ b/modules/simpletest/tests/update_test_2.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/update_test_3.info b/modules/simpletest/tests/update_test_3.info
index 29d1f4d..c51708d 100644
--- a/modules/simpletest/tests/update_test_3.info
+++ b/modules/simpletest/tests/update_test_3.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/upgrade/upgrade.test b/modules/simpletest/tests/upgrade/upgrade.test
index 172f30e..9df8ec7 100644
--- a/modules/simpletest/tests/upgrade/upgrade.test
+++ b/modules/simpletest/tests/upgrade/upgrade.test
@@ -71,7 +71,11 @@ abstract class UpgradePathTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Override of DrupalWebTestCase::setUp() specialized for upgrade testing.
+   * Overrides DrupalWebTestCase::setUp() for upgrade testing.
+   *
+   * @see DrupalWebTestCase::prepareDatabasePrefix()
+   * @see DrupalWebTestCase::changeDatabasePrefix()
+   * @see DrupalWebTestCase::prepareEnvironment()
    */
   protected function setUp() {
     // We are going to set a missing zlib requirement property for usage
@@ -93,55 +97,33 @@ abstract class UpgradePathTestCase extends DrupalWebTestCase {
 
     $this->loadedModules = module_list();
 
-    // Generate a temporary prefixed database to ensure that tests have a clean starting point.
-    $this->databasePrefix = 'simpletest' . mt_rand(1000, 1000000);
-    db_update('simpletest_test_id')
-      ->fields(array('last_prefix' => $this->databasePrefix))
-      ->condition('test_id', $this->testId)
-      ->execute();
+    // Create the database prefix for this test.
+    $this->prepareDatabasePrefix();
 
-    // Clone the current connection and replace the current prefix.
-    $connection_info = Database::getConnectionInfo('default');
-    Database::renameConnection('default', 'simpletest_original_default');
-    foreach ($connection_info as $target => $value) {
-      $connection_info[$target]['prefix'] = array(
-        'default' => $value['prefix']['default'] . $this->databasePrefix,
-      );
+    // Prepare the environment for running tests.
+    $this->prepareEnvironment();
+    if (!$this->setupEnvironment) {
+      return FALSE;
     }
-    Database::addConnectionInfo('default', 'default', $connection_info['default']);
 
-    // Store necessary current values before switching to prefixed database.
-    $this->originalLanguage = $language;
-    $this->originalLanguageDefault = variable_get('language_default');
-    $this->originalFileDirectory = variable_get('file_public_path', conf_path() . '/files');
-    $this->originalProfile = drupal_get_profile();
-    $clean_url_original = variable_get('clean_url', 0);
+    // Reset all statics and variables to perform tests in a clean environment.
+    $conf = array();
+    drupal_static_reset();
+
+    // Change the database prefix.
+    // All static variables need to be reset before the database prefix is
+    // changed, since DrupalCacheArray implementations attempt to
+    // write back to persistent caches when they are destructed.
+    $this->changeDatabasePrefix();
+    if (!$this->setupDatabasePrefix) {
+      return FALSE;
+    }
 
     // Unregister the registry.
     // This is required to make sure that the database layer works properly.
     spl_autoload_unregister('drupal_autoload_class');
     spl_autoload_unregister('drupal_autoload_interface');
 
-    // Create test directories ahead of installation so fatal errors and debug
-    // information can be logged during installation process.
-    // Use mock files directories with the same prefix as the database.
-    $public_files_directory  = $this->originalFileDirectory . '/simpletest/' . substr($this->databasePrefix, 10);
-    $private_files_directory = $public_files_directory . '/private';
-    $temp_files_directory    = $private_files_directory . '/temp';
-
-    // Create the directories.
-    file_prepare_directory($public_files_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
-    file_prepare_directory($private_files_directory, FILE_CREATE_DIRECTORY);
-    file_prepare_directory($temp_files_directory, FILE_CREATE_DIRECTORY);
-    $this->generatedTestFiles = FALSE;
-
-    // Log fatal errors.
-    ini_set('log_errors', 1);
-    ini_set('error_log', $public_files_directory . '/error.log');
-
-    // Reset all statics and variables to perform tests in a clean environment.
-    $conf = array();
-
     // Load the database from the portable PHP dump.
     // The files may be gzipped.
     foreach ($this->databaseDumpFiles as $file) {
@@ -152,22 +134,23 @@ abstract class UpgradePathTestCase extends DrupalWebTestCase {
     }
 
     // Set path variables.
-    $this->variable_set('file_public_path', $public_files_directory);
-    $this->variable_set('file_private_path', $private_files_directory);
-    $this->variable_set('file_temporary_path', $temp_files_directory);
+    $this->variable_set('file_public_path', $this->public_files_directory);
+    $this->variable_set('file_private_path', $this->private_files_directory);
+    $this->variable_set('file_temporary_path', $this->temp_files_directory);
 
     $this->pass('Finished loading the dump.');
 
-    // Load user 1.
-    $this->originalUser = $user;
+    // Ensure that the session is not written to the new environment and replace
+    // the global $user session with uid 1 from the new test site.
     drupal_save_session(FALSE);
+    // Login as uid 1.
     $user = db_query('SELECT * FROM {users} WHERE uid = :uid', array(':uid' => 1))->fetchObject();
 
     // Generate and set a D6-compatible session cookie.
     $this->prepareD7Session();
 
     // Restore necessary variables.
-    $this->variable_set('clean_url', $clean_url_original);
+    $this->variable_set('clean_url', $this->originalCleanUrl);
     $this->variable_set('site_mail', 'simpletest@example.com');
 
     drupal_set_time_limit($this->timeLimit);
@@ -175,63 +158,6 @@ abstract class UpgradePathTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Override of DrupalWebTestCase::tearDown() specialized for upgrade testing.
-   */
-  protected function tearDown() {
-    global $user, $language;
-
-    if (!$this->zlibInstalled) {
-      parent::tearDown();
-      return;
-    }
-
-    // In case a fatal error occurred that was not in the test process read the
-    // log to pick up any fatal errors.
-    simpletest_log_read($this->testId, $this->databasePrefix, get_class($this), TRUE);
-
-    // Delete temporary files directory.
-    file_unmanaged_delete_recursive($this->originalFileDirectory . '/simpletest/' . substr($this->databasePrefix, 10));
-
-    // Get back to the original connection.
-    Database::removeConnection('default');
-    Database::renameConnection('simpletest_original_default', 'default');
-
-    // Remove all prefixed tables.
-    $tables = db_find_tables($this->databasePrefix . '%');
-    foreach ($tables as $table) {
-      db_drop_table($table);
-    }
-
-    // Return the user to the original one.
-    $user = $this->originalUser;
-    drupal_save_session(TRUE);
-
-    // Ensure that internal logged in variable and cURL options are reset.
-    $this->loggedInUser = FALSE;
-    $this->additionalCurlOptions = array();
-
-    // Reload module list and implementations to ensure that test module hooks
-    // aren't called after tests.
-    module_list(TRUE);
-    module_implements('', FALSE, TRUE);
-
-    // Reset the Field API.
-    field_cache_clear();
-
-    // Rebuild caches.
-    parent::refreshVariables();
-
-    // Reset language.
-    $language = $this->originalLanguage;
-    if ($this->originalLanguageDefault) {
-      $GLOBALS['conf']['language_default'] = $this->originalLanguageDefault;
-    }
-
-    // Close the CURL handler.
-    $this->curlClose();
-  }
-
-  /**
    * Specialized variable_set() that works even if the child site is not upgraded.
    *
    * @param $name
diff --git a/modules/simpletest/tests/url_alter_test.info b/modules/simpletest/tests/url_alter_test.info
index 183225e..ecc3a99 100644
--- a/modules/simpletest/tests/url_alter_test.info
+++ b/modules/simpletest/tests/url_alter_test.info
@@ -5,10 +5,10 @@ package = Testing
 version = VERSION
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/simpletest/tests/xmlrpc_test.info b/modules/simpletest/tests/xmlrpc_test.info
index fdc0eee..b8c6049 100644
--- a/modules/simpletest/tests/xmlrpc_test.info
+++ b/modules/simpletest/tests/xmlrpc_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/statistics/statistics.admin.inc b/modules/statistics/statistics.admin.inc
index 6606b8b..415fd00 100644
--- a/modules/statistics/statistics.admin.inc
+++ b/modules/statistics/statistics.admin.inc
@@ -2,11 +2,18 @@
 
 /**
  * @file
- * Admin page callbacks for the statistics module.
+ * Admin page callbacks for the Statistics module.
  */
 
 /**
- * Menu callback; presents the "recent hits" page.
+ * Page callback: Displays the "recent hits" page.
+ *
+ * This displays the pages with recent hits in a given time interval that
+ * haven't been flushed yet. The flush interval is set on the statistics
+ * settings form, but is dependent on cron running.
+ *
+ * @return
+ *   A render array containing information about the most recent hits.
  */
 function statistics_recent_hits() {
   $header = array(
@@ -45,7 +52,14 @@ function statistics_recent_hits() {
 }
 
 /**
- * Menu callback; presents the "top pages" page.
+ * Page callback: Displays statistics for the "top pages" (most accesses).
+ *
+ * This displays the pages with the most hits (the "top pages") within a given
+ * time period that haven't been flushed yet. The flush interval is set on the
+ * statistics settings form, but is dependent on cron running.
+ *
+ * @return
+ *   A render array containing information about the the top pages.
  */
 function statistics_top_pages() {
   $header = array(
@@ -57,7 +71,8 @@ function statistics_top_pages() {
 
   $query = db_select('accesslog', 'a', array('target' => 'slave'))->extend('PagerDefault')->extend('TableSort');
   $query->addExpression('COUNT(path)', 'hits');
-  // MAX(title) avoids having empty node titles which otherwise causes duplicates in the top pages list
+  // MAX(title) avoids having empty node titles which otherwise causes
+  // duplicates in the top pages list.
   $query->addExpression('MAX(title)', 'title');
   $query->addExpression('AVG(timer)', 'average_time');
   $query->addExpression('SUM(timer)', 'total_time');
@@ -90,7 +105,14 @@ function statistics_top_pages() {
 }
 
 /**
- * Menu callback; presents the "top visitors" page.
+ * Page callback: Displays the "top visitors" page.
+ *
+ * This displays the pages with the top number of visitors in a given time
+ * interval that haven't been flushed yet. The flush interval is set on the
+ * statistics settings form, but is dependent on cron running.
+ *
+ * @return
+ *   A render array containing the top visitors information.
  */
 function statistics_top_visitors() {
 
@@ -143,7 +165,14 @@ function statistics_top_visitors() {
 }
 
 /**
- * Menu callback; presents the "referrer" page.
+ * Page callback: Displays the "top referrers" in the access logs.
+ *
+ * This displays the pages with the top referrers in a given time interval that
+ * haven't been flushed yet. The flush interval is set on the statistics
+ * settings form, but is dependent on cron running.
+ *
+ * @return
+ *   A render array containing the top referrers information.
  */
 function statistics_top_referrers() {
   drupal_set_title(t('Top referrers in the past %interval', array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200)))), PASS_THROUGH);
@@ -189,7 +218,14 @@ function statistics_top_referrers() {
 }
 
 /**
- * Menu callback; Displays recent page accesses.
+ * Page callback: Gathers page access statistics suitable for rendering.
+ *
+ * @param $aid
+ *   The unique accesslog ID.
+ *
+ * @return
+ *   A render array containing page access statistics. If information for the
+ *   page was not found, drupal_not_found() is called.
  */
 function statistics_access_log($aid) {
   $access = db_query('SELECT a.*, u.name FROM {accesslog} a LEFT JOIN {users} u ON a.uid = u.uid WHERE aid = :aid', array(':aid' => $aid))->fetch();
@@ -233,7 +269,7 @@ function statistics_access_log($aid) {
 }
 
 /**
- * Form builder; Configure access logging.
+ * Form constructor for the statistics administration form.
  *
  * @ingroup forms
  * @see system_settings_form()
diff --git a/modules/statistics/statistics.info b/modules/statistics/statistics.info
index 77b90a6..2e9eaeb 100644
--- a/modules/statistics/statistics.info
+++ b/modules/statistics/statistics.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = statistics.test
 configure = admin/config/system/statistics
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/statistics/statistics.install b/modules/statistics/statistics.install
index d5855a7..b857435 100644
--- a/modules/statistics/statistics.install
+++ b/modules/statistics/statistics.install
@@ -2,7 +2,7 @@
 
 /**
  * @file
- * Install, update and uninstall functions for the statistics module.
+ * Install, update, and uninstall functions for the Statistics module.
  */
 
 /**
@@ -154,5 +154,5 @@ function statistics_update_7000() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-6.x-to-7.x".
  */
diff --git a/modules/statistics/statistics.module b/modules/statistics/statistics.module
index 89cda6d..81d24b7 100644
--- a/modules/statistics/statistics.module
+++ b/modules/statistics/statistics.module
@@ -2,7 +2,7 @@
 
 /**
  * @file
- * Logs access statistics for your site.
+ * Logs and displays access statistics for a site.
  */
 
 /**
@@ -45,7 +45,7 @@ function statistics_help($path, $arg) {
 /**
  * Implements hook_exit().
  *
- * This is where statistics are gathered on page accesses.
+ * Gathers statistics for page accesses.
  */
 function statistics_exit() {
   global $user;
@@ -249,20 +249,20 @@ function statistics_cron() {
 }
 
 /**
- * Returns all time or today top or last viewed node(s).
+ * Returns the most viewed content of all time, today, or the last-viewed node.
  *
  * @param $dbfield
- *   one of
- *   - 'totalcount': top viewed content of all time.
- *   - 'daycount': top viewed content for today.
- *   - 'timestamp': last viewed node.
- *
+ *   The database field to use, one of:
+ *   - 'totalcount': Integer that shows the top viewed content of all time.
+ *   - 'daycount': Integer that shows the top viewed content for today.
+ *   - 'timestamp': Integer that shows only the last viewed node.
  * @param $dbrows
- *   number of rows to be returned.
+ *   The number of rows to be returned.
  *
- * @return
- *   A query result containing n.nid, n.title, u.uid, u.name of the selected node(s)
- *   or FALSE if the query could not be executed correctly.
+ * @return SelectQuery|FALSE
+ *   A query result containing the node ID, title, user ID that owns the node,
+ *   and the username for the selected node(s), or FALSE if the query could not
+ *   be executed correctly.
  */
 function statistics_title_list($dbfield, $dbrows) {
   if (in_array($dbfield, array('totalcount', 'daycount', 'timestamp'))) {
@@ -288,14 +288,15 @@ function statistics_title_list($dbfield, $dbrows) {
  * Retrieves a node's "view statistics".
  *
  * @param $nid
- *   node ID
+ *   The node ID.
  *
  * @return
- *   An array with three entries: [0]=totalcount, [1]=daycount, [2]=timestamp
- *   - totalcount: count of the total number of times that node has been viewed.
- *   - daycount: count of the total number of times that node has been viewed "today".
- *     For the daycount to be reset, cron must be enabled.
- *   - timestamp: timestamp of when that node was last viewed.
+ *   An associative array containing:
+ *   - totalcount: Integer for the total number of times the node has been
+ *     viewed.
+ *   - daycount: Integer for the total number of times the node has been viewed
+ *     "today". For the daycount to be reset, cron must be enabled.
+ *   - timestamp: Integer for the timestamp of when the node was last viewed.
  */
 function statistics_get($nid) {
 
@@ -374,8 +375,15 @@ function statistics_block_view($delta = '') {
 }
 
 /**
- * It is possible to adjust the width of columns generated by the
- * statistics module.
+ * Generates a link to a path, truncating the displayed text to a given width.
+ *
+ * @param $path
+ *   The path to generate the link for.
+ * @param $width
+ *   The width to set the displayed text of the path.
+ *
+ * @return
+ *   A string as a link, truncated to the width, linked to the given $path.
  */
 function _statistics_link($path, $width = 35) {
   $title = drupal_get_path_alias($path);
@@ -383,6 +391,17 @@ function _statistics_link($path, $width = 35) {
   return l($title, $path);
 }
 
+/**
+ * Formats an item for display, including both the item title and the link.
+ *
+ * @param $title
+ *   The text to link to a path; will be truncated to a maximum width of 35.
+ * @param $path
+ *   The path to link to; will default to '/'.
+ *
+ * @return
+ *   An HTML string with $title linked to the $path.
+ */
 function _statistics_format_item($title, $path) {
   $path = ($path ? $path : '/');
   $output  = ($title ? "$title<br />" : '');
diff --git a/modules/statistics/statistics.pages.inc b/modules/statistics/statistics.pages.inc
index bb31f98..8bd9712 100644
--- a/modules/statistics/statistics.pages.inc
+++ b/modules/statistics/statistics.pages.inc
@@ -2,9 +2,16 @@
 
 /**
  * @file
- * User page callbacks for the statistics module.
+ * User page callbacks for the Statistics module.
  */
 
+/**
+ * Page callback: Displays statistics for a node.
+ *
+ * @return
+ *   A render array containing node statistics. If information for the node was
+ *   not found, this will deliver a page not found error via drupal_not_found().
+ */
 function statistics_node_tracker() {
   if ($node = node_load(arg(1))) {
 
@@ -52,6 +59,13 @@ function statistics_node_tracker() {
   }
 }
 
+/**
+ * Page callback: Displays statistics for a user.
+ *
+ * @return array
+ *   A render array containing user statistics. If information for the user was
+ *   not found, this will deliver a page not found error via drupal_not_found().
+ */
 function statistics_user_tracker() {
   if ($account = user_load(arg(1))) {
 
diff --git a/modules/statistics/statistics.test b/modules/statistics/statistics.test
index f12490a..a40ecc8 100644
--- a/modules/statistics/statistics.test
+++ b/modules/statistics/statistics.test
@@ -2,11 +2,11 @@
 
 /**
  * @file
- * Tests for statistics.module.
+ * Tests for the Statistics module.
  */
 
 /**
- * Sets up a base class for the Statistics module.
+ * Defines a base class for testing the Statistics module.
  */
 class StatisticsTestCase extends DrupalWebTestCase {
 
@@ -46,10 +46,10 @@ class StatisticsTestCase extends DrupalWebTestCase {
 }
 
 /**
- * Tests that logging via statistics_exit() works for cached and uncached pages.
+ * Tests that logging via statistics_exit() works for all pages.
  *
- * Subclass DrupalWebTestCase rather than StatisticsTestCase, because we want
- * to test requests from an anonymous user.
+ * We subclass DrupalWebTestCase rather than StatisticsTestCase, because we
+ * want to test requests from an anonymous user.
  */
 class StatisticsLoggingTestCase extends DrupalWebTestCase {
   public static function getInfo() {
@@ -282,10 +282,24 @@ class StatisticsBlockVisitorsTestCase extends StatisticsTestCase {
 }
 
 /**
- * Test statistics administration screen.
+ * Tests the statistics administration screen.
  */
 class StatisticsAdminTestCase extends DrupalWebTestCase {
+
+  /**
+   * A user that has permission to administer and access statistics.
+   *
+   * @var object|FALSE
+   *
+   * A fully loaded user object, or FALSE if user creation failed.
+   */
   protected $privileged_user;
+
+  /**
+   * A page node for which to check access statistics.
+   *
+   * @var object
+   */
   protected $test_node;
 
   public static function getInfo() {
@@ -422,7 +436,7 @@ class StatisticsAdminTestCase extends DrupalWebTestCase {
 }
 
 /**
- * Test statistics token replacement in strings.
+ * Tests statistics token replacement in strings.
  */
 class StatisticsTokenReplaceTestCase extends StatisticsTestCase {
   public static function getInfo() {
diff --git a/modules/syslog/syslog.info b/modules/syslog/syslog.info
index 3ec4afb..7b26775 100644
--- a/modules/syslog/syslog.info
+++ b/modules/syslog/syslog.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 files[] = syslog.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/system/image.gd.inc b/modules/system/image.gd.inc
index 39f86dc..91c0b05 100644
--- a/modules/system/image.gd.inc
+++ b/modules/system/image.gd.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * @ingroup image
+ * @addtogroup image
  * @{
  */
 
@@ -363,5 +363,5 @@ function image_gd_get_info(stdClass $image) {
 }
 
 /**
- * @} End of "ingroup image".
+ * @} End of "addtogroup image".
  */
diff --git a/modules/system/system.admin.inc b/modules/system/system.admin.inc
index e9682e7..23a975b 100644
--- a/modules/system/system.admin.inc
+++ b/modules/system/system.admin.inc
@@ -400,7 +400,7 @@ function system_theme_settings($form, &$form_state, $key = '') {
   // Default settings are defined in theme_get_setting() in includes/theme.inc
   if ($key) {
     $var = 'theme_' . $key . '_settings';
-    $themes = system_rebuild_theme_data();
+    $themes = list_themes();
     $features = $themes[$key]->info['features'];
   }
   else {
diff --git a/modules/system/system.api.php b/modules/system/system.api.php
index e283869..79ac8f1 100644
--- a/modules/system/system.api.php
+++ b/modules/system/system.api.php
@@ -97,6 +97,18 @@ function hook_hook_info_alter(&$hooks) {
  *     instead specify a callback function here, which will be called to
  *     determine the entity label. See also the entity_label() function, which
  *     implements this logic.
+ *   - language callback: (optional) A function taking an entity and an entity
+ *     type as arguments and returning a language code. In most situations, when
+ *     needing to determine this value, inspecting a property named after the
+ *     'language' element of the 'entity keys' should be enough. The language
+ *     callback is meant to be used primarily for temporary alterations of the
+ *     property value: entity-defining modules are encouraged to always define a
+ *     language property, instead of using the callback as main entity language
+ *     source. In fact not having a language property defined is likely to
+ *     prevent an entity from being queried by language. Moreover, given that
+ *     entity_language() is not necessarily used everywhere it would be
+ *     appropriate, modules implementing the language callback should be aware
+ *     that this might not be always called.
  *   - fieldable: Set to TRUE if you want your entity type to accept fields
  *     being attached to it.
  *   - translation: An associative array of modules registered as field
@@ -123,6 +135,13 @@ function hook_hook_info_alter(&$hooks) {
  *       'subject' should be specified here. If complex logic is required to
  *       build the label, a 'label callback' should be defined instead (see
  *       the 'label callback' section above for details).
+ *     - language: The name of the property, typically 'language', that contains
+ *       the language code representing the language the entity has been created
+ *       in. This value may be changed when editing the entity and represents
+ *       the language its textual components are supposed to have. If no
+ *       language property is available, the 'language callback' may be used
+ *       instead. This entry can be omitted if the entities of this type are not
+ *       language-aware.
  *   - bundle keys: An array describing how the Field API can extract the
  *     information it needs from the bundle objects for this type. This entry
  *     is required if the 'path' provided in the 'bundles'/'admin' section
@@ -195,6 +214,7 @@ function hook_entity_info() {
         'id' => 'nid',
         'revision' => 'vid',
         'bundle' => 'type',
+        'language' => 'language',
       ),
       'bundle keys' => array(
         'bundle' => 'type',
@@ -1030,7 +1050,7 @@ function hook_menu_get_item_alter(&$router_item, $path, $original_map) {
  * is invoked to retrieve a value that is used in the path in place of the
  * wildcard. A good example is user.module, which defines
  * user_uid_optional_to_arg() (corresponding to the menu entry
- * 'user/%user_uid_optional'). This function returns the user ID of the
+ * 'tracker/%user_uid_optional'). This function returns the user ID of the
  * current user.
  *
  * The _to_arg() function will get called with three arguments:
@@ -1797,8 +1817,8 @@ function hook_forms($form_id, $args) {
  * used to set up global parameters that are needed later in the request.
  *
  * Only use this hook if your code must run even for cached page views. This
- * hook is called before modules or most include files are loaded into memory.
- * It happens while Drupal is still in bootstrap mode.
+ * hook is called before the theme, modules, or most include files are loaded
+ * into memory. It happens while Drupal is still in bootstrap mode.
  *
  * @see hook_init()
  */
@@ -1813,7 +1833,8 @@ function hook_boot() {
  *
  * This hook is run at the beginning of the page request. It is typically
  * used to set up global parameters that are needed later in the request.
- * When this hook is called, all modules are already loaded in memory.
+ * When this hook is called, the theme and all modules are already loaded in
+ * memory.
  *
  * This hook is not run on cached pages.
  *
@@ -2343,6 +2364,7 @@ function hook_xmlrpc_alter(&$methods) {
  *   - type: The type of message for this entry.
  *   - user: The user object for the user who was logged in when the event
  *     happened.
+ *   - uid: The user ID for the user who was logged in when the event happened.
  *   - request_uri: The request URI for the page the event happened in.
  *   - referer: The page that referred the user to the page where the event
  *     occurred.
@@ -2409,7 +2431,7 @@ function hook_watchdog(array $log_entry) {
     '@ip'            => $log_entry['ip'],
     '@request_uri'   => $log_entry['request_uri'],
     '@referer_uri'   => $log_entry['referer'],
-    '@uid'           => $log_entry['user']->uid,
+    '@uid'           => $log_entry['uid'],
     '@name'          => $log_entry['user']->name,
     '@link'          => strip_tags($log_entry['link']),
     '@message'       => strip_tags($log_entry['message']),
@@ -3226,33 +3248,30 @@ function hook_install() {
 /**
  * Perform a single update.
  *
- * For each patch which requires a database change add a new hook_update_N()
- * which will be called by update.php. The database updates are numbered
- * sequentially according to the version of Drupal you are compatible with.
- *
- * Schema updates should adhere to the Schema API:
- * @link http://drupal.org/node/150215 http://drupal.org/node/150215 @endlink
- *
- * Database updates consist of 3 parts:
- * - 1 digit for Drupal core compatibility
- * - 1 digit for your module's major release version (e.g. is this the 5.x-1.* (1) or 5.x-2.* (2) series of your module?)
- * - 2 digits for sequential counting starting with 00
- *
- * The 2nd digit should be 0 for initial porting of your module to a new Drupal
- * core API.
+ * For each change that requires one or more actions to be performed when
+ * updating a site, add a new hook_update_N(), which will be called by
+ * update.php. The documentation block preceding this function is stripped of
+ * newlines and used as the description for the update on the pending updates
+ * task list. Schema updates should adhere to the
+ * @link http://drupal.org/node/150215 Schema API. @endlink
+ *
+ * Implementations of hook_update_N() are named (module name)_update_(number).
+ * The numbers are composed of three parts:
+ * - 1 digit for Drupal core compatibility.
+ * - 1 digit for your module's major release version (e.g., is this the 7.x-1.*
+ *   (1) or 7.x-2.* (2) series of your module?). This digit should be 0 for
+ *   initial porting of your module to a new Drupal core API.
+ * - 2 digits for sequential counting, starting with 00.
  *
  * Examples:
- * - mymodule_update_5200()
- *   - This is the first update to get the database ready to run mymodule 5.x-2.*.
- * - mymodule_update_6000()
- *   - This is the required update for mymodule to run with Drupal core API 6.x.
- * - mymodule_update_6100()
- *   - This is the first update to get the database ready to run mymodule 6.x-1.*.
- * - mymodule_update_6200()
- *   - This is the first update to get the database ready to run mymodule 6.x-2.*.
- *     Users can directly update from 5.x-2.* to 6.x-2.* and they get all 60XX
- *     and 62XX updates, but not 61XX updates, because those reside in the
- *     6.x-1.x branch only.
+ * - mymodule_update_7000(): This is the required update for mymodule to run
+ *   with Drupal core API 7.x when upgrading from Drupal core API 6.x.
+ * - mymodule_update_7100(): This is the first update to get the database ready
+ *   to run mymodule 7.x-1.*.
+ * - mymodule_update_7200(): This is the first update to get the database ready
+ *   to run mymodule 7.x-2.*. Users can directly update from 6.x-2.* to 7.x-2.*
+ *   and they get all 70xx and 72xx updates, but not 71xx updates, because
+ *   those reside in the 7.x-1.x branch only.
  *
  * A good rule of thumb is to remove updates older than two major releases of
  * Drupal. See hook_update_last_removed() to notify Drupal about the removals.
@@ -3271,8 +3290,8 @@ function hook_install() {
  * information between successive calls, and the $sandbox['#finished'] value
  * to provide feedback regarding completion level.
  *
- * See the batch operations page for more information on how to use the batch API:
- * @link http://drupal.org/node/180528 http://drupal.org/node/180528 @endlink
+ * See the batch operations page for more information on how to use the
+ * @link http://drupal.org/node/180528 Batch API. @endlink
  *
  * @param $sandbox
  *   Stores information for multipass updates. See above for more information.
@@ -3283,9 +3302,14 @@ function hook_install() {
  *   reason, it will throw a PDOException.
  *
  * @return
- *   Optionally update hooks may return a translated string that will be displayed
- *   to the user. If no message is returned, no message will be presented to the
- *   user.
+ *   Optionally, update hooks may return a translated string that will be
+ *   displayed to the user after the update has completed. If no message is
+ *   returned, no message will be presented to the user.
+ *
+ * @see batch
+ * @see schemaapi
+ * @see hook_update_last_removed()
+ * @see update_get_update_list()
  */
 function hook_update_N(&$sandbox) {
   // For non-multipass updates, the signature can simply be;
diff --git a/modules/system/system.base.css b/modules/system/system.base.css
index bf6dd9f..65383dd 100644
--- a/modules/system/system.base.css
+++ b/modules/system/system.base.css
@@ -27,6 +27,7 @@
   color: #000;
   cursor: default;
   white-space: pre;
+  zoom: 1; /* IE7 */
 }
 /* Animated throbber */
 html.js input.form-autocomplete {
diff --git a/modules/system/system.info b/modules/system/system.info
index 433f241..60e1c7a 100644
--- a/modules/system/system.info
+++ b/modules/system/system.info
@@ -12,10 +12,10 @@ files[] = system.test
 required = TRUE
 configure = admin/config/system
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/system/system.install b/modules/system/system.install
index c030000..1161d6c 100644
--- a/modules/system/system.install
+++ b/modules/system/system.install
@@ -2953,6 +2953,16 @@ function system_update_7069() {
 }
 
 /**
+ * @} End of "defgroup updates-6.x-to-7.x".
+ * The next series of updates should start at 8000.
+ */
+
+/**
+ * @defgroup updates-7.x-extra Extra system updates for 7.x
+ * @{
+ */
+
+/**
  * Remove the obsolete 'drupal_badge_color' and 'drupal_badge_size' variables.
  */
 function system_update_7070() {
@@ -2983,16 +2993,6 @@ function system_update_7072() {
 }
 
 /**
- * @} End of "defgroup updates-6.x-to-7.x"
- * The next series of updates should start at 8000.
- */
-
-/**
- * @defgroup updates-7.x-extra Extra system updates for 7.x
- * @{
- */
-
-/**
  * Add binary to {file_managed}, in case system_update_7034() was run without
  * it.
  */
@@ -3016,6 +3016,15 @@ function system_update_7073() {
 }
 
 /**
- * @} End of "defgroup updates-7.x-extra"
+ * This update has been removed and will not run.
+ */
+function system_update_7074() {
+  // This update function previously converted menu_links query strings to
+  // arrays. It has been removed for now due to incompatibility with
+  // PostgreSQL.
+}
+
+/**
+ * @} End of "defgroup updates-7.x-extra".
  * The next series of updates should start at 8000.
  */
diff --git a/modules/system/system.module b/modules/system/system.module
index 072850e..9897fb2 100644
--- a/modules/system/system.module
+++ b/modules/system/system.module
@@ -2023,6 +2023,10 @@ function system_block_info() {
     'info' => t('Main page content'),
      // Cached elsewhere.
     'cache' => DRUPAL_NO_CACHE,
+    // Auto-enable in 'content' region by default, which always exists.
+    // @see system_themes_page(), drupal_render_page()
+    'status' => 1,
+    'region' => 'content',
   );
   $blocks['powered-by'] = array(
     'info' => t('Powered by Drupal'),
@@ -2033,6 +2037,9 @@ function system_block_info() {
     'info' => t('System help'),
     'weight' => '5',
     'cache' => DRUPAL_NO_CACHE,
+    // Auto-enable in 'help' region by default, if the theme defines one.
+    'status' => 1,
+    'region' => 'help',
   );
   // System-defined menu blocks.
   foreach (menu_list_system_menus() as $menu_name => $title) {
@@ -2553,7 +2560,7 @@ function _system_rebuild_theme_data() {
   // Now that we've established all our master themes, go back and fill in data
   // for subthemes.
   foreach ($sub_themes as $key) {
-    $themes[$key]->base_themes = system_find_base_themes($themes, $key);
+    $themes[$key]->base_themes = drupal_find_base_themes($themes, $key);
     // Don't proceed if there was a problem with the root base theme.
     if (!current($themes[$key]->base_themes)) {
       continue;
@@ -2648,42 +2655,10 @@ function _system_default_theme_features() {
 /**
  * Find all the base themes for the specified theme.
  *
- * Themes can inherit templates and function implementations from earlier themes.
- *
- * @param $themes
- *   An array of available themes.
- * @param $key
- *   The name of the theme whose base we are looking for.
- * @param $used_keys
- *   A recursion parameter preventing endless loops.
- * @return
- *   Returns an array of all of the theme's ancestors; the first element's value
- *   will be NULL if an error occurred.
+ * This function has been deprecated in favor of drupal_find_base_themes().
  */
 function system_find_base_themes($themes, $key, $used_keys = array()) {
-  $base_key = $themes[$key]->info['base theme'];
-  // Does the base theme exist?
-  if (!isset($themes[$base_key])) {
-    return array($base_key => NULL);
-  }
-
-  $current_base_theme = array($base_key => $themes[$base_key]->info['name']);
-
-  // Is the base theme itself a child of another theme?
-  if (isset($themes[$base_key]->info['base theme'])) {
-    // Do we already know the base themes of this theme?
-    if (isset($themes[$base_key]->base_themes)) {
-      return $themes[$base_key]->base_themes + $current_base_theme;
-    }
-    // Prevent loops.
-    if (!empty($used_keys[$base_key])) {
-      return array($base_key => NULL);
-    }
-    $used_keys[$base_key] = TRUE;
-    return system_find_base_themes($themes, $base_key, $used_keys) + $current_base_theme;
-  }
-  // If we get here, then this is our parent theme.
-  return $current_base_theme;
+  return drupal_find_base_themes($themes, $key, $used_keys);
 }
 
 /**
diff --git a/modules/system/theme.api.php b/modules/system/theme.api.php
index 7fee81c..cd7ecfd 100644
--- a/modules/system/theme.api.php
+++ b/modules/system/theme.api.php
@@ -93,11 +93,13 @@ function hook_form_system_theme_settings_alter(&$form, &$form_state) {
 }
 
 /**
- * Preprocess theme variables.
+ * Preprocess theme variables for templates.
  *
  * This hook allows modules to preprocess theme variables for theme templates.
- * It is called for all invocations of theme(), to allow modules to add to
- * or override variables for all theme hooks.
+ * It is called for all theme hooks implemented as templates, but not for theme
+ * hooks implemented as functions. hook_preprocess_HOOK() can be used to
+ * preprocess variables for a specific theme hook, whether implemented as a
+ * template or function.
  *
  * For more detailed information, see theme().
  *
@@ -159,11 +161,13 @@ function hook_preprocess_HOOK(&$variables) {
 }
 
 /**
- * Process theme variables.
+ * Process theme variables for templates.
  *
- * This hook allows modules to process theme variables for theme templates.
- * It is called for all invocations of theme(), to allow modules to add to
- * or override variables for all theme hooks.
+ * This hook allows modules to process theme variables for theme templates. It
+ * is called for all theme hooks implemented as templates, but not for theme
+ * hooks implemented as functions. hook_process_HOOK() can be used to process
+ * variables for a specific theme hook, whether implemented as a template or
+ * function.
  *
  * For more detailed information, see theme().
  *
@@ -199,7 +203,11 @@ function hook_process(&$variables, $hook) {
  *   The variables array (modify in place).
  */
 function hook_process_HOOK(&$variables) {
-  $variables['classes'] .= ' my_added_class';
+  // @todo There are no use-cases in Drupal core for this hook. Find one from a
+  //   contributed module, or come up with a good example. Coming up with a good
+  //   example might be tough, since the intent is for nearly everything to be
+  //   achievable via preprocess functions, and for process functions to only be
+  //   used when requiring the later execution time.
 }
 
 /**
diff --git a/modules/taxonomy/taxonomy.admin.inc b/modules/taxonomy/taxonomy.admin.inc
index a236cfe..828fde0 100644
--- a/modules/taxonomy/taxonomy.admin.inc
+++ b/modules/taxonomy/taxonomy.admin.inc
@@ -696,7 +696,8 @@ function taxonomy_form_term($form, &$form_state, $edit = array(), $vocabulary =
     '#value' => isset($term->vocabulary_machine_name) ? $term->vocabulary_machine_name : $vocabulary->name,
   );
 
-  field_attach_form('taxonomy_term', $term, $form, $form_state);
+  $langcode = entity_language('taxonomy_term', $term);
+  field_attach_form('taxonomy_term', $term, $form, $form_state, $langcode);
 
   $form['relations'] = array(
     '#type' => 'fieldset',
diff --git a/modules/taxonomy/taxonomy.info b/modules/taxonomy/taxonomy.info
index 0d15f8c..e261090 100644
--- a/modules/taxonomy/taxonomy.info
+++ b/modules/taxonomy/taxonomy.info
@@ -8,10 +8,10 @@ files[] = taxonomy.module
 files[] = taxonomy.test
 configure = admin/structure/taxonomy
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/taxonomy/taxonomy.install b/modules/taxonomy/taxonomy.install
index f442c95..711a0f9 100644
--- a/modules/taxonomy/taxonomy.install
+++ b/modules/taxonomy/taxonomy.install
@@ -592,36 +592,105 @@ function taxonomy_update_7005(&$sandbox) {
     if (!empty($vocabularies)) {
       $sandbox['vocabularies'] = $vocabularies;
     }
+
+    db_create_table('taxonomy_update_7005', array(
+      'description' => 'Stores temporary data for taxonomy_update_7005.',
+      'fields' => array(
+        'n' => array(
+          'description' => 'Preserve order.',
+          'type' => 'serial',
+          'unsigned' => TRUE,
+          'not null' => TRUE,
+        ),
+        'vocab_id' => array(
+          'type' => 'int',
+          'unsigned' => TRUE,
+          'not null' => TRUE,
+          'default' => 0,
+        ),
+        'tid' => array(
+          'type' => 'int',
+          'unsigned' => TRUE,
+          'not null' => TRUE,
+        ),
+        'nid' => array(
+          'type' => 'int',
+          'unsigned' => TRUE,
+          'not null' => TRUE,
+        ),
+        'vid' => array(
+          'type' => 'int',
+          'unsigned' => TRUE,
+          'not null' => FALSE,
+          'default' => NULL,
+        ),
+        'type' => array(
+          'type' => 'varchar',
+          'length' => 32,
+          'not null' => TRUE,
+          'default' => '',
+        ),
+        'created' => array(
+          'type' => 'int',
+          'not null' => FALSE,
+        ),
+        'sticky' => array(
+          'type' => 'int',
+          'not null' => FALSE,
+        ),
+        'is_current' => array(
+          'type' => 'int',
+          'unsigned' => TRUE,
+          'not null' => FALSE,
+        ),
+      ),
+      'primary key' => array('n'),
+    ));
+
+    // Query selects all revisions at once and processes them in revision and
+    // term weight order.
+    $query = db_select('taxonomy_term_data', 'td');
+    // We are migrating term-node relationships. If there are none for a
+    // term, we do not need the term_data row.
+    $query->join('taxonomy_term_node', 'tn', 'td.tid = tn.tid');
+    // If a term-node relationship exists for a nid that does not exist, we
+    // cannot migrate it as we have no node to relate it to; thus we do not
+    // need that row from term_node.
+    $query->join('node', 'n', 'tn.nid = n.nid');
+    // If the current term-node relationship is for the current revision of
+    // the node, this left join will match and is_current will be non-NULL
+    // (we also get the current sticky and created in this case). This
+    // tells us whether to insert into the current data tables in addition
+    // to the revision data tables.
+    $query->leftJoin('node', 'n2', 'tn.vid = n2.vid');
+    $query->addField('td', 'vid', 'vocab_id');
+    $query->addField('td', 'tid');
+    $query->addField('tn', 'nid');
+    $query->addField('tn', 'vid');
+    $query->addField('n', 'type');
+    $query->addField('n2', 'created');
+    $query->addField('n2', 'sticky');
+    $query->addField('n2', 'nid', 'is_current');
+    // This query must return a consistent ordering across multiple calls.
+    // We need them ordered by node vid (since we use that to decide when
+    // to reset the delta counters) and by term weight so they appear
+    // within each node in weight order. However, tn.vid,td.weight is not
+    // guaranteed to be unique, so we add tn.tid as an additional sort key
+    // because tn.tid,tn.vid is the primary key of the D6 term_node table
+    // and so is guaranteed unique. Unfortunately it also happens to be in
+    // the wrong order which is less efficient, but c'est la vie.
+    $query->orderBy('tn.vid');
+    $query->orderBy('td.weight');
+    $query->orderBy('tn.tid');
+    db_insert('taxonomy_update_7005')
+      ->from($query)
+      ->execute();
   }
   else {
     // We do each pass in batches of 1000.
     $batch = 1000;
 
-    // Query selects all revisions at once and processes them in revision and
-    // term weight order. Join types:
-    //
-    // - INNER JOIN term_node ON tn.tid: We are migrating term-node
-    //   relationships. If there are none for a term, we do not need the
-    //   term_data row.
-    // - INNER JOIN {node} n ON n.nid: If a term-node relationship exists for a
-    //   nid that does not exist, we cannot migrate it as we have no node to
-    //   relate it to; thus we do not need that row from term_node.
-    // - LEFT JOIN {node} n2 ON n2.vid: If the current term-node relationship
-    //   is for the current revision of the node, this left join will match and
-    //   is_current will be non-NULL (we also get the current sticky and
-    //   created in this case). This tells us whether to insert into the
-    //   current data tables in addition to the revision data tables.
-    //
-    // This query must return a consistent ordering across multiple calls.  We
-    // need them ordered by node vid (since we use that to decide when to reset
-    // the delta counters) and by term weight so they appear within each node
-    // in weight order. However, tn.vid,td.weight is not guaranteed to be
-    // unique, so we add tn.tid as an additional sort key because tn.tid,tn.vid
-    // is the primary key of the D6 term_node table and so is guaranteed
-    // unique. Unfortunately it also happens to be in the wrong order which is
-    // less efficient, but c'est la vie.
-    $query = 'SELECT td.vid AS vocab_id, td.tid, tn.nid, tn.vid, n.type, n2.created, n2.sticky, n2.nid AS is_current FROM {taxonomy_term_data} td INNER JOIN {taxonomy_term_node} tn ON td.tid = tn.tid INNER JOIN {node} n ON tn.nid = n.nid LEFT JOIN {node} n2 ON tn.vid = n2.vid ORDER BY tn.vid, td.weight ASC, tn.tid';
-    $result = db_query_range($query, $sandbox['last'], $batch);
+    $result = db_query_range('SELECT vocab_id, tid, nid, vid, type, created, sticky, is_current FROM {taxonomy_update_7005} ORDER BY n', $sandbox['last'], $batch);
     if (isset($sandbox['cursor'])) {
       $values = $sandbox['cursor']['values'];
       $deltas = $sandbox['cursor']['deltas'];
@@ -714,6 +783,7 @@ function taxonomy_update_7005(&$sandbox) {
     db_drop_table('taxonomy_term_node');
 
     // If there are no vocabs, we're done.
+    db_drop_table('taxonomy_update_7005');
     $sandbox['#finished'] = TRUE;
 
     // Determine necessity of taxonomyextras field.
diff --git a/modules/taxonomy/taxonomy.module b/modules/taxonomy/taxonomy.module
index d7e9b2f..d501282 100644
--- a/modules/taxonomy/taxonomy.module
+++ b/modules/taxonomy/taxonomy.module
@@ -1136,7 +1136,7 @@ class TaxonomyTermController extends DrupalDefaultEntityController {
     if (isset($conditions['name'])) {
       $query_conditions = &$query->conditions();
       foreach ($query_conditions as $key => $condition) {
-        if ($condition['field'] == 'base.name') {
+        if (is_array($condition) && $condition['field'] == 'base.name') {
           $query_conditions[$key]['operator'] = 'LIKE';
           $query_conditions[$key]['value'] = db_like($query_conditions[$key]['value']);
         }
@@ -1270,7 +1270,8 @@ function taxonomy_vocabulary_machine_name_load($name) {
  *   A term's ID
  *
  * @return
- *   A term object. Results are statically cached.
+ *   A taxonomy term object, or FALSE if the term was not found. Results are
+ *   statically cached.
  */
 function taxonomy_term_load($tid) {
   if (!is_numeric($tid)) {
@@ -1904,5 +1905,37 @@ function taxonomy_taxonomy_term_delete($term) {
 }
 
 /**
- * @} End of "defgroup taxonomy_index"
+ * @} End of "defgroup taxonomy_index".
  */
+
+/**
+ * Implements hook_entity_query_alter().
+ *
+ * Converts EntityFieldQuery instances on taxonomy terms that have an entity
+ * condition on term bundles (vocabulary machine names). Since the vocabulary
+ * machine name is not present in the {taxonomy_term_data} table itself, we have
+ * to convert the bundle condition into a proprety condition of vocabulary IDs
+ * to match against {taxonomy_term_data}.vid.
+ */
+function taxonomy_entity_query_alter($query) {
+  $conditions = &$query->entityConditions;
+
+  // Alter only taxonomy term queries with bundle conditions.
+  if (isset($conditions['entity_type']) && $conditions['entity_type']['value'] == 'taxonomy_term' && isset($conditions['bundle'])) {
+    // Convert vocabulary machine names to vocabulary IDs.
+    $vocabulary_data = taxonomy_vocabulary_get_names();
+    $vids = array();
+    if (is_array($conditions['bundle']['value'])) {
+      foreach ($conditions['bundle']['value'] as $vocabulary_machine_name) {
+        $vids[] = $vocabulary_data[$vocabulary_machine_name]->vid;
+      }
+    }
+    else {
+      $vocabulary_machine_name = $conditions['bundle']['value'];
+      $vids = $vocabulary_data[$vocabulary_machine_name]->vid;
+    }
+
+    $query->propertyCondition('vid', $vids, $conditions['bundle']['operator']);
+    unset($conditions['bundle']);
+  }
+}
diff --git a/modules/taxonomy/taxonomy.test b/modules/taxonomy/taxonomy.test
index 42b4d47..32ae84d 100644
--- a/modules/taxonomy/taxonomy.test
+++ b/modules/taxonomy/taxonomy.test
@@ -6,8 +6,8 @@
  */
 
 /**
-* Class with common helper methods.
-*/
+ * Provides common helper methods for Taxonomy module tests.
+ */
 class TaxonomyWebTestCase extends DrupalWebTestCase {
 
   /**
@@ -39,11 +39,12 @@ class TaxonomyWebTestCase extends DrupalWebTestCase {
     taxonomy_term_save($term);
     return $term;
   }
+
 }
 
 /**
-* Tests for the taxonomy vocabulary interface.
-*/
+ * Tests the taxonomy vocabulary interface.
+ */
 class TaxonomyVocabularyFunctionalTest extends TaxonomyWebTestCase {
 
   public static function getInfo() {
@@ -76,17 +77,17 @@ class TaxonomyVocabularyFunctionalTest extends TaxonomyWebTestCase {
     $edit['description'] = $this->randomName();
     $edit['machine_name'] = $machine_name;
     $this->drupalPost(NULL, $edit, t('Save'));
-    $this->assertRaw(t('Created new vocabulary %name.', array('%name' => $edit['name'])), t('Vocabulary created successfully'));
+    $this->assertRaw(t('Created new vocabulary %name.', array('%name' => $edit['name'])), 'Vocabulary created successfully.');
 
     // Edit the vocabulary.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertText($edit['name'], t('Vocabulary found in the vocabulary overview listing.'));
+    $this->assertText($edit['name'], 'Vocabulary found in the vocabulary overview listing.');
     $this->clickLink(t('edit vocabulary'));
     $edit = array();
     $edit['name'] = $this->randomName();
     $this->drupalPost(NULL, $edit, t('Save'));
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertText($edit['name'], t('Vocabulary found in the vocabulary overview listing.'));
+    $this->assertText($edit['name'], 'Vocabulary found in the vocabulary overview listing.');
 
     // Try to submit a vocabulary with a duplicate machine name.
     $edit['machine_name'] = $machine_name;
@@ -123,7 +124,7 @@ class TaxonomyVocabularyFunctionalTest extends TaxonomyWebTestCase {
 
     // Check that the weights are saved in the database correctly.
     foreach ($vocabularies as $key => $vocabulary) {
-      $this->assertEqual($new_vocabularies[$key]->weight, $vocabularies[$key]->weight, t('The vocabulary weight was changed.'));
+      $this->assertEqual($new_vocabularies[$key]->weight, $vocabularies[$key]->weight, 'The vocabulary weight was changed.');
     }
   }
 
@@ -137,10 +138,10 @@ class TaxonomyVocabularyFunctionalTest extends TaxonomyWebTestCase {
       taxonomy_vocabulary_delete($key);
     }
     // Confirm that no vocabularies are found in the database.
-    $this->assertFalse(taxonomy_get_vocabularies(), t('No vocabularies found in the database'));
+    $this->assertFalse(taxonomy_get_vocabularies(), 'No vocabularies found in the database.');
     $this->drupalGet('admin/structure/taxonomy');
     // Check the default message for no vocabularies.
-    $this->assertText(t('No vocabularies available.'), t('No vocabularies were found.'));
+    $this->assertText(t('No vocabularies available.'), 'No vocabularies were found.');
   }
 
   /**
@@ -153,29 +154,29 @@ class TaxonomyVocabularyFunctionalTest extends TaxonomyWebTestCase {
       'machine_name' => drupal_strtolower($this->randomName()),
     );
     $this->drupalPost('admin/structure/taxonomy/add', $edit, t('Save'));
-    $this->assertText(t('Created new vocabulary'), t('New vocabulary was created.'));
+    $this->assertText(t('Created new vocabulary'), 'New vocabulary was created.');
 
     // Check the created vocabulary.
     $vocabularies = taxonomy_get_vocabularies();
-    $vid = $vocabularies[count($vocabularies)-1]->vid;
+    $vid = $vocabularies[count($vocabularies) - 1]->vid;
     entity_get_controller('taxonomy_vocabulary')->resetCache();
     $vocabulary = taxonomy_vocabulary_load($vid);
-    $this->assertTrue($vocabulary, t('Vocabulary found in database'));
+    $this->assertTrue($vocabulary, 'Vocabulary found in database.');
 
     // Delete the vocabulary.
     $edit = array();
     $this->drupalPost('admin/structure/taxonomy/' . $vocabulary->machine_name . '/edit', $edit, t('Delete'));
-    $this->assertRaw(t('Are you sure you want to delete the vocabulary %name?', array('%name' => $vocabulary->name)), t('[confirm deletion] Asks for confirmation.'));
-    $this->assertText(t('Deleting a vocabulary will delete all the terms in it. This action cannot be undone.'), t('[confirm deletion] Inform that all terms will be deleted.'));
+    $this->assertRaw(t('Are you sure you want to delete the vocabulary %name?', array('%name' => $vocabulary->name)), '[confirm deletion] Asks for confirmation.');
+    $this->assertText(t('Deleting a vocabulary will delete all the terms in it. This action cannot be undone.'), '[confirm deletion] Inform that all terms will be deleted.');
 
     // Confirm deletion.
     $this->drupalPost(NULL, NULL, t('Delete'));
-    $this->assertRaw(t('Deleted vocabulary %name.', array('%name' => $vocabulary->name)), t('Vocabulary deleted'));
+    $this->assertRaw(t('Deleted vocabulary %name.', array('%name' => $vocabulary->name)), 'Vocabulary deleted.');
     entity_get_controller('taxonomy_vocabulary')->resetCache();
-    $this->assertFalse(taxonomy_vocabulary_load($vid), t('Vocabulary is not found in the database'));
+    $this->assertFalse(taxonomy_vocabulary_load($vid), 'Vocabulary is not found in the database.');
   }
-}
 
+}
 
 /**
  * Tests for taxonomy vocabulary functions.
@@ -207,14 +208,14 @@ class TaxonomyVocabularyTestCase extends TaxonomyWebTestCase {
     $vid = count($vocabularies) + 1;
     $vocabulary = taxonomy_vocabulary_load($vid);
     // This should not return an object because no such vocabulary exists.
-    $this->assertTrue(empty($vocabulary), t('No object loaded.'));
+    $this->assertTrue(empty($vocabulary), 'No object loaded.');
 
     // Create a new vocabulary.
     $this->createVocabulary();
     // Load the vocabulary with the same $vid from earlier.
     // This should return a vocabulary object since it now matches a real vid.
     $vocabulary = taxonomy_vocabulary_load($vid);
-    $this->assertTrue(!empty($vocabulary) && is_object($vocabulary), t('Vocabulary is an object'));
+    $this->assertTrue(!empty($vocabulary) && is_object($vocabulary), 'Vocabulary is an object.');
     $this->assertEqual($vocabulary->vid, $vid, 'Valid vocabulary vid is the same as our previously invalid one.');
   }
 
@@ -257,8 +258,8 @@ class TaxonomyVocabularyTestCase extends TaxonomyWebTestCase {
    */
   function testTaxonomyVocabularyLoadStaticReset() {
     $original_vocabulary = taxonomy_vocabulary_load($this->vocabulary->vid);
-    $this->assertTrue(is_object($original_vocabulary), t('Vocabulary loaded successfully'));
-    $this->assertEqual($this->vocabulary->name, $original_vocabulary->name, t('Vocabulary loaded successfully'));
+    $this->assertTrue(is_object($original_vocabulary), 'Vocabulary loaded successfully.');
+    $this->assertEqual($this->vocabulary->name, $original_vocabulary->name, 'Vocabulary loaded successfully.');
 
     // Change the name and description.
     $vocabulary = $original_vocabulary;
@@ -274,7 +275,7 @@ class TaxonomyVocabularyTestCase extends TaxonomyWebTestCase {
     // Delete the vocabulary.
     taxonomy_vocabulary_delete($this->vocabulary->vid);
     $vocabularies = taxonomy_get_vocabularies();
-    $this->assertTrue(!isset($vocabularies[$this->vocabulary->vid]), t('The vocabulary was deleted'));
+    $this->assertTrue(!isset($vocabularies[$this->vocabulary->vid]), 'The vocabulary was deleted.');
   }
 
   /**
@@ -301,21 +302,21 @@ class TaxonomyVocabularyTestCase extends TaxonomyWebTestCase {
     // Fetch the names for all vocabularies, confirm that they are keyed by
     // machine name.
     $names = taxonomy_vocabulary_get_names();
-    $this->assertEqual($names[$vocabulary1->machine_name]->name, $vocabulary1->name, t('Vocabulary 1 name found.'));
+    $this->assertEqual($names[$vocabulary1->machine_name]->name, $vocabulary1->name, 'Vocabulary 1 name found.');
 
     // Fetch all of the vocabularies using taxonomy_get_vocabularies().
     // Confirm that the vocabularies are ordered by weight.
     $vocabularies = taxonomy_get_vocabularies();
-    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary1->vid, t('Vocabulary was found in the vocabularies array.'));
-    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary2->vid, t('Vocabulary was found in the vocabularies array.'));
-    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary3->vid, t('Vocabulary was found in the vocabularies array.'));
+    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary1->vid, 'Vocabulary was found in the vocabularies array.');
+    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary2->vid, 'Vocabulary was found in the vocabularies array.');
+    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary3->vid, 'Vocabulary was found in the vocabularies array.');
 
     // Fetch the vocabularies with taxonomy_vocabulary_load_multiple(), specifying IDs.
     // Ensure they are returned in the same order as the original array.
     $vocabularies = taxonomy_vocabulary_load_multiple(array($vocabulary3->vid, $vocabulary2->vid, $vocabulary1->vid));
-    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary3->vid, t('Vocabulary loaded successfully by ID.'));
-    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary2->vid, t('Vocabulary loaded successfully by ID.'));
-    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary1->vid, t('Vocabulary loaded successfully by ID.'));
+    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary3->vid, 'Vocabulary loaded successfully by ID.');
+    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary2->vid, 'Vocabulary loaded successfully by ID.');
+    $this->assertEqual(array_shift($vocabularies)->vid, $vocabulary1->vid, 'Vocabulary loaded successfully by ID.');
 
     // Fetch vocabulary 1 by name.
     $vocabulary = current(taxonomy_vocabulary_load_multiple(array(), array('name' => $vocabulary1->name)));
@@ -348,7 +349,7 @@ class TaxonomyVocabularyTestCase extends TaxonomyWebTestCase {
     taxonomy_vocabulary_save($this->vocabulary);
 
     // Check that the field instance is still attached to the vocabulary.
-    $this->assertTrue(field_info_instance('taxonomy_term', 'field_test', $new_name), t('The bundle name was updated correctly.'));
+    $this->assertTrue(field_info_instance('taxonomy_term', 'field_test', $new_name), 'The bundle name was updated correctly.');
   }
 
   /**
@@ -383,6 +384,7 @@ class TaxonomyVocabularyTestCase extends TaxonomyWebTestCase {
     field_create_field($this->field);
     field_create_instance($this->instance);
   }
+
 }
 
 /**
@@ -404,7 +406,7 @@ class TaxonomyTermFunctionTestCase extends TaxonomyWebTestCase {
     // Delete a valid term.
     taxonomy_term_delete($valid_term->tid);
     $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
-    $this->assertTrue(empty($terms), 'Vocabulary is empty after deletion');
+    $this->assertTrue(empty($terms), 'Vocabulary is empty after deletion.');
 
     // Delete an invalid term. Should not throw any notices.
     taxonomy_term_delete(42);
@@ -442,7 +444,6 @@ class TaxonomyTermFunctionTestCase extends TaxonomyWebTestCase {
      * ---- term[2] | depth: 2
      * ------ term[3] | depth: 3
      */
-
     // Count $term[1] parents with $max_depth = 1.
     $tree = taxonomy_get_tree($vocabulary->vid, $term[1]->tid, 1);
     $this->assertEqual(1, count($tree), 'We have one parent with depth 1.');
@@ -452,7 +453,7 @@ class TaxonomyTermFunctionTestCase extends TaxonomyWebTestCase {
     $this->assertEqual(8, count($tree), 'We have all vocabulary tree elements.');
 
     // Count elements in every tree depth.
-    foreach($tree as $element) {
+    foreach ($tree as $element) {
       if (!isset($depth_count[$element->depth])) {
         $depth_count[$element->depth] = 0;
       }
@@ -462,7 +463,8 @@ class TaxonomyTermFunctionTestCase extends TaxonomyWebTestCase {
     $this->assertEqual(2, $depth_count[1], 'Two elements in taxonomy tree depth 1.');
     $this->assertEqual(2, $depth_count[2], 'Two elements in taxonomy tree depth 2.');
     $this->assertEqual(1, $depth_count[3], 'One element in taxonomy tree depth 3.');
-   }
+  }
+
 }
 
 /**
@@ -498,8 +500,9 @@ class TaxonomyLegacyTestCase extends TaxonomyWebTestCase {
     $this->drupalPost('node/add/article', $edit, t('Save'));
     // Checks that the node has been saved.
     $node = $this->drupalGetNodeByTitle($edit['title']);
-    $this->assertEqual($node->created, strtotime($edit['date']), t('Legacy node was saved with the right date.'));
+    $this->assertEqual($node->created, strtotime($edit['date']), 'Legacy node was saved with the right date.');
   }
+
 }
 
 /**
@@ -572,21 +575,21 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
     // Check the hierarchy.
     $children = taxonomy_get_children($term1->tid);
     $parents = taxonomy_get_parents($term2->tid);
-    $this->assertTrue(isset($children[$term2->tid]), t('Child found correctly.'));
-    $this->assertTrue(isset($parents[$term1->tid]), t('Parent found correctly.'));
+    $this->assertTrue(isset($children[$term2->tid]), 'Child found correctly.');
+    $this->assertTrue(isset($parents[$term1->tid]), 'Parent found correctly.');
 
     // Load and save a term, confirming that parents are still set.
     $term = taxonomy_term_load($term2->tid);
     taxonomy_term_save($term);
     $parents = taxonomy_get_parents($term2->tid);
-    $this->assertTrue(isset($parents[$term1->tid]), t('Parent found correctly.'));
+    $this->assertTrue(isset($parents[$term1->tid]), 'Parent found correctly.');
 
     // Create a third term and save this as a parent of term2.
     $term3 = $this->createTerm($this->vocabulary);
     $term2->parent = array($term1->tid, $term3->tid);
     taxonomy_term_save($term2);
     $parents = taxonomy_get_parents($term2->tid);
-    $this->assertTrue(isset($parents[$term1->tid]) && isset($parents[$term3->tid]), t('Both parents found successfully.'));
+    $this->assertTrue(isset($parents[$term1->tid]) && isset($parents[$term3->tid]), 'Both parents found successfully.');
   }
 
   /**
@@ -604,26 +607,26 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
     $langcode = LANGUAGE_NONE;
     $edit["title"] = $this->randomName();
     $edit["body[$langcode][0][value]"] = $this->randomName();
-    $edit[$this->instance['field_name'] . '[' . $langcode .'][]'] = $term1->tid;
+    $edit[$this->instance['field_name'] . '[' . $langcode . '][]'] = $term1->tid;
     $this->drupalPost('node/add/article', $edit, t('Save'));
 
     // Check that the term is displayed when the node is viewed.
     $node = $this->drupalGetNodeByTitle($edit["title"]);
     $this->drupalGet('node/' . $node->nid);
-    $this->assertText($term1->name, t('Term is displayed when viewing the node.'));
+    $this->assertText($term1->name, 'Term is displayed when viewing the node.');
 
     // Edit the node with a different term.
     $edit[$this->instance['field_name'] . '[' . $langcode . '][]'] = $term2->tid;
     $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
 
     $this->drupalGet('node/' . $node->nid);
-    $this->assertText($term2->name, t('Term is displayed when viewing the node.'));
+    $this->assertText($term2->name, 'Term is displayed when viewing the node.');
 
     // Preview the node.
     $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Preview'));
-    $this->assertNoUniqueText($term2->name, t('Term is displayed when previewing the node.'));
+    $this->assertNoUniqueText($term2->name, 'Term is displayed when previewing the node.');
     $this->drupalPost(NULL, NULL, t('Preview'));
-    $this->assertNoUniqueText($term2->name, t('Term is displayed when previewing the node again.'));
+    $this->assertNoUniqueText($term2->name, 'Term is displayed when previewing the node again.');
   }
 
   /**
@@ -652,19 +655,19 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
     // Preview and verify the terms appear but are not created.
     $this->drupalPost('node/add/page', $edit, t('Preview'));
     foreach ($terms as $term) {
-      $this->assertText($term, t('The term appears on the node preview'));
+      $this->assertText($term, 'The term appears on the node preview.');
     }
     $tree = taxonomy_get_tree($this->vocabulary->vid);
-    $this->assertTrue(empty($tree), t('The terms are not created on preview.'));
+    $this->assertTrue(empty($tree), 'The terms are not created on preview.');
 
     // taxonomy.module does not maintain its static caches.
     drupal_static_reset();
 
     // Save, creating the terms.
     $this->drupalPost('node/add/page', $edit, t('Save'));
-    $this->assertRaw(t('@type %title has been created.', array('@type' => t('Basic page'), '%title' => $edit["title"])), t('The node was created successfully'));
+    $this->assertRaw(t('@type %title has been created.', array('@type' => t('Basic page'), '%title' => $edit["title"])), 'The node was created successfully.');
     foreach ($terms as $term) {
-      $this->assertText($term, t('The term was saved and appears on the node page'));
+      $this->assertText($term, 'The term was saved and appears on the node page.');
     }
 
     // Get the created terms.
@@ -684,29 +687,29 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
     $this->drupalGet('node/' . $node->nid);
 
     foreach ($term_names as $term_name) {
-      $this->assertText($term_name, t('The term %name appears on the node page after one term %deleted was deleted', array('%name' => $term_name, '%deleted' => $term_objects['term1']->name)));
+      $this->assertText($term_name, format_string('The term %name appears on the node page after one term %deleted was deleted', array('%name' => $term_name, '%deleted' => $term_objects['term1']->name)));
     }
-    $this->assertNoText($term_objects['term1']->name, t('The deleted term %name does not appear on the node page.', array('%name' => $term_objects['term1']->name)));
+    $this->assertNoText($term_objects['term1']->name, format_string('The deleted term %name does not appear on the node page.', array('%name' => $term_objects['term1']->name)));
 
     // Test autocomplete on term 2, which contains a comma.
     // The term will be quoted, and the " will be encoded in unicode (\u0022).
     $input = substr($term_objects['term2']->name, 0, 3);
     $this->drupalGet('taxonomy/autocomplete/taxonomy_' . $this->vocabulary->machine_name . '/' . $input);
-    $this->assertRaw('{"\u0022' . $term_objects['term2']->name . '\u0022":"' . $term_objects['term2']->name . '"}', t('Autocomplete returns term %term_name after typing the first 3 letters.', array('%term_name' => $term_objects['term2']->name)));
+    $this->assertRaw('{"\u0022' . $term_objects['term2']->name . '\u0022":"' . $term_objects['term2']->name . '"}', format_string('Autocomplete returns term %term_name after typing the first 3 letters.', array('%term_name' => $term_objects['term2']->name)));
 
     // Test autocomplete on term 3 - it is alphanumeric only, so no extra
     // quoting.
     $input = substr($term_objects['term3']->name, 0, 3);
     $this->drupalGet('taxonomy/autocomplete/taxonomy_' . $this->vocabulary->machine_name . '/' . $input);
-    $this->assertRaw('{"' . $term_objects['term3']->name . '":"' . $term_objects['term3']->name . '"}', t('Autocomplete returns term %term_name after typing the first 3 letters.', array('%term_name' => $term_objects['term3']->name)));
+    $this->assertRaw('{"' . $term_objects['term3']->name . '":"' . $term_objects['term3']->name . '"}', format_string('Autocomplete returns term %term_name after typing the first 3 letters.', array('%term_name' => $term_objects['term3']->name)));
 
     // Test taxonomy autocomplete with a nonexistent field.
     $field_name = $this->randomName();
     $tag = $this->randomName();
     $message = t("Taxonomy field @field_name not found.", array('@field_name' => $field_name));
-    $this->assertFalse(field_info_field($field_name), t('Field %field_name does not exist.', array('%field_name' => $field_name)));
+    $this->assertFalse(field_info_field($field_name), format_string('Field %field_name does not exist.', array('%field_name' => $field_name)));
     $this->drupalGet('taxonomy/autocomplete/' . $field_name . '/' . $tag);
-    $this->assertRaw($message, t('Autocomplete returns correct error message when the taxonomy field does not exist.'));
+    $this->assertRaw($message, 'Autocomplete returns correct error message when the taxonomy field does not exist.');
   }
 
   /**
@@ -735,8 +738,8 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
     $url = url($path, array('absolute' => TRUE));
     $result = drupal_http_request($url);
     $data = drupal_json_decode($result->data);
-    $this->assertEqual($data[$first_term->name], check_plain($first_term->name), 'Autocomplete returned the first matching term');
-    $this->assertEqual($data[$second_term->name], check_plain($second_term->name), 'Autocomplete returned the second matching term');
+    $this->assertEqual($data[$first_term->name], check_plain($first_term->name), 'Autocomplete returned the first matching term.');
+    $this->assertEqual($data[$second_term->name], check_plain($second_term->name), 'Autocomplete returned the second matching term.');
 
     // Try to autocomplete a term name that matches first term.
     // We should only get the first term in a json encoded string.
@@ -778,7 +781,7 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
 
     $terms = taxonomy_get_term_by_name($edit['name']);
     $term = reset($terms);
-    $this->assertNotNull($term, t('Term found in database'));
+    $this->assertNotNull($term, 'Term found in database.');
 
     // Submitting a term takes us to the add page; we need the List page.
     $this->drupalGet('admin/structure/taxonomy/' . $this->vocabulary->machine_name);
@@ -788,8 +791,8 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
     // the first edit link found on the listing page is to our term.
     $this->clickLink(t('edit'));
 
-    $this->assertRaw($edit['name'], t('The randomly generated term name is present.'));
-    $this->assertText($edit['description[value]'], t('The randomly generated term description is present.'));
+    $this->assertRaw($edit['name'], 'The randomly generated term name is present.');
+    $this->assertText($edit['description[value]'], 'The randomly generated term description is present.');
 
     $edit = array(
       'name' => $this->randomName(14),
@@ -801,13 +804,13 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
 
     // Check that the term is still present at admin UI after edit.
     $this->drupalGet('admin/structure/taxonomy/' . $this->vocabulary->machine_name);
-    $this->assertText($edit['name'], t('The randomly generated term name is present.'));
+    $this->assertText($edit['name'], 'The randomly generated term name is present.');
     $this->assertLink(t('edit'));
 
     // View the term and check that it is correct.
     $this->drupalGet('taxonomy/term/' . $term->tid);
-    $this->assertText($edit['name'], t('The randomly generated term name is present.'));
-    $this->assertText($edit['description[value]'], t('The randomly generated term description is present.'));
+    $this->assertText($edit['name'], 'The randomly generated term name is present.');
+    $this->assertText($edit['description[value]'], 'The randomly generated term description is present.');
 
     // Did this page request display a 'term-listing-heading'?
     $this->assertPattern('|class="taxonomy-term-description"|', 'Term page displayed the term description element.');
@@ -830,7 +833,7 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
 
     // Assert that the term no longer exists.
     $this->drupalGet('taxonomy/term/' . $term->tid);
-    $this->assertResponse(404, t('The taxonomy term page was not found'));
+    $this->assertResponse(404, 'The taxonomy term page was not found.');
   }
 
   /**
@@ -874,9 +877,9 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
     drupal_static_reset('taxonomy_get_treeparent');
     drupal_static_reset('taxonomy_get_treeterms');
     $terms = taxonomy_get_tree($this->vocabulary->vid);
-    $this->assertEqual($terms[0]->tid, $term2->tid, t('Term 2 was moved above term 1.'));
-    $this->assertEqual($terms[1]->parents, array($term2->tid), t('Term 3 was made a child of term 2.'));
-    $this->assertEqual($terms[2]->tid, $term1->tid, t('Term 1 was moved below term 2.'));
+    $this->assertEqual($terms[0]->tid, $term2->tid, 'Term 2 was moved above term 1.');
+    $this->assertEqual($terms[1]->parents, array($term2->tid), 'Term 3 was made a child of term 2.');
+    $this->assertEqual($terms[2]->tid, $term1->tid, 'Term 1 was moved below term 2.');
 
     $this->drupalPost('admin/structure/taxonomy/' . $this->vocabulary->machine_name, array(), t('Reset to alphabetical'));
     // Submit confirmation form.
@@ -886,10 +889,10 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
     drupal_static_reset('taxonomy_get_treeparent');
     drupal_static_reset('taxonomy_get_treeterms');
     $terms = taxonomy_get_tree($this->vocabulary->vid);
-    $this->assertEqual($terms[0]->tid, $term1->tid, t('Term 1 was moved to back above term 2.'));
-    $this->assertEqual($terms[1]->tid, $term2->tid, t('Term 2 was moved to back below term 1.'));
-    $this->assertEqual($terms[2]->tid, $term3->tid, t('Term 3 is still below term 2.'));
-    $this->assertEqual($terms[2]->parents, array($term2->tid), t('Term 3 is still a child of term 2.').var_export($terms[1]->tid,1));
+    $this->assertEqual($terms[0]->tid, $term1->tid, 'Term 1 was moved to back above term 2.');
+    $this->assertEqual($terms[1]->tid, $term2->tid, 'Term 2 was moved to back below term 1.');
+    $this->assertEqual($terms[2]->tid, $term3->tid, 'Term 3 is still below term 2.');
+    $this->assertEqual($terms[2]->parents, array($term2->tid), 'Term 3 is still a child of term 2.' . var_export($terms[1]->tid, 1));
   }
 
   /**
@@ -911,14 +914,14 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
     // Check that the term was successfully created.
     $terms = taxonomy_get_term_by_name($edit['name']);
     $term = reset($terms);
-    $this->assertNotNull($term, t('Term found in database'));
-    $this->assertEqual($edit['name'], $term->name, t('Term name was successfully saved.'));
-    $this->assertEqual($edit['description[value]'], $term->description, t('Term description was successfully saved.'));
+    $this->assertNotNull($term, 'Term found in database.');
+    $this->assertEqual($edit['name'], $term->name, 'Term name was successfully saved.');
+    $this->assertEqual($edit['description[value]'], $term->description, 'Term description was successfully saved.');
     // Check that the parent tid is still there. The other parent (<root>) is
     // not added by taxonomy_get_parents().
     $parents = taxonomy_get_parents($term->tid);
     $parent = reset($parents);
-    $this->assertEqual($edit['parent[]'][1], $parent->tid, t('Term parents were successfully saved.'));
+    $this->assertEqual($edit['parent[]'][1], $parent->tid, 'Term parents were successfully saved.');
   }
 
   /**
@@ -929,19 +932,19 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
 
     // Load the term with the exact name.
     $terms = taxonomy_get_term_by_name($term->name);
-    $this->assertTrue(isset($terms[$term->tid]), t('Term loaded using exact name.'));
+    $this->assertTrue(isset($terms[$term->tid]), 'Term loaded using exact name.');
 
     // Load the term with space concatenated.
     $terms  = taxonomy_get_term_by_name('  ' . $term->name . '   ');
-    $this->assertTrue(isset($terms[$term->tid]), t('Term loaded with extra whitespace.'));
+    $this->assertTrue(isset($terms[$term->tid]), 'Term loaded with extra whitespace.');
 
     // Load the term with name uppercased.
     $terms = taxonomy_get_term_by_name(strtoupper($term->name));
-    $this->assertTrue(isset($terms[$term->tid]), t('Term loaded with uppercased name.'));
+    $this->assertTrue(isset($terms[$term->tid]), 'Term loaded with uppercased name.');
 
     // Load the term with name lowercased.
     $terms = taxonomy_get_term_by_name(strtolower($term->name));
-    $this->assertTrue(isset($terms[$term->tid]), t('Term loaded with lowercased name.'));
+    $this->assertTrue(isset($terms[$term->tid]), 'Term loaded with lowercased name.');
 
     // Try to load an invalid term name.
     $terms = taxonomy_get_term_by_name('Banana');
@@ -960,12 +963,12 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
 
     // Load multiple terms with the same name.
     $terms = taxonomy_get_term_by_name($term->name);
-    $this->assertEqual(count($terms), 2, t('Two terms loaded with the same name.'));
+    $this->assertEqual(count($terms), 2, 'Two terms loaded with the same name.');
 
     // Load single term when restricted to one vocabulary.
     $terms = taxonomy_get_term_by_name($term->name, $this->vocabulary->machine_name);
-    $this->assertEqual(count($terms), 1, t('One term loaded when restricted by vocabulary.'));
-    $this->assertTrue(isset($terms[$term->tid]), t('Term loaded using exact name and vocabulary machine name.'));
+    $this->assertEqual(count($terms), 1, 'One term loaded when restricted by vocabulary.');
+    $this->assertTrue(isset($terms[$term->tid]), 'Term loaded using exact name and vocabulary machine name.');
 
     // Create a new term with another name.
     $term2 = $this->createTerm($this->vocabulary);
@@ -973,12 +976,13 @@ class TaxonomyTermTestCase extends TaxonomyWebTestCase {
     // Try to load a term by name that doesn't exist in this vocabulary but
     // exists in another vocabulary.
     $terms = taxonomy_get_term_by_name($term2->name, $new_vocabulary->machine_name);
-    $this->assertFalse($terms, t('Invalid term name restricted by vocabulary machine name not loaded.'));
+    $this->assertFalse($terms, 'Invalid term name restricted by vocabulary machine name not loaded.');
 
     // Try to load terms filtering by a non-existing vocabulary.
     $terms = taxonomy_get_term_by_name($term2->name, 'non_existing_vocabulary');
-    $this->assertEqual(count($terms), 0, t('No terms loaded when restricted by a non-existing vocabulary.'));
+    $this->assertEqual(count($terms), 0, 'No terms loaded when restricted by a non-existing vocabulary.');
   }
+
 }
 
 /**
@@ -1058,7 +1062,7 @@ class TaxonomyRSSTestCase extends TaxonomyWebTestCase {
     $edit = array();
     $langcode = LANGUAGE_NONE;
     $edit["title"] = $this->randomName();
-    $edit[$this->instance['field_name'] . '[' . $langcode .'][]'] = $term1->tid;
+    $edit[$this->instance['field_name'] . '[' . $langcode . '][]'] = $term1->tid;
     $this->drupalPost('node/add/article', $edit, t('Save'));
 
     // Check that the term is displayed when the RSS feed is viewed.
@@ -1072,6 +1076,7 @@ class TaxonomyRSSTestCase extends TaxonomyWebTestCase {
     );
     $this->assertRaw(format_xml_elements(array($test_element)), 'Term is displayed when viewing the rss feed.');
   }
+
 }
 
 /**
@@ -1181,7 +1186,7 @@ class TaxonomyTermIndexTestCase extends TaxonomyWebTestCase {
       ':nid' => $node->nid,
       ':tid' => $term_1->tid,
     ))->fetchField();
-    $this->assertEqual(1, $index_count, t('Term 1 is indexed once.'));
+    $this->assertEqual(1, $index_count, 'Term 1 is indexed once.');
 
     // Update the article to change one term.
     $edit["{$this->field_name_1}[$langcode][]"] = $term_2->tid;
@@ -1192,12 +1197,12 @@ class TaxonomyTermIndexTestCase extends TaxonomyWebTestCase {
       ':nid' => $node->nid,
       ':tid' => $term_1->tid,
     ))->fetchField();
-    $this->assertEqual(1, $index_count, t('Term 1 is indexed.'));
+    $this->assertEqual(1, $index_count, 'Term 1 is indexed.');
     $index_count = db_query('SELECT COUNT(*) FROM {taxonomy_index} WHERE nid = :nid AND tid = :tid', array(
       ':nid' => $node->nid,
       ':tid' => $term_2->tid,
     ))->fetchField();
-    $this->assertEqual(1, $index_count, t('Term 2 is indexed.'));
+    $this->assertEqual(1, $index_count, 'Term 2 is indexed.');
 
     // Update the article to change another term.
     $edit["{$this->field_name_2}[$langcode][]"] = $term_2->tid;
@@ -1208,12 +1213,12 @@ class TaxonomyTermIndexTestCase extends TaxonomyWebTestCase {
       ':nid' => $node->nid,
       ':tid' => $term_1->tid,
     ))->fetchField();
-    $this->assertEqual(0, $index_count, t('Term 1 is not indexed.'));
+    $this->assertEqual(0, $index_count, 'Term 1 is not indexed.');
     $index_count = db_query('SELECT COUNT(*) FROM {taxonomy_index} WHERE nid = :nid AND tid = :tid', array(
       ':nid' => $node->nid,
       ':tid' => $term_2->tid,
     ))->fetchField();
-    $this->assertEqual(1, $index_count, t('Term 2 is indexed once.'));
+    $this->assertEqual(1, $index_count, 'Term 2 is indexed once.');
 
     // Redo the above tests without interface.
     $update_node = array(
@@ -1233,12 +1238,12 @@ class TaxonomyTermIndexTestCase extends TaxonomyWebTestCase {
       ':nid' => $node->nid,
       ':tid' => $term_1->tid,
     ))->fetchField();
-    $this->assertEqual(0, $index_count, t('Term 1 is not indexed.'));
+    $this->assertEqual(0, $index_count, 'Term 1 is not indexed.');
     $index_count = db_query('SELECT COUNT(*) FROM {taxonomy_index} WHERE nid = :nid AND tid = :tid', array(
       ':nid' => $node->nid,
       ':tid' => $term_2->tid,
     ))->fetchField();
-    $this->assertEqual(1, $index_count, t('Term 2 is indexed once.'));
+    $this->assertEqual(1, $index_count, 'Term 2 is indexed once.');
 
     // Update the article to change one term.
     $update_node[$this->field_name_1][$langcode] = array(array('tid' => $term_1->tid));
@@ -1250,12 +1255,12 @@ class TaxonomyTermIndexTestCase extends TaxonomyWebTestCase {
       ':nid' => $node->nid,
       ':tid' => $term_1->tid,
     ))->fetchField();
-    $this->assertEqual(1, $index_count, t('Term 1 is indexed.'));
+    $this->assertEqual(1, $index_count, 'Term 1 is indexed.');
     $index_count = db_query('SELECT COUNT(*) FROM {taxonomy_index} WHERE nid = :nid AND tid = :tid', array(
       ':nid' => $node->nid,
       ':tid' => $term_2->tid,
     ))->fetchField();
-    $this->assertEqual(1, $index_count, t('Term 2 is indexed.'));
+    $this->assertEqual(1, $index_count, 'Term 2 is indexed.');
 
     // Update the article to change another term.
     $update_node[$this->field_name_2][$langcode] = array(array('tid' => $term_1->tid));
@@ -1267,12 +1272,12 @@ class TaxonomyTermIndexTestCase extends TaxonomyWebTestCase {
       ':nid' => $node->nid,
       ':tid' => $term_1->tid,
     ))->fetchField();
-    $this->assertEqual(1, $index_count, t('Term 1 is indexed once.'));
+    $this->assertEqual(1, $index_count, 'Term 1 is indexed once.');
     $index_count = db_query('SELECT COUNT(*) FROM {taxonomy_index} WHERE nid = :nid AND tid = :tid', array(
       ':nid' => $node->nid,
       ':tid' => $term_2->tid,
     ))->fetchField();
-    $this->assertEqual(0, $index_count, t('Term 2 is not indexed.'));
+    $this->assertEqual(0, $index_count, 'Term 2 is not indexed.');
   }
 
   /**
@@ -1287,8 +1292,9 @@ class TaxonomyTermIndexTestCase extends TaxonomyWebTestCase {
 
     // Verify that the page breadcrumbs include a link to the parent term.
     $this->drupalGet('taxonomy/term/' . $term1->tid);
-    $this->assertRaw(l($term2->name, 'taxonomy/term/' . $term2->tid), t('Parent term link is displayed when viewing the node.'));
+    $this->assertRaw(l($term2->name, 'taxonomy/term/' . $term2->tid), 'Parent term link is displayed when viewing the node.');
   }
+
 }
 
 /**
@@ -1331,8 +1337,8 @@ class TaxonomyLoadMultipleTestCase extends TaxonomyWebTestCase {
 
     // Load the same terms again by tid.
     $terms2 = taxonomy_term_load_multiple(array_keys($terms));
-    $this->assertEqual($count, count($terms2), 'Five terms were loaded by tid');
-    $this->assertEqual($terms, $terms2, t('Both arrays contain the same terms'));
+    $this->assertEqual($count, count($terms2), 'Five terms were loaded by tid.');
+    $this->assertEqual($terms, $terms2, 'Both arrays contain the same terms.');
 
     // Load the terms by tid, with a condition on vid.
     $terms3 = taxonomy_term_load_multiple(array_keys($terms2), array('vid' => $vocabulary->vid));
@@ -1352,9 +1358,9 @@ class TaxonomyLoadMultipleTestCase extends TaxonomyWebTestCase {
     // Create a single term and load it by name.
     $term = $this->createTerm($vocabulary);
     $loaded_terms = taxonomy_term_load_multiple(array(), array('name' => $term->name));
-    $this->assertEqual(count($loaded_terms), 1, t('One term was loaded'));
+    $this->assertEqual(count($loaded_terms), 1, 'One term was loaded.');
     $loaded_term = reset($loaded_terms);
-    $this->assertEqual($term->tid, $loaded_term->tid, t('Term loaded by name successfully.'));
+    $this->assertEqual($term->tid, $loaded_term->tid, 'Term loaded by name successfully.');
   }
 }
 
@@ -1390,7 +1396,7 @@ class TaxonomyHooksTestCase extends TaxonomyWebTestCase {
     $this->drupalPost('admin/structure/taxonomy/' . $vocabulary->machine_name . '/add', $edit, t('Save'));
     $terms = taxonomy_get_term_by_name($edit['name']);
     $term = reset($terms);
-    $this->assertEqual($term->antonym, $edit['antonym'], t('Antonym was loaded into the term object'));
+    $this->assertEqual($term->antonym, $edit['antonym'], 'Antonym was loaded into the term object.');
 
     // Update the term with a different antonym.
     $edit = array(
@@ -1400,26 +1406,28 @@ class TaxonomyHooksTestCase extends TaxonomyWebTestCase {
     $this->drupalPost('taxonomy/term/' . $term->tid . '/edit', $edit, t('Save'));
     taxonomy_terms_static_reset();
     $term = taxonomy_term_load($term->tid);
-    $this->assertEqual($edit['antonym'], $term->antonym, t('Antonym was successfully edited'));
+    $this->assertEqual($edit['antonym'], $term->antonym, 'Antonym was successfully edited.');
 
     // Delete the term.
     taxonomy_term_delete($term->tid);
     $antonym = db_query('SELECT tid FROM {taxonomy_term_antonym} WHERE tid = :tid', array(':tid' => $term->tid))->fetchField();
-    $this->assertFalse($antonym, t('The antonym were deleted from the database.'));
+    $this->assertFalse($antonym, 'The antonym were deleted from the database.');
   }
+
 }
 
 /**
  * Tests for taxonomy term field and formatter.
  */
 class TaxonomyTermFieldTestCase extends TaxonomyWebTestCase {
+
   protected $instance;
   protected $vocabulary;
 
   public static function getInfo() {
     return array(
-      'name'  => 'Taxonomy term reference field',
-      'description'  => 'Test the creation of term fields.',
+      'name' => 'Taxonomy term reference field',
+      'description' => 'Test the creation of term fields.',
       'group' => 'Taxonomy',
     );
   }
@@ -1473,10 +1481,10 @@ class TaxonomyTermFieldTestCase extends TaxonomyWebTestCase {
     $entity->{$this->field_name}[$langcode][0]['tid'] = $term->tid;
     try {
       field_attach_validate('test_entity', $entity);
-      $this->pass(t('Correct term does not cause validation error'));
+      $this->pass('Correct term does not cause validation error.');
     }
     catch (FieldValidationException $e) {
-      $this->fail(t('Correct term does not cause validation error'));
+      $this->fail('Correct term does not cause validation error.');
     }
 
     $entity = field_test_create_stub_entity();
@@ -1484,10 +1492,10 @@ class TaxonomyTermFieldTestCase extends TaxonomyWebTestCase {
     $entity->{$this->field_name}[$langcode][0]['tid'] = $bad_term->tid;
     try {
       field_attach_validate('test_entity', $entity);
-      $this->fail(t('Wrong term causes validation error'));
+      $this->fail('Wrong term causes validation error.');
     }
     catch (FieldValidationException $e) {
-      $this->pass(t('Wrong term causes validation error'));
+      $this->pass('Wrong term causes validation error.');
     }
   }
 
@@ -1501,7 +1509,7 @@ class TaxonomyTermFieldTestCase extends TaxonomyWebTestCase {
     // Display creation form.
     $langcode = LANGUAGE_NONE;
     $this->drupalGet('test-entity/add/test-bundle');
-    $this->assertFieldByName("{$this->field_name}[$langcode]", '', t('Widget is displayed'));
+    $this->assertFieldByName("{$this->field_name}[$langcode]", '', 'Widget is displayed.');
 
     // Submit with some value.
     $edit = array(
@@ -1510,7 +1518,7 @@ class TaxonomyTermFieldTestCase extends TaxonomyWebTestCase {
     $this->drupalPost(NULL, $edit, t('Save'));
     preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
     $id = $match[1];
-    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), t('Entity was created'));
+    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), 'Entity was created.');
 
     // Display the object.
     $entity = field_test_entity_test_load($id);
@@ -1518,12 +1526,12 @@ class TaxonomyTermFieldTestCase extends TaxonomyWebTestCase {
     field_attach_prepare_view('test_entity', $entities, 'full');
     $entity->content = field_attach_view('test_entity', $entity, 'full');
     $this->content = drupal_render($entity->content);
-    $this->assertText($term->name, t('Term name is displayed'));
+    $this->assertText($term->name, 'Term name is displayed.');
 
     // Delete the vocabulary and verify that the widget is gone.
     taxonomy_vocabulary_delete($this->vocabulary->vid);
     $this->drupalGet('test-entity/add/test-bundle');
-    $this->assertNoFieldByName("{$this->field_name}[$langcode]", '', 'Widget is not displayed');
+    $this->assertNoFieldByName("{$this->field_name}[$langcode]", '', 'Widget is not displayed.');
   }
 
   /**
@@ -1555,30 +1563,32 @@ class TaxonomyTermFieldTestCase extends TaxonomyWebTestCase {
 
     // Check that entity bundles are properly updated.
     $info = entity_get_info('taxonomy_term');
-    $this->assertFalse(isset($info['bundles'][$old_name]), t('The old bundle name does not appear in entity_get_info().'));
-    $this->assertTrue(isset($info['bundles'][$new_name]), t('The new bundle name appears in entity_get_info().'));
+    $this->assertFalse(isset($info['bundles'][$old_name]), 'The old bundle name does not appear in entity_get_info().');
+    $this->assertTrue(isset($info['bundles'][$new_name]), 'The new bundle name appears in entity_get_info().');
 
     // Check that the field instance is still attached to the vocabulary.
     $field = field_info_field($this->field_name);
     $allowed_values = $field['settings']['allowed_values'];
-    $this->assertEqual($allowed_values[0]['vocabulary'], $new_name, t('Index 0: Machine name was updated correctly.'));
-    $this->assertEqual($allowed_values[1]['vocabulary'], $new_name, t('Index 1: Machine name was updated correctly.'));
-    $this->assertEqual($allowed_values[2]['vocabulary'], 'foo', t('Index 2: Machine name was left untouched.'));
+    $this->assertEqual($allowed_values[0]['vocabulary'], $new_name, 'Index 0: Machine name was updated correctly.');
+    $this->assertEqual($allowed_values[1]['vocabulary'], $new_name, 'Index 1: Machine name was updated correctly.');
+    $this->assertEqual($allowed_values[2]['vocabulary'], 'foo', 'Index 2: Machine name was left untouched.');
   }
+
 }
 
 /**
  * Tests a taxonomy term reference field that allows multiple vocabularies.
  */
 class TaxonomyTermFieldMultipleVocabularyTestCase extends TaxonomyWebTestCase {
+
   protected $instance;
   protected $vocabulary1;
   protected $vocabulary2;
 
   public static function getInfo() {
     return array(
-      'name'  => 'Multiple vocabulary term reference field',
-      'description'  => 'Tests term reference fields that allow multiple vocabularies.',
+      'name' => 'Multiple vocabulary term reference field',
+      'description' => 'Tests term reference fields that allow multiple vocabularies.',
       'group' => 'Taxonomy',
     );
   }
@@ -1638,7 +1648,7 @@ class TaxonomyTermFieldMultipleVocabularyTestCase extends TaxonomyWebTestCase {
     // Submit an entity with both terms.
     $langcode = LANGUAGE_NONE;
     $this->drupalGet('test-entity/add/test-bundle');
-    $this->assertFieldByName("{$this->field_name}[$langcode][]", '', 'Widget is displayed');
+    $this->assertFieldByName("{$this->field_name}[$langcode][]", '', 'Widget is displayed.');
     $edit = array(
       "{$this->field_name}[$langcode][]" => array($term1->tid, $term2->tid),
     );
@@ -1677,7 +1687,7 @@ class TaxonomyTermFieldMultipleVocabularyTestCase extends TaxonomyWebTestCase {
 
     // The widget should still be displayed.
     $this->drupalGet('test-entity/add/test-bundle');
-    $this->assertFieldByName("{$this->field_name}[$langcode][]", '', 'Widget is still displayed');
+    $this->assertFieldByName("{$this->field_name}[$langcode][]", '', 'Widget is still displayed.');
 
     // Term 1 should still pass validation.
     $edit = array(
@@ -1685,13 +1695,14 @@ class TaxonomyTermFieldMultipleVocabularyTestCase extends TaxonomyWebTestCase {
     );
     $this->drupalPost(NULL, $edit, t('Save'));
   }
-}
 
+}
 
 /**
  * Test taxonomy token replacement in strings.
  */
 class TaxonomyTokenReplaceTestCase extends TaxonomyWebTestCase {
+
   public static function getInfo() {
     return array(
       'name' => 'Taxonomy token replacement',
@@ -1772,7 +1783,7 @@ class TaxonomyTokenReplaceTestCase extends TaxonomyWebTestCase {
 
     foreach ($tests as $input => $expected) {
       $output = token_replace($input, array('term' => $term1), array('language' => $language));
-      $this->assertEqual($output, $expected, t('Sanitized taxonomy term token %token replaced.', array('%token' => $input)));
+      $this->assertEqual($output, $expected, format_string('Sanitized taxonomy term token %token replaced.', array('%token' => $input)));
     }
 
     // Generate and test sanitized tokens for term2.
@@ -1788,11 +1799,11 @@ class TaxonomyTokenReplaceTestCase extends TaxonomyWebTestCase {
     $tests['[term:vocabulary:name]'] = check_plain($this->vocabulary->name);
 
     // Test to make sure that we generated something for each token.
-    $this->assertFalse(in_array(0, array_map('strlen', $tests)), t('No empty tokens generated.'));
+    $this->assertFalse(in_array(0, array_map('strlen', $tests)), 'No empty tokens generated.');
 
     foreach ($tests as $input => $expected) {
       $output = token_replace($input, array('term' => $term2), array('language' => $language));
-      $this->assertEqual($output, $expected, t('Sanitized taxonomy term token %token replaced.', array('%token' => $input)));
+      $this->assertEqual($output, $expected, format_string('Sanitized taxonomy term token %token replaced.', array('%token' => $input)));
     }
 
     // Generate and test unsanitized tokens.
@@ -1803,7 +1814,7 @@ class TaxonomyTokenReplaceTestCase extends TaxonomyWebTestCase {
 
     foreach ($tests as $input => $expected) {
       $output = token_replace($input, array('term' => $term2), array('language' => $language, 'sanitize' => FALSE));
-      $this->assertEqual($output, $expected, t('Unsanitized taxonomy term token %token replaced.', array('%token' => $input)));
+      $this->assertEqual($output, $expected, format_string('Unsanitized taxonomy term token %token replaced.', array('%token' => $input)));
     }
 
     // Generate and test sanitized tokens.
@@ -1815,11 +1826,11 @@ class TaxonomyTokenReplaceTestCase extends TaxonomyWebTestCase {
     $tests['[vocabulary:term-count]'] = 2;
 
     // Test to make sure that we generated something for each token.
-    $this->assertFalse(in_array(0, array_map('strlen', $tests)), t('No empty tokens generated.'));
+    $this->assertFalse(in_array(0, array_map('strlen', $tests)), 'No empty tokens generated.');
 
     foreach ($tests as $input => $expected) {
       $output = token_replace($input, array('vocabulary' => $this->vocabulary), array('language' => $language));
-      $this->assertEqual($output, $expected, t('Sanitized taxonomy vocabulary token %token replaced.', array('%token' => $input)));
+      $this->assertEqual($output, $expected, format_string('Sanitized taxonomy vocabulary token %token replaced.', array('%token' => $input)));
     }
 
     // Generate and test unsanitized tokens.
@@ -1828,15 +1839,17 @@ class TaxonomyTokenReplaceTestCase extends TaxonomyWebTestCase {
 
     foreach ($tests as $input => $expected) {
       $output = token_replace($input, array('vocabulary' => $this->vocabulary), array('language' => $language, 'sanitize' => FALSE));
-      $this->assertEqual($output, $expected, t('Unsanitized taxonomy vocabulary token %token replaced.', array('%token' => $input)));
+      $this->assertEqual($output, $expected, format_string('Unsanitized taxonomy vocabulary token %token replaced.', array('%token' => $input)));
     }
   }
+
 }
 
 /**
  * Tests for verifying that taxonomy pages use the correct theme.
  */
 class TaxonomyThemeTestCase extends TaxonomyWebTestCase {
+
   public static function getInfo() {
     return array(
       'name' => 'Taxonomy theme switching',
@@ -1867,15 +1880,70 @@ class TaxonomyThemeTestCase extends TaxonomyWebTestCase {
     // should use the administrative theme.
     $vocabulary = $this->createVocabulary();
     $this->drupalGet('admin/structure/taxonomy/' . $vocabulary->machine_name . '/add');
-    $this->assertRaw('seven/style.css', t("The administrative theme's CSS appears on the page for adding a taxonomy term."));
+    $this->assertRaw('seven/style.css', "The administrative theme's CSS appears on the page for adding a taxonomy term.");
 
     // Viewing a taxonomy term should use the default theme.
     $term = $this->createTerm($vocabulary);
     $this->drupalGet('taxonomy/term/' . $term->tid);
-    $this->assertRaw('bartik/css/style.css', t("The default theme's CSS appears on the page for viewing a taxonomy term."));
+    $this->assertRaw('bartik/css/style.css', "The default theme's CSS appears on the page for viewing a taxonomy term.");
 
     // Editing a taxonomy term should use the same theme as adding one.
     $this->drupalGet('taxonomy/term/' . $term->tid . '/edit');
-    $this->assertRaw('seven/style.css', t("The administrative theme's CSS appears on the page for editing a taxonomy term."));
+    $this->assertRaw('seven/style.css', "The administrative theme's CSS appears on the page for editing a taxonomy term.");
+  }
+
+}
+
+/**
+ * Tests the functionality of EntityFieldQuery for taxonomy entities.
+ */
+class TaxonomyEFQTestCase extends TaxonomyWebTestCase {
+  public static function getInfo() {
+    return array(
+      'name' => 'Taxonomy EntityFieldQuery',
+      'description' => 'Verifies operation of a taxonomy-based EntityFieldQuery.',
+      'group' => 'Taxonomy',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+    $this->admin_user = $this->drupalCreateUser(array('administer taxonomy'));
+    $this->drupalLogin($this->admin_user);
+    $this->vocabulary = $this->createVocabulary();
   }
+
+  /**
+   * Tests that a basic taxonomy EntityFieldQuery works.
+   */
+  function testTaxonomyEFQ() {
+    $terms = array();
+    for ($i = 0; $i < 5; $i++) {
+      $term = $this->createTerm($this->vocabulary);
+      $terms[$term->tid] = $term;
+    }
+    $query = new EntityFieldQuery();
+    $query->entityCondition('entity_type', 'taxonomy_term');
+    $result = $query->execute();
+    $result = $result['taxonomy_term'];
+    asort($result);
+    $this->assertEqual(array_keys($terms), array_keys($result), 'Taxonomy terms were retrieved by EntityFieldQuery.');
+
+    // Create a second vocabulary and five more terms.
+    $vocabulary2 = $this->createVocabulary();
+    $terms2 = array();
+    for ($i = 0; $i < 5; $i++) {
+      $term = $this->createTerm($vocabulary2);
+      $terms2[$term->tid] = $term;
+    }
+
+    $query = new EntityFieldQuery();
+    $query->entityCondition('entity_type', 'taxonomy_term');
+    $query->entityCondition('bundle', $vocabulary2->machine_name);
+    $result = $query->execute();
+    $result = $result['taxonomy_term'];
+    asort($result);
+    $this->assertEqual(array_keys($terms2), array_keys($result), format_string('Taxonomy terms from the %name vocabulary were retrieved by EntityFieldQuery.', array('%name' => $vocabulary2->name)));
+  }
+
 }
diff --git a/modules/toolbar/toolbar.info b/modules/toolbar/toolbar.info
index 540fe0e..ab2ee25 100644
--- a/modules/toolbar/toolbar.info
+++ b/modules/toolbar/toolbar.info
@@ -4,10 +4,10 @@ core = 7.x
 package = Core
 version = VERSION
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/tracker/tracker.info b/modules/tracker/tracker.info
index 8ec3daf..49d01d0 100644
--- a/modules/tracker/tracker.info
+++ b/modules/tracker/tracker.info
@@ -6,10 +6,10 @@ version = VERSION
 core = 7.x
 files[] = tracker.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/tracker/tracker.install b/modules/tracker/tracker.install
index 84305d8..9967b9d 100644
--- a/modules/tracker/tracker.install
+++ b/modules/tracker/tracker.install
@@ -221,5 +221,5 @@ function tracker_update_7000() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-6.x-to-7.x".
  */
diff --git a/modules/translation/tests/translation_test.info b/modules/translation/tests/translation_test.info
index 6c71249..b8f5991 100644
--- a/modules/translation/tests/translation_test.info
+++ b/modules/translation/tests/translation_test.info
@@ -5,10 +5,10 @@ package = Testing
 version = VERSION
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/translation/translation.info b/modules/translation/translation.info
index ac8c7cf..e905a0f 100644
--- a/modules/translation/translation.info
+++ b/modules/translation/translation.info
@@ -6,10 +6,10 @@ version = VERSION
 core = 7.x
 files[] = translation.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/translation/translation.module b/modules/translation/translation.module
index e61be1d..3312357 100644
--- a/modules/translation/translation.module
+++ b/modules/translation/translation.module
@@ -84,7 +84,7 @@ function translation_menu() {
  * @see translation_menu()
  */
 function _translation_tab_access($node) {
-  if ($node->language != LANGUAGE_NONE && translation_supported_type($node->type) && node_access('view', $node)) {
+  if (entity_language('node', $node) != LANGUAGE_NONE && translation_supported_type($node->type) && node_access('view', $node)) {
     return user_access('translate content');
   }
   return FALSE;
@@ -233,7 +233,7 @@ function translation_node_view($node, $view_mode) {
     foreach ($translations as $langcode => $translation) {
       // Do not show links to the same node, to unpublished translations or to
       // translations in disabled languages.
-      if ($translation->status && isset($languages[$langcode]) && $langcode != $node->language) {
+      if ($translation->status && isset($languages[$langcode]) && $langcode != entity_language('node', $node)) {
         $language = $languages[$langcode];
         $key = "translation_$langcode";
 
@@ -313,7 +313,7 @@ function translation_node_prepare($node) {
 
     // Add field translations and let other modules module add custom translated
     // fields.
-    field_attach_prepare_translation('node', $node, $node->language, $source_node, $source_node->language);
+    field_attach_prepare_translation('node', $node, $langcode, $source_node, $source_node->language);
   }
 }
 
@@ -358,7 +358,8 @@ function translation_node_insert($node) {
 function translation_node_update($node) {
   // Only act if we are dealing with a content type supporting translations.
   if (translation_supported_type($node->type)) {
-    if (isset($node->translation) && $node->translation && !empty($node->language) && $node->tnid) {
+    $langcode = entity_language('node', $node);
+    if (isset($node->translation) && $node->translation && !empty($langcode) && $node->tnid) {
       // Update translation information.
       db_update('node')
         ->fields(array(
@@ -389,7 +390,8 @@ function translation_node_validate($node, $form) {
   if (translation_supported_type($node->type) && (!empty($node->tnid) || !empty($form['#node']->translation_source->nid))) {
     $tnid = !empty($node->tnid) ? $node->tnid : $form['#node']->translation_source->nid;
     $translations = translation_node_get_translations($tnid);
-    if (isset($translations[$node->language]) && $translations[$node->language]->nid != $node->nid ) {
+    $langcode = entity_language('node', $node);
+    if (isset($translations[$langcode]) && $translations[$langcode]->nid != $node->nid ) {
       form_set_error('language', t('There is already a translation in this language.'));
     }
   }
@@ -469,7 +471,8 @@ function translation_node_get_translations($tnid) {
         ->execute();
 
       foreach ($result as $node) {
-        $translations[$tnid][$node->language] = $node;
+        $langcode = entity_language('node', $node);
+        $translations[$tnid][$langcode] = $node;
       }
     }
     return $translations[$tnid];
@@ -523,10 +526,11 @@ function translation_language_switch_links_alter(array &$links, $type, $path) {
       // have translations it might be a language neutral node, in which case we
       // must leave the language switch links unaltered. This is true also for
       // nodes not having translation support enabled.
-      if (empty($node) || $node->language == LANGUAGE_NONE || !translation_supported_type($node->type)) {
+      if (empty($node) || entity_language('node', $node) == LANGUAGE_NONE || !translation_supported_type($node->type)) {
         return;
       }
-      $translations = array($node->language => $node);
+      $langcode = entity_language('node', $node);
+      $translations = array($langcode => $node);
     }
     else {
       $translations = translation_node_get_translations($node->tnid);
diff --git a/modules/translation/translation.pages.inc b/modules/translation/translation.pages.inc
index fa4070b..110fea6 100644
--- a/modules/translation/translation.pages.inc
+++ b/modules/translation/translation.pages.inc
@@ -27,7 +27,7 @@ function translation_node_overview($node) {
   else {
     // We have no translation source nid, this could be a new set, emulate that.
     $tnid = $node->nid;
-    $translations = array($node->language => $node);
+    $translations = array(entity_language('node', $node) => $node);
   }
 
   $type = variable_get('translation_language_type', LANGUAGE_TYPE_INTERFACE);
diff --git a/modules/translation/translation.test b/modules/translation/translation.test
index 09bc9e3..e64f9cb 100644
--- a/modules/translation/translation.test
+++ b/modules/translation/translation.test
@@ -429,7 +429,7 @@ class TranslationTestCase extends DrupalWebTestCase {
 
     $result = TRUE;
     $languages = language_list();
-    $page_language = $languages[$node->language];
+    $page_language = $languages[entity_language('node', $node)];
     $translation_language = $languages[$translation->language];
     $url = url("node/$translation->nid", array('language' => $translation_language));
 
diff --git a/modules/trigger/tests/trigger_test.info b/modules/trigger/tests/trigger_test.info
index bdcfbeb..22ab1d3 100644
--- a/modules/trigger/tests/trigger_test.info
+++ b/modules/trigger/tests/trigger_test.info
@@ -4,10 +4,10 @@ package = Testing
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/trigger/trigger.admin.inc b/modules/trigger/trigger.admin.inc
index 447d0dc..5b607c8 100644
--- a/modules/trigger/trigger.admin.inc
+++ b/modules/trigger/trigger.admin.inc
@@ -53,7 +53,7 @@ function trigger_assign($module_to_display = NULL) {
  * @ingroup forms
  */
 function trigger_unassign($form, $form_state, $module, $hook = NULL, $aid = NULL) {
-  if (!($hook && $aid)) {
+  if (!isset($hook, $aid)) {
     drupal_goto('admin/structure/trigger');
   }
 
diff --git a/modules/trigger/trigger.info b/modules/trigger/trigger.info
index 56662c5..761d63e 100644
--- a/modules/trigger/trigger.info
+++ b/modules/trigger/trigger.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = trigger.test
 configure = admin/structure/trigger
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/trigger/trigger.install b/modules/trigger/trigger.install
index 20d5c3a..779cd2a 100644
--- a/modules/trigger/trigger.install
+++ b/modules/trigger/trigger.install
@@ -80,6 +80,11 @@ function trigger_update_7000() {
 }
 
 /**
+ * @addtogroup updates-7.x-extra
+ * @{
+ */
+
+/**
  * Increase the length of the "hook" field to 78 characters.
  *
  * This is a separate function for those who ran an older version of
@@ -105,3 +110,7 @@ function trigger_update_7002() {
       ->execute();
   }
 }
+
+/**
+ * @} End of "addtogroup updates-7.x-extra".
+ */
diff --git a/modules/trigger/trigger.module b/modules/trigger/trigger.module
index 82d1172..aeb1211 100644
--- a/modules/trigger/trigger.module
+++ b/modules/trigger/trigger.module
@@ -65,7 +65,10 @@ function trigger_menu() {
     'description' => 'Unassign an action from a trigger.',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('trigger_unassign'),
-    'access arguments' => array('administer actions'),
+    // Only accessible if there are any actions that can be unassigned.
+    'access callback' => 'trigger_menu_unassign_access',
+    // Only output in the breadcrumb, not in menu trees.
+    'type' => MENU_VISIBLE_IN_BREADCRUMB,
     'file' => 'trigger.admin.inc',
   );
 
@@ -73,6 +76,25 @@ function trigger_menu() {
 }
 
 /**
+ * Access callback: Determines if triggers can be unassigned.
+ *
+ * @return bool
+ *   TRUE if there are triggers that the user can unassign, FALSE otherwise.
+ *
+ * @see trigger_menu()
+ */
+function trigger_menu_unassign_access() {
+  if (!user_access('administer actions')) {
+    return FALSE;
+  }
+  $count = db_select('trigger_assignments')
+    ->countQuery()
+    ->execute()
+    ->fetchField();
+  return $count > 0;
+}
+
+/**
  * Implements hook_trigger_info().
  *
  * Defines all the triggers that this module implements triggers for.
diff --git a/modules/trigger/trigger.test b/modules/trigger/trigger.test
index 138de62..829e189 100644
--- a/modules/trigger/trigger.test
+++ b/modules/trigger/trigger.test
@@ -740,3 +740,32 @@ class TriggerOrphanedActionsTestCase extends DrupalWebTestCase {
     $this->assertRaw(t('!post %title has been updated.', array('!post' => 'Basic page', '%title' => $edit["title"])), t('Make sure the Basic page can be updated with the missing trigger function.'));
   }
 }
+
+/**
+ * Tests the unassigning of triggers.
+ */
+class TriggerUnassignTestCase extends DrupalWebTestCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => 'Trigger unassigning',
+      'description' => 'Tests the unassigning of triggers.',
+      'group' => 'Trigger',
+    );
+  }
+
+  function setUp() {
+    parent::setUp('trigger', 'trigger_test');
+    $web_user = $this->drupalCreateUser(array('administer actions'));
+    $this->drupalLogin($web_user);
+  }
+
+  /**
+   * Tests an attempt to unassign triggers when none are assigned.
+   */
+  function testUnassignAccessDenied() {
+    $this->drupalGet('admin/structure/trigger/unassign');
+    $this->assertResponse(403, 'If there are no actions available, return access denied.');
+  }
+
+}
diff --git a/modules/update/tests/aaa_update_test.info b/modules/update/tests/aaa_update_test.info
index c1285a9..bac8ca7 100644
--- a/modules/update/tests/aaa_update_test.info
+++ b/modules/update/tests/aaa_update_test.info
@@ -4,10 +4,10 @@ package = Testing
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/update/tests/bbb_update_test.info b/modules/update/tests/bbb_update_test.info
index f04dd40..f9094c0 100644
--- a/modules/update/tests/bbb_update_test.info
+++ b/modules/update/tests/bbb_update_test.info
@@ -4,10 +4,10 @@ package = Testing
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/update/tests/ccc_update_test.info b/modules/update/tests/ccc_update_test.info
index 2b53616..94b45bc 100644
--- a/modules/update/tests/ccc_update_test.info
+++ b/modules/update/tests/ccc_update_test.info
@@ -4,10 +4,10 @@ package = Testing
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/update/tests/themes/update_test_basetheme/update_test_basetheme.info b/modules/update/tests/themes/update_test_basetheme/update_test_basetheme.info
index 8b79df4..61d6575 100644
--- a/modules/update/tests/themes/update_test_basetheme/update_test_basetheme.info
+++ b/modules/update/tests/themes/update_test_basetheme/update_test_basetheme.info
@@ -3,10 +3,10 @@ description = Test theme which acts as a base theme for other test subthemes.
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/update/tests/themes/update_test_subtheme/update_test_subtheme.info b/modules/update/tests/themes/update_test_subtheme/update_test_subtheme.info
index e998556..7599bc1 100644
--- a/modules/update/tests/themes/update_test_subtheme/update_test_subtheme.info
+++ b/modules/update/tests/themes/update_test_subtheme/update_test_subtheme.info
@@ -4,10 +4,10 @@ core = 7.x
 base theme = update_test_basetheme
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/update/tests/update_test.info b/modules/update/tests/update_test.info
index 9109a20..3b5c64e 100644
--- a/modules/update/tests/update_test.info
+++ b/modules/update/tests/update_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/update/tests/update_test.module b/modules/update/tests/update_test.module
index e7ee43e..6fe4bdd 100644
--- a/modules/update/tests/update_test.module
+++ b/modules/update/tests/update_test.module
@@ -1,6 +1,11 @@
 <?php
 
 /**
+ * @file
+ * Module for testing Update Manager functionality.
+ */
+
+/**
  * Implements hook_system_theme_info().
  */
 function update_test_system_theme_info() {
@@ -34,13 +39,13 @@ function update_test_menu() {
 /**
  * Implements hook_system_info_alter().
  *
- * This checks the 'update_test_system_info' variable and sees if we need to
- * alter the system info for the given $file based on the setting. The setting
- * is expected to be a nested associative array. If the key '#all' is defined,
- * its subarray will include .info keys and values for all modules and themes
- * on the system. Otherwise, the settings array is keyed by the module or
- * theme short name ($file->name) and the subarrays contain settings just for
- * that module or theme.
+ * Checks the 'update_test_system_info' variable and sees if we need to alter
+ * the system info for the given $file based on the setting. The setting is
+ * expected to be a nested associative array. If the key '#all' is defined, its
+ * subarray will include .info keys and values for all modules and themes on the
+ * system. Otherwise, the settings array is keyed by the module or theme short
+ * name ($file->name) and the subarrays contain settings just for that module or
+ * theme.
  */
 function update_test_system_info_alter(&$info, $file) {
   $setting = variable_get('update_test_system_info', array());
@@ -56,13 +61,12 @@ function update_test_system_info_alter(&$info, $file) {
 /**
  * Implements hook_update_status_alter().
  *
- * This checks the 'update_test_update_status' variable and sees if we need to
- * alter the update status for the given project based on the setting. The
- * setting is expected to be a nested associative array. If the key '#all' is
- * defined, its subarray will include .info keys and values for all modules
- * and themes on the system. Otherwise, the settings array is keyed by the
- * module or theme short name and the subarrays contain settings just for that
- * module or theme.
+ * Checks the 'update_test_update_status' variable and sees if we need to alter
+ * the update status for the given project based on the setting. The setting is
+ * expected to be a nested associative array. If the key '#all' is defined, its
+ * subarray will include .info keys and values for all modules and themes on the
+ * system. Otherwise, the settings array is keyed by the module or theme short
+ * name and the subarrays contain settings just for that module or theme.
  */
 function update_test_update_status_alter(&$projects) {
   $setting = variable_get('update_test_update_status', array());
@@ -80,18 +84,20 @@ function update_test_update_status_alter(&$projects) {
 }
 
 /**
- * Page callback, prints mock XML for the update module.
+ * Page callback: Prints mock XML for the Update Manager module.
  *
  * The specific XML file to print depends on two things: the project we're
  * trying to fetch data for, and the desired "availability scenario" for that
- * project which we're trying to test. Before attempting to fetch this data
- * (by checking for updates on the available updates report), callers need to
- * define the 'update_test_xml_map' variable as an array, keyed by project
- * name, indicating which availability scenario to use for that project.
+ * project which we're trying to test. Before attempting to fetch this data (by
+ * checking for updates on the available updates report), callers need to define
+ * the 'update_test_xml_map' variable as an array, keyed by project name,
+ * indicating which availability scenario to use for that project.
  *
  * @param $project_name
- *   The project short name update.module is trying to fetch data for (the
+ *   The project short name the update manager is trying to fetch data for (the
  *   fetch URLs are of the form: [base_url]/[project_name]/[core_version]).
+ *
+ * @see update_test_menu()
  */
 function update_test_mock_page($project_name) {
   $xml_map = variable_get('update_test_xml_map', FALSE);
@@ -115,7 +121,7 @@ function update_test_mock_page($project_name) {
 }
 
 /**
- * Implement hook_archiver_info().
+ * Implements hook_archiver_info().
  */
 function update_test_archiver_info() {
   return array(
@@ -147,13 +153,23 @@ function update_test_filetransfer_info() {
 }
 
 /**
- * Mock FileTransfer object to test the settings form functionality.
+ * Mocks a FileTransfer object to test the settings form functionality.
  */
 class UpdateTestFileTransfer {
+
+  /**
+   * Returns an UpdateTestFileTransfer object.
+   *
+   * @return
+   *   A new UpdateTestFileTransfer object.
+   */
   public static function factory() {
     return new UpdateTestFileTransfer;
   }
 
+  /**
+   * Returns a settings form with a text field to input a username.
+   */
   public function getSettingsForm() {
     $form = array();
     $form['udpate_test_username'] = array(
@@ -165,7 +181,9 @@ class UpdateTestFileTransfer {
 }
 
 /**
- * Return an Error 503 (Service unavailable) page.
+ * Page callback: Displays an Error 503 (Service unavailable) page.
+ *
+ * @see update_test_menu()
  */
 function update_callback_service_unavailable() {
   drupal_add_http_header('Status', '503 Service unavailable');
diff --git a/modules/update/update-rtl.css b/modules/update/update-rtl.css
index 5fc83d1..f181c84 100644
--- a/modules/update/update-rtl.css
+++ b/modules/update/update-rtl.css
@@ -1,3 +1,7 @@
+/**
+ * @file
+ * RTL styles used by the Update Manager module.
+ */
 
 .update .project {
   padding-right: .25em;
diff --git a/modules/update/update.api.php b/modules/update/update.api.php
index 87f95ca..cb5669e 100644
--- a/modules/update/update.api.php
+++ b/modules/update/update.api.php
@@ -2,7 +2,7 @@
 
 /**
  * @file
- * Hooks provided by the Update Status module.
+ * Hooks provided by the Update Manager module.
  */
 
 /**
@@ -14,23 +14,22 @@
  * Alter the list of projects before fetching data and comparing versions.
  *
  * Most modules will never need to implement this hook. It is for advanced
- * interaction with the update status module: mere mortals need not apply.
- * The primary use-case for this hook is to add projects to the list, for
- * example, to provide update status data on disabled modules and themes. A
- * contributed module might want to hide projects from the list, for example,
- * if there is a site-specific module that doesn't have any official releases,
- * that module could remove itself from this list to avoid "No available
- * releases found" warnings on the available updates report. In rare cases, a
- * module might want to alter the data associated with a project already in
- * the list.
+ * interaction with the Update Manager module. The primary use-case for this
+ * hook is to add projects to the list; for example, to provide update status
+ * data on disabled modules and themes. A contributed module might want to hide
+ * projects from the list; for example, if there is a site-specific module that
+ * doesn't have any official releases, that module could remove itself from this
+ * list to avoid "No available releases found" warnings on the available updates
+ * report. In rare cases, a module might want to alter the data associated with
+ * a project already in the list.
  *
  * @param $projects
  *   Reference to an array of the projects installed on the system. This
- *   includes all the metadata documented in the comments below for each
- *   project (either module or theme) that is currently enabled. The array is
- *   initially populated inside update_get_projects() with the help of
- *   _update_process_info_list(), so look there for examples of how to
- *   populate the array with real values.
+ *   includes all the metadata documented in the comments below for each project
+ *   (either module or theme) that is currently enabled. The array is initially
+ *   populated inside update_get_projects() with the help of
+ *   _update_process_info_list(), so look there for examples of how to populate
+ *   the array with real values.
  *
  * @see update_get_projects()
  * @see _update_process_info_list()
@@ -118,6 +117,7 @@ function hook_update_status_alter(&$projects) {
  *   no problems, return an empty array.
  *
  * @see update_manager_archive_verify()
+ * @ingroup update_manager_file
  */
 function hook_verify_update_archive($project, $archive_file, $directory) {
   $errors = array();
diff --git a/modules/update/update.authorize.inc b/modules/update/update.authorize.inc
index c9b76dd..6ddd2c5 100644
--- a/modules/update/update.authorize.inc
+++ b/modules/update/update.authorize.inc
@@ -2,15 +2,19 @@
 
 /**
  * @file
- * Callbacks and related functions invoked by authorize.php to update projects
- * on the Drupal site. We use the Batch API to actually update each individual
- * project on the site. All of the code in this file is run at a low bootstrap
- * level (modules are not loaded), so these functions cannot assume access to
- * the rest of the update module code.
+ * Callbacks and related functions invoked by authorize.php to update projects.
+ *
+ * We use the Batch API to actually update each individual project on the site.
+ * All of the code in this file is run at a low bootstrap level (modules are not
+ * loaded), so these functions cannot assume access to the rest of the code of
+ * the Update Manager module.
  */
 
 /**
- * Callback invoked by authorize.php to update existing projects.
+ * Updates existing projects when invoked by authorize.php.
+ *
+ * Callback for system_authorized_init() in
+ * update_manager_update_ready_form_submit().
  *
  * @param $filetransfer
  *   The FileTransfer object created by authorize.php for use during this
@@ -18,9 +22,9 @@
  * @param $projects
  *   A nested array of projects to install into the live webroot, keyed by
  *   project name. Each subarray contains the following keys:
- *   - 'project': The canonical project short name.
- *   - 'updater_name': The name of the Updater class to use for this project.
- *   - 'local_url': The locally installed location of new code to update with.
+ *   - project: The canonical project short name.
+ *   - updater_name: The name of the Updater class to use for this project.
+ *   - local_url: The locally installed location of new code to update with.
  */
 function update_authorize_run_update($filetransfer, $projects) {
   $operations = array();
@@ -50,13 +54,16 @@ function update_authorize_run_update($filetransfer, $projects) {
 }
 
 /**
- * Callback invoked by authorize.php to install a new project.
+ * Installs a new project when invoked by authorize.php.
+ *
+ * Callback for system_authorized_init() in
+ * update_manager_install_form_submit().
  *
  * @param FileTransfer $filetransfer
  *   The FileTransfer object created by authorize.php for use during this
  *   operation.
  * @param string $project
- *   The canonical project short name (e.g. {system}.name).
+ *   The canonical project short name (e.g., {system}.name).
  * @param string $updater_name
  *   The name of the Updater class to use for installing this project.
  * @param string $local_url
@@ -90,7 +97,7 @@ function update_authorize_run_install($filetransfer, $project, $updater_name, $l
 }
 
 /**
- * Copy a project to its proper place when authorized with elevated privileges.
+ * Batch callback: Copies project to its proper place when authorized to do so.
  *
  * @param string $project
  *   The canonical short name of the project being installed.
@@ -102,7 +109,7 @@ function update_authorize_run_install($filetransfer, $project, $updater_name, $l
  * @param FileTransfer $filetransfer
  *   The FileTransfer object to use for performing this operation.
  * @param array $context
- *   Reference to an array used for BatchAPI storage.
+ *   Reference to an array used for Batch API storage.
  */
 function update_authorize_batch_copy_project($project, $updater_name, $local_url, $filetransfer, &$context) {
 
@@ -118,15 +125,13 @@ function update_authorize_batch_copy_project($project, $updater_name, $local_url
     $context['results']['tasks'] = array();
   }
 
-  /**
-   * The batch API uses a session, and since all the arguments are serialized
-   * and unserialized between requests, although the FileTransfer object
-   * itself will be reconstructed, the connection pointer itself will be lost.
-   * However, the FileTransfer object will still have the connection variable,
-   * even though the connection itself is now gone. So, although it's ugly, we
-   * have to unset the connection variable at this point so that the
-   * FileTransfer object will re-initiate the actual connection.
-   */
+  // The batch API uses a session, and since all the arguments are serialized
+  // and unserialized between requests, although the FileTransfer object itself
+  // will be reconstructed, the connection pointer itself will be lost. However,
+  // the FileTransfer object will still have the connection variable, even
+  // though the connection itself is now gone. So, although it's ugly, we have
+  // to unset the connection variable at this point so that the FileTransfer
+  // object will re-initiate the actual connection.
   unset($filetransfer->connection);
 
   if (!empty($context['results']['log'][$project]['#abort'])) {
@@ -163,11 +168,16 @@ function update_authorize_batch_copy_project($project, $updater_name, $local_url
 }
 
 /**
- * Batch callback for when the authorized update batch is finished.
+ * Batch callback: Performs actions when the authorized update batch is done.
  *
  * This processes the results and stashes them into SESSION such that
  * authorize.php will render a report. Also responsible for putting the site
  * back online and clearing the update status cache after a successful update.
+ *
+ * @param $success
+ *   TRUE if the batch operation was successful; FALSE if there were errors.
+ * @param $results
+ *   An associative array of results from the batch operation.
  */
 function update_authorize_update_batch_finished($success, $results) {
   foreach ($results['log'] as $project => $messages) {
@@ -225,11 +235,16 @@ function update_authorize_update_batch_finished($success, $results) {
 }
 
 /**
- * Batch callback for when the authorized install batch is finished.
+ * Batch callback: Performs actions when the authorized install batch is done.
  *
  * This processes the results and stashes them into SESSION such that
  * authorize.php will render a report. Also responsible for putting the site
  * back online after a successful install if necessary.
+ *
+ * @param $success
+ *   TRUE if the batch operation was a success; FALSE if there were errors.
+ * @param $results
+ *   An associative array of results from the batch operation.
  */
 function update_authorize_install_batch_finished($success, $results) {
   foreach ($results['log'] as $project => $messages) {
@@ -279,26 +294,30 @@ function update_authorize_install_batch_finished($success, $results) {
 }
 
 /**
- * Helper function to create a structure of log messages.
+ * Creates a structure of log messages.
  *
  * @param array $project_results
+ *   An associative array of results from the batch operation.
  * @param string $message
+ *   A string containing a log message.
  * @param bool $success
+ *   (optional) TRUE if the operation the message is about was a success, FALSE
+ *   if there were errors. Defaults to TRUE.
  */
 function _update_batch_create_message(&$project_results, $message, $success = TRUE) {
   $project_results[] = array('message' => $message, 'success' => $success);
 }
 
 /**
- * Private helper function to clear cached available update status data.
+ * Clears cached available update status data.
  *
- * Since this function is run at such a low bootstrap level, update.module is
- * not loaded. So, we can't just call _update_cache_clear(). However, the
- * database is bootstrapped, so we can do a query ourselves to clear out what
- * we want to clear.
+ * Since this function is run at such a low bootstrap level, the Update Manager
+ * module is not loaded. So, we can't just call _update_cache_clear(). However,
+ * the database is bootstrapped, so we can do a query ourselves to clear out
+ * what we want to clear.
  *
- * Note that we do not want to just truncate the table, since that would
- * remove items related to currently pending fetch attempts.
+ * Note that we do not want to just truncate the table, since that would remove
+ * items related to currently pending fetch attempts.
  *
  * @see update_authorize_update_batch_finished()
  * @see _update_cache_clear()
diff --git a/modules/update/update.compare.inc b/modules/update/update.compare.inc
index 2ccd97c..cd8b762 100644
--- a/modules/update/update.compare.inc
+++ b/modules/update/update.compare.inc
@@ -6,7 +6,7 @@
  */
 
 /**
- * Fetch an array of installed and enabled projects.
+ * Fetches an array of installed and enabled projects.
  *
  * This is only responsible for generating an array of projects (taking into
  * account projects that include more than one module or theme). Other
@@ -15,14 +15,39 @@
  * that logic is only required when preparing the status report, not for
  * fetching the available release data.
  *
- * This array is fairly expensive to construct, since it involves a lot of
- * disk I/O, so we cache the results into the {cache_update} table using the
- * 'update_project_projects' cache ID. However, since this is not the data
- * about available updates fetched from the network, it is ok to invalidate it
- * somewhat quickly. If we keep this data for very long, site administrators
- * are more likely to see incorrect results if they upgrade to a newer version
- * of a module or theme but do not visit certain pages that automatically
- * clear this cache.
+ * This array is fairly expensive to construct, since it involves a lot of disk
+ * I/O, so we cache the results into the {cache_update} table using the
+ * 'update_project_projects' cache ID. However, since this is not the data about
+ * available updates fetched from the network, it is acceptable to invalidate it
+ * somewhat quickly. If we keep this data for very long, site administrators are
+ * more likely to see incorrect results if they upgrade to a newer version of a
+ * module or theme but do not visit certain pages that automatically clear this
+ * cache.
+ *
+ * @return
+ *   An associative array of currently enabled projects keyed by the
+ *   machine-readable project short name. Each project contains:
+ *   - name: The machine-readable project short name.
+ *   - info: An array with values from the main .info file for this project.
+ *     - name: The human-readable name of the project.
+ *     - package: The package that the project is grouped under.
+ *     - version: The version of the project.
+ *     - project: The Drupal.org project name.
+ *     - datestamp: The date stamp of the project's main .info file.
+ *     - _info_file_ctime: The maximum file change time for all of the .info
+ *       files included in this project.
+ *   - datestamp: The date stamp when the project was released, if known.
+ *   - includes: An associative array containing all projects included with this
+ *     project, keyed by the machine-readable short name with the human-readable
+ *     name as value.
+ *   - project_type: The type of project. Allowed values are 'module' and
+ *     'theme'.
+ *   - project_status: This indicates if the project is enabled and will always
+ *     be TRUE, as the function only returns enabled projects.
+ *   - sub_themes: If the project is a theme it contains an associative array of
+ *     all sub-themes.
+ *   - base_themes: If the project is a theme it contains an associative array
+ *     of all base-themes.
  *
  * @see update_process_project_info()
  * @see update_calculate_project_data()
@@ -53,25 +78,25 @@ function update_get_projects() {
 }
 
 /**
- * Populate an array of project data.
- *
- * This iterates over a list of the installed modules or themes and groups
- * them by project and status. A few parts of this function assume that
- * enabled modules and themes are always processed first, and if disabled
- * modules or themes are being processed (there is a setting to control if
- * disabled code should be included in the Available updates report or not),
- * those are only processed after $projects has been populated with
- * information about the enabled code. 'Hidden' modules and themes are always
- * ignored. This function also records the latest change time on the .info
- * files for each module or theme, which is important data which is used when
- * deciding if the cached available update data should be invalidated.
+ * Populates an array of project data.
+ *
+ * This iterates over a list of the installed modules or themes and groups them
+ * by project and status. A few parts of this function assume that enabled
+ * modules and themes are always processed first, and if disabled modules or
+ * themes are being processed (there is a setting to control if disabled code
+ * should be included or not in the 'Available updates' report), those are only
+ * processed after $projects has been populated with information about the
+ * enabled code. Modules and themes set as hidden are always ignored. This
+ * function also records the latest change time on the .info files for each
+ * module or theme, which is important data which is used when deciding if the
+ * cached available update data should be invalidated.
  *
  * @param $projects
  *   Reference to the array of project data of what's installed on this site.
  * @param $list
  *   Array of data to process to add the relevant info to the $projects array.
  * @param $project_type
- *   The kind of data in the list (can be 'module' or 'theme').
+ *   The kind of data in the list. Can be 'module' or 'theme'.
  * @param $status
  *   Boolean that controls what status (enabled or disabled) to process out of
  *   the $list and add to the $projects array.
@@ -211,8 +236,13 @@ function _update_process_info_list(&$projects, $list, $project_type, $status) {
 }
 
 /**
- * Given a $file object (as returned by system_get_files_database()), figure
- * out what project it belongs to.
+ * Determines what project a given file object belongs to.
+ *
+ * @param $file
+ *   A file object as returned by system_get_files_database().
+ *
+ * @return
+ *   The canonical project short name.
  *
  * @see system_get_files_database()
  */
@@ -228,7 +258,9 @@ function update_get_project_name($file) {
 }
 
 /**
- * Process the list of projects on the system to figure out the currently
+ * Determines version and type information for currently installed projects.
+ *
+ * Processes the list of projects on the system to figure out the currently
  * installed versions, and other information that is required before we can
  * compare against the available releases to produce the status report.
  *
@@ -277,7 +309,7 @@ function update_process_project_info(&$projects) {
 }
 
 /**
- * Calculate the current update status of all projects on the site.
+ * Calculates the current update status of all projects on the site.
  *
  * The results of this function are expensive to compute, especially on sites
  * with lots of modules or themes, since it involves a lot of comparisons and
@@ -285,13 +317,16 @@ function update_process_project_info(&$projects) {
  * table using the 'update_project_data' cache ID. However, since this is not
  * the data about available updates fetched from the network, it is ok to
  * invalidate it somewhat quickly. If we keep this data for very long, site
- * administrators are more likely to see incorrect results if they upgrade to
- * a newer version of a module or theme but do not visit certain pages that
+ * administrators are more likely to see incorrect results if they upgrade to a
+ * newer version of a module or theme but do not visit certain pages that
  * automatically clear this cache.
  *
  * @param array $available
  *   Data about available project releases.
  *
+ * @return
+ *   An array of installed projects with current update status information.
+ *
  * @see update_get_available()
  * @see update_get_projects()
  * @see update_process_project_info()
@@ -327,52 +362,50 @@ function update_calculate_project_data($available) {
 }
 
 /**
- * Calculate the current update status of a specific project.
+ * Calculates the current update status of a specific project.
  *
- * This function is the heart of the update status feature. For each project
- * it is invoked with, it first checks if the project has been flagged with a
+ * This function is the heart of the update status feature. For each project it
+ * is invoked with, it first checks if the project has been flagged with a
  * special status like "unsupported" or "insecure", or if the project node
  * itself has been unpublished. In any of those cases, the project is marked
  * with an error and the next project is considered.
  *
  * If the project itself is valid, the function decides what major release
  * series to consider. The project defines what the currently supported major
- * versions are for each version of core, so the first step is to make sure
- * the current version is still supported. If so, that's the target version.
- * If the current version is unsupported, the project maintainer's recommended
- * major version is used. There's also a check to make sure that this function
- * never recommends an earlier release than the currently installed major
- * version.
- *
- * Given a target major version, it scans the available releases looking for
+ * versions are for each version of core, so the first step is to make sure the
+ * current version is still supported. If so, that's the target version. If the
+ * current version is unsupported, the project maintainer's recommended major
+ * version is used. There's also a check to make sure that this function never
+ * recommends an earlier release than the currently installed major version.
+ *
+ * Given a target major version, the available releases are scanned looking for
  * the specific release to recommend (avoiding beta releases and development
- * snapshots if possible). This is complicated to describe, but an example
- * will help clarify. For the target major version, find the highest patch
- * level. If there is a release at that patch level with no extra ("beta",
- * etc), then we recommend the release at that patch level with the most
- * recent release date. If every release at that patch level has extra (only
- * betas), then recommend the latest release from the previous patch
- * level. For example:
+ * snapshots if possible). For the target major version, the highest patch level
+ * is found. If there is a release at that patch level with no extra ("beta",
+ * etc.), then the release at that patch level with the most recent release date
+ * is recommended. If every release at that patch level has extra (only betas),
+ * then the latest release from the previous patch level is recommended. For
+ * example:
  *
- * 1.6-bugfix <-- recommended version because 1.6 already exists.
- * 1.6
+ * - 1.6-bugfix <-- recommended version because 1.6 already exists.
+ * - 1.6
  *
  * or
  *
- * 1.6-beta
- * 1.5 <-- recommended version because no 1.6 exists.
- * 1.4
+ * - 1.6-beta
+ * - 1.5 <-- recommended version because no 1.6 exists.
+ * - 1.4
  *
- * It also looks for the latest release from the same major version, even a
- * beta release, to display to the user as the "Latest version" option.
- * Additionally, it finds the latest official release from any higher major
- * versions that have been released to provide a set of "Also available"
+ * Also, the latest release from the same major version is looked for, even beta
+ * releases, to display to the user as the "Latest version" option.
+ * Additionally, the latest official release from any higher major versions that
+ * have been released is searched for to provide a set of "Also available"
  * options.
  *
- * Finally, and most importantly, it keeps scanning the release history until
- * it gets to the currently installed release, searching for anything marked
- * as a security update. If any security updates have been found between the
- * recommended release and the installed version, all of the releases that
+ * Finally, and most importantly, the release history continues to be scanned
+ * until the currently installed release is reached, searching for anything
+ * marked as a security update. If any security updates have been found between
+ * the recommended release and the installed version, all of the releases that
  * included a security fix are recorded so that the site administrator can be
  * warned their site is insecure, and links pointing to the release notes for
  * each security update can be included (which, in turn, will link to the
@@ -381,9 +414,15 @@ function update_calculate_project_data($available) {
  * This function relies on the fact that the .xml release history data comes
  * sorted based on major version and patch level, then finally by release date
  * if there are multiple releases such as betas from the same major.patch
- * version (e.g. 5.x-1.5-beta1, 5.x-1.5-beta2, and 5.x-1.5). Development
+ * version (e.g., 5.x-1.5-beta1, 5.x-1.5-beta2, and 5.x-1.5). Development
  * snapshots for a given major version are always listed last.
  *
+ * @param $project
+ *   An array containing information about a specific project.
+ * @param $project_data
+ *   An array containing information about a specific project.
+ * @param $available
+ *   Data about available project releases of a specific project.
  */
 function update_calculate_project_update_status($project, &$project_data, $available) {
   foreach (array('title', 'link') as $attribute) {
@@ -707,16 +746,16 @@ function update_calculate_project_update_status($project, &$project_data, $avail
 }
 
 /**
- * Retrieve data from {cache_update} or empty the cache when necessary.
+ * Retrieves data from {cache_update} or empties the cache when necessary.
  *
  * Two very expensive arrays computed by this module are the list of all
- * installed modules and themes (and .info data, project associations, etc),
- * and the current status of the site relative to the currently available
- * releases. These two arrays are cached in the {cache_update} table and used
- * whenever possible. The cache is cleared whenever the administrator visits
- * the status report, available updates report, or the module or theme
- * administration pages, since we should always recompute the most current
- * values on any of those pages.
+ * installed modules and themes (and .info data, project associations, etc), and
+ * the current status of the site relative to the currently available releases.
+ * These two arrays are cached in the {cache_update} table and used whenever
+ * possible. The cache is cleared whenever the administrator visits the status
+ * report, available updates report, or the module or theme administration
+ * pages, since we should always recompute the most current values on any of
+ * those pages.
  *
  * Note: while both of these arrays are expensive to compute (in terms of disk
  * I/O and some fairly heavy CPU processing), neither of these is the actual
@@ -726,13 +765,13 @@ function update_calculate_project_update_status($project, &$project_data, $avail
  * hour and never get invalidated just by visiting a page on the site.
  *
  * @param $cid
- *   The cache id of data to return from the cache. Valid options are
+ *   The cache ID of data to return from the cache. Valid options are
  *   'update_project_data' and 'update_project_projects'.
  *
  * @return
  *   The cached value of the $projects array generated by
- *   update_calculate_project_data() or update_get_projects(), or an empty
- *   array when the cache is cleared.
+ *   update_calculate_project_data() or update_get_projects(), or an empty array
+ *   when the cache is cleared.
  */
 function update_project_cache($cid) {
   $projects = array();
@@ -764,13 +803,13 @@ function update_project_cache($cid) {
 }
 
 /**
- * Filter the project .info data to only save attributes we need.
+ * Filters the project .info data to only save attributes we need.
  *
  * @param array $info
  *   Array of .info file data as returned by drupal_parse_info_file().
  *
  * @return
- *   Array of .info file data we need for the Update manager.
+ *   Array of .info file data we need for the update manager.
  *
  * @see _update_process_info_list()
  */
diff --git a/modules/update/update.css b/modules/update/update.css
index d30dfb6..ba45fe6 100644
--- a/modules/update/update.css
+++ b/modules/update/update.css
@@ -1,3 +1,7 @@
+/**
+ * @file
+ * Styles used by the Update Manager module.
+ */
 
 .update .project {
   font-weight: bold;
diff --git a/modules/update/update.fetch.inc b/modules/update/update.fetch.inc
index ee5d77b..860a1b9 100644
--- a/modules/update/update.fetch.inc
+++ b/modules/update/update.fetch.inc
@@ -6,7 +6,11 @@
  */
 
 /**
- * Callback to manually check the update status without cron.
+ * Page callback: Checks for updates and displays the update status report.
+ *
+ * Manually checks the update status without the use of cron.
+ *
+ * @see update_menu()
  */
 function update_manual_status() {
   _update_refresh();
@@ -25,7 +29,10 @@ function update_manual_status() {
 }
 
 /**
- * Process a step in the batch for fetching available update data.
+ * Batch callback: Processes a step in batch for fetching available update data.
+ *
+ * @param $context
+ *   Reference to an array used for Batch API storage.
  */
 function update_fetch_data_batch(&$context) {
   $queue = DrupalQueue::get('update_fetch_tasks');
@@ -70,12 +77,12 @@ function update_fetch_data_batch(&$context) {
 }
 
 /**
- * Batch API callback when all fetch tasks have been completed.
+ * Batch callback: Performs actions when all fetch tasks have been completed.
  *
  * @param $success
- *   Boolean indicating the success of the batch.
+ *   TRUE if the batch operation was successful; FALSE if there were errors.
  * @param $results
- *   Associative array holding the results of the batch, including the key
+ *   An associative array of results from the batch operation, including the key
  *   'updated' which holds the total number of projects we fetched available
  *   update data for.
  */
@@ -96,7 +103,7 @@ function update_fetch_data_finished($success, $results) {
 }
 
 /**
- * Attempt to drain the queue of tasks for release history data to fetch.
+ * Attempts to drain the queue of tasks for release history data to fetch.
  */
 function _update_fetch_data() {
   $queue = DrupalQueue::get('update_fetch_tasks');
@@ -108,13 +115,14 @@ function _update_fetch_data() {
 }
 
 /**
- * Process a task to fetch available update data for a single project.
+ * Processes a task to fetch available update data for a single project.
  *
- * Once the release history XML data is downloaded, it is parsed and saved
- * into the {cache_update} table in an entry just for that project.
+ * Once the release history XML data is downloaded, it is parsed and saved into
+ * the {cache_update} table in an entry just for that project.
  *
  * @param $project
  *   Associative array of information about the project to fetch data for.
+ *
  * @return
  *   TRUE if we fetched parsable XML, otherwise FALSE.
  */
@@ -184,7 +192,7 @@ function _update_process_fetch_task($project) {
 }
 
 /**
- * Clear out all the cached available update data and initiate re-fetching.
+ * Clears out all the cached available update data and initiates re-fetching.
  */
 function _update_refresh() {
   module_load_include('inc', 'update', 'update.compare');
@@ -211,7 +219,7 @@ function _update_refresh() {
 }
 
 /**
- * Add a task to the queue for fetching release history data for a project.
+ * Adds a task to the queue for fetching release history data for a project.
  *
  * We only create a new fetch task if there's no task already in the queue for
  * this particular project (based on 'fetch_task::' entries in the
@@ -219,8 +227,8 @@ function _update_refresh() {
  *
  * @param $project
  *   Associative array of information about a project as created by
- *   update_get_projects(), including keys such as 'name' (short name),
- *   and the 'info' array with data from a .info file for the project.
+ *   update_get_projects(), including keys such as 'name' (short name), and the
+ *   'info' array with data from a .info file for the project.
  *
  * @see update_get_projects()
  * @see update_get_available()
@@ -260,14 +268,17 @@ function _update_create_fetch_task($project) {
 /**
  * Generates the URL to fetch information about project updates.
  *
- * This figures out the right URL to use, based on the project's .info file
- * and the global defaults. Appends optional query arguments when the site is
+ * This figures out the right URL to use, based on the project's .info file and
+ * the global defaults. Appends optional query arguments when the site is
  * configured to report usage stats.
  *
  * @param $project
  *   The array of project information from update_get_projects().
  * @param $site_key
- *   The anonymous site key hash (optional).
+ *   (optional) The anonymous site key hash. Defaults to an empty string.
+ *
+ * @return
+ *   The URL for fetching information about updates to the specified project.
  *
  * @see update_fetch_data()
  * @see _update_process_fetch_task()
@@ -293,10 +304,11 @@ function _update_build_fetch_url($project, $site_key = '') {
 }
 
 /**
- * Return the base of the URL to fetch available update data for a project.
+ * Returns the base of the URL to fetch available update data for a project.
  *
  * @param $project
  *   The array of project information from update_get_projects().
+ *
  * @return
  *   The base of the URL used for fetching available update data. This does
  *   not include the path elements to specify a particular project, version,
@@ -309,10 +321,10 @@ function _update_get_fetch_url_base($project) {
 }
 
 /**
- * Perform any notifications that should be done once cron fetches new data.
+ * Performs any notifications that should be done once cron fetches new data.
  *
- * This method checks the status of the site using the new data and depending
- * on the configuration of the site, notifies administrators via email if there
+ * This method checks the status of the site using the new data and, depending
+ * on the configuration of the site, notifies administrators via e-mail if there
  * are new releases or missing security updates.
  *
  * @see update_requirements()
@@ -340,14 +352,19 @@ function _update_cron_notify() {
         else {
           $target_language = $default_language;
         }
-        drupal_mail('update', 'status_notify', $target, $target_language, $params);
+        $message = drupal_mail('update', 'status_notify', $target, $target_language, $params);
+        // Track when the last mail was successfully sent to avoid sending
+        // too many e-mails.
+        if ($message['result']) {
+          variable_set('update_last_email_notification', REQUEST_TIME);
+        }
       }
     }
   }
 }
 
 /**
- * Parse the XML of the Drupal release history info files.
+ * Parses the XML of the Drupal release history info files.
  *
  * @param $raw_xml
  *   A raw XML string of available release data for a given project.
diff --git a/modules/update/update.info b/modules/update/update.info
index 1aac12e..42ccf35 100644
--- a/modules/update/update.info
+++ b/modules/update/update.info
@@ -6,10 +6,10 @@ core = 7.x
 files[] = update.test
 configure = admin/reports/updates/settings
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/update/update.install b/modules/update/update.install
index 70fb6c3..baf4953 100644
--- a/modules/update/update.install
+++ b/modules/update/update.install
@@ -2,26 +2,25 @@
 
 /**
  * @file
- * Install, update and uninstall functions for the update module.
+ * Install, update, and uninstall functions for the Update Manager module.
  */
 
 /**
  * Implements hook_requirements().
  *
  * @return
- *   An array describing the status of the site regarding available updates.
- *   If there is no update data, only one record will be returned, indicating
- *   that the status of core can't be determined. If data is available, there
- *   will be two records: one for core, and another for all of contrib
- *   (assuming there are any contributed modules or themes enabled on the
- *   site). In addition to the fields expected by hook_requirements ('value',
- *   'severity', and optionally 'description'), this array will contain a
- *   'reason' attribute, which is an integer constant to indicate why the
- *   given status is being returned (UPDATE_NOT_SECURE, UPDATE_NOT_CURRENT, or
- *   UPDATE_UNKNOWN). This is used for generating the appropriate e-mail
- *   notification messages during update_cron(), and might be useful for other
- *   modules that invoke update_requirements() to find out if the site is up
- *   to date or not.
+ *   An array describing the status of the site regarding available updates. If
+ *   there is no update data, only one record will be returned, indicating that
+ *   the status of core can't be determined. If data is available, there will be
+ *   two records: one for core, and another for all of contrib (assuming there
+ *   are any contributed modules or themes enabled on the site). In addition to
+ *   the fields expected by hook_requirements ('value', 'severity', and
+ *   optionally 'description'), this array will contain a 'reason' attribute,
+ *   which is an integer constant to indicate why the given status is being
+ *   returned (UPDATE_NOT_SECURE, UPDATE_NOT_CURRENT, or UPDATE_UNKNOWN). This
+ *   is used for generating the appropriate e-mail notification messages during
+ *   update_cron(), and might be useful for other modules that invoke
+ *   update_requirements() to find out if the site is up to date or not.
  *
  * @see _update_message_text()
  * @see _update_cron_notify()
@@ -83,6 +82,7 @@ function update_uninstall() {
     'update_check_frequency',
     'update_fetch_url',
     'update_last_check',
+    'update_last_email_notification',
     'update_notification_threshold',
     'update_notify_emails',
     'update_max_fetch_attempts',
@@ -96,19 +96,19 @@ function update_uninstall() {
 }
 
 /**
- * Private helper method to fill in the requirements array.
+ * Fills in the requirements array.
  *
  * This is shared for both core and contrib to generate the right elements in
  * the array for hook_requirements().
  *
  * @param $project
- *  Array of information about the project we're testing as returned by
- *  update_calculate_project_data().
+ *   Array of information about the project we're testing as returned by
+ *   update_calculate_project_data().
  * @param $type
- *  What kind of project is this ('core' or 'contrib').
+ *   What kind of project this is ('core' or 'contrib').
  *
  * @return
- *  An array to be included in the nested $requirements array.
+ *   An array to be included in the nested $requirements array.
  *
  * @see hook_requirements()
  * @see update_requirements()
@@ -186,5 +186,5 @@ function update_update_7001() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
+ * @} End of "addtogroup updates-6.x-to-7.x".
  */
diff --git a/modules/update/update.manager.inc b/modules/update/update.manager.inc
index d9fd86f..85b587d 100644
--- a/modules/update/update.manager.inc
+++ b/modules/update/update.manager.inc
@@ -2,7 +2,8 @@
 
 /**
  * @file
- * Administrative screens and processing functions for the update manager.
+ * Administrative screens and processing functions of the Update Manager module.
+ *
  * This allows site administrators with the 'administer software updates'
  * permission to either upgrade existing projects, or download and install new
  * ones, so long as the killswitch setting ('allow_authorize_operations') is
@@ -11,51 +12,52 @@
  * To install new code, the administrator is prompted for either the URL of an
  * archive file, or to directly upload the archive file. The archive is loaded
  * into a temporary location, extracted, and verified. If everything is
- * successful, the user is redirected to authorize.php to type in their file
- * transfer credentials and authorize the installation to proceed with
- * elevated privileges, such that the extracted files can be copied out of the
- * temporary location and into the live web root.
+ * successful, the user is redirected to authorize.php to type in file transfer
+ * credentials and authorize the installation to proceed with elevated
+ * privileges, such that the extracted files can be copied out of the temporary
+ * location and into the live web root.
  *
  * Updating existing code is a more elaborate process. The first step is a
- * selection form where the user is presented with a table of installed
- * projects that are missing newer releases. The user selects which projects
- * they wish to upgrade, and presses the "Download updates" button to
- * continue. This sets up a batch to fetch all the selected releases, and
- * redirects to admin/update/download to display the batch progress bar as it
- * runs. Each batch operation is responsible for downloading a single file,
- * extracting the archive, and verifying the contents. If there are any
- * errors, the user is redirected back to the first page with the error
- * messages. If all downloads were extacted and verified, the user is instead
- * redirected to admin/update/ready, a landing page which reminds them to
- * backup their database and asks if they want to put the site offline during
- * the upgrade. Once the user presses the "Install updates" button, they are
- * redirected to authorize.php to supply their web root file access
- * credentials. The authorized operation (which lives in update.authorize.inc)
- * sets up a batch to copy each extracted update from the temporary location
- * into the live web root.
+ * selection form where the user is presented with a table of installed projects
+ * that are missing newer releases. The user selects which projects they wish to
+ * update, and presses the "Download updates" button to continue. This sets up a
+ * batch to fetch all the selected releases, and redirects to
+ * admin/update/download to display the batch progress bar as it runs. Each
+ * batch operation is responsible for downloading a single file, extracting the
+ * archive, and verifying the contents. If there are any errors, the user is
+ * redirected back to the first page with the error messages. If all downloads
+ * were extacted and verified, the user is instead redirected to
+ * admin/update/ready, a landing page which reminds them to backup their
+ * database and asks if they want to put the site offline during the update.
+ * Once the user presses the "Install updates" button, they are redirected to
+ * authorize.php to supply their web root file access credentials. The
+ * authorized operation (which lives in update.authorize.inc) sets up a batch to
+ * copy each extracted update from the temporary location into the live web
+ * root.
  */
 
 /**
- * @defgroup update_manager_update Update manager: update
+ * @defgroup update_manager_update Update Manager module: update
  * @{
- * Update manager for updating existing code.
+ * Update Manager module functionality for updating existing code.
  *
  * Provides a user interface to update existing code.
  */
 
 /**
- * Build the form for the update manager page to update existing projects.
+ * Form constructor for the update form of the Update Manager module.
  *
  * This presents a table with all projects that have available updates with
  * checkboxes to select which ones to upgrade.
  *
- * @param $form
- * @param $form_state
  * @param $context
- *   String representing the context from which we're trying to update, can be:
- *   'module', 'theme' or 'report'.
- * @return
- *   The form array for selecting which projects to update.
+ *   String representing the context from which we're trying to update.
+ *   Allowed values are 'module', 'theme', and 'report'.
+ *
+ * @see update_manager_update_form_validate()
+ * @see update_manager_update_form_submit()
+ * @see update_menu()
+ * @ingroup forms
  */
 function update_manager_update_form($form, $form_state = array(), $context) {
   if (!_update_manager_check_backends($form, 'update')) {
@@ -263,7 +265,7 @@ function update_manager_update_form($form, $form_state = array(), $context) {
 }
 
 /**
- * Returns HTML for the first page in the update manager wizard to select projects.
+ * Returns HTML for the first page in the process of updating projects.
  *
  * @param $variables
  *   An associative array containing:
@@ -280,7 +282,11 @@ function theme_update_manager_update_form($variables) {
 }
 
 /**
- * Validation callback to ensure that at least one project is selected.
+ * Form validation handler for update_manager_update_form().
+ *
+ * Ensures that at least one project is selected.
+ *
+ * @see update_manager_update_form_submit()
  */
 function update_manager_update_form_validate($form, &$form_state) {
   if (!empty($form_state['values']['projects'])) {
@@ -295,11 +301,11 @@ function update_manager_update_form_validate($form, &$form_state) {
 }
 
 /**
- * Submit function for the main update form.
+ * Form submission handler for update_manager_update_form().
  *
- * This sets up a batch to download, extract and verify the selected releases
+ * Sets up a batch that downloads, extracts, and verifies the selected releases.
  *
- * @see update_manager_update_form()
+ * @see update_manager_update_form_validate()
  */
 function update_manager_update_form_submit($form, &$form_state) {
   $projects = array();
@@ -329,7 +335,12 @@ function update_manager_update_form_submit($form, &$form_state) {
 }
 
 /**
- * Batch callback invoked when the download batch is completed.
+ * Batch callback: Performs actions when the download batch is completed.
+ *
+ * @param $success
+ *   TRUE if the batch operation was successful, FALSE if there were errors.
+ * @param $results
+ *   An associative array of results from the batch operation.
  */
 function update_manager_download_batch_finished($success, $results) {
   if (!empty($results['errors'])) {
@@ -352,15 +363,21 @@ function update_manager_download_batch_finished($success, $results) {
 }
 
 /**
+ * Form constructor for the update ready form.
+ *
  * Build the form when the site is ready to update (after downloading).
  *
  * This form is an intermediary step in the automated update workflow. It is
- * presented to the site administrator after all the required updates have
- * been downloaded and verified. The point of this page is to encourage the
- * user to backup their site, gives them the opportunity to put the site
- * offline, and then asks them to confirm that the update should continue.
- * After this step, the user is redirected to authorize.php to enter their
- * file transfer credentials and attempt to complete the update.
+ * presented to the site administrator after all the required updates have been
+ * downloaded and verified. The point of this page is to encourage the user to
+ * backup their site, give them the opportunity to put the site offline, and
+ * then ask them to confirm that the update should continue. After this step,
+ * the user is redirected to authorize.php to enter their file transfer
+ * credentials and attempt to complete the update.
+ *
+ * @see update_manager_update_ready_form_submit()
+ * @see update_menu()
+ * @ingroup forms
  */
 function update_manager_update_ready_form($form, &$form_state) {
   if (!_update_manager_check_backends($form, 'update')) {
@@ -389,13 +406,13 @@ function update_manager_update_ready_form($form, &$form_state) {
 }
 
 /**
- * Submit handler for the form to confirm that an update should continue.
+ * Form submission handler for update_manager_update_ready_form().
  *
  * If the site administrator requested that the site is put offline during the
- * update, do so now. Otherwise, pull information about all the required
- * updates out of the SESSION, figure out what Updater class is needed for
- * each one, generate an array of update operations to perform, and hand it
- * all off to system_authorized_init(), then redirect to authorize.php.
+ * update, do so now. Otherwise, pull information about all the required updates
+ * out of the SESSION, figure out what Drupal\Core\Updater\Updater class is
+ * needed for each one, generate an array of update operations to perform, and
+ * hand it all off to system_authorized_init(), then redirect to authorize.php.
  *
  * @see update_authorize_run_update()
  * @see system_authorized_init()
@@ -454,26 +471,27 @@ function update_manager_update_ready_form_submit($form, &$form_state) {
  */
 
 /**
- * @defgroup update_manager_install Update manager: install
+ * @defgroup update_manager_install Update Manager module: install
  * @{
- * Update manager for installing new code.
+ * Update Manager module functionality for installing new code.
  *
  * Provides a user interface to install new code.
  */
 
 /**
- * Build the form for the update manager page to install new projects.
+ * Form constructor for the install form of the Update Manager module.
  *
  * This presents a place to enter a URL or upload an archive file to use to
  * install a new module or theme.
  *
- * @param $form
- * @param $form_state
  * @param $context
- *   String representing the context from which we're trying to install, can
- *   be: 'module', 'theme' or 'report'.
- * @return
- *   The form array for selecting which project to install.
+ *   String representing the context from which we're trying to install.
+ *   Allowed values are 'module', 'theme', and 'report'.
+ *
+ * @see update_manager_install_form_validate()
+ * @see update_manager_install_form_submit()
+ * @see update_menu()
+ * @ingroup forms
  */
 function update_manager_install_form($form, &$form_state, $context) {
   if (!_update_manager_check_backends($form, 'install')) {
@@ -524,11 +542,11 @@ function update_manager_install_form($form, &$form_state, $context) {
  * @param array $form
  *   Reference to the form array we're building.
  * @param string $operation
- *   The Update manager operation we're in the middle of. Can be either
- *   'update' or 'install'. Use to provide operation-specific interface text.
+ *   The update manager operation we're in the middle of. Can be either 'update'
+ *   or 'install'. Use to provide operation-specific interface text.
  *
  * @return
- *   TRUE if the Update manager should continue to the next step in the
+ *   TRUE if the update manager should continue to the next step in the
  *   workflow, or FALSE if we've hit a fatal configuration and must halt the
  *   workflow.
  */
@@ -586,7 +604,9 @@ function _update_manager_check_backends(&$form, $operation) {
 }
 
 /**
- * Validate the form for installing a new project via the update manager.
+ * Form validation handler for update_manager_install_form().
+ *
+ * @see update_manager_install_form_submit()
  */
 function update_manager_install_form_validate($form, &$form_state) {
   if (!($form_state['values']['project_url'] XOR !empty($_FILES['files']['name']['project_upload']))) {
@@ -601,7 +621,7 @@ function update_manager_install_form_validate($form, &$form_state) {
 }
 
 /**
- * Handle form submission when installing new projects via the update manager.
+ * Form submission handler for update_manager_install_form().
  *
  * Either downloads the file specified in the URL to a temporary cache, or
  * uploads the file attached to the form, then attempts to extract the archive
@@ -611,6 +631,7 @@ function update_manager_install_form_validate($form, &$form_state) {
  * via authorize.php which will copy the extracted files from the temporary
  * location into the live site.
  *
+ * @see update_manager_install_form_validate()
  * @see update_authorize_run_install()
  * @see system_authorized_init()
  * @see system_authorized_get_url()
@@ -728,26 +749,26 @@ function update_manager_install_form_submit($form, &$form_state) {
  */
 
 /**
- * @defgroup update_manager_file Update manager: file management
+ * @defgroup update_manager_file Update Manager module: file management
  * @{
- * Update manager file management functions.
+ * Update Manager module file management functions.
  *
- * These functions are used by the update manager to copy, extract
- * and verify archive files.
+ * These functions are used by the update manager to copy, extract, and verify
+ * archive files.
  */
 
 /**
- * Unpack a downloaded archive file.
+ * Unpacks a downloaded archive file.
  *
- * @param string $project
- *   The short name of the project to download.
  * @param string $file
  *   The filename of the archive you wish to extract.
  * @param string $directory
  *   The directory you wish to extract the archive into.
+ *
  * @return Archiver
  *   The Archiver object used to extract the archive.
- * @throws Exception on failure.
+ *
+ * @throws Exception
  */
 function update_manager_archive_extract($file, $directory) {
   $archiver = archiver_get_archiver($file);
@@ -775,7 +796,7 @@ function update_manager_archive_extract($file, $directory) {
 }
 
 /**
- * Verify an archive after it has been downloaded and extracted.
+ * Verifies an archive after it has been downloaded and extracted.
  *
  * This function is responsible for invoking hook_verify_update_archive().
  *
@@ -787,18 +808,17 @@ function update_manager_archive_extract($file, $directory) {
  *   The directory that the archive was extracted into.
  *
  * @return array
- *   An array of error messages to display if the archive was invalid. If
- *   there are no errors, it will be an empty array.
- *
+ *   An array of error messages to display if the archive was invalid. If there
+ *   are no errors, it will be an empty array.
  */
 function update_manager_archive_verify($project, $archive_file, $directory) {
   return module_invoke_all('verify_update_archive', $project, $archive_file, $directory);
 }
 
 /**
- * Copies a file from $url to the temporary directory for updates.
+ * Copies a file from the specified URL to the temporary directory for updates.
  *
- * If the file has already been downloaded, returns the the local path.
+ * Returns the local path if the file has already been downloaded.
  *
  * @param $url
  *   The URL of the file on the server.
@@ -827,18 +847,18 @@ function update_manager_file_get($url) {
 }
 
 /**
- * Batch operation: download, unpack, and verify a project.
+ * Batch callback: Downloads, unpacks, and verifies a project.
  *
- * This function assumes that the provided URL points to a file archive of
- * some sort. The URL can have any scheme that we have a file stream wrapper
- * to support. The file is downloaded to a local cache.
+ * This function assumes that the provided URL points to a file archive of some
+ * sort. The URL can have any scheme that we have a file stream wrapper to
+ * support. The file is downloaded to a local cache.
  *
  * @param string $project
  *   The short name of the project to download.
  * @param string $url
  *   The URL to download a specific project release archive file.
  * @param array $context
- *   Reference to an array used for BatchAPI storage.
+ *   Reference to an array used for Batch API storage.
  *
  * @see update_manager_download_page()
  */
@@ -887,8 +907,8 @@ function update_manager_batch_project_get($project, $url, &$context) {
  * Determines if file transfers will be performed locally.
  *
  * If the server is configured such that webserver-created files have the same
- * owner as the configuration directory (e.g. sites/default) where new code
- * will eventually be installed, the Update manager can transfer files entirely
+ * owner as the configuration directory (e.g., sites/default) where new code
+ * will eventually be installed, the update manager can transfer files entirely
  * locally, without changing their ownership (in other words, without prompting
  * the user for FTP, SSH or other credentials).
  *
diff --git a/modules/update/update.module b/modules/update/update.module
index bf8b068..85c0968 100644
--- a/modules/update/update.module
+++ b/modules/update/update.module
@@ -2,10 +2,13 @@
 
 /**
  * @file
- * The "Update status" module checks for available updates of Drupal core and
- * any installed contributed modules and themes. It warns site administrators
- * if newer releases are available via the system status report
- * (admin/reports/status), the module and theme pages, and optionally via email.
+ * Handles updates of Drupal core and contributed projects.
+ *
+ * The module checks for available updates of Drupal core and any installed
+ * contributed modules and themes. It warns site administrators if newer
+ * releases are available via the system status report (admin/reports/status),
+ * the module and theme pages, and optionally via e-mail. It also provides the
+ * ability to install contributed modules and themes via an user interface.
  */
 
 /**
@@ -246,11 +249,14 @@ function update_menu() {
 }
 
 /**
- * Determine if the current user can access the updater menu items.
+ * Access callback: Resolves if the current user can access updater menu items.
+ *
+ * It both enforces the 'administer software updates' permission and the global
+ * kill switch for the authorize.php script.
  *
- * This is used as a menu system access callback. It both enforces the
- * 'administer software updates' permission and the global killswitch for the
- * authorize.php script.
+ * @return
+ *   TRUE if the current user can access the updater menu items; FALSE
+ *   otherwise.
  *
  * @see update_menu()
  */
@@ -294,13 +300,18 @@ function update_cron() {
     // configured notifications about the new status.
     update_refresh();
     update_fetch_data();
-    _update_cron_notify();
   }
   else {
     // Otherwise, see if any individual projects are now stale or still
     // missing data, and if so, try to fetch the data.
     update_get_available(TRUE);
   }
+  if ((REQUEST_TIME - variable_get('update_last_email_notification', 0)) > $interval) {
+    // If configured time between notifications elapsed, send email about
+    // updates possibly available.
+    module_load_include('inc', 'update', 'update.fetch');
+    _update_cron_notify();
+  }
 
   // Clear garbage from disk.
   update_clear_update_disk_cache();
@@ -327,10 +338,10 @@ function update_themes_disabled($themes) {
 }
 
 /**
- * Implements hook_form_FORM_ID_alter().
+ * Implements hook_form_FORM_ID_alter() for system_modules().
  *
- * Adds a submit handler to the system modules form, so that if a site admin
- * saves the form, we invalidate the cache of available updates.
+ * Adds a form submission handler to the system modules form, so that if a site
+ * admin saves the form, we invalidate the cache of available updates.
  *
  * @see _update_cache_clear()
  */
@@ -339,7 +350,9 @@ function update_form_system_modules_alter(&$form, $form_state) {
 }
 
 /**
- * Helper function for use as a form submit callback.
+ * Form submission handler for system_modules().
+ *
+ * @see update_form_system_modules_alter()
  */
 function update_cache_clear_submit($form, &$form_state) {
   // Clear all update module caches.
@@ -347,7 +360,7 @@ function update_cache_clear_submit($form, &$form_state) {
 }
 
 /**
- * Prints a warning message when there is no data about available updates.
+ * Returns a warning message when there is no data about available updates.
  */
 function _update_no_data() {
   $destination = drupal_get_destination();
@@ -358,20 +371,22 @@ function _update_no_data() {
 }
 
 /**
- * Internal helper to try to get the update information from the cache
- * if possible, and to refresh the cache when necessary.
+ * Tries to get update information from cache and refreshes it when necessary.
  *
  * In addition to checking the cache lifetime, this function also ensures that
  * there are no .info files for enabled modules or themes that have a newer
  * modification timestamp than the last time we checked for available update
- * data. If any .info file was modified, it almost certainly means a new
- * version of something was installed. Without fresh available update data,
- * the logic in update_calculate_project_data() will be wrong and produce
- * confusing, bogus results.
+ * data. If any .info file was modified, it almost certainly means a new version
+ * of something was installed. Without fresh available update data, the logic in
+ * update_calculate_project_data() will be wrong and produce confusing, bogus
+ * results.
  *
  * @param $refresh
- *   Boolean to indicate if this method should refresh the cache automatically
- *   if there's no data.
+ *   (optional) Boolean to indicate if this method should refresh the cache
+ *   automatically if there's no data. Defaults to FALSE.
+ *
+ * @return
+ *   Array of data about available releases, keyed by project shortname.
  *
  * @see update_refresh()
  * @see update_get_projects()
@@ -428,7 +443,11 @@ function update_get_available($refresh = FALSE) {
 }
 
 /**
- * Wrapper to load the include file and then create a new fetch task.
+ * Creates a new fetch task after loading the necessary include file.
+ *
+ * @param $project
+ *   Associative array of information about a project. See update_get_projects()
+ *   for the keys used.
  *
  * @see _update_create_fetch_task()
  */
@@ -438,7 +457,7 @@ function update_create_fetch_task($project) {
 }
 
 /**
- * Wrapper to load the include file and then refresh the release data.
+ * Refreshes the release data after loading the necessary include file.
  *
  * @see _update_refresh()
  */
@@ -448,7 +467,9 @@ function update_refresh() {
 }
 
 /**
- * Wrapper to load the include file and then attempt to fetch update data.
+ * Attempts to fetch update data after loading the necessary include file.
+ *
+ * @see _update_fetch_data()
  */
 function update_fetch_data() {
   module_load_include('inc', 'update', 'update.fetch');
@@ -456,7 +477,7 @@ function update_fetch_data() {
 }
 
 /**
- * Return all currently cached data about available releases for all projects.
+ * Returns all currently cached data about available releases for all projects.
  *
  * @return
  *   Array of data about available releases, keyed by project shortname.
@@ -481,17 +502,17 @@ function _update_get_cached_available_releases() {
 /**
  * Implements hook_mail().
  *
- * Constructs the email notification message when the site is out of date.
+ * Constructs the e-mail notification message when the site is out of date.
  *
  * @param $key
  *   Unique key to indicate what message to build, always 'status_notify'.
  * @param $message
  *   Reference to the message array being built.
  * @param $params
- *   Array of parameters to indicate what kind of text to include in the
- *   message body. This is a keyed array of message type ('core' or 'contrib')
- *   as the keys, and the status reason constant (UPDATE_NOT_SECURE, etc) for
- *   the values.
+ *   Array of parameters to indicate what kind of text to include in the message
+ *   body. This is a keyed array of message type ('core' or 'contrib') as the
+ *   keys, and the status reason constant (UPDATE_NOT_SECURE, etc) for the
+ *   values.
  *
  * @see drupal_mail()
  * @see _update_cron_notify()
@@ -518,22 +539,23 @@ function update_mail($key, &$message, $params) {
 }
 
 /**
- * Helper function to return the appropriate message text when the site is out
- * of date or missing a security update.
+ * Returns the appropriate message text when site is out of date or not secure.
  *
  * These error messages are shared by both update_requirements() for the
  * site-wide status report at admin/reports/status and in the body of the
- * notification emails generated by update_cron().
+ * notification e-mail messages generated by update_cron().
  *
  * @param $msg_type
- *   String to indicate what kind of message to generate. Can be either
- *   'core' or 'contrib'.
+ *   String to indicate what kind of message to generate. Can be either 'core'
+ *   or 'contrib'.
  * @param $msg_reason
  *   Integer constant specifying why message is generated.
  * @param $report_link
- *   Boolean that controls if a link to the updates report should be added.
+ *   (optional) Boolean that controls if a link to the updates report should be
+ *   added. Defaults to FALSE.
  * @param $language
- *   An optional language object to use.
+ *   (optional) A language object to use. Defaults to NULL.
+ *
  * @return
  *   The properly translated error message for the given key.
  */
@@ -603,10 +625,9 @@ function _update_message_text($msg_type, $msg_reason, $report_link = FALSE, $lan
 }
 
 /**
- * Private sort function to order projects based on their status.
+ * Orders projects based on their status.
  *
- * @see update_requirements()
- * @see uasort()
+ * Callback for uasort() within update_requirements().
  */
 function _update_project_status_sort($a, $b) {
   // The status constants are numerically in the right order, so we can
@@ -621,17 +642,16 @@ function _update_project_status_sort($a, $b) {
 /**
  * Returns HTML for the last time we checked for update data.
  *
- * In addition to properly formating the given timestamp, this function also
+ * In addition to properly formatting the given timestamp, this function also
  * provides a "Check manually" link that refreshes the available update and
  * redirects back to the same page.
  *
  * @param $variables
  *   An associative array containing:
- *   - 'last': The timestamp when the site last checked for available updates.
+ *   - last: The timestamp when the site last checked for available updates.
  *
  * @see theme_update_report()
  * @see theme_update_available_updates_form()
- *
  * @ingroup themeable
  */
 function theme_update_last_check($variables) {
@@ -647,7 +667,7 @@ function theme_update_last_check($variables) {
  * Implements hook_verify_update_archive().
  *
  * First, we ensure that the archive isn't a copy of Drupal core, which the
- * Update manager does not yet support. @see http://drupal.org/node/606592
+ * update manager does not yet support. See http://drupal.org/node/606592
  *
  * Then, we make sure that at least one module included in the archive file has
  * an .info file which claims that the code is compatible with the current
@@ -719,19 +739,19 @@ function update_verify_update_archive($project, $archive_file, $directory) {
  * cleared when we're populating it after successfully fetching new available
  * update data. Usage of the core cache API results in all sorts of potential
  * problems that would result in attempting to fetch available update data all
- * the time, including if a site has a "minimum cache lifetime" (which is both
- * a minimum and a maximum) defined, or if a site uses memcache or another
- * plug-able cache system that assumes volatile caches.
- *
- * Update module still uses the {cache_update} table, but instead of using
- * cache_set(), cache_get(), and cache_clear_all(), there are private helper
- * functions that implement these same basic tasks but ensure that the cache
- * is not prematurely cleared, and that the data is always stored in the
+ * the time, including if a site has a "minimum cache lifetime" (which is both a
+ * minimum and a maximum) defined, or if a site uses memcache or another
+ * pluggable cache system that assumes volatile caches.
+ *
+ * The Update Manager module still uses the {cache_update} table, but instead of
+ * using cache_set(), cache_get(), and cache_clear_all(), there are private
+ * helper functions that implement these same basic tasks but ensure that the
+ * cache is not prematurely cleared, and that the data is always stored in the
  * database, even if memcache or another cache backend is in use.
  */
 
 /**
- * Store data in the private update status cache table.
+ * Stores data in the private update status cache table.
  *
  * @param $cid
  *   The cache ID to save the data with.
@@ -743,6 +763,8 @@ function update_verify_update_archive($project, $archive_file, $directory) {
  *     by explicitly using _update_cache_clear().
  *   - A Unix timestamp: Indicates that the item should be kept at least until
  *     the given time, after which it will be invalidated.
+ *
+ * @see _update_cache_get()
  */
 function _update_cache_set($cid, $data, $expire) {
   $fields = array(
@@ -764,12 +786,15 @@ function _update_cache_set($cid, $data, $expire) {
 }
 
 /**
- * Retrieve data from the private update status cache table.
+ * Retrieves data from the private update status cache table.
  *
  * @param $cid
  *   The cache ID to retrieve.
+ *
  * @return
- *   The data for the given cache ID, or NULL if the ID was not found.
+ *   An array of data for the given cache ID, or NULL if the ID was not found.
+ *
+ * @see _update_cache_set()
  */
 function _update_cache_get($cid) {
   $cache = db_query("SELECT data, created, expire, serialized FROM {cache_update} WHERE cid = :cid", array(':cid' => $cid))->fetchObject();
@@ -782,7 +807,10 @@ function _update_cache_get($cid) {
 }
 
 /**
- * Return an array of cache items with a given cache ID prefix.
+ * Returns an array of cache items with a given cache ID prefix.
+ *
+ * @param string $cid_prefix
+ *   The cache ID prefix.
  *
  * @return
  *   Associative array of cache items, keyed by cache ID.
@@ -808,12 +836,12 @@ function _update_get_cache_multiple($cid_prefix) {
  * Invalidates cached data relating to update status.
  *
  * @param $cid
- *   Optional cache ID of the record to clear from the private update module
- *   cache. If empty, all records will be cleared from the table except
- *   fetch tasks.
+ *   (optional) Cache ID of the record to clear from the private update module
+ *   cache. If empty, all records will be cleared from the table except fetch
+ *   tasks. Defaults to NULL.
  * @param $wildcard
- *   If $wildcard is TRUE, cache IDs starting with $cid are deleted in
- *   addition to the exact cache ID specified by $cid.
+ *   (optional) If TRUE, cache IDs starting with $cid are deleted in addition to
+ *   the exact cache ID specified by $cid. Defaults to FALSE.
  */
 function _update_cache_clear($cid = NULL, $wildcard = FALSE) {
   if (empty($cid)) {
@@ -838,18 +866,18 @@ function _update_cache_clear($cid = NULL, $wildcard = FALSE) {
 /**
  * Implements hook_flush_caches().
  *
- * Called from update.php (among others) to flush the caches.
- * Since we're running update.php, we are likely to install a new version of
- * something, in which case, we want to check for available update data again.
- * However, because we have our own caching system, we need to directly clear
- * the database table ourselves at this point and return nothing, for example,
- * on sites that use memcache where cache_clear_all() won't know how to purge
- * this data.
+ * Called from update.php (among others) to flush the caches. Since we're
+ * running update.php, we are likely to install a new version of something, in
+ * which case, we want to check for available update data again. However,
+ * because we have our own caching system, we need to directly clear the
+ * database table ourselves at this point and return nothing, for example, on
+ * sites that use memcache where cache_clear_all() won't know how to purge this
+ * data.
  *
- * However, we only want to do this from update.php, since otherwise, we'd
- * lose all the available update data on every cron run. So, we specifically
- * check if the site is in MAINTENANCE_MODE == 'update' (which indicates
- * update.php is running, not update module... alas for overloaded names).
+ * However, we only want to do this from update.php, since otherwise, we'd lose
+ * all the available update data on every cron run. So, we specifically check if
+ * the site is in MAINTENANCE_MODE == 'update' (which indicates update.php is
+ * running, not update module... alas for overloaded names).
  */
 function update_flush_caches() {
   if (defined('MAINTENANCE_MODE') && MAINTENANCE_MODE == 'update') {
@@ -863,7 +891,7 @@ function update_flush_caches() {
  */
 
 /**
- * Return a short unique identifier for this Drupal installation.
+ * Returns a short unique identifier for this Drupal installation.
  *
  * @return
  *   An eight character string uniquely identifying this Drupal installation.
@@ -877,14 +905,15 @@ function _update_manager_unique_identifier() {
 }
 
 /**
- * Return the directory where update archive files should be extracted.
+ * Returns the directory where update archive files should be extracted.
  *
  * @param $create
- *   If TRUE, attempt to create the directory if it does not already exist.
+ *   (optional) Whether to attempt to create the directory if it does not
+ *   already exist. Defaults to TRUE.
  *
  * @return
- *   The full path to the temporary directory where update file archives
- *   should be extracted.
+ *   The full path to the temporary directory where update file archives should
+ *   be extracted.
  */
 function _update_manager_extract_directory($create = TRUE) {
   $directory = &drupal_static(__FUNCTION__, '');
@@ -898,14 +927,15 @@ function _update_manager_extract_directory($create = TRUE) {
 }
 
 /**
- * Return the directory where update archive files should be cached.
+ * Returns the directory where update archive files should be cached.
  *
  * @param $create
- *   If TRUE, attempt to create the directory if it does not already exist.
+ *   (optional) Whether to attempt to create the directory if it does not
+ *   already exist. Defaults to TRUE.
  *
  * @return
- *   The full path to the temporary directory where update file archives
- *   should be cached.
+ *   The full path to the temporary directory where update file archives should
+ *   be cached.
  */
 function _update_manager_cache_directory($create = TRUE) {
   $directory = &drupal_static(__FUNCTION__, '');
@@ -919,7 +949,7 @@ function _update_manager_cache_directory($create = TRUE) {
 }
 
 /**
- * Clear the temporary files and directories based on file age from disk.
+ * Clears the temporary files and directories based on file age from disk.
  */
 function update_clear_update_disk_cache() {
   // List of update module cache directories. Do not create the directories if
@@ -936,19 +966,19 @@ function update_clear_update_disk_cache() {
 }
 
 /**
- * Delete stale files and directories from the Update manager disk cache.
+ * Deletes stale files and directories from the update manager disk cache.
  *
- * Files and directories older than 6 hours and development snapshots older
- * than 5 minutes are considered stale. We only cache development snapshots
- * for 5 minutes since otherwise updated snapshots might not be downloaded as
+ * Files and directories older than 6 hours and development snapshots older than
+ * 5 minutes are considered stale. We only cache development snapshots for 5
+ * minutes since otherwise updated snapshots might not be downloaded as
  * expected.
  *
  * When checking file ages, we need to use the ctime, not the mtime
- * (modification time) since many (all?) tar implementations go out of their
- * way to set the mtime on the files they create to the timestamps recorded
- * in the tarball. We want to see the last time the file was changed on disk,
- * which is left alone by tar and correctly set to the time the archive file
- * was unpacked.
+ * (modification time) since many (all?) tar implementations go out of their way
+ * to set the mtime on the files they create to the timestamps recorded in the
+ * tarball. We want to see the last time the file was changed on disk, which is
+ * left alone by tar and correctly set to the time the archive file was
+ * unpacked.
  *
  * @param $path
  *   A string containing a file path or (streamwrapper) URI.
diff --git a/modules/update/update.report.inc b/modules/update/update.report.inc
index 3f5933a..f256575 100644
--- a/modules/update/update.report.inc
+++ b/modules/update/update.report.inc
@@ -6,7 +6,9 @@
  */
 
 /**
- * Menu callback. Generate a page about the update status of projects.
+ * Page callback: Generates a page about the update status of projects.
+ *
+ * @see update_menu()
  */
 function update_status() {
   if ($available = update_get_available(TRUE)) {
@@ -257,6 +259,7 @@ function theme_update_report($variables) {
  *   - status: The integer code for a project's current update status.
  *
  * @see update_calculate_project_data()
+ * @ingroup themeable
  */
 function theme_update_status_label($variables) {
   switch ($variables['status']) {
diff --git a/modules/update/update.settings.inc b/modules/update/update.settings.inc
index 60ac3ca..5cd2414 100644
--- a/modules/update/update.settings.inc
+++ b/modules/update/update.settings.inc
@@ -6,7 +6,11 @@
  */
 
 /**
- * Form builder for the update settings tab.
+ * Form constructor for the update settings form.
+ *
+ * @see update_settings_validate()
+ * @see update_settings_submit()
+ * @ingroup forms
  */
 function update_settings($form) {
   $form['update_check_frequency'] = array(
@@ -57,9 +61,11 @@ function update_settings($form) {
 }
 
 /**
- * Validation callback for the settings form.
+ * Form validation handler for update_settings().
+ *
+ * Validates the e-mail addresses and ensures the field is formatted correctly.
  *
- * Validates the email addresses and ensures the field is formatted correctly.
+ * @see update_settings_submit()
  */
 function update_settings_validate($form, &$form_state) {
   if (!empty($form_state['values']['update_notify_emails'])) {
@@ -89,13 +95,15 @@ function update_settings_validate($form, &$form_state) {
 }
 
 /**
- * Submit handler for the settings tab.
+ * Form submission handler for update_settings().
+ *
+ * Also invalidates the cache of available updates if the "Check for updates of
+ * disabled modules and themes" setting is being changed. The available updates
+ * report needs to refetch available update data after this setting changes or
+ * it would show misleading things (e.g., listing the disabled projects on the
+ * site with the "No available releases found" warning).
  *
- * Also invalidates the cache of available updates if the "Check for updates
- * of disabled modules and themes" setting is being changed. The available
- * updates report need to refetch available update data after this setting
- * changes or it would show misleading things (e.g. listing the disabled
- * projects on the site with the "No available releases found" warning).
+ * @see update_settings_validate()
  */
 function update_settings_submit($form, $form_state) {
   $op = $form_state['values']['op'];
diff --git a/modules/update/update.test b/modules/update/update.test
index 8daa821..e297194 100644
--- a/modules/update/update.test
+++ b/modules/update/update.test
@@ -2,38 +2,43 @@
 
 /**
  * @file
- * Tests for update.module.
+ * This file contains tests for the Update Manager module.
  *
- * This file contains tests for the update module. The overarching methodology
- * of these tests is we need to compare a given state of installed modules and
- * themes (e.g. version, project grouping, timestamps, etc) vs. a current
- * state of what the release history XML files we fetch say is available.  We
- * have dummy XML files (in the 'tests' subdirectory) that describe various
- * scenarios of what's available for different test projects, and we have
- * dummy .info file data (specified via hook_system_info_alter() in the
- * update_test helper module) describing what's currently installed.  Each
- * test case defines a set of projects to install, their current state (via
- * the 'update_test_system_info' variable) and the desired available update
- * data (via the 'update_test_xml_map' variable), and then performs a series
- * of assertions that the report matches our expectations given the specific
- * initial state and availability scenario.
+ * The overarching methodology of these tests is we need to compare a given
+ * state of installed modules and themes (e.g., version, project grouping,
+ * timestamps, etc) against a current state of what the release history XML
+ * files we fetch say is available. We have dummy XML files (in the
+ * modules/update/tests directory) that describe various scenarios of what's
+ * available for different test projects, and we have dummy .info file data
+ * (specified via hook_system_info_alter() in the update_test helper module)
+ * describing what's currently installed. Each test case defines a set of
+ * projects to install, their current state (via the 'update_test_system_info'
+ * variable) and the desired available update data (via the
+ * 'update_test_xml_map' variable), and then performs a series of assertions
+ * that the report matches our expectations given the specific initial state and
+ * availability scenario.
  */
 
 /**
- * Base class to define some shared functions used by all update tests.
+ * Defines some shared functions used by all update tests.
  */
 class UpdateTestHelper extends DrupalWebTestCase {
+
   /**
-   * Refresh the update status based on the desired available update scenario.
+   * Refreshes the update status based on the desired available update scenario.
    *
    * @param $xml_map
-   *   Array that maps project names to availability scenarios to fetch.
-   *   The key '#all' is used if a project-specific mapping is not defined.
+   *   Array that maps project names to availability scenarios to fetch. The key
+   *   '#all' is used if a project-specific mapping is not defined.
+   * @param $url
+   *   (optional) A string containing the URL to fetch update data from.
+   *   Defaults to 'update-test'.
    *
    * @see update_test_mock_page()
    */
   protected function refreshUpdateStatus($xml_map, $url = 'update-test') {
-    // Tell update module to fetch from the URL provided by update_test module.
+    // Tell the Update Manager module to fetch from the URL provided by
+    // update_test module.
     variable_set('update_fetch_url', url($url, array('absolute' => TRUE)));
     // Save the map for update_test_mock_page() to use.
     variable_set('update_test_xml_map', $xml_map);
@@ -42,7 +47,7 @@ class UpdateTestHelper extends DrupalWebTestCase {
   }
 
   /**
-   * Run a series of assertions that are applicable for all update statuses.
+   * Runs a series of assertions that are applicable to all update statuses.
    */
   protected function standardTests() {
     $this->assertRaw('<h3>' . t('Drupal core') . '</h3>');
@@ -52,12 +57,15 @@ class UpdateTestHelper extends DrupalWebTestCase {
 
 }
 
+/**
+ * Tests behavior related to discovering and listing updates to Drupal core.
+ */
 class UpdateCoreTestCase extends UpdateTestHelper {
 
   public static function getInfo() {
     return array(
       'name' => 'Update core functionality',
-      'description' => 'Tests the update module through a series of functional tests using mock XML data.',
+      'description' => 'Tests the Update Manager module through a series of functional tests using mock XML data.',
       'group' => 'Update',
     );
   }
@@ -69,7 +77,7 @@ class UpdateCoreTestCase extends UpdateTestHelper {
   }
 
   /**
-   * Tests the update module when no updates are available.
+   * Tests the Update Manager module when no updates are available.
    */
   function testNoUpdatesAvailable() {
     $this->setSystemInfo7_0();
@@ -81,7 +89,7 @@ class UpdateCoreTestCase extends UpdateTestHelper {
   }
 
   /**
-   * Tests the update module when one normal update ("7.1") is available.
+   * Tests the Update Manager module when one normal update is available.
    */
   function testNormalUpdateAvailable() {
     $this->setSystemInfo7_0();
@@ -96,7 +104,7 @@ class UpdateCoreTestCase extends UpdateTestHelper {
   }
 
   /**
-   * Tests the update module when a security update ("7.2") is available.
+   * Tests the Update Manager module when a security update is available.
    */
   function testSecurityUpdateAvailable() {
     $this->setSystemInfo7_0();
@@ -111,7 +119,7 @@ class UpdateCoreTestCase extends UpdateTestHelper {
   }
 
   /**
-   * Ensure proper results where there are date mismatches among modules.
+   * Ensures proper results where there are date mismatches among modules.
    */
   function testDatestampMismatch() {
     $system_info = array(
@@ -134,7 +142,7 @@ class UpdateCoreTestCase extends UpdateTestHelper {
   }
 
   /**
-   * Check that running cron updates the list of available updates.
+   * Checks that running cron updates the list of available updates.
    */
   function testModulePageRunCron() {
     $this->setSystemInfo7_0();
@@ -147,7 +155,7 @@ class UpdateCoreTestCase extends UpdateTestHelper {
   }
 
   /**
-   * Check the messages at admin/modules when the site is up to date.
+   * Checks the messages at admin/modules when the site is up to date.
    */
   function testModulePageUpToDate() {
     $this->setSystemInfo7_0();
@@ -164,7 +172,7 @@ class UpdateCoreTestCase extends UpdateTestHelper {
   }
 
   /**
-   * Check the messages at admin/modules when missing an update.
+   * Checks the messages at admin/modules when an update is missing.
    */
   function testModulePageRegularUpdate() {
     $this->setSystemInfo7_0();
@@ -181,7 +189,7 @@ class UpdateCoreTestCase extends UpdateTestHelper {
   }
 
   /**
-   * Check the messages at admin/modules when missing a security update.
+   * Checks the messages at admin/modules when a security update is missing.
    */
   function testModulePageSecurityUpdate() {
     $this->setSystemInfo7_0();
@@ -216,7 +224,7 @@ class UpdateCoreTestCase extends UpdateTestHelper {
   }
 
   /**
-   * Tests the update module when the update server returns 503 (Service unavailable) errors.
+   * Tests the Update Manager module when the update server returns 503 errors.
    */
   function testServiceUnavailable() {
     $this->refreshUpdateStatus(array(), '503-error');
@@ -252,6 +260,9 @@ class UpdateCoreTestCase extends UpdateTestHelper {
     $this->assertEqual($queue->numberOfItems(), 2, 'Queue contains two items');
   }
 
+  /**
+   * Sets the version to 7.0 when no project-specific mapping is defined.
+   */
   protected function setSystemInfo7_0() {
     $setting = array(
       '#all' => array(
@@ -263,12 +274,15 @@ class UpdateCoreTestCase extends UpdateTestHelper {
 
 }
 
+/**
+ * Tests behavior related to handling updates to contributed modules and themes.
+ */
 class UpdateTestContribCase extends UpdateTestHelper {
 
   public static function getInfo() {
     return array(
       'name' => 'Update contrib functionality',
-      'description' => 'Tests how the update module handles contributed modules and themes in a series of functional tests using mock XML data.',
+      'description' => 'Tests how the Update Manager module handles contributed modules and themes in a series of functional tests using mock XML data.',
       'group' => 'Update',
     );
   }
@@ -308,7 +322,7 @@ class UpdateTestContribCase extends UpdateTestHelper {
   }
 
   /**
-   * Test the basic functionality of a contrib module on the status report.
+   * Tests the basic functionality of a contrib module on the status report.
    */
   function testUpdateContribBasic() {
     $system_info = array(
@@ -336,17 +350,17 @@ class UpdateTestContribCase extends UpdateTestHelper {
   }
 
   /**
-   * Test that contrib projects are ordered by project name.
+   * Tests that contrib projects are ordered by project name.
    *
    * If a project contains multiple modules, we want to make sure that the
-   * available updates report is sorted by the parent project names, not by
-   * the names of the modules included in each project. In this test case, we
-   * have 2 contrib projects, "BBB Update test" and "CCC Update test".
-   * However, we have a module called "aaa_update_test" that's part of the
-   * "CCC Update test" project. We need to make sure that we see the "BBB"
-   * project before the "CCC" project, even though "CCC" includes a module
-   * that's processed first if you sort alphabetically by module name (which
-   * is the order we see things inside system_rebuild_module_data() for example).
+   * available updates report is sorted by the parent project names, not by the
+   * names of the modules included in each project. In this test case, we have
+   * two contrib projects, "BBB Update test" and "CCC Update test". However, we
+   * have a module called "aaa_update_test" that's part of the "CCC Update test"
+   * project. We need to make sure that we see the "BBB" project before the
+   * "CCC" project, even though "CCC" includes a module that's processed first
+   * if you sort alphabetically by module name (which is the order we see things
+   * inside system_rebuild_module_data() for example).
    */
   function testUpdateContribOrder() {
     // We want core to be version 7.0.
@@ -408,7 +422,7 @@ class UpdateTestContribCase extends UpdateTestHelper {
   }
 
   /**
-   * Test that subthemes are notified about security updates for base themes.
+   * Tests that subthemes are notified about security updates for base themes.
    */
   function testUpdateBaseThemeSecurityUpdate() {
     // Only enable the subtheme, not the base theme.
@@ -449,7 +463,7 @@ class UpdateTestContribCase extends UpdateTestHelper {
   }
 
   /**
-   * Test that disabled themes are only shown when desired.
+   * Tests that disabled themes are only shown when desired.
    */
   function testUpdateShowDisabledThemes() {
     // Make sure all the update_test_* themes are disabled.
@@ -510,7 +524,7 @@ class UpdateTestContribCase extends UpdateTestHelper {
   }
 
   /**
-   * Make sure that if we fetch from a broken URL, sane things happen.
+   * Makes sure that if we fetch from a broken URL, sane things happen.
    */
   function testUpdateBrokenFetchURL() {
     $system_info = array(
@@ -566,13 +580,12 @@ class UpdateTestContribCase extends UpdateTestHelper {
   }
 
   /**
-   * Check that hook_update_status_alter() works to change a status.
+   * Checks that hook_update_status_alter() works to change a status.
    *
    * We provide the same external data as if aaa_update_test 7.x-1.0 were
    * installed and that was the latest release. Then we use
    * hook_update_status_alter() to try to mark this as missing a security
-   * update, then assert if we see the appropriate warnings on the right
-   * pages.
+   * update, then assert if we see the appropriate warnings on the right pages.
    */
   function testHookUpdateStatusAlter() {
     variable_set('allow_authorize_operations', TRUE);
@@ -628,11 +641,15 @@ class UpdateTestContribCase extends UpdateTestHelper {
 
 }
 
+/**
+ * Tests project upload and extract functionality.
+ */
 class UpdateTestUploadCase extends UpdateTestHelper {
+
   public static function getInfo() {
     return array(
       'name' => 'Upload and extract module functionality',
-      'description' => 'Tests the update module\'s upload and extraction functionality.',
+      'description' => 'Tests the Update Manager module\'s upload and extraction functionality.',
       'group' => 'Update',
     );
   }
@@ -673,7 +690,7 @@ class UpdateTestUploadCase extends UpdateTestHelper {
   }
 
   /**
-   * Ensure that archiver extensions are properly merged in the UI.
+   * Ensures that archiver extensions are properly merged in the UI.
    */
   function testFileNameExtensionMerging() {
     $this->drupalGet('admin/modules/install');
@@ -684,7 +701,7 @@ class UpdateTestUploadCase extends UpdateTestHelper {
   }
 
   /**
-   * Check the messages on Update manager pages when missing a security update.
+   * Checks the messages on update manager pages when missing a security update.
    */
   function testUpdateManagerCoreSecurityUpdateMessages() {
     $setting = array(
@@ -725,6 +742,9 @@ class UpdateTestUploadCase extends UpdateTestHelper {
 
 }
 
+/**
+ * Tests update functionality unrelated to the database.
+ */
 class UpdateCoreUnitTestCase extends DrupalUnitTestCase {
 
   public static function getInfo() {
@@ -741,7 +761,7 @@ class UpdateCoreUnitTestCase extends DrupalUnitTestCase {
   }
 
   /**
-   * Tests _update_build_fetch_url according to issue 1481156
+   * Tests that _update_build_fetch_url() builds the URL correctly.
    */
   function testUpdateBuildFetchUrl() {
     //first test that we didn't break the trivial case
diff --git a/modules/user/tests/user_form_test.info b/modules/user/tests/user_form_test.info
index 0448264..8664da9 100644
--- a/modules/user/tests/user_form_test.info
+++ b/modules/user/tests/user_form_test.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/user/user.info b/modules/user/user.info
index d625e59..f8155c7 100644
--- a/modules/user/user.info
+++ b/modules/user/user.info
@@ -9,10 +9,10 @@ required = TRUE
 configure = admin/config/people
 stylesheets[all][] = user.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/modules/user/user.install b/modules/user/user.install
index e46f29d..217577d 100644
--- a/modules/user/user.install
+++ b/modules/user/user.install
@@ -831,6 +831,15 @@ function user_update_7015() {
 }
 
 /**
+ * @} End of "addtogroup updates-6.x-to-7.x".
+ */
+
+/**
+ * @addtogroup updates-7.x-extra
+ * @{
+ */
+
+/**
  * Update the database to match the schema.
  */
 function user_update_7016() {
@@ -891,15 +900,6 @@ function user_update_7017() {
 }
 
 /**
- * @} End of "addtogroup updates-6.x-to-7.x"
- */
-
-/**
- * @addtogroup updates-7.x-extra
- * @{
- */
-
-/**
  * Ensure there is an index on {users}.picture.
  */
 function user_update_7018() {
@@ -909,5 +909,5 @@ function user_update_7018() {
 }
 
 /**
- * @} End of "addtogroup updates-7.x-extra"
+ * @} End of "addtogroup updates-7.x-extra".
  */
diff --git a/modules/user/user.module b/modules/user/user.module
index 94ecaa2..47ac642 100644
--- a/modules/user/user.module
+++ b/modules/user/user.module
@@ -159,6 +159,10 @@ function user_entity_info() {
       'uri callback' => 'user_uri',
       'label callback' => 'format_username',
       'fieldable' => TRUE,
+      // $user->language is only the preferred user language for the user
+      // interface textual elements. As it is not necessarily related to the
+      // language assigned to fields, we do not define it as the entity language
+      // key.
       'entity keys' => array(
         'id' => 'uid',
       ),
@@ -819,7 +823,12 @@ function user_access($string, $account = NULL) {
 /**
  * Checks for usernames blocked by user administration.
  *
- * @return boolean TRUE for blocked users, FALSE for active.
+ * @param $name
+ *   A string containing a name of the user.
+ *
+ * @return
+ *   Object with property 'name' (the user name), if the user is blocked;
+ *   FALSE if the user is not blocked.
  */
 function user_is_blocked($name) {
   return db_select('users')
@@ -3707,7 +3716,8 @@ function user_register_form($form, &$form_state) {
 
   // Attach field widgets, and hide the ones where the 'user_register_form'
   // setting is not on.
-  field_attach_form('user', $form['#user'], $form, $form_state);
+  $langcode = entity_language('user', $form['#user']);
+  field_attach_form('user', $form['#user'], $form, $form_state, $langcode);
   foreach (field_info_instances('user', 'user') as $field_name => $instance) {
     if (empty($instance['settings']['user_register_form'])) {
       $form[$field_name]['#access'] = FALSE;
diff --git a/modules/user/user.pages.inc b/modules/user/user.pages.inc
index 25f4528..c4b68b9 100644
--- a/modules/user/user.pages.inc
+++ b/modules/user/user.pages.inc
@@ -113,8 +113,9 @@ function user_pass_reset($form, &$form_state, $uid, $timestamp, $hashed_pass, $a
     drupal_goto();
   }
   else {
-    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
-    $timeout = 86400;
+    // Time out, in seconds, until login URL expires. Defaults to 24 hours =
+    // 86400 seconds.
+    $timeout = variable_get('user_password_reset_timeout', 86400);
     $current = REQUEST_TIME;
     // Some redundant checks for extra security ?
     $users = user_load_multiple(array($uid), array('status' => '1'));
@@ -262,7 +263,8 @@ function user_profile_form($form, &$form_state, $account, $category = 'account')
   if ($category == 'account') {
     user_account_form($form, $form_state);
     // Attach field widgets.
-    field_attach_form('user', $account, $form, $form_state);
+    $langcode = entity_language('user', $account);
+    field_attach_form('user', $account, $form, $form_state, $langcode);
   }
 
   $form['actions'] = array('#type' => 'actions');
diff --git a/modules/user/user.test b/modules/user/user.test
index 2efe5b0..b53db07 100644
--- a/modules/user/user.test
+++ b/modules/user/user.test
@@ -452,6 +452,58 @@ class UserLoginTestCase extends DrupalWebTestCase {
 }
 
 /**
+ * Tests resetting a user password.
+ */
+class UserPasswordResetTestCase extends DrupalWebTestCase {
+  protected $profile = 'standard';
+
+  public static function getInfo() {
+    return array(
+      'name' => 'Reset password',
+      'description' => 'Ensure that password reset methods work as expected.',
+      'group' => 'User',
+    );
+  }
+
+  /**
+   * Tests password reset functionality.
+   */
+  function testUserPasswordReset() {
+    // Create a user.
+    $account = $this->drupalCreateUser();
+    $this->drupalLogin($account);
+    $this->drupalLogout();
+    // Attempt to reset password.
+    $edit = array('name' => $account->name);
+    $this->drupalPost('user/password', $edit, t('E-mail new password'));
+    // Confirm the password reset.
+    $this->assertText(t('Further instructions have been sent to your e-mail address.'), 'Password reset instructions mailed message displayed.');
+  }
+
+  /**
+   * Attempts login using an expired password reset link.
+   */
+  function testUserPasswordResetExpired() {
+    // Set password reset timeout variable to 43200 seconds = 12 hours.
+    $timeout = 43200;
+    variable_set('user_password_reset_timeout', $timeout);
+
+    // Create a user.
+    $account = $this->drupalCreateUser();
+    $this->drupalLogin($account);
+    // Load real user object.
+    $account = user_load($account->uid, TRUE);
+    $this->drupalLogout();
+
+    // To attempt an expired password reset, create a password reset link as if
+    // its request time was 60 seconds older than the allowed limit of timeout.
+    $bogus_timestamp = REQUEST_TIME - variable_get('user_password_reset_timeout', 86400) - 60;
+    $this->drupalGet("user/reset/$account->uid/$bogus_timestamp/" . user_pass_rehash($account->pass, $bogus_timestamp, $account->login));
+    $this->assertText(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'), 'Expired password reset request rejected.');
+  }
+}
+
+/**
  * Test cancelling a user.
  */
 class UserCancelTestCase extends DrupalWebTestCase {
@@ -2119,9 +2171,13 @@ class UserRolesAssignmentTestCase extends DrupalWebTestCase {
   /**
    * Check role on user object.
    *
-   * @param object $account User.
-   * @param integer $rid Role id.
-   * @param bool $is_assigned True if the role should present on the account.
+   * @param object $account
+   *   The user account to check.
+   * @param string $rid
+   *   The role ID to search for.
+   * @param bool $is_assigned
+   *   (optional) Whether to assert that $rid exists (TRUE) or not (FALSE).
+   *   Defaults to TRUE.
    */
   private function userLoadAndCheckRoleAssigned($account, $rid, $is_assigned = TRUE) {
     $account = user_load($account->uid, TRUE);
diff --git a/profiles/acquia/acquia.info b/profiles/acquia/acquia.info
index ef54113..aedef06 100644
--- a/profiles/acquia/acquia.info
+++ b/profiles/acquia/acquia.info
@@ -1,4 +1,5 @@
 name = Acquia Drupal
+distribution_name = Acquia Drupal
 description = Acquia enchanced Drupal.
 core = 7.x
 
@@ -43,4 +44,4 @@ files[] = acquia.profile
 ; Information added by Acquia.com packaging script
 acquia = "1"
 
-version = 7.x-1.14
+version = 7.x-1.15
diff --git a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.info b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.info
index 20d0815..d4ecc15 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.info
+++ b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.info
@@ -10,11 +10,11 @@ files[] = acquia_agent_drupal_version.inc
 files[] = acquia_agent_streams.inc
 php = 5.2
 
-; Information added by drupal.org packaging script on 2012-05-01
-version = "7.x-2.3"
+; Information added by drupal.org packaging script on 2012-08-10
+version = "7.x-2.7"
 core = "7.x"
 project = "acquia_connector"
-datestamp = "1335901549"
+datestamp = "1344609377"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.install b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.install
index c115f67..28f075b 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.install
+++ b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.install
@@ -29,6 +29,10 @@ function acquia_agent_uninstall() {
   variable_del('acquia_subscription_name');
   variable_del('acquia_agent_cloud_migration');
   variable_del('acquia_agent_debug');
+  variable_del('acquia_agent_verify_peer');
+  variable_del('acquia_dynamic_banner');
+  variable_del('acquia_migrate_files');
+  variable_del('acquia_banner_service');
 }
 
 /**
diff --git a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.migrate.inc b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.migrate.inc
index 9e5451f..52b051b 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.migrate.inc
+++ b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.migrate.inc
@@ -83,6 +83,7 @@ function acquia_migrate_prepare($environment) {
       'nonce' => $environment['nonce'],
     ),
     'env' => $environment,
+    'no_data_tables' => array(),
   );
 
   // Set up local storage of archive.
@@ -95,7 +96,7 @@ function acquia_migrate_prepare($environment) {
  * Ensure this response can work through migration.
  */
 function _acquia_migrate_process_setup() {
-  if (defined('PHP_OS') && in_array(PHP_OS, array('WINNT', 'WIN32', 'Windows'))) {
+  if (!defined('OS_WINDOWS') && defined('PHP_OS') && in_array(PHP_OS, array('WINNT', 'WIN32', 'Windows'))) {
     // OS_WINDOWS constant used by Archive_Tar.
     define('OS_WINDOWS', TRUE);
   }
@@ -271,7 +272,7 @@ function acquia_migrate_batch_finished($success, $results, $operations) {
     _acquia_migrate_cleanup($migration);
   }
   else {
-    watchdog('acquia-migrate', 'Migration error @m', array('@m' => print_r($migration, TRUE)), WATCHDOG_ERROR);
+    watchdog('acquia-migrate', 'Migration error @m', array('@m' => var_export($migration, TRUE)), WATCHDOG_ERROR);
     $message = t('There was an error during migration.');
     if ($migration && is_string($migration['error'])) {
       $message .= ' ' . $migration['error'];
@@ -299,6 +300,11 @@ function _acquia_migrate_archive_site(&$migration) {
   $files = acquia_migrate_files_to_backup(DRUPAL_ROOT, $exclude);
 
   if (!empty($files) && isset($migration['file'])) {
+    _acquia_migrate_validate_archive_files($migration, $files);
+    if ($migration['error'] != FALSE) {
+      return;
+    }
+
     $dest_file = $migration['file'] . '.tar';
     if (!empty($migration['compression_ext'])) {
       $dest_file .= '.' . $migration['compression_ext'];
@@ -306,9 +312,16 @@ function _acquia_migrate_archive_site(&$migration) {
     $gz = new Archive_Tar($dest_file, $migration['compression_ext'] ? $migration['compression_ext'] : NULL);
     if (!empty($migration['db_file'])) {
       // Add db file.
-      $ret = $gz->addModify(array($migration['db_file']), '', $migration['dir'] . '/'); // Purposefully use forward slash.
+      $ret = $gz->addModify(array($migration['db_file']), '', $migration['dir'] . DIRECTORY_SEPARATOR);
+    }
+    // Remove Drupal root from the file paths, OS dependent.
+    if (defined('OS_WINDOWS')) {
+      $remove_dir = DRUPAL_ROOT . '\\';
+    }
+    else {
+      $remove_dir = DRUPAL_ROOT . '/';
     }
-    $ret = $gz->addModify($files, '', DRUPAL_ROOT . '/'); // Purposefully use forward slash.
+    $ret = $gz->addModify($files, '', $remove_dir);
     $migration['tar_file'] = $dest_file;
   }
   else {
@@ -316,6 +329,53 @@ function _acquia_migrate_archive_site(&$migration) {
   }
 }
 
+/**
+ * Run Acquia's site-uploader.php validation checks.
+ */
+function _acquia_migrate_validate_archive_files(&$migration, $files) {
+  $output = implode("\n", $files);
+  if (defined('OS_WINDOWS')) {
+    $output = str_replace('\\', '/', $output);
+  }
+  $docroot = preg_quote(DRUPAL_ROOT . '/');
+
+  // Count the number of sites dirs with settings.php files and files
+  // directories.
+  $count_settingsphp = preg_match_all('@^' . $docroot . 'sites/[^/\n]+/settings.php$@m', $output, $settings_phps);
+  $count_filesdirs = preg_match_all('@^' . $docroot . 'sites/[^/\n]+/files/$@m', $output, $filesdirs);
+
+  // Count the number of sql dumps in the root, plus in the docroot but
+  // only if the docroot is a sub-dir (not empty or ./). Record all SQL
+  // dumps into $sqls[0].
+  $count_sqls = preg_match_all('@^' . $docroot . '[^/\n.][^/\n]*\.sql$@m', $output, $sqls);
+  if (strlen($docroot) > 2) {
+    $count_sqls += preg_match_all('@^(?:\./)?[^/\n.][^/\n]*\.sql$@m', $output, $docroot_sqls);
+    $sqls[0] = array_merge($sqls[0], $docroot_sqls[0]);
+  }
+  // Allow simpletest SQL files.
+  if (!empty($sqls[0])) {
+    foreach ($sqls[0] as $key => $sql_file) {
+      if (strpos($sql_file, 'simpletest') !== FALSE) {
+        $count_sqls--;
+        unset($sqls[0][$key]);
+      }
+    }
+  }
+
+  if (!in_array(DRUPAL_ROOT . DIRECTORY_SEPARATOR . 'index.php', $files)) {
+    $migration['error'] = "The archive file will not be in the correct format: no index.php found in root or top-level directory.";
+  }
+  elseif ($count_settingsphp > 1) {
+    $migration['error'] = "The archive file will not be in the correct format: it must have at most one sites directory containing settings.php, but the install has $count_settingsphp: " . implode(', ', $settings_phps[0]) . ". Remove unnecessary settings.php files and try again.";
+  }
+  elseif ($count_settingsphp == 0 && $count_filesdirs > 1) {
+    $migration['error'] = "The archive file will not be in the correct format: no settings.php file and the install has more than one sites directory containing a files directory. Remove unnecessary files directories or consolidate and try again.";
+  }
+  elseif ($count_sqls > 0) {
+    $migration['error'] = "The archive file will not be in the correct format: it contains $count_sqls extra SQL files: " . implode(', ', $sqls[0]) . ". Remove extra .sql files and try again.";
+  }
+}
+
 function _acquia_migrate_transmit_chunk(&$migration, $position, $length) {
   // Open file in binary mode.
   $handle = fopen($migration['tar_file'], 'rb');
@@ -370,8 +430,14 @@ function _acquia_migrate_transmit(&$migration, $content) {
   if ($return->code == 200) {
     $output = drupal_json_decode($return->data);
 
-    if (!empty($output['err'])) {
+    if (!is_array($output)) {
+      $migration['error'] = t('Error occurred, please try again or consult the logs.');
+      $migration['error_data'] = $return->data;
+      return FALSE;
+    }
+    elseif (!empty($output['err'])) {
       $migration['error'] = $output['err'];
+      $migration['error_data'] = $return->data;
       return FALSE;
     }
     else {
@@ -387,6 +453,7 @@ function _acquia_migrate_transmit(&$migration, $content) {
       // Check if response is correct, if not stop migration.
       if ($signature != $response_signature) {
         $migration['error'] = t('Signature from server is wrong');
+        $migration['error_data'] = $return->data;
         return FALSE;
       }
     }
@@ -398,6 +465,7 @@ function _acquia_migrate_transmit(&$migration, $content) {
     parse_str($parsed['query'], $query);
     if (!empty($query['err'])) {
       $migration['error'] = $query['err'];
+      $migration['error_data'] = $return->data;
       return FALSE;
     }
     else {
@@ -419,12 +487,14 @@ function _acquia_migrate_transmit(&$migration, $content) {
       }
       else {
         $migration['error'] = t('Signature from server is wrong');
+        $migration['error_data'] = $return->data;
         return FALSE;
       }
     }
   }
   else {
     $migration['error'] = t('Transfer error');
+    $migration['error_data'] = $return->data;
     return FALSE;
   }
 }
@@ -525,17 +595,17 @@ function _acquia_migrate_backup_db_to_file_mysql(&$migration) {
   $handle = fopen($file, 'w');
   $lines = 0;
   $exclude = array();
-  $nodata = array();
+  $nodata = $migration['no_data_tables'];
   if ($handle) {
     $data = _acquia_migrate_get_sql_file_header_mysql();
     fwrite($handle, $data);
     $alltables = _acquia_migrate_get_tables_mysql();
     foreach ($alltables as $table) {
-      if ($table->name && !isset($exclude[$table->name])) {
+      if ($table['name'] && !isset($exclude[$table['name']])) {
         $data = _acquia_migrate_get_table_structure_sql_mysql($table);
         fwrite($handle, $data);
         $lines++;
-        if (!in_array($table->name, $nodata)) {
+        if (!in_array($table['name'], $nodata)) {
           $lines += _acquia_migrate_dump_table_data_sql_to_file($handle, $table);
         }
       }
@@ -558,13 +628,16 @@ function _acquia_migrate_backup_db_to_file_mysql(&$migration) {
  */
 function _acquia_migrate_get_table_structure_sql_mysql($table) {
   $out = "";
-
-  $result = db_query("SHOW CREATE TABLE `" . $table->name . "`");
-  if ($record = $result->fetchAssoc()) {
-    $out .= "DROP TABLE IF EXISTS `" . $table->name . "`;\n";
-    $out .= strtr($record['create table'], array("\n" => " ", '"' => '`'));
-    if ($table->auto_increment) {
-      $out .= " AUTO_INCREMENT=" . $table->auto_increment;
+  $result = db_query("SHOW CREATE TABLE `". $table['name'] ."`", array(), array('fetch' => PDO::FETCH_ASSOC));
+  foreach ($result as $create) {
+    // Lowercase the keys because between Drupal 7.12 and 7.13/14 the default query behavior was changed.
+    // See: http://drupal.org/node/1171866
+    $create = array_change_key_case($create);
+    $out .= "DROP TABLE IF EXISTS `". $table['name'] ."`;\n";
+    // Remove newlines and convert " to ` because PDO seems to convert those for some reason.
+    $out .= strtr($create['create table'], array("\n" => ' ', '"' => '`'));
+    if ($table['auto_increment']) {
+      $out .= " AUTO_INCREMENT=". $table['auto_increment'];
     }
     $out .= ";\n";
   }
@@ -576,14 +649,17 @@ function _acquia_migrate_get_table_structure_sql_mysql($table) {
  */
 function _acquia_migrate_dump_table_data_sql_to_file($handle, $table) {
   $lines = 0;
-  $result = db_query("SELECT * FROM `" . $table->name . "`");
-  while ($row = $result->fetchAssoc()) {
+  // Escape backslashes, PHP code, special chars
+  $search = array('\\', "'", "\x00", "\x0a", "\x0d", "\x1a");
+  $replace = array('\\\\', "''", '\0', '\n', '\r', '\Z');
+  $result = db_query("SELECT * FROM `" . $table['name'] . "`", array(), array('fetch' => PDO::FETCH_ASSOC));
+  foreach ($result as $row) {
     $items = array();
     foreach ($row as $key => $value) {
-      $items[] = is_null($value) ? "null" : "'" . mysql_escape_string($value) . "'";
+      $items[] = is_null($value) ? "null" : "'" . str_replace($search, $replace, $value) . "'";
     }
     if ($items) {
-      $data = "INSERT INTO `" . $table->name . "` VALUES (" . implode(",", $items) . ");\n";
+      $data = "INSERT INTO `" . $table['name'] . "` VALUES (" . implode(",", $items) . ");\n";
       fwrite($handle, $data);
       $lines++;
     }
@@ -592,6 +668,19 @@ function _acquia_migrate_dump_table_data_sql_to_file($handle, $table) {
 }
 
 /**
+ * Get a list of tables in the db.
+ */
+function _acquia_migrate_get_tables_mysql() {
+  $out = array();
+  $tables = db_query("SHOW TABLE STATUS", array(), array('fetch' => PDO::FETCH_ASSOC));
+  foreach ($tables as $table) {
+    $table = array_change_key_case($table);
+    $out[$table['name']] = $table;
+  }
+  return $out;
+}
+
+/**
  * The header for the top of the sql dump file. These commands set the connection
  *  character encoding to help prevent encoding conversion issues.
  */
@@ -624,30 +713,6 @@ function _acquia_migrate_get_sql_file_footer_mysql() {
 }
 
 /**
- * Get a list of tables in the db.
- */
-function _acquia_migrate_get_tables_mysql() {
-  $out = array();
-  // get auto_increment values and names of all tables
-  $tables = db_query("show table status");
-  foreach ($tables as $table) {
-    $out[$table->name] = $table;
-  }
-  return $out;
-}
-
-/**
- * Get the list of table names.
- */
-function _acquia_migrate_get_table_names_mysql() {
-  $out = array();
-  foreach (_acquia_migrate_get_tables_mysql() as $key => $table) {
-    $out[$key] = $table->name;
-  }
-  return $out;
-}
-
-/**
  * Create multipart boundary
  * 
  * @return
diff --git a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.module b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.module
index c12aa1b..34c786d 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.module
+++ b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.module
@@ -151,49 +151,79 @@ function acquia_agent_theme() {
 function acquia_agent_check_subscription($params = array()) {
   // Default return value is FALSE.
   $subscription = FALSE;
+  $response_error = FALSE;
+  $active = FALSE;
   if (!acquia_agent_has_credentials()) {
     // If there is not an identifier or key, delete any old subscription data.
     variable_del('acquia_subscription_data');
   }
   else {
-    // There is an identifier and key, so attempt communication.
-    $subscription = array();
-    // Include version number information.
-    acquia_agent_load_versions();
-    if (IS_ACQUIA_DRUPAL) {
-      $params['version']  = ACQUIA_DRUPAL_VERSION;
-      $params['series']   = ACQUIA_DRUPAL_SERIES;
-      $params['branch']   = ACQUIA_DRUPAL_BRANCH;
-      $params['revision'] = ACQUIA_DRUPAL_REVISION;
-    }
-    // Include Acquia Search module version number.
-    if (module_exists('acquia_search')) {
-      foreach (array('acquia_search', 'apachesolr') as $name) {
-        $info = system_get_info('module', $name);
-        // Send the version, or at least the core compatibility as a fallback.
-        $params['search_version'][$name] = isset($info['version']) ? (string)$info['version'] : (string)$info['core'];
-      }
-    }
-    $data = acquia_agent_call('acquia.agent.subscription', $params);
-    $subscription['timestamp'] = REQUEST_TIME;
-    if ($errno = xmlrpc_errno()) {
-      switch ($errno) {
+    // Get our subscription data
+    $subscription = acquia_agent_get_subscription($params);
+    if (is_int($subscription)) {
+      switch($subscription) {
         case SUBSCRIPTION_NOT_FOUND:
         case SUBSCRIPTION_EXPIRED:
           variable_del('acquia_subscription_data');
           break;
       }
     }
-    elseif (acquia_agent_valid_response($data)) {
-      $subscription += $data['result']['body'];
-      variable_set('acquia_subscription_data', $subscription);
+    // Everything checked out fine
+    variable_set('acquia_subscription_data', $subscription);
+    // Check if our main subscription is active
+    if ($subscription) {
+      $active = acquia_agent_subscription_is_active();
     }
-    else {
-      watchdog('acquia agent', 'HMAC validation error: <pre>@data</pre>', array('@data' => print_r($data, TRUE)), WATCHDOG_ERROR);
+  }
+  module_invoke_all('acquia_subscription_status', $active);
+  return $subscription;
+}
+
+/**
+ * Get subscription status from the Acquia Network
+ *
+ * This check also sends a heartbeat to the Acquia Network unless
+ * $params['no_heartbeat'] == 1.
+ */
+function acquia_agent_get_subscription($params = array(), $identifier = NULL, $key = NULL, $acquia_network_address = NULL) {
+  // Default return value is FALSE.
+  $response_error = FALSE;
+  // There is an identifier and key, so attempt communication.
+  $subscription = array();
+  $subscription['timestamp'] = REQUEST_TIME;
+
+  // Include version number information.
+  acquia_agent_load_versions();
+  if (IS_ACQUIA_DRUPAL) {
+    $params['version']  = ACQUIA_DRUPAL_VERSION;
+    $params['series']   = ACQUIA_DRUPAL_SERIES;
+    $params['branch']   = ACQUIA_DRUPAL_BRANCH;
+    $params['revision'] = ACQUIA_DRUPAL_REVISION;
+  }
+  // Include Acquia Search module version number.
+  if (module_exists('acquia_search')) {
+    foreach (array('acquia_search', 'apachesolr') as $name) {
+      $info = system_get_info('module', $name);
+      // Send the version, or at least the core compatibility as a fallback.
+      $params['search_version'][$name] = isset($info['version']) ? (string)$info['version'] : (string)$info['core'];
     }
   }
 
-  module_invoke_all('acquia_subscription_status', acquia_agent_subscription_is_active());
+  // Retrieve our subscription details
+  $data = acquia_agent_call('acquia.agent.subscription', $params, $identifier, $key, $acquia_network_address);
+
+  // Check for errors
+  if ($errno = xmlrpc_errno()) {
+    return $errno;
+  }
+  elseif (acquia_agent_valid_response($data, $key)) {
+    // Add the response to our subscription array
+    $subscription += $data['result']['body'];
+  }
+  else {
+    watchdog('acquia agent', 'HMAC validation error: <pre>@data</pre>', array('@data' => var_export($data, TRUE)), WATCHDOG_ERROR);
+    return FALSE;
+  }
 
   return $subscription;
 }
@@ -247,7 +277,7 @@ function acquia_agent_update_status_alter(&$projects) {
       unset($projects[$project]['extra']);
     }
     elseif ($project_info['datestamp'] == 'acquia drupal') {
-      $projects['drupal']['includes'][$project] = $project_info['title'];
+      $projects['drupal']['includes'][$project] = !empty($project_info['title']) ? $project_info['title'] : '';
       unset($projects[$project]);
     }
   }
@@ -526,7 +556,7 @@ function acquia_agent_subscription_is_active() {
     $subscription = acquia_agent_settings('acquia_subscription_data');
     // Make sure we have data at least once per day.
     if (isset($subscription['timestamp']) && (time() - $subscription['timestamp'] > 60*60*24)) {
-      $subscription = acquia_agent_check_subscription(array('no_heartbeat' => 1));
+      $subscription = acquia_agent_get_subscription(array('no_heartbeat' => 1));
     }
     $active = !empty($subscription['active']);
   }
@@ -611,13 +641,15 @@ function acquia_agent_stream_context_create($url, $module = 'acquia_agent') {
  * @return
  *   TRUE or FALSE.
  */
-function acquia_agent_valid_response($data) {
+function acquia_agent_valid_response($data, $key = NULL) {
   $authenticator = $data['authenticator'];
   $result = $data['result'];
   $result_auth = $result['authenticator'];
   $valid = ($authenticator['nonce'] == $result_auth['nonce']);
   $valid = $valid && ($authenticator['time'] < $result_auth['time']);
-  $key = acquia_agent_settings('acquia_key');
+  if (empty($key)) {
+    $key = acquia_agent_settings('acquia_key');
+  }
   $hash = _acquia_agent_hmac($key, $result_auth['time'], $result_auth['nonce'], $result['body']);
   return $valid && ($hash == $result_auth['hash']);
 }
@@ -640,7 +672,7 @@ function _acquia_agent_request($url, $method, $data) {
   if ($errno = xmlrpc_errno()) {
     $acquia_debug = variable_get('acquia_agent_debug', FALSE);
     if ($acquia_debug) {
-      watchdog('acquia agent', '@message (@errno): %server - %method - <pre>@data</pre>', array('@message' => xmlrpc_error_msg(), '@errno' => xmlrpc_errno(), '%server' => $url, '%method' => $method, '@data' => print_r($data, TRUE)), WATCHDOG_ERROR);
+      watchdog('acquia agent', '@message (@errno): %server - %method - <pre>@data</pre>', array('@message' => xmlrpc_error_msg(), '@errno' => xmlrpc_errno(), '%server' => $url, '%method' => $method, '@data' => var_export($data, TRUE)), WATCHDOG_ERROR);
     }
     else {
       watchdog('acquia agent', '@message (@errno): %server - %method', array('@message' => xmlrpc_error_msg(), '@errno' => xmlrpc_errno(), '%server' => $url, '%method' => $method), WATCHDOG_ERROR);
diff --git a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.pages.inc b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.pages.inc
index 34f4d05..1814fda 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.pages.inc
+++ b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent.pages.inc
@@ -122,6 +122,12 @@ function acquia_agent_migrate_form($form, &$form_state) {
       '#description' => t('Include files directory and all files in migration. If you are experiencing migration errors it is recommended you do not send the files directory.'),
       '#default_value' => variable_get('acquia_migrate_files', 1),
     );
+    $form['reduce_db_size'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Reduce database export size'),
+      '#description' => t('Reduce the database export size by excluding the data from cache, session, and watchdog tables. If you are experiencing migration errors this is recommended. Table structure will still be exported.'),
+      '#default_value' => 0,
+    );
   }
 
   $form['actions'] = array('#type' => 'actions');
@@ -537,7 +543,7 @@ function acquia_agent_settings_form($form, &$form_state, $banner) {
   $form['migrate'] = array(
     '#type' => 'fieldset',
     '#title' => t('Acquia Cloud Migrate'),
-    '#description' => t('Migrate your site to Acquia Cloud hosting service.'),
+    '#description' => t('Transfer a fully-functional copy of your site to Acquia Cloud. <a href="!url">Read more</a>', array('!url' => url('https://docs.acquia.com/cloud/site/import/connector'))),
     '#collapsible' => TRUE,
     '#collapsed' => $collapsed,
   );
@@ -602,6 +608,7 @@ function acquia_agent_migrate_form_submit($form, &$form_state) {
 
   $migrate_files = !empty($form_state['values']['migrate_files']) ? $form_state['values']['migrate_files'] : 1;
   variable_set('acquia_migrate_files', $migrate_files);
+  $reduce_db_size = !empty($form_state['values']['reduce_db_size']) ? $form_state['values']['reduce_db_size'] : 0;
   if (count($form_state['values']['envs']) > 1) {
     // Use selected environment.
     $env = $form_state['values']['envs'][$form_state['values']['environment']];
@@ -615,6 +622,9 @@ function acquia_agent_migrate_form_submit($form, &$form_state) {
   // Prepare for migration.
   $migration = acquia_migrate_prepare($env);
   $migration['site_name'] = $site_name;
+  if ($reduce_db_size) {
+    $migration['no_data_tables'] = array('cache', 'cache_menu', 'cache_page', 'cache_field', 'sessions', 'watchdog');
+  }
 
   if (isset($migration['error']) && $migration['error'] !== FALSE) {
     drupal_set_message(t('Unable to begin migration. @error', array('@error' => $migration['error'])), 'error');
diff --git a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent_drupal_version.inc b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent_drupal_version.inc
index cc3706b..6ec6d8a 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent_drupal_version.inc
+++ b/profiles/acquia/modules/acquia_connector/acquia_agent/acquia_agent_drupal_version.inc
@@ -17,7 +17,7 @@ define('IS_ACQUIA_DRUPAL', TRUE);
 /**
  * Acquia Drupal version information (only used if IS_ACQUIA_DRUPAL).
  */
-define('ACQUIA_DRUPAL_VERSION' , '7.14.14 (Drupal 7.14 core)');
+define('ACQUIA_DRUPAL_VERSION' , '7.15.15 (Drupal 7.15 core)');
 define('ACQUIA_DRUPAL_SERIES'  , '7.0');
 define('ACQUIA_DRUPAL_BRANCH'  , '7.x');
-define('ACQUIA_DRUPAL_REVISION', '5808');
+define('ACQUIA_DRUPAL_REVISION', '5850');
diff --git a/profiles/acquia/modules/acquia_connector/acquia_search/Acquia_Search_Service.php b/profiles/acquia/modules/acquia_connector/acquia_search/Acquia_Search_Service.php
index 60fc7d5..31d4321 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_search/Acquia_Search_Service.php
+++ b/profiles/acquia/modules/acquia_connector/acquia_search/Acquia_Search_Service.php
@@ -35,10 +35,10 @@ class AcquiaSearchService extends DrupalApacheSolrService {
     }
     $url .= 'request_id=' . $id;
     if ($use_data && isset($options['data'])) {
-      list($cookie, $nonce) = acquia_search_auth_cookie($url, $options['data']);
+      list($cookie, $nonce) = acquia_search_auth_cookie($url, $options['data'], NULL, $this->env_id);
     }
     else {
-      list($cookie, $nonce) = acquia_search_auth_cookie($url);
+      list($cookie, $nonce) = acquia_search_auth_cookie($url, NULL, NULL, $this->env_id);
     }
     if (empty($cookie)) {
       throw new Exception('Invalid authentication string - subscription keys expired or missing.');
@@ -60,7 +60,7 @@ class AcquiaSearchService extends DrupalApacheSolrService {
    */
   protected function authenticateResponse($response, $nonce, $url) {
     $hmac = acquia_search_extract_hmac($response->headers);
-    if (!acquia_search_valid_response($hmac, $nonce, $response->data)) {
+    if (!acquia_search_valid_response($hmac, $nonce, $response->data, NULL, $this->env_id)) {
       throw new Exception('Authentication of search content failed url: '. $url);
     }
     return $response;
diff --git a/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.info b/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.info
index fd3a4d9..29d006b 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.info
+++ b/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.info
@@ -8,17 +8,15 @@ dependencies[] = apachesolr
 dependencies[] = apachesolr_search
 dependencies[] = search
 
-files[] = acquia_search.install
-files[] = acquia_search.module
 files[] = Acquia_Search_Service.php
 
 
 
-; Information added by drupal.org packaging script on 2012-05-01
-version = "7.x-2.3"
+; Information added by drupal.org packaging script on 2012-08-10
+version = "7.x-2.7"
 core = "7.x"
 project = "acquia_connector"
-datestamp = "1335901549"
+datestamp = "1344609377"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.install b/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.install
index c53061e..1d899bc 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.install
+++ b/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.install
@@ -131,7 +131,8 @@ function _acquia_search_get_default_facets() {
  * Implementation of hook_uninstall().
  */
 function acquia_search_uninstall() {
-  variable_del('acquia_search_url');
+  variable_del('acquia_search_path');
+  variable_del('acquia_search_base_url');
 }
 
 /**
@@ -142,3 +143,25 @@ function acquia_search_update_7000() {
   variable_del('acquia_search_port');
   variable_del('acquia_search_path');
 }
+
+/**
+ * Removing acquia_search_url variable as it has been split up
+ * to acquia_search_base_url and acquia_search_path
+ */
+function acquia_search_update_7001() {
+  variable_del('acquia_search_url');
+}
+
+/**
+ * Remove apachesolr_service_class if it was set to AcquiaSearchService.
+ *
+ * This can be left set incorrectly when upgrading from Drupal 6 to Drupal 7.
+ */
+function acquia_search_update_7002() {
+  // No need to set apachesolr_service_class for Acquia, since each
+  // environment can have a separate class.
+  $class = variable_get('apachesolr_service_class', '');
+  if ($class && strpos($class, 'Acquia') === 0) {
+    variable_del('apachesolr_service_class');
+  }
+}
diff --git a/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.module b/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.module
index 8ce3ace..a64d5b3 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.module
+++ b/profiles/acquia/modules/acquia_connector/acquia_search/acquia_search.module
@@ -10,14 +10,44 @@ define('ACQUIA_SEARCH_ENVIRONMENT_ID', 'acquia_search_server_1');
 /**
  * Predefined Acquia Search network environment
  */
-function acquia_search_get_environment() {
-  return array(
-    'env_id' => ACQUIA_SEARCH_ENVIRONMENT_ID,
-    'name' => t('Acquia Search'),
-    // @todo - server URL may depend on region info.
-    'url' => variable_get('acquia_search_url', 'http://search.acquia.com/solr/'. acquia_agent_settings('acquia_identifier')),
+function acquia_search_get_environment($conf = array()) {
+  if (!empty($conf['acquia_subscription_id'])) {
+    $identifier = $conf['acquia_subscription_id'];
+    $subscription = acquia_agent_get_subscription($params = array(), $identifier);
+  }
+  else {
+    $identifier = acquia_agent_settings('acquia_identifier');
+    $subscription = acquia_agent_settings('acquia_subscription_data');
+  }
+  $search_host = variable_get('acquia_search_host', 'search.acquia.com');
+  // @todo rework this logic once we have AH_SERVER_REGION
+  // legacy_internal will be true if 'internal.' is the start of the host
+  // name that's set in via Acquia Cloud platform or vset.
+  $legacy_internal = (strpos($search_host, 'internal.') === 0);
+  // Adding the subscription specific colony to the heartbeat data
+  if (!empty($subscription['heartbeat_data']['search_service_colony'])) {
+    $search_host = $subscription['heartbeat_data']['search_service_colony'];
+    if ($legacy_internal) {
+      // If we want to be using an internal host name, fix the one
+      // from the hearbeat data here.
+      $search_host = 'internal.' . $search_host;
+    }
+  }
+  // Check if we are on Acquia Cloud hosting. @see NN-2503
+  if (!empty($_ENV['AH_SITE_ENVIRONMENT']) && !empty($_ENV['AH_SERVER_REGION'])) {
+    if ($_ENV['AH_SERVER_REGION'] == 'us-east-1' && $search_host == 'search.acquia.com') {
+      $search_host = 'internal.search.acquia.com';
+    }
+    elseif (strpos($search_host, 'search-' . $_ENV['AH_SERVER_REGION']) === 0) {
+      $search_host = 'internal.' . $search_host;
+    }
+  }
+
+  $environment = array(
+    'url' => 'http://' . $search_host . variable_get('acquia_search_path', '/solr/'. $identifier),
     'service_class' => 'AcquiaSearchService',
   );
+  return $environment;
 }
 
 /**
@@ -32,16 +62,18 @@ function acquia_search_enable() {
 }
 
 /**
- * Implementation of hook_init().
+ * Implementation of hook_help().
  */
-function acquia_search_init() {
-  if (arg(0) == 'admin' && arg(1) == 'config' && arg(2) == 'search' && arg(3) == 'apachesolr'
-      && user_access('administer search')
-      && acquia_agent_subscription_is_active()
-      && variable_get('apachesolr_default_environment') == ACQUIA_SEARCH_ENVIRONMENT_ID
-      && empty($_POST)) {
-    $as_link = l(t('Acquia Search'), 'http://acquia.com/products-services/acquia-search');
-    drupal_set_message(t("Search is being provided by the !as network service.", array('!as' => $as_link)));
+function acquia_search_help($path, $arg) {
+  switch ($path) {
+    case 'admin/config/search/apachesolr':
+      $env_id = isset($arg[5]) ? $arg[5] : apachesolr_default_environment();
+      $environment = apachesolr_environment_load($env_id);
+      if (acquia_search_environment_connected($environment) && acquia_agent_subscription_is_active()) {
+        $as_link = l(t('Acquia Search'), 'http://www.acquia.com/products-services/acquia-search');
+        return t("Search is being provided by the !as network service.", array('!as' => $as_link));
+      }
+    break;
   }
 }
 
@@ -49,14 +81,22 @@ function acquia_search_init() {
  * Create a new record pointing to the Acquia apachesolr search server and set it as the default
  */
 function acquia_search_enable_acquia_solr_environment() {
+  // Creates the new environment
   $environment = apachesolr_environment_load(ACQUIA_SEARCH_ENVIRONMENT_ID);
-  if ($environment != acquia_search_get_environment()) {
-    apachesolr_environment_save(acquia_search_get_environment());
-  }
-  // Only set the default if we just createdd the environment.
   if (!$environment) {
-    variable_set('apachesolr_default_environment', ACQUIA_SEARCH_ENVIRONMENT_ID);
+    // Only set the default if we just created the environment.
+    // This will almost always happen, unless the module was disabled via SQL.
+    apachesolr_default_environment(ACQUIA_SEARCH_ENVIRONMENT_ID);
+    $environment['conf'] = array();
+  }
+  $acquia_environment = acquia_search_get_environment();
+  // Override default values
+  foreach($acquia_environment as $key => $value) {
+    $environment[$key] = $value;
   }
+  $environment['env_id'] = ACQUIA_SEARCH_ENVIRONMENT_ID;
+  $environment['name'] = t('Acquia Search');
+  apachesolr_environment_save($environment);
 }
 
 /**
@@ -65,10 +105,24 @@ function acquia_search_enable_acquia_solr_environment() {
  * Helper function to clear variables we may have set.
  */
 function acquia_search_disable() {
+  // Remove the environment we added.
   apachesolr_environment_delete(ACQUIA_SEARCH_ENVIRONMENT_ID);
-  if (variable_get('apachesolr_default_environment', 'solr') == ACQUIA_SEARCH_ENVIRONMENT_ID) {
-    // Go back to the default.
-    variable_del('apachesolr_default_environment');
+  // Unset all other acquia search environments
+  $environments = apachesolr_load_all_environments();
+  foreach ($environments as $environment) {
+    if (acquia_search_environment_connected($environment)) {
+      // remove traces of acquia_search
+      // unset our acquia url and set it back to default
+      $environment['url'] = 'http://localhost:8983/solr';
+      if (apachesolr_default_environment() == $environment['env_id']) {
+        // Go back to the default.
+        variable_del('apachesolr_default_environment');
+      }
+      // Emptying the service class, unsetting it would not work, since it would
+      // not overwrite the old value
+      $environment['service_class'] = '';
+      apachesolr_environment_save($environment);
+    }
   }
 }
 
@@ -80,9 +134,12 @@ function acquia_search_menu_alter(&$menu) {
   if (isset($menu[$delete_page])) {
     $menu[$delete_page]['access callback'] = 'acquia_search_environment_delete_access';
     $menu[$delete_page]['access arguments'] = array(4);
-  };
+  }
 }
 
+/**
+ * Implementation of hook_cron().
+ */
 function acquia_search_cron() {
   // Cache the cersion in a variable so we can send it at not extra cost.
   $version = variable_get('acquia_search_version', '7.x');
@@ -92,13 +149,30 @@ function acquia_search_cron() {
   if ($version != $new_version) {
     variable_set('acquia_search_version', $new_version);
   }
+  // Add the environment if it wasn't added before
+  acquia_search_enable();
+
+}
+
+/**
+ * Tests whether the environment is connected to Acquia Search.
+ */
+function acquia_search_environment_connected($environment) {
+  if ($environment['service_class'] == 'AcquiaSearchService') {
+    return TRUE;
+  }
+  $acquia_search_key = apachesolr_environment_variable_get($environment['env_id'], 'acquia_search_key');
+  if (!empty($acquia_search_key)) {
+    return TRUE;
+  }
+  return FALSE;
 }
 
 /**
  * Delete environment page access.
  */
 function acquia_search_environment_delete_access($environment) {
-  if ($environment['env_id'] == ACQUIA_SEARCH_ENVIRONMENT_ID) {
+  if (strstr($environment['env_id'], ACQUIA_SEARCH_ENVIRONMENT_ID)) {
     return FALSE;
   }
   // Fall back to the original check.
@@ -111,10 +185,11 @@ function acquia_search_environment_delete_access($environment) {
 function acquia_search_form_apachesolr_settings_alter(&$form, $form_state) {
   // Don't alter the form if there is no subscription.
   if (acquia_agent_subscription_is_active()) {
-    // Don't show delete operation for the AS environment
+    // Don't show delete operation for the Default AS environment. This means
+    // that cloned acquia search environments can be deleted
     foreach ($form['apachesolr_host_settings']['table']['#rows'] as &$row) {
-      if (isset($row['data'][2]['data']) && strpos($row['data'][2]['data'], 'search/apachesolr-env/' . ACQUIA_SEARCH_ENVIRONMENT_ID . '/delete') !== FALSE) {
-        $row['data'][2]['data'] = '';
+      if (isset($row['data']['delete']['data']) && strpos($row['data']['delete']['data'], ACQUIA_SEARCH_ENVIRONMENT_ID . '/delete') !== FALSE) {
+        $row['data']['delete']['data'] = '';
         break;
       }
     }
@@ -133,14 +208,19 @@ function acquia_search_form_apachesolr_settings_alter(&$form, $form_state) {
  * Implementation of hook_form_[form_id]_alter().
  */
 function acquia_search_form_apachesolr_environment_edit_form_alter(&$form, $form_state) {
-  // Do not allow editing of Acquia Search environment parameters
-  if (isset($form['env_id']['#default_value']) && $form['env_id']['#default_value'] == ACQUIA_SEARCH_ENVIRONMENT_ID ) {
+  // Gets environment from form, gets connection status to Acquia Search.
+  $env_id = isset($form['env_id']['#default_value']) ? $form['env_id']['#default_value'] : '';
+  $environment = ($env_id) ? apachesolr_environment_load($env_id) : FALSE;
+
+  if ($environment && acquia_search_environment_connected($environment)) {
     $form['url']['#disabled'] = TRUE;
-    $form['name']['#disabled'] = TRUE;
     $form['env_id']['#disabled'] = TRUE;
   }
-
-  $form['actions']['delete']['#access'] = FALSE;
+  // Don't let the user delete the initial environment.
+  if ($env_id == ACQUIA_SEARCH_ENVIRONMENT_ID) {
+    $form['name']['#disabled'] = TRUE;
+    $form['actions']['delete']['#access'] = FALSE;
+  }
   $form['actions']['save']['#validate'][] = 'acquia_search_environment_edit_form_validate';
 }
 
@@ -154,7 +234,6 @@ function acquia_search_environment_edit_form_validate($form, &$form_state) {
 /**
  * Implementation of hook_acquia_subscription_status().
  */
-
 function acquia_search_acquia_subscription_status($active) {
   if ($active) {
     acquia_search_enable_acquia_solr_environment();
@@ -179,7 +258,7 @@ function acquia_search_acquia_subscription_status($active) {
  *  An array containing the string to be added as the content of the
  *  Cookie header to the request and the nonce.
  */
-function acquia_search_auth_cookie(&$url, $string = '', $derived_key = NULL) {
+function acquia_search_auth_cookie(&$url, $string = '', $derived_key = NULL, $env_id = NULL) {
   $uri = parse_url($url);
 
   // Add a scheme - should always be https if available.
@@ -199,23 +278,38 @@ function acquia_search_auth_cookie(&$url, $string = '', $derived_key = NULL) {
   $nonce = base64_encode(drupal_random_bytes(24));
 
   if ($string) {
-    $auth_header = acquia_search_authenticator($string, $nonce, $derived_key);
+    $auth_header = acquia_search_authenticator($string, $nonce, $derived_key, $env_id);
   }
   else {
-    $auth_header = acquia_search_authenticator($path . $query, $nonce, $derived_key);
+    $auth_header = acquia_search_authenticator($path . $query, $nonce, $derived_key, $env_id);
   }
   return array($auth_header, $nonce);
 }
 
 /**
- * Derive a key for the solr hmac using the information shared with acquia.com.
+ * Get the derived key for the solr hmac using the information shared with acquia.com.
  */
-function _acquia_search_derived_key() {
-  static $derived_key;
-  if (!isset($derived_key)) {
+function _acquia_search_derived_key($env_id = NULL) {
+  static $derived_key = array();
+  if (empty($env_id)) {
+    $env_id = 0;
+  }
+  if (!isset($derived_key[$env_id])) {
+    // If we set an explicit environment, check if this needs to overridden
+    // Use the default
+    $identifier = acquia_agent_settings('acquia_identifier');
     $key = acquia_agent_settings('acquia_key');
+    // See if we need to overwrite these values
+    if ($env_id) {
+      // Load the explicit environment and a manually set search key.
+      if ($search_key = apachesolr_environment_variable_get($env_id, 'acquia_search_key')) {
+        $derived_key[$env_id] = $search_key;
+      }
+    }
+    // In any case, this is equal for all subscriptions. Also
+    // even if the search sub is different, the main subscription should be
+    // active
     $subscription = acquia_agent_settings('acquia_subscription_data');
-    $identifier = acquia_agent_settings('acquia_identifier');
     // We use a salt from acquia.com in key derivation since this is a shared
     // value that we could change on the AN side if needed to force any
     // or all clients to use a new derived key.  We also use a string
@@ -223,23 +317,30 @@ function _acquia_search_derived_key() {
     // derived key to have a separate one.
     if (empty($subscription['active']) || empty($key) || empty($identifier)) {
       // Expired or invalid subscription - don't continue.
-      $derived_key = '';
+      $derived_key[$env_id] = '';
     }
-    else {
+    elseif (!isset($derived_key[$env_id])) {
       $salt = isset($subscription['derived_key_salt']) ? $subscription['derived_key_salt'] : '';
-      $derivation_string = $identifier . 'solr' . $salt;
-      $derived_key =  hash_hmac('sha1', str_pad($derivation_string, 80, $derivation_string), $key);
+      $derived_key[$env_id] = _acquia_search_create_derived_key($salt, $identifier, $key);
     }
   }
-  return $derived_key;
+  return $derived_key[$env_id];
 }
 
+
+/**
+ * Derive a key for the solr hmac using a salt, id and key.
+ */
+function _acquia_search_create_derived_key($salt, $id, $key) {
+  $derivation_string = $id . 'solr' . $salt;
+  return hash_hmac('sha1', str_pad($derivation_string, 80, $derivation_string), $key);
+}
 /**
  * Creates an authenticator based on a data string and HMAC-SHA1.
  */
-function acquia_search_authenticator($string, $nonce, $derived_key = NULL) {
+function acquia_search_authenticator($string, $nonce, $derived_key = NULL, $env_id = NULL) {
   if (empty($derived_key)) {
-    $derived_key = _acquia_search_derived_key();
+    $derived_key = _acquia_search_derived_key($env_id);
   }
   if (empty($derived_key)) {
     // Expired or invalid subscription - don't continue.
@@ -257,9 +358,9 @@ function acquia_search_authenticator($string, $nonce, $derived_key = NULL) {
  * @return
  *  TRUE or FALSE.
  */
-function acquia_search_valid_response($hmac, $nonce, $string, $derived_key = NULL) {
+function acquia_search_valid_response($hmac, $nonce, $string, $derived_key = NULL, $env_id = NULL) {
   if (empty($derived_key)) {
-    $derived_key = _acquia_search_derived_key();
+    $derived_key = _acquia_search_derived_key($env_id);
   }
   return $hmac == hash_hmac('sha1', $nonce . $string, $derived_key);
 }
@@ -288,7 +389,7 @@ function acquia_search_extract_hmac($headers) {
  */
 function acquia_search_apachesolr_query_alter($query) {
   // @todo - does it make sense to check $caller too?
-  if ($query->solr('getId') != ACQUIA_SEARCH_ENVIRONMENT_ID || $query->getParam('qt') || $query->getParam('defType')) {
+  if (!acquia_search_environment_connected($query->solr('getId')) || $query->getParam('qt') || $query->getParam('defType')) {
     // This is a 'mlt' query or something else custom.
     return;
   }
diff --git a/profiles/acquia/modules/acquia_connector/acquia_search/drush/acquia_search.drush.inc b/profiles/acquia/modules/acquia_connector/acquia_search/drush/acquia_search.drush.inc
new file mode 100644
index 0000000..249a926
--- /dev/null
+++ b/profiles/acquia/modules/acquia_connector/acquia_search/drush/acquia_search.drush.inc
@@ -0,0 +1,126 @@
+<?php
+
+/**
+ * @file
+ *   drush integration for acquia_search.
+ */
+
+/**
+ * Implements hook_drush_command().
+ *
+ * @return array
+ *   An associative array describing your command(s).
+ */
+function acquia_search_drush_command() {
+  $items = array();
+  
+  $items['solr-set-derived-key'] = array(
+    'callback' => 'acquia_search_set_derived_key_for_env',
+    'description' => dt('Sets an environment to be active for Acquia search using a specific derived key.
+      You should use your Acquia Identifier and Network Key to set this value.'),
+    'options' => array(
+      'env-id' => array(
+        'description' => 'Apache Solr environment id.',
+      ),
+      'acquia-id' => array(
+        'description' => 'Acquia Network Subscription ID.',
+      ),
+      'acquia-key' => array(
+        'description' => 'Acquia Network Subscription Key.',
+      ),
+    ),
+    'examples' => array(
+      'drush solr-set-derived-key --env-id=acquia_search_server_1_1 --acquia-id=AAAA-12345 --acquia-key=abcdefgijklmnopqrstuvw12345' => 'Set this environment to use the following keys.',
+    ),
+  );
+  return $items;
+}
+
+/**
+ * Implements hook_drush_help().
+ *
+ * This function is called whenever a drush user calls
+ * 'drush help <name-of-your-command>'
+ *
+ * @param string $section
+ *   A string with the help section (prepend with 'drush:')
+ *
+ * @return string
+ *   A string with the help text for your command.
+ */
+function acquia_search_drush_help($section) {
+  switch ($section) {
+    case 'drush:solr-set-derived-key':
+      return dt("Sets an environment to be active for Acquia search using a specific derived key.
+      You should use your Acquia Identifier and Network Key to set this value.");
+  }
+}
+
+/**
+ * Drush callback
+ * Set the derived key for a specific environment, using an id and key.
+ * Also set the url to point to the acquia service to make it easier for customers
+ * to set any environment as an acquia environment
+ */
+function acquia_search_set_derived_key_for_env() {
+  // environment id
+  $env_id = drush_get_option('env-id');
+  // check on bool, because drush sets the var as true if no value is given.
+  if (empty($env_id) || is_bool($env_id)) {
+    return drush_set_error('DRUSH_VARIABLE_ERROR', dt('No apachesolr environment id specified'));
+  }
+  if ($env_id == ACQUIA_SEARCH_ENVIRONMENT_ID) {
+    return drush_set_error('DRUSH_VARIABLE_ERROR', dt('Modifying the original Acquia Search subscription is not allowed. Please use another environment'));
+  }
+  $environment = apachesolr_environment_load($env_id);
+  // Check if the environment is valid
+  if (empty($environment)) {
+    return drush_set_error('DRUSH_ACQUIA_ERROR', dt('The specified environment does not exist'));
+  }
+  // acquia network subscription id
+  $acquia_id = drush_get_option('acquia-id');
+  // check on bool, because drush sets the var as true if no value is given.
+  if (empty($acquia_id) || is_bool($acquia_id)) {
+    return drush_set_error('DRUSH_VARIABLE_ERROR', dt('No Acquia network subscription id specified'));
+  }
+  // acquia network subscription key
+  $acquia_key = drush_get_option('acquia-key');
+  // check on bool, because drush sets the var as true if no value is given.
+  if (empty($acquia_key) || !is_string($acquia_key)) {
+    return drush_set_error('DRUSH_VARIABLE_ERROR', dt('No Acquia network subscription key specified'));
+  }
+
+  // We do not want to send a heartbeat to the server, we only need subscription data
+  $params = array(
+    'active' => FALSE,
+    'no_heartbeat' => 1,
+  );
+  $subscription = acquia_agent_get_subscription($params, $acquia_id, $acquia_key);
+  // Check if the subscription was valid
+  if (!is_array($subscription)) {
+    return drush_set_error('DRUSH_ACQUIA_ERROR', dt('Could not fetch data for specified subscription.'));
+  }
+
+  // We use a salt from acquia.com in key derivation since this is a shared
+  // value that we could change on the AN side if needed to force any
+  // or all clients to use a new derived key.
+  $salt = isset($subscription['derived_key_salt']) ? $subscription['derived_key_salt'] : '';
+  if (empty($salt)) {
+    return drush_set_error('DRUSH_ACQUIA_ERROR', dt('Could not get a salt.'));
+  }
+  $derived_key = _acquia_search_create_derived_key($salt, $acquia_id, $acquia_key);
+  if (!empty($derived_key)) {
+    $environment['url'] = 'http://search.acquia.com/solr/' . $acquia_id;
+    // We want to show that this specific environment was connected to Acquia.
+    // If you update the key, make sure the name is not altered twice.
+    if (!strpos($environment['name'], '(connected to Acquia)')) {
+      $environment['name'] = $environment['name'] . ' (connected to Acquia)';
+    }
+
+    apachesolr_environment_save($environment);
+    apachesolr_environment_variable_set($env_id, 'acquia_search_key', $derived_key);
+  }
+  else {
+    return drush_set_error('DRUSH_ACQUIA_ERROR', dt('Could not generate a derived key.'));
+  }
+}
diff --git a/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.info b/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.info
index 70b1c3c..a3e03c2 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.info
+++ b/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.info
@@ -5,11 +5,11 @@ php = 5.0
 core = 7.x
 dependencies[] = acquia_agent
 
-; Information added by drupal.org packaging script on 2012-05-01
-version = "7.x-2.3"
+; Information added by drupal.org packaging script on 2012-08-10
+version = "7.x-2.7"
 core = "7.x"
 project = "acquia_connector"
-datestamp = "1335901549"
+datestamp = "1344609377"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.install b/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.install
index 9737516..1432ea7 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.install
+++ b/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.install
@@ -13,6 +13,17 @@
 function acquia_spi_uninstall() {
   variable_del('acquia_spi_cron_last');
   variable_del('acquia_spi_cron_interval');
+  variable_del('acquia_spi_cron_interval_override');
+  variable_del('acquia_spi_use_cron');
+  variable_del('acquia_welcome');
+  variable_del('acquia_spi_boot_last');
+  variable_del('acquia_spi_module_diff_data');
+  variable_del('acquia_spi_admin_priv');
+  variable_del('acquia_spi_send_node_user');
+  variable_del('acquia_spi_send_watchdog');
+  variable_del('acquia_spi_server');
+  variable_del('acquia_spi_ssl_override');
+  variable_del('acquia_spi_module_rebuild');
 }
 
 /**
diff --git a/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.module b/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.module
index 3f08951..a3195a7 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.module
+++ b/profiles/acquia/modules/acquia_connector/acquia_spi/acquia_spi.module
@@ -368,45 +368,40 @@ function acquia_spi_run_security_review() {
     // cannot easily be retrieved.
     return array();
   }
-  if (!function_exists('security_review_run')) {
-    module_load_include('inc', 'acquia_spi', 'security_review');
-  }
+  module_load_include('inc', 'acquia_spi', 'security_review');
 
   $checklist_results = array();
-  if (function_exists('security_review_get_checks')) {
-    $skips = array();
-    // Collect the checklist.
-    $checklist = security_review_get_checks();
-    // Run only specific checks.
-    $to_check = array('input_formats', 'admin_permissions', 'untrusted_php', 'private_files', 'upload_extensions');
-    foreach ($checklist as $module => $checks) {
-      foreach ($checks as $check_name => $args) {
-        if (!in_array($check_name, $to_check)) {
-          unset($checklist[$module][$check_name]);
-        }
-      }
-      if (empty($checklist[$module])) {
-        unset($checklist[$module]);
+  $skips = array();
+  // Collect the checklist.
+  $checklist = acquia_spi_security_review_get_checks();
+  // Run only specific checks.
+  $to_check = array('input_formats', 'admin_permissions', 'untrusted_php', 'private_files', 'upload_extensions');
+  foreach ($checklist as $module => $checks) {
+    foreach ($checks as $check_name => $args) {
+      if (!in_array($check_name, $to_check)) {
+        unset($checklist[$module][$check_name]);
       }
     }
-    $checklist_results = security_review_run($checklist);
-    foreach ($checklist_results as $module => $checks) {
-      foreach ($checks as $check_name => $check) {
-        // Unset data that does not need to be sent.
-        if (is_null($check['result'])) {
-          unset($checklist_results[$module][$check_name]);
-          
-        }
-        else {
-          unset($check['success']);
-          unset($check['failure']);
-          $checklist_results[$module][$check_name] = $check;
-        }
+    if (empty($checklist[$module])) {
+      unset($checklist[$module]);
+    }
+  }
+  $checklist_results = acquia_spi_security_review_run($checklist);
+  foreach ($checklist_results as $module => $checks) {
+    foreach ($checks as $check_name => $check) {
+      // Unset data that does not need to be sent.
+      if (is_null($check['result'])) {
+        unset($checklist_results[$module][$check_name]);
       }
-      if (empty($checklist_results[$module])) {
-         unset($checklist_results[$module]);
+      else {
+        unset($check['success']);
+        unset($check['failure']);
+        $checklist_results[$module][$check_name] = $check;
       }
     }
+    if (empty($checklist_results[$module])) {
+       unset($checklist_results[$module]);
+    }
   }
   return $checklist_results;
 }
@@ -694,8 +689,9 @@ function acquai_spi_get_404s() {
  *
  */
 function acquia_spi_get_variables_data() {
+  global $conf;
   $data = array();
-  $variables = array('googleanalytics_cache', 'error_level', 'preprocess_js', 'page_cache_maximum_age', 'block_cache', 'preprocess_css', 'page_compression', 'cache', 'cache_lifetime', 'cron_last', 'clean_url', 'redirect_global_clean', 'theme_zen_settings', 'site_offline', 'site_name', 'user_register', 'user_signatures', 'user_admin_role', 'user_email_verification', 'user_cancel_method', 'filter_fallback_format', 'dblog_row_limit', 'date_default_timezone', 'file_default_scheme', 'install_profile', 'maintenance_mode', 'update_last_check', 'site_default_country');
+  $variables = array('acquia_spi_send_node_user', 'acquia_spi_admin_priv', 'acquia_spi_module_diff_data', 'acquia_spi_send_watchdog', 'acquia_spi_use_cron', 'cache_backends', 'cache_default_class', 'cache_inc', 'googleanalytics_cache', 'error_level', 'preprocess_js', 'page_cache_maximum_age', 'block_cache', 'preprocess_css', 'page_compression', 'cache', 'cache_lifetime', 'cron_last', 'clean_url', 'redirect_global_clean', 'theme_zen_settings', 'site_offline', 'site_name', 'user_register', 'user_signatures', 'user_admin_role', 'user_email_verification', 'user_cancel_method', 'filter_fallback_format', 'dblog_row_limit', 'date_default_timezone', 'file_default_scheme', 'install_profile', 'maintenance_mode', 'update_last_check', 'site_default_country');
   // Add comment settings for node types.
   $types = node_type_get_types();
   if (!empty($types)) {
@@ -704,17 +700,16 @@ function acquia_spi_get_variables_data() {
     }
   }
 
-  $result = db_select('variable', 'v')
-    ->fields('v', array('name', 'value'))
-    ->condition('name', $variables, 'IN')
-    ->orderBy('name')
-    ->execute();
-
-  foreach ($result as $record) {
-    if ($record && isset($record->value)) {
-      $data[$record->name] = unserialize($record->value);
+  foreach ($variables as $name) {
+    if (isset($conf[$name])) {
+      $data[$name] = $conf[$name];
     }
   }
+  if (module_exists('globalredirect') && function_exists('_globalredirect_get_settings')) {
+    // Explicitly get Global Redirect settings since it deletes its variable
+    // if the settings match the defaults.
+    $data['globalredirect_settings'] = _globalredirect_get_settings();
+  }
   // Collapse to JSON string to simplify transport. NSPI server will not
   // re-encode for storage.
   return drupal_json_encode($data);
@@ -744,7 +739,7 @@ function acquia_spi_get_failed_logins() {
   
     foreach ($result as $record) {
       $variables = unserialize($record->variables);
-      $last_logins['failed'][$record->timestamp] = $variables['%user'];
+      $last_logins['failed'][$record->timestamp] = check_plain($variables['%user']);
     }
   }
   return $last_logins;
@@ -853,13 +848,25 @@ function acquia_spi_get_platform() {
   return $platform;
 }
 
-
 function acquia_spi_get_platform_mysql_data() {
-  $result = db_query("SHOW GLOBAL STATUS");
+  $connection = Database::getConnection('default');
+  // Backup and restore PDO::ATTR_CASE. Prior to Drupal 7.14 this is
+  // PDO::CASE_LOWER. Afterwards it is PDO::CASE_NATURAL.
+  $orig = $connection->getAttribute(PDO::ATTR_CASE);
+  $connection->setAttribute(PDO::ATTR_CASE, PDO::CASE_LOWER);
+  $result = $connection->query("SHOW GLOBAL STATUS", array(), array());
+  // Restore the attribute.
+  $connection->setAttribute(PDO::ATTR_CASE, $orig);
+
   // what happens if we run this on mssql or postgres
   $ret = array();
+  if (empty($result)) {
+    return $ret;
+  }
   foreach ($result as $record) {
-
+    if (!isset($record->variable_name)) {
+      continue;
+    }
     switch ($record->variable_name) {
       case 'Table_locks_waited':
         $ret['Table_locks_waited'] = $record->value;
@@ -921,16 +928,79 @@ function acquia_spi_get_platform_mysql_data() {
  * @return array
  */
 function acquia_spi_get_system_status() {
+  $data = array();
 
-  // Load .install files
-  include_once DRUPAL_ROOT . '/includes/install.inc';
-  drupal_load_updates(); // This is run to load the install files of all modules, which contain the hook_requirements used below
-
-  // Check run-time requirements and status information.
-  $requirements = module_invoke_all('requirements', 'runtime');
-  usort($requirements, '_system_sort_requirements');
-
-  return $requirements;
+  $profile = drupal_get_profile();
+  if ($profile != 'standard') {
+    $info = system_get_info('module', $profile);
+    $data['install_profile'] = array(
+      'title' => 'Install profile',
+      'value' => t('%profile_name (%profile-%version)', array(
+        '%profile_name' => $info['name'],
+        '%profile' => $profile,
+        '%version' => $info['version'],
+      )),
+    );
+  }
+  $data['php'] = array(
+    'title' => 'PHP',
+    'value' => phpversion(),
+  );
+  $conf_dir = TRUE;
+  $settings = TRUE;
+  $dir = conf_path();
+  if (is_writable($dir) || is_writable($dir . '/settings.php')) {
+    $value = 'Not protected';
+    if (is_writable($dir)) {
+      $conf_dir = FALSE;
+    }
+    elseif (is_writable($dir . '/settings.php')) {
+      $settings = FALSE;
+    }
+  }
+  else {
+    $value = 'Protected';
+  }
+  $data['settings.php'] = array(
+    'title' => 'Configuration file',
+    'value' => $value,
+    'conf_dir' => $conf_dir,
+    'settings' => $settings,
+  );
+  $cron_last = variable_get('cron_last', NULL);
+  if (!is_numeric($cron_last)) {
+    $cron_last = variable_get('install_time', 0);
+  }
+  $data['cron'] = array(
+    'title' => 'Cron maintenance tasks',
+    'value' => t('Last run !time ago', array('!time' => format_interval(REQUEST_TIME - $cron_last))),
+    'cron_last' => $cron_last,
+  );
+  if (!empty($GLOBALS['update_free_access'])) {
+    $data['update access'] = array(
+      'value' => 'Not protected',
+      'protected' => FALSE,
+    );
+  }
+  else {
+    $data['update access'] = array(
+      'value' => 'Protected',
+      'protected' => TRUE,
+    );
+  }
+  $data['update access']['title'] = 'Access to update.php';
+  if (!module_exists('update')) {
+    $data['update status'] = array(
+      'value' => 'Not enabled',
+    );
+  }
+  else {
+    $data['update status'] = array(
+      'value' => 'Enabled',
+    );
+  }
+  $data['update status']['title'] = 'Update notifications';
+  return $data;
 }
 
 /**
diff --git a/profiles/acquia/modules/acquia_connector/acquia_spi/security_review.inc b/profiles/acquia/modules/acquia_connector/acquia_spi/security_review.inc
index 51e0503..1f63c33 100644
--- a/profiles/acquia/modules/acquia_connector/acquia_spi/security_review.inc
+++ b/profiles/acquia/modules/acquia_connector/acquia_spi/security_review.inc
@@ -5,49 +5,36 @@
  * Stand-alone security checks and review system.
  */
 
-// Define the version of this file in case it's used outside of its module.
-define('SECURITY_REVIEW_VERSION', '7.x-1.0');
-
 /**
  * Public function for running Security Review checklist and returning results.
  *
  * @param array $checklist Array of checks to run, indexed by module namespace.
- * @param boolean $log Whether to log check processing using security_review_log.
+ * @param boolean $log Whether to log check processing using acquia_spi_security_review_log.
  * @param boolean $help Whether to load the help file and include in results.
  * @return array Results from running checklist, indexed by module namespace.
  */
-function security_review_run($checklist = NULL, $log = FALSE, $help = FALSE) {
-  if (!$checklist && module_exists('security_review')) {
-    $checklist = module_invoke_all('security_review');
-  }
-  $results = _security_review_run($checklist, $log);
-
-  // Fill out the descriptions of the results if $help is requested.
-  if ($help && module_exists('security_review') && module_load_include('inc', 'security_review', 'security_review.help')) {
-    foreach ($results as $module => $checks) {
-      foreach ($checks as $check_name => $check) {
-        $function = $check['callback'] . '_help';
-        // We should have loaded all necessary include files.
-        if (function_exists($function)) {
-          $element = call_user_func($function, $check);
-          // @todo run through theme?
-          $results[$module][$check_name]['help'] = $element;
-        }
-      }
+function acquia_spi_security_review_run($checklist = NULL, $log = FALSE, $help = FALSE) {
+  // Use Security Review module first if available.
+  if (module_exists('security_review') && function_exists('security_review_run')) {
+    if (!$checklist) {
+      $checklist = module_invoke_all('security_checks');
     }
+    module_load_include('inc', 'security_review');
+    return security_review_run($checklist, $log, $help);
+  }
+  else {
+    return _acquia_spi_security_review_run($checklist, $log);
   }
-
-  return $results;
 }
 
 /**
  * Private function the review and returns the full results.
  */
-function _security_review_run($checklist, $log = FALSE) {
+function _acquia_spi_security_review_run($checklist, $log = FALSE) {
   $results = array();
   foreach ($checklist as $module => $checks) {
     foreach ($checks as $check_name => $arguments) {
-      $check_result = _security_review_run_check($module, $check_name, $arguments, $log);
+      $check_result = _acquia_spi_security_review_run_check($module, $check_name, $arguments, $log);
       if (!empty($check_result)) {
         $results[$module][$check_name] = $check_result;
       }
@@ -59,21 +46,10 @@ function _security_review_run($checklist, $log = FALSE) {
 /**
  * Run a single Security Review check.
  */
-function _security_review_run_check($module, $check_name, $check, $log, $store = FALSE) {
+function _acquia_spi_security_review_run_check($module, $check_name, $check, $log, $store = FALSE) {
   $last_check = array();
-  if ($store) {
-    // Get the results of the last check.
-    $last_check = security_review_get_last_check($module, $check_name);
-  }
   $check_result = array();
   $return = array('result' => NULL);
-  if (isset($check['file'])) {
-    // Handle Security Review defining checks for other modules.
-    if (isset($check['module'])) {
-      $module = $check['module'];
-    }
-    module_load_include('inc', $module, $check['file']);
-  }
   $function = $check['callback'];
   if (function_exists($function)) {
     $return = call_user_func($function, $last_check);
@@ -84,46 +60,46 @@ function _security_review_run_check($module, $check_name, $check, $log, $store =
   if ($log && !is_null($return['result'])) { // Do not log if result is NULL.
     $variables = array('!name' => $check_result['title']);
     if ($check_result['result']) {
-      _security_review_log($module, $check_name, '!name check passed', $variables, WATCHDOG_INFO);
+      _acquia_spi_security_review_log($module, $check_name, '!name check passed', $variables, WATCHDOG_INFO);
     }
     else {
-      _security_review_log($module, $check_name, '!name check failed', $variables, WATCHDOG_ERROR);
+      _acquia_spi_security_review_log($module, $check_name, '!name check failed', $variables, WATCHDOG_ERROR);
     }
   }
   return $check_result;
 }
 
 /**
- * Implements hook_security_checks().
+ * Checks for acquia_spi_security_review_get_checks().
  */
-function _security_review_security_checks() {
+function _acquia_spi_security_review_security_checks() {
   $checks['file_perms'] = array(
     'title' => t('File system permissions'),
-    'callback' => 'security_review_check_file_perms',
+    'callback' => 'acquia_spi_security_review_check_file_perms',
     'success' => t('Drupal installation files and directories (except required) are not writable by the server.'),
     'failure' => t('Some files and directories in your install are writable by the server.'),
   );
   $checks['input_formats'] = array(
     'title' => t('Text formats'),
-    'callback' => 'security_review_check_input_formats',
+    'callback' => 'acquia_spi_security_review_check_input_formats',
     'success' => t('Untrusted users are not allowed to input dangerous HTML tags.'),
     'failure' => t('Untrusted users are allowed to input dangerous HTML tags.'),
   );
   $checks['field'] = array(
     'title' => t('Content'),
-    'callback' => 'security_review_check_field',
+    'callback' => 'acquia_spi_security_review_check_field',
     'success' => t('Dangerous tags were not found in any submitted content (fields).'),
     'failure' => t('Dangerous tags were found in submitted content (fields).'),
   );
   $checks['error_reporting'] = array(
     'title' => t('Error reporting'),
-    'callback' => 'security_review_check_error_reporting',
+    'callback' => 'acquia_spi_security_review_check_error_reporting',
     'success' => t('Error reporting set to log only.'),
     'failure' => t('Errors are written to the screen.'),
   );
   $checks['private_files'] = array(
     'title' => t('Private files'),
-    'callback' => 'security_review_check_private_files',
+    'callback' => 'acquia_spi_security_review_check_private_files',
     'success' => t('Private files directory is outside the web server root.'),
     'failure' => t('Private files is enabled but the specified directory is not secure outside the web server root.'),
   );
@@ -131,33 +107,33 @@ function _security_review_security_checks() {
   if (module_exists('dblog')) {
     $checks['query_errors'] = array(
       'title' => t('Database errors'),
-      'callback' => 'security_review_check_query_errors',
+      'callback' => 'acquia_spi_security_review_check_query_errors',
       'success' => t('Few query errors from the same IP.'),
       'failure' => t('Query errors from the same IP. These may be a SQL injection attack or an attempt at information disclosure.'),
     );
 
     $checks['failed_logins'] = array(
       'title' => t('Failed logins'),
-      'callback' => 'security_review_check_failed_logins',
+      'callback' => 'acquia_spi_security_review_check_failed_logins',
       'success' => t('Few failed login attempts from the same IP.'),
       'failure' => t('Failed login attempts from the same IP. These may be a brute-force attack to gain access to your site.'),
     );
   }
   $checks['upload_extensions'] = array(
     'title' => t('Allowed upload extensions'),
-    'callback' => 'security_review_check_upload_extensions',
+    'callback' => 'acquia_spi_security_review_check_upload_extensions',
     'success' => t('Only safe extensions are allowed for uploaded files and images.'),
     'failure' => t('Unsafe file extensions are allowed in uploads.'),
   );
   $checks['admin_permissions'] = array(
     'title' => t('Drupal permissions'),
-    'callback' => 'security_review_check_admin_permissions',
+    'callback' => 'acquia_spi_security_review_check_admin_permissions',
     'success' => t('Untrusted roles do not have administrative or trusted Drupal permissions.'),
     'failure' => t('Untrusted roles have been granted administrative or trusted Drupal permissions.'),
   );
   /*$checks['name_passwords'] = array(
     'title' => t('Username as password'),
-    'callback' => 'security_review_check_name_passwords',
+    'callback' => 'acquia_spi_security_review_check_name_passwords',
     'success' => t('Trusted accounts do not have their password set to their username.'),
     'failure' => t('Some trusted accounts have set their password the same as their username.'),
   );*/
@@ -165,7 +141,7 @@ function _security_review_security_checks() {
   if (module_exists('php')) {
     $checks['untrusted_php'] = array(
       'title' => t('PHP access'),
-      'callback' => 'security_review_check_php_filter',
+      'callback' => 'acquia_spi_security_review_check_php_filter',
       'success' => t('Untrusted users do not have access to use the PHP input format.'),
       'failure' => t('Untrusted users have access to use the PHP input format.'),
     );
@@ -177,14 +153,14 @@ function _security_review_security_checks() {
 /**
  * Check that files aren't writeable by the server.
  */
-function security_review_check_file_perms() {
+function acquia_spi_security_review_check_file_perms() {
   $result = TRUE;
   // Extract ending folder for file directory path.
   $file_path = rtrim(variable_get('file_public_path', conf_path() . '/files'), '/');
   $file_path = substr($file_path, strrpos($file_path, '/') + 1);
   // Set files to ignore.
   $ignore = array('..', 'CVS', $file_path);
-  $files = _security_review_check_file_perms_scan('.', $ignore);
+  $files = _acquia_spi_security_review_check_file_perms_scan('.', $ignore);
 
   // Try creating or appending files.
   // Assume it doesn't work.
@@ -210,7 +186,7 @@ function security_review_check_file_perms() {
   return array('result' => $result, 'value' => $files);
 }
 
-function _security_review_check_file_perms_scan($directory, $ignore) {
+function _acquia_spi_security_review_check_file_perms_scan($directory, $ignore) {
   $items = array();
   if ($handle = opendir($directory)) {
     while (($file = readdir($handle)) !== FALSE) {
@@ -218,7 +194,7 @@ function _security_review_check_file_perms_scan($directory, $ignore) {
       if ($file[0] != "." && !in_array($file, $ignore)) {
         $file = $directory . "/" . $file;
         if (is_dir($file)) {
-          $items = array_merge($items, _security_review_check_file_perms_scan($file, $ignore));
+          $items = array_merge($items, _acquia_spi_security_review_check_file_perms_scan($file, $ignore));
           if (is_writable($file)) {
             $items[] = preg_replace("/\/\//si", "/", $file);
           }
@@ -236,12 +212,12 @@ function _security_review_check_file_perms_scan($directory, $ignore) {
 /**
  * Check for formats that do not have HTML filter that can be used by untrusted users.
  */
-function security_review_check_input_formats() {
+function acquia_spi_security_review_check_input_formats() {
   $result = TRUE;
   $formats = filter_formats();
   $check_result_value = array();
   // Check formats that are accessible by untrusted users.
-  $untrusted_roles = security_review_untrusted_roles();
+  $untrusted_roles = acquia_spi_security_review_untrusted_roles();
   $untrusted_roles = array_keys($untrusted_roles);
   foreach ($formats as $id => $format) {
     $format_roles = filter_get_roles_by_format($format);
@@ -254,7 +230,7 @@ function security_review_check_input_formats() {
         $filter = $filters['filter_html'];
         // Check for unsafe tags in allowed tags.
         $allowed_tags = $filter->settings['allowed_html'];
-        $unsafe_tags = security_review_unsafe_tags();
+        $unsafe_tags = acquia_spi_security_review_unsafe_tags();
         foreach ($unsafe_tags as $tag) {
           if (strpos($allowed_tags, '<' . $tag . '>') !== FALSE) {
             // Found an unsafe tag
@@ -275,12 +251,12 @@ function security_review_check_input_formats() {
   return array('result' => $result, 'value' => $check_result_value);
 }
 
-function security_review_check_php_filter() {
+function acquia_spi_security_review_check_php_filter() {
   $result = TRUE;
   $formats = filter_formats();
   $check_result_value = array();
   // Check formats that are accessible by untrusted users.
-  $untrusted_roles = security_review_untrusted_roles();
+  $untrusted_roles = acquia_spi_security_review_untrusted_roles();
   $untrusted_roles = array_keys($untrusted_roles);
   foreach ($formats as $id => $format) {
     $format_roles = filter_get_roles_by_format($format);
@@ -299,7 +275,7 @@ function security_review_check_php_filter() {
   return array('result' => $result, 'value' => $check_result_value);
 }
 
-function security_review_check_error_reporting() {
+function acquia_spi_security_review_check_error_reporting() {
   $error_level = variable_get('error_level', NULL);
   if (is_null($error_level) || intval($error_level) >= 1) {
     // When the variable isn't set, or its set to 1 or 2 errors are printed to the screen.
@@ -316,7 +292,7 @@ function security_review_check_error_reporting() {
  *
  * There is ample room for the user to get around this check. @TODO get more sophisticated?
  */
-function security_review_check_private_files() {
+function acquia_spi_security_review_check_private_files() {
   // Get the default download method.
   $scheme = variable_get('file_default_scheme', '');
   // Most insecure configurations will be using the local private wrapper.
@@ -341,7 +317,7 @@ function security_review_check_private_files() {
   return array('result' => $result);
 }
 
-function security_review_check_query_errors($last_check = NULL) {
+function acquia_spi_security_review_check_query_errors($last_check = NULL) {
   $timestamp = NULL;
   $check_result_value = array();
   $query = db_select('watchdog', 'w')->fields('w', array('message', 'hostname'))
@@ -374,7 +350,7 @@ function security_review_check_query_errors($last_check = NULL) {
   return array('result' => $result, 'value' => $check_result_value);
 }
 
-function security_review_check_failed_logins($last_check = NULL) {
+function acquia_spi_security_review_check_failed_logins($last_check = NULL) {
   $result = TRUE;
   $timestamp = NULL;
   $check_result_value = array();
@@ -410,10 +386,10 @@ function security_review_check_failed_logins($last_check = NULL) {
 /**
  * Look for admin permissions granted to untrusted roles.
  */
-function security_review_check_admin_permissions() {
+function acquia_spi_security_review_check_admin_permissions() {
   $result = TRUE;
   $check_result_value = array();
-  $untrusted_roles = security_review_untrusted_roles();
+  $untrusted_roles = acquia_spi_security_review_untrusted_roles();
   // Collect permissions marked as for trusted users only.
   $all_permissions = module_invoke_all('permission');
   $all_keys = array_keys($all_permissions);
@@ -434,7 +410,7 @@ function security_review_check_admin_permissions() {
   return array('result' => $result, 'value' => $check_result_value);
 }
 
-function security_review_check_field($last_check = NULL) {
+function acquia_spi_security_review_check_field($last_check = NULL) {
   $check_result = TRUE;
   $check_result_value = $tables = $found = array();
   $timestamp = NULL;
@@ -480,11 +456,11 @@ function security_review_check_field($last_check = NULL) {
   return array('result' => $check_result, 'value' => $check_result_value);
 }
 
-function security_review_check_upload_extensions($last_check = NULL) {
+function acquia_spi_security_review_check_upload_extensions($last_check = NULL) {
   $check_result = TRUE;
   $check_result_value = array();
   $instances = field_info_instances();
-  $unsafe_extensions = security_review_unsafe_extensions();
+  $unsafe_extensions = acquia_spi_security_review_unsafe_extensions();
   // Loop through instances checking for fields of file.
   foreach ($instances as $entity_type => $type_bundles) {
     foreach ($type_bundles as $bundle => $bundle_instances) {
@@ -507,16 +483,16 @@ function security_review_check_upload_extensions($last_check = NULL) {
   return array('result' => $check_result, 'value' => $check_result_value);
 }
 
-function security_review_check_name_passwords($last_check = NULL) {
+function acquia_spi_security_review_check_name_passwords($last_check = NULL) {
   $result = TRUE;
   $check_result_value = array();
   $timestamp = NULL;
 
   // Check whether trusted roles have weak passwords.
-  $trusted_roles = security_review_trusted_roles();
+  $trusted_roles = acquia_spi_security_review_trusted_roles();
   if (!empty($trusted_roles)) {
     $trusted_roles = array_keys($trusted_roles);
-    $check_result_value = _security_review_weak_passwords($trusted_roles);
+    $check_result_value = _acquia_spi_security_review_weak_passwords($trusted_roles);
   }
   if (!empty($check_result_value)) {
     $result = FALSE;
@@ -525,7 +501,7 @@ function security_review_check_name_passwords($last_check = NULL) {
   return array('result' => $result, 'value' => $check_result_value);
 }
 
-function _security_review_weak_passwords($trusted_roles) {
+function _acquia_spi_security_review_weak_passwords($trusted_roles) {
   $weak_users = array();
 
   // Select users with a trusted role whose password is their username.
@@ -553,9 +529,14 @@ function _security_review_weak_passwords($trusted_roles) {
 /**
  * Helper function allows for collection of this file's security checks.
  */
-function security_review_get_checks() {
-  $checks = _security_review_security_checks();
-  return $checks;
+function acquia_spi_security_review_get_checks() {
+  // Use Security Review's checks if available.
+  if (module_exists('security_review') && function_exists('security_review_security_checks')) {
+    return module_invoke_all('security_checks');
+  }
+  else {
+    return _acquia_spi_security_review_security_checks();
+  }
 }
 
 /**
@@ -563,7 +544,7 @@ function security_review_get_checks() {
  *
  * Based on wysiwyg_filter_get_elements_blacklist().
  */
-function security_review_unsafe_tags() {
+function acquia_spi_security_review_unsafe_tags() {
   return array(
     'applet',
     'area',
@@ -605,7 +586,7 @@ function security_review_unsafe_tags() {
 /**
  * Helper function defines file extensions considered unsafe.
  */
-function security_review_unsafe_extensions() {
+function acquia_spi_security_review_unsafe_extensions() {
   return array(
     'flv',
     'swf',
@@ -625,7 +606,7 @@ function security_review_unsafe_extensions() {
 /**
  * Helper function defines the default untrusted Drupal roles.
  */
-function _security_review_default_untrusted_roles() {
+function _acquia_spi_security_review_default_untrusted_roles() {
   $roles = array(DRUPAL_ANONYMOUS_RID => t('anonymous user'));
   $user_register = variable_get('user_register', 1);
   // If visitors are allowed to create accounts they are considered untrusted.
@@ -640,8 +621,8 @@ function _security_review_default_untrusted_roles() {
  *
  * @return An associative array with the role id as the key and the role name as value.
  */
-function security_review_untrusted_roles() {
-  $defaults = _security_review_default_untrusted_roles();
+function acquia_spi_security_review_untrusted_roles() {
+  $defaults = _acquia_spi_security_review_default_untrusted_roles();
   $roles = variable_get('security_review_untrusted_roles', $defaults);
   // array_filter() to remove roles with 0 (meaning they are trusted) @todo
   return array_filter($roles);
@@ -650,12 +631,12 @@ function security_review_untrusted_roles() {
 /**
  * Helper function collects the permissions untrusted roles have.
  */
-function security_review_untrusted_permissions() {
+function acquia_spi_security_review_untrusted_permissions() {
   static $permissions;
   if (empty($permissions)) {
     $permissions = array();
     // Collect list of untrusted roles' permissions.
-    $untrusted_roles = security_review_untrusted_roles();
+    $untrusted_roles = acquia_spi_security_review_untrusted_roles();
     foreach ($untrusted_roles as $rid) {
       $perms = array();
       $results = db_query('SELECT r.rid, p.permission FROM {role} r LEFT JOIN {role_permission} p ON r.rid = p.rid WHERE r.rid = :rid', array(':rid' => $rid))
@@ -672,9 +653,9 @@ function security_review_untrusted_permissions() {
 /**
  * Helper function for assumed trusted roles.
  */
-function security_review_trusted_roles() {
+function acquia_spi_security_review_trusted_roles() {
   $trusted_roles = array();
-  $untrusted_roles = security_review_untrusted_roles();
+  $untrusted_roles = acquia_spi_security_review_untrusted_roles();
   $results = db_query('SELECT rid, name FROM {role} WHERE rid NOT IN (:rids)', array(':rids' => $untrusted_roles));
   foreach ($results as $role) {
     $trusted_roles[$role->rid] = $role->name;
@@ -685,7 +666,7 @@ function security_review_trusted_roles() {
 /**
  * Check if role has been granted a permission.
  */
-function security_review_role_permission($rid, $permission) {
+function acquia_spi_security_review_role_permission($rid, $permission) {
   $return = FALSE;
   $result = db_select('role_permission', 'p')->fields('p', array('permission'))->condition('rid', $rid)->execute()->fetchField();
   if ($result['permission'] && strpos($result['permission'], $permission) !== FALSE) {
@@ -694,6 +675,6 @@ function security_review_role_permission($rid, $permission) {
   return $return;
 }
 
-function _security_review_log($module, $check_name, $message, $variables, $type) {
-  module_invoke_all('security_review_log', $module, $check_name, $message, $variables, $type);
-}
\ No newline at end of file
+function _acquia_spi_security_review_log($module, $check_name, $message, $variables, $type) {
+  module_invoke_all('acquia_spi_security_review_log', $module, $check_name, $message, $variables, $type);
+}
diff --git a/profiles/acquia/modules/apachesolr/CHANGELOG.txt b/profiles/acquia/modules/apachesolr/CHANGELOG.txt
index 67040a7..9406a36 100644
--- a/profiles/acquia/modules/apachesolr/CHANGELOG.txt
+++ b/profiles/acquia/modules/apachesolr/CHANGELOG.txt
@@ -1,6 +1,77 @@
 Apache Solr integration 7.x-1.x-xxxx, xxxx-xx-xx
 ------------------------------
-Issue #1515580 by Nick_vh | yannou: Fixed Deleting node is impossible, stdClass problem.
+
+Apache Solr integration 7.x-1.0-rc3, 08-10-2012
+------------------------------
+#1682004 by Nick_vh: Add template hints for search results based on search page.
+#1722012 by mkalkbrenner, Nick_vh: fix for Missing argument 4 for apachesolr_multilingual_apachesolr_index_documents_alter().
+#1717490 by pwolanin: fix for Search result template suggestions relies on non-required fields.
+#1708212 by ianmthomasuk, Nick_vh: Fixed Duplicate field error when indexing single value fields.
+#1702788 by mkalkbrenner: Fixed content and teaser are empty if node->language is not default.
+#1708166 by ianmthomasuk: Fixed Thow exception if asked for invalid solr environment.
+#1717628 by Nick_vh | cpliakas: Added 'Save and Edit" functionality for configuration pages.
+#1718172 by Nick_vh, pwolanin: Fixed Move search result alter hook earlier, and make sure needed data is set.
+#1702526 by Nick_vh: Fixed apachesolr_search_page_load() is quirky.
+#1717958 by pwolanin: Fix for text_und fields should be exposed for searching in the admin section.
+#1708538 by Nick_vh: Fixed Move the start param above the query alter.
+#1700472 by pwolanin: Make 'apachesolr_search_process_response_callback' a search environment variable.
+#1439564 by recidive, neochief, Nick_vh, dawehner, jhedstrom: Added Index bundles Export/Import.
+#1652746 by martins.bertins | chrisssi: Fixed Notice: Undefined offset: 3 in _menu_translate().
+#1670198 by alanmackenzie | ruedu: Fixed Unable to export/import settings using features module.
+#1681946 by Josh Waihi: Fixed apachesolr_index_nodeapi_mass_delete() doesn't work.
+#1650096 by Nick_vh | cappadona: Fixed addParam() creates duplicate filters when dealing with fq.
+#1677050 by cpliakas: Fix for Cancel link when creating a new environment.
+#1673086 by pwolanin: Add drush commands to get, set, del environment variables.
+#1682004 by cpliakas: Added template hints for search results based on search page.
+#1672738 by Nick_vh: Added Allow a dynamic apachesolr_process_results() function.
+#1473722 by levialliance: Added Bundle specific overrides.
+#1408844 by Nick_vh, jrbeeman: Added As a site builder I want to override the environment settings in settings.php.
+#1652746 by chrisssi: Fixed Notice: Undefined offset: 3 in _menu_translate() (Zeile 775 von /var/www/includes/menu.inc).
+#1402748 by Nick_vh, killua99: Fixed Check in apachesolr_do_query() if the static of the query with that name already exists, and if so return it.
+
+Apache Solr integration 7.x-1.0-rc2, 06-21-2012
+------------------------------
+Renamed schema.xml and solrconfig.xml to rc2
+
+Apache Solr integration 7.x-1.0-rc1, 06-21-2012
+------------------------------
+#1642140 by Nick_vh: Fixed Make the search query also escape the slash and move away from menu_tail() to just 1 argument.
+#1518108 by grendzy: Added Devel interface for inspecting solr documents.
+#1402748 by Nick_vh: Fixed Check in apachesolr_do_query() if the static of the query with that name already exists, and if so return it.
+#1631702 by Nick_vh | khaled.zaidan: Fixed Report at admin/reports/apachesolr doesn't always display data from the current default solr server.
+#1647668 by paulmckibben: Fixed Error messages when indexing - Notice: Undefined property: stdClass::$nid in DatabaseStatementBase->fetchAllAssoc().
+#1475014 by ceng, Nick_vh: Fixed Drush command solr-delete-index ignores type arguments.
+#1588256 by InternetDevels.Com, Nick_vh | RaulMuroc: Fixed Warning: Invalid argument supplied for foreach() in apachesolr_entity_update() (line 1766 of /apachesolr/apachesolr.module).
+#1612530 by Nick_vh, willmoy: Added Results say '0 comments' when comment.module is disabled.
+#1522174 by pwolanin: Fixed hook_node_type_delete() is wrong.
+#1576710 by skwashd: Added Indexing with drush cron generates a lot of invalid cron notifications.
+#1543754 by iamEAP: Fixed Schema inconsistency introduced by apachesolr_update_7013.
+#1481564 by milesw: Added Allow other modules to react when there are no results.
+#1470794 by pwolanin: Added Show size of index on disk in index report.
+#1586320 by cpliakas, pwolanin: Added support for the ExternalFileField field type.
+#1613328 by cpliakas: Fixed The service_class() is not passed to apachesolr_server_status() when checking each server's status on the settings page.
+#1621142 by pwolanin: Fixed Broken logic in indexing of extra data.
+#1627484 by gnucifer: Fixed 'allowed operator" not transfered from field definitions.
+#1627604 by Nick_vh: Fixed Add query type for taxonomy_term_reference().
+#1609184 by pwolanin: Minor code cleanup in MLT response handling .
+#1611338 by remimikalsen: Added Allowing several bundles to share the same field name within a given entity type after field_mapping_alter().
+#1568126 by fearlsgroove, pwolanin: Fixed Apachesolr causes all simpletests to fail.
+#1609030 by pwolanin: Fix for Missing search page still executes search.
+#1572722 by eporama, cpliakas, wonder95: Added integration with the Entity References module.
+#1567614 by pwolanin: fix for Uninstall is not complete.
+#1559880 by pwolanin: fix for 'retain filters' checkbox does not work.
+#1558626 by pwolanin: fix for broken OR facet when value has spaces (committed in 16ef187).
+#1538244 by by julianmancera: Fix for Solr base query adds an extra slash in getPath() when there is no 'q' param.
+#1532214 by setvik, pwolanin: Fox for mergePolicy syntax has changed and throws error in Apache Solr 3.6, update config versions.
+#1536936 by pwolanin: Fix for Use json.nl=map for Luke and other json data.
+#1536628 by Nick_vh: Added exclude hook that allows to skip content without removing it from the table.
+#1536600 by Nick_vh: Fixed Performance optimizations when doing hundreds of deletes.
+#1515822 by pwolanin, Nick_vh: Added Support notion of parent entity for derived documents.
+#1519900 by pwolanin, Nick_vh, Georgique: Fixed Error in apachesolr_index_get_entities_to_index() function.
+
+Apache Solr integration 7.x-1.0-beta19, 2012-04-05
+------------------------------
+#1515580 by Nick_vh | yannou: Fixed Deleting node is impossible, stdClass problem.
 
 Apache Solr integration 7.x-1.0-beta18, 2012-04-04
 ------------------------------
diff --git a/profiles/acquia/modules/apachesolr/Drupal_Apache_Solr_Service.php b/profiles/acquia/modules/apachesolr/Drupal_Apache_Solr_Service.php
index 1785748..092846e 100644
--- a/profiles/acquia/modules/apachesolr/Drupal_Apache_Solr_Service.php
+++ b/profiles/acquia/modules/apachesolr/Drupal_Apache_Solr_Service.php
@@ -180,7 +180,12 @@ class DrupalApacheSolrService {
    */
   protected function setLuke($num_terms = 0) {
     if (empty($this->luke[$num_terms])) {
-      $url = $this->_constructUrl(self::LUKE_SERVLET, array('numTerms' => "$num_terms", 'wt' => 'json'));
+      $params = array(
+        'numTerms' => "$num_terms",
+        'wt' => 'json',
+        'json.nl' => self::NAMED_LIST_FORMAT,
+      );
+      $url = $this->_constructUrl(self::LUKE_SERVLET, $params);
       if ($this->env_id) {
         $cid = $this->env_id . ":luke:" . drupal_hash_base64($url);
         $cache = cache_get($cid, 'cache_apachesolr');
@@ -267,25 +272,28 @@ class DrupalApacheSolrService {
      '@deletes_total' => '',
      '@schema_version' => '',
      '@core_name' => '',
+     '@index_size' => '',
     );
 
     if (!empty($stats)) {
       $docs_pending_xpath = $stats->xpath('//stat[@name="docsPending"]');
-      $summary['@pending_docs'] = (int) trim($docs_pending_xpath[0]);
+      $summary['@pending_docs'] = (int) trim(current($docs_pending_xpath));
       $max_time_xpath = $stats->xpath('//stat[@name="autocommit maxTime"]');
       $max_time = (int) trim(current($max_time_xpath));
       // Convert to seconds.
       $summary['@autocommit_time_seconds'] = $max_time / 1000;
       $summary['@autocommit_time'] = format_interval($max_time / 1000);
       $deletes_id_xpath = $stats->xpath('//stat[@name="deletesById"]');
-      $summary['@deletes_by_id'] = (int) trim($deletes_id_xpath[0]);
+      $summary['@deletes_by_id'] = (int) trim(current($deletes_id_xpath));
       $deletes_query_xpath = $stats->xpath('//stat[@name="deletesByQuery"]');
-      $summary['@deletes_by_query'] = (int) trim($deletes_query_xpath[0]);
+      $summary['@deletes_by_query'] = (int) trim(current($deletes_query_xpath));
       $summary['@deletes_total'] = $summary['@deletes_by_id'] + $summary['@deletes_by_query'];
       $schema = $stats->xpath('/solr/schema[1]');
       $summary['@schema_version'] = trim($schema[0]);;
       $core = $stats->xpath('/solr/core[1]');
       $summary['@core_name'] = trim($core[0]);
+      $size_xpath = $stats->xpath('//stat[@name="indexSize"]');
+      $summary['@index_size'] = trim(current($size_xpath));
     }
 
     return $summary;
@@ -383,6 +391,7 @@ class DrupalApacheSolrService {
     // Add default params.
     $params += array(
       'wt' => 'json',
+      'json.nl' => self::NAMED_LIST_FORMAT,
     );
 
     $url = $this->_constructUrl($servlet, $params);
diff --git a/profiles/acquia/modules/apachesolr/README.txt b/profiles/acquia/modules/apachesolr/README.txt
index 97cddc6..1a03fc4 100644
--- a/profiles/acquia/modules/apachesolr/README.txt
+++ b/profiles/acquia/modules/apachesolr/README.txt
@@ -93,8 +93,15 @@ Once this module is enabled, enable blocks for facets first at
 Administer > Site configuration > Apache Solr > Enabled filters
 then position them as you like at Administer > Site building > Blocks.
 
+Settings.php
+------------
+You can override environment settings using the following syntax in your
+settings.php
+
+$conf['apachesolr_environments']['my_env_id']['url'] = 'http://localhost:8983';
+
 Configuration variables
---------------
+-----------------------
 
 The module provides some (hidden) variables that can be used to tweak its
 behavior:
@@ -130,8 +137,11 @@ behavior:
    each Solr request, such as when making {apachesolr_search_node} consistent
    with {node}.
 
+ - apachesolr_index_user: Define with which user you want the index process to
+   happen.
+
 Troubleshooting
---------------
+---------------
 Problem:
 Links to nodes appear in the search results with a different host name or
 subdomain than is preferred.  e.g. sometimes at http://example.com
diff --git a/profiles/acquia/modules/apachesolr/Solr_Base_Query.php b/profiles/acquia/modules/apachesolr/Solr_Base_Query.php
index fb6982f..95373d6 100644
--- a/profiles/acquia/modules/apachesolr/Solr_Base_Query.php
+++ b/profiles/acquia/modules/apachesolr/Solr_Base_Query.php
@@ -278,7 +278,7 @@ class SolrBaseQuery extends SolrFilterSubQuery implements DrupalSolrQueryInterfa
   protected $solrsort = array('#name' => 'score', '#direction' => 'desc');
   // A flag to allow the search to be aborted.
   public $abort_search = FALSE;
-  
+
   // A flag to check if need to retrieve another page of the result set
   public $page = 0;
 
@@ -572,7 +572,16 @@ class SolrBaseQuery extends SolrFilterSubQuery implements DrupalSolrQueryInterfa
     if (isset($new_keywords)) {
       return $this->base_path . '/' . $new_keywords;
     }
-    return $this->base_path . '/' . $this->getParam('q');
+    elseif ($this->getParam('q')) {
+      return $this->base_path . '/' . $this->getParam('q');
+    }
+    else {
+      // Return with empty query (the slash). The path for a facet
+      // becomes $this->base_path . '//facetinfo';
+      // We do this so we can have a consistent way of retrieving the query +
+      // additional parameters
+      return $this->base_path . '/';
+    }
   }
 
   public function getSolrsortUrlQuery() {
diff --git a/profiles/acquia/modules/apachesolr/apachesolr.admin.inc b/profiles/acquia/modules/apachesolr/apachesolr.admin.inc
index add7960..3cd692a 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr.admin.inc
+++ b/profiles/acquia/modules/apachesolr/apachesolr.admin.inc
@@ -15,12 +15,18 @@ function apachesolr_environment_delete_form($form, &$form_state, $environment) {
     '#type' => 'value',
     '#value' => $environment['env_id'],
   );
+  if (isset($environment['export_type']) && $environment['export_type'] == 3) {
+    $verb = t('Revert');
+  }
+  else {
+    $verb = t('Delete');
+  }
   return confirm_form(
     $form,
-    t('Are you sure you want to delete search environment %name?', array('%name' => $environment['name'])),
+    t('Are you sure you want to !verb search environment %name?', array('%name' => $environment['name'], '!verb' => strtolower($verb))),
     'admin/config/search/apachesolr',
     t('This action cannot be undone.'),
-    t('Delete'),
+    $verb,
     t('Cancel')
   );
 }
@@ -149,6 +155,12 @@ function apachesolr_environment_edit_form($form, &$form_state, $environment = NU
     '#submit' => array('apachesolr_environment_edit_submit'),
     '#value' => t('Save'),
   );
+  $form['actions']['save_edit'] = array(
+    '#type' => 'submit',
+    '#validate' => array('apachesolr_environment_edit_validate'),
+    '#submit' => array('apachesolr_environment_edit_submit'),
+    '#value' => t('Save and edit'),
+  );
   $form['actions']['test'] = array(
     '#type' => 'submit',
     '#validate' => array('apachesolr_environment_edit_validate'),
@@ -168,7 +180,7 @@ function apachesolr_environment_edit_form($form, &$form_state, $environment = NU
     $destination = $_GET['destination'];
   }
   else {
-    $destination = 'admin/config/search/apachesolr';
+    $destination = 'admin/config/search/apachesolr/settings';
   }
   $form['actions']['cancel'] = array(
     '#type' => 'link',
@@ -219,7 +231,16 @@ function apachesolr_environment_edit_submit($form, &$form_state) {
   }
   cache_clear_all('apachesolr:environments', 'cache_apachesolr');
   drupal_set_message(t('The %name search environment has been saved.', array('%name' => $form_state['values']['name'])));
-  $form_state['redirect'] = 'admin/config/search/apachesolr/settings';
+  if ($form_state['values']['op'] == t('Save')) {
+    $form_state['redirect'] = 'admin/config/search/apachesolr/settings';
+  }
+  else {
+    $form_state['redirect'] = current_path();
+  }
+  // Regardlessly of the destination parameter we want to go to another page
+  unset($_GET['destination']);
+  drupal_static_reset('drupal_get_destination');
+  drupal_get_destination();
 }
 
 /**
@@ -305,26 +326,40 @@ function apachesolr_settings($form, &$form_state) {
       ),
     );
     $env_name = l($data['name'], 'admin/config/search/apachesolr/settings/' . $data['env_id'] . '/edit', array('query' => array('destination' => $_GET['q'])));
+
     // Is this row our default environment?
     if ($environment_id == $default_environment) {
       $env_name = t('!environment <em>(Default)</em>', array('!environment' => $env_name));
       $env_class_row = 'default-environment';
-      $ops['delete'] = '';
     }
     else {
       $env_class_row = '';
-      // For every non-default we add a delete link
-      $ops['delete'] = array(
-        'class' => 'operation',
-        'data' => l(t('Delete'), 'admin/config/search/apachesolr/settings/' . $data['env_id'] . '/delete'),
-      );
     }
+    // For every non-default we add a delete link
+    // Allow to revert a search environment or to delete it
+    $delete_value = '';
+    if (!isset($data['in_code_only'])) {
+      if ((isset($data['type']) && $data['type'] == 'Overridden')) {
+        $delete_value = array(
+          'class' => 'operation',
+          'data' => l(t('Revert'), 'admin/config/search/apachesolr/settings/' . $data['env_id'] . '/delete'),
+        );
+      }
+      // don't allow the deletion of the default environment
+      elseif ($environment_id != $default_environment) {
+        $delete_value = array(
+          'class' => 'operation',
+          'data' => l(t('Delete'), 'admin/config/search/apachesolr/settings/' . $data['env_id'] . '/delete'),
+        );
+      }
+    }
+    $ops['delete'] = $delete_value;
 
     // When we are receiving a http POST (so the page does not show) we do not
     // want to check the statusses of any environment
     $class = '';
     if (empty($form_state['input'])) {
-      $class = apachesolr_server_status($data['url']) ? 'ok' : 'error';
+      $class = apachesolr_server_status($data['url'], $data['service_class']) ? 'ok' : 'error';
     }
 
     $headers = array(
@@ -431,7 +466,7 @@ function apachesolr_status_page($environment = NULL) {
   }
 
   // Check for availability
-  if (!apachesolr_server_status($environment['url'])) {
+  if (!apachesolr_server_status($environment['url'], $environment['service_class'])) {
     drupal_set_message(t('The server seems to be unavailable. Please verify the server settings at the <a href="!settings_page">settings page</a>', array('!settings_page' => url("admin/config/search/apachesolr/settings/{$environment['env_id']}/edit", array('query' =>  drupal_get_destination())))), 'warning');
     return '';
   }
@@ -461,9 +496,11 @@ function apachesolr_status_page($environment = NULL) {
         drupal_set_message(t('Your schema.xml version is too old. You must update it and re-index your content.'), 'error');
       }
       $pending_msg = $stats_summary['@pending_docs'] ? t('(@pending_docs sent but not yet processed)', $stats_summary) : '';
-      $indexed_message = t('@num Items !pending', array(
+      $index_msg = $stats_summary['@index_size'] ? t('(@index_size on disk)', $stats_summary) : '';
+      $indexed_message = t('@num Items !pending !index_msg', array(
         '@num' => $data->index->numDocs,
         '!pending' => $pending_msg,
+        '!index_msg' => $index_msg,
       ));
       $messages[] = array('Indexed', $indexed_message);
 
@@ -490,7 +527,7 @@ function apachesolr_status_page($environment = NULL) {
   $output['apachesolr_index_action_status'] = array(
     '#prefix' => '<h3>' . t('@environment: Search Index Content', array('@environment' => $environment['name'])) . '</h3>',
     '#theme' => 'table',
-    '#header' => array('type', 'value'),
+    '#header' => array(t('Type'), t('Value')),
     '#rows' => $messages,
   );
 
@@ -510,16 +547,31 @@ function apachesolr_status_page($environment = NULL) {
   return $output;
 }
 
-function apachesolr_index_report($env_id) {
+function apachesolr_index_report($environment = NULL) {
+  if (!$environment) {
+    $env_id = apachesolr_default_environment();
+    drupal_goto('admin/reports/apachesolr/' . $env_id);
+  }
+  $environments = apachesolr_load_all_environments();
+  $environments_list = array();
+  foreach ($environments as $env) {
+    $var_status = array('!name' =>$env['name']);
+    $environments_list[] = l(t('Statistics for !name', $var_status), 'admin/reports/apachesolr/' . $env['env_id']);
+  }
+  $output['environments_list'] = array(
+    '#theme' => 'item_list',
+    '#items' => $environments_list,
+  );
+
   try {
-    $solr = apachesolr_get_solr($env_id);
+    $solr = apachesolr_get_solr($environment['env_id']);
     $solr->clearCache();
     $data = $solr->getLuke();
   }
   catch (Exception $e) {
     watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
     drupal_set_message(nl2br(check_plain($e->getMessage())), "warning");
-    return '';
+    return $output;
   }
 
   $messages = array();
@@ -533,7 +585,7 @@ function apachesolr_index_report($env_id) {
   elseif (isset($data->index->numDocs)) {
     $not_found = t('Not indexed');
     try {
-      $solr = apachesolr_get_solr($env_id);
+      $solr = apachesolr_get_solr($environment['env_id']);
       // Note: we use 2 since 1 fails on Ubuntu Hardy.
       $data = $solr->getLuke(2);
       $messages[] = array(t('# of terms in index'), $data->index->numTerms);
@@ -592,10 +644,17 @@ function apachesolr_index_report($env_id) {
 /**
  * Page callback to show available conf files.
  */
-function apachesolr_config_files_overview() {
+function apachesolr_config_files_overview($environment = NULL) {
+  if (!$environment) {
+    $env_id = apachesolr_default_environment();
+  }
+  else {
+    $env_id = $environment['env_id'];
+  }
+
   $xml = NULL;
   try {
-    $solr = apachesolr_get_solr();
+    $solr = apachesolr_get_solr($env_id);
     $response = $solr->makeServletRequest('admin/file', array('wt' => 'xml'));
     $xml = simplexml_load_string($response->data);
   }
@@ -618,7 +677,7 @@ function apachesolr_config_files_overview() {
       // Get data from the files.
       $name =  $item->attributes();
       $name = ((string)$item->attributes()) ? (string)$item->attributes() : t('No name found');
-      $files[$item_id]['name'] = l($name, 'admin/reports/apachesolr/conf/' . $name);
+      $files[$item_id]['name'] = l($name, 'admin/reports/apachesolr/' . $env_id . '/conf/' . $name);
 
       // Retrieve the date attribute
       if (isset($item->date)) {
@@ -658,10 +717,17 @@ function apachesolr_config_files_overview() {
 /**
  * Page callback to show one conf file.
  */
-function apachesolr_config_file($name) {
+function apachesolr_config_file($name, $environment = NULL) {
+  if (!$environment) {
+    $env_id = apachesolr_default_environment();
+  }
+  else {
+    $env_id = $environment['env_id'];
+  }
+
   $output = '';
   try {
-    $solr = apachesolr_get_solr();
+    $solr = apachesolr_get_solr($env_id);
     $response = $solr->makeServletRequest('admin/file', array('file' => $name));
     $raw_file = $response->data;
     $output = '<pre>' . check_plain($raw_file) . '</pre>';
@@ -927,6 +993,7 @@ function apachesolr_index_batch_index_entities($env_id, &$context) {
 
     $status = apachesolr_index_status($env_id);
     $context['sandbox']['progress'] = 0;
+    $context['sandbox']['submitted'] = 0;
     $context['sandbox']['max'] = $status['remaining'];
   }
 
@@ -934,8 +1001,20 @@ function apachesolr_index_batch_index_entities($env_id, &$context) {
   // timeout or out of memory error.
   $limit = variable_get('apachesolr_cron_limit', 50);
 
-  $context['sandbox']['progress'] += apachesolr_index_entities($env_id, $limit);
-  $context['message'] = t('Indexed @current of @total nodes', array('@current' => $context['sandbox']['progress'], '@total' => $context['sandbox']['max']));
+  if ($context['sandbox']['max'] >= $context['sandbox']['progress'] + $limit) {
+    $context['sandbox']['progress'] += $limit;
+  }
+  else {
+    $context['sandbox']['progress'] = $context['sandbox']['max'];
+  }
+  $context['sandbox']['submitted'] += apachesolr_index_entities($env_id, $limit);
+
+  $arguments = array(
+    '@current' => $context['sandbox']['progress'],
+    '@total' => $context['sandbox']['max'],
+    '@submitted' => $context['sandbox']['submitted'],
+    );
+  $context['message'] = t('Inspected @current of @total entities. Submitted @submitted documents to Solr', $arguments);
 
   // Inform the batch engine that we are not finished, and provide an
   // estimation of the completion level we reached.
@@ -945,6 +1024,7 @@ function apachesolr_index_batch_index_entities($env_id, &$context) {
   // show it to the admin.
   if ($context['finished']) {
     $context['results']['count'] = $context['sandbox']['progress'];
+    $context['results']['submitted'] = $context['sandbox']['submitted'];
   }
 }
 
@@ -955,7 +1035,10 @@ function apachesolr_index_batch_index_finished($success, $results, $operations)
   $message = '';
   // $results['count'] will not be set if Solr is unavailable.
   if (isset($results['count'])) {
-    $message .= format_plural($results['count'], '1 item processed successfully.', '@count items successfully processed.');
+    $message .= format_plural($results['count'], '1 item processed successfully. ', '@count items successfully processed. ');
+  }
+  if (isset($results['submitted'])) {
+    $message .= format_plural($results['submitted'], '1 document successfully sent to Solr.', '@count documents successfully sent to Solr.');
   }
   if ($success) {
     $type = 'status';
@@ -1033,15 +1116,39 @@ function apachesolr_index_config_form_submit($form, &$form_state) {
     // even if there is no change so the admin can remove
     // bundles if there was an error.
     $excluded_bundles = array_diff($all_bundles, $new_bundles);
-    apachesolr_index_delete_bundles($env_id, $entity_type, $excluded_bundles);
-    $callback = apachesolr_entity_get_callback($entity_type, 'bundles changed callback');
-    if (!empty($callback)) {
-      call_user_func($callback, $env_id, $existing_bundles, $new_bundles);
+    if (apachesolr_index_delete_bundles($env_id, $entity_type, $excluded_bundles)) {
+      $callback = apachesolr_entity_get_callback($entity_type, 'bundles changed callback');
+      if (!empty($callback)) {
+        call_user_func($callback, $env_id, $existing_bundles, $new_bundles);
+      }
+    }
+    else {
+      drupal_set_message(t('The Apache Solr search engine is not available. Please contact your site administrator.'), 'error');
     }
   }
 
   // Clear the entity cache, since we will be changing its data.
   entity_info_cache_clear();
-
+  cache_clear_all('apachesolr:environments', 'cache_apachesolr');
   drupal_set_message(t('Your settings have been saved.'));
 }
+
+/**
+ * Page callback for node/%node/devel/apachesolr.
+ */
+function apachesolr_devel($node) {
+  $item = new stdClass();
+  $item->entity_type = 'node';
+  $item->entity_id = $node->nid;
+  module_load_include('inc', 'apachesolr', 'apachesolr.index');
+  $documents = apachesolr_index_entity_to_documents($item, apachesolr_default_environment());
+  $output = ' ';
+  foreach ($documents as $document) {
+    $debug_data = array();
+    foreach ($document as $key => $value) {
+      $debug_data[$key] = $value;
+    }
+    $output .= kdevel_print_object($debug_data);
+  }
+  return $output;
+}
\ No newline at end of file
diff --git a/profiles/acquia/modules/apachesolr/apachesolr.api.php b/profiles/acquia/modules/apachesolr/apachesolr.api.php
old mode 100644
new mode 100755
index 6bd9a28..f0e9c96
--- a/profiles/acquia/modules/apachesolr/apachesolr.api.php
+++ b/profiles/acquia/modules/apachesolr/apachesolr.api.php
@@ -196,15 +196,55 @@ function hook_apachesolr_delete_by_query_alter($query) {
 }
 
 /**
+ * This is the place to look for the replacement to hook_apachesolr_node_exclude
+ * You should define a replacement for the status callback and return
+ * FALSE for entities which you do not want to appear in the index and TRUE for
+ * those that you want to include
+ */
+
+/**
+ * This is invoked for each entity that is being inspected to be added to the
+ * index. if any module returns TRUE, the entity is skipped for indexing.
+ *
+ * @param integer $entity_id
+ * @param string $entity_type
+ * @param integer $row
+ *   A complete set of data from the indexing table.
+ * @param string $env_id
+ * @return boolean
+ */
+function hook_apachesolr_exclude($entity_id, $entity_type, $row, $env_id) {
+  // Never index media entities to core_1
+  if ($entity_type == 'media' && $env_id == 'core_1') {
+    return TRUE;
+  }
+  return FALSE;
+}
+
+/**
+ * This is invoked for each entity from the type of ENTITY_TYPE that is being
+ * inspected to be added to the index. if any module returns TRUE, 
+ * the entity is skipped for indexing.
+ *
+ * @param integer $entity_id
+ * @param integer $row
+ *   A complete set of data from the indexing table.
+ * @param string $env_id
+ * @return boolean
+ */
+function hook_apachesolr_ENTITY_TYPE_exclude($entity_id, $row, $env_id) {
+  // Never index ENTITY_TYPE to core_1
+  if ($env_id == 'core_1') {
+    return TRUE;
+  }
+  return FALSE;
+}
+
+/**
  * Add information to index other entities.
  * There are some modules in http://drupal.org that can give a good example of
  * custom entity indexing such as apachesolr_user_indexer, apachesolr_term
  *
- * This is the place to look for the replacement to hook_apachesolr_node_exclude
- * You should define a replacement for the status callback and return
- * 0 for nodes which you do not want to appear in the index and 1 for nodes
- * that you do. See http://drupal.org/node/1474906 for an example.
- *
  * @param array $entity_info
  */
 function hook_apachesolr_entity_info_alter(&$entity_info) {
@@ -230,6 +270,13 @@ function hook_apachesolr_entity_info_alter(&$entity_info) {
   $entity_info['node']['cron_check'] = 'apachesolr_index_node_check_table';
   // Specific output processing for the results
   $entity_info['node']['apachesolr']['result callback'] = 'apachesolr_search_node_result';
+
+  // BUNDLE SPECIFIC OVERRIDES
+  // The following can be overridden on a per-bundle basis.
+  // The bundle-specific settings will take precedence over the entity settings.
+  $entity_info['node']['bundles']['page']['apachesolr']['result callback'] = 'apachesolr_search_node_result';
+  $entity_info['node']['bundles']['page']['apachesolr']['status callback'][] = 'apachesolr_index_node_status_callback';
+  $entity_info['node']['bundles']['page']['apachesolr']['document callback'][] = 'apachesolr_index_node_solr_document';
 }
 
 
@@ -325,12 +372,14 @@ function hook_apachesolr_index_document_build(ApacheSolrDocument $document, $ent
  * @param $entity_type
  */
 function hook_apachesolr_index_document_build_ENTITY_TYPE(ApacheSolrDocument $document, $entity, $env_id) {
-  // Index book module data.
-  if (!empty($entity->book['bid'])) {
-    // Hard-coded - must change if apachesolr_index_key() changes.
-    $document->is_book_bid = (int) $entity->book['bid'];
+  // Index field_main_image as a separate field
+  if ($entity->type == 'profile') {
+    $user = user_load(array('uid' => $entity->uid));
+    // Hard coded field, not recommended for inexperienced users.
+    $document->setMultiValue('sm_field_main_image', $user->picture);
   }
 }
+
 /**
  * Alter the prepared documents from one entity before sending them to Solr.
  *
diff --git a/profiles/acquia/modules/apachesolr/apachesolr.index.inc b/profiles/acquia/modules/apachesolr/apachesolr.index.inc
index d1e7de6..655ee89 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr.index.inc
+++ b/profiles/acquia/modules/apachesolr/apachesolr.index.inc
@@ -10,25 +10,47 @@
  * Send up to $limit entities of each type into the index.
  */
 function apachesolr_index_entities($env_id, $limit) {
-  $entities_processed = 0;
+  $documents_submitted = 0;
   foreach (entity_get_info() as $entity_type => $info) {
     // With each pass through the callback, retrieve the next group of nids.
     $rows = apachesolr_index_get_entities_to_index($env_id, $entity_type, $limit);
     $documents = array();
     foreach ($rows as $row) {
-      if (!empty($row)) {
-        $documents = array_merge($documents, apachesolr_index_entity_to_documents($row, $env_id));
+      if (!empty($row->status)) {
+        // Let any module exclude this entity from the index.
+        $build_document = TRUE;
+        foreach (module_implements('apachesolr_exclude') as $module) {
+          $exclude = module_invoke($module, 'apachesolr_exclude', $row->entity_id, $entity_type, $row, $env_id);
+          // If the hook returns TRUE we should exclude the entity
+          if (!empty($exclude)) {
+            $build_document = FALSE;
+          }
+        }
+        foreach (module_implements('apachesolr_' . $entity_type . '_exclude') as $module) {
+          $exclude = module_invoke($module, 'apachesolr_' . $entity_type . '_exclude', $row->entity_id, $row, $env_id);
+          // If the hook returns TRUE we should exclude the entity
+          if (!empty($exclude)) {
+            $build_document = FALSE;
+          }
+        }
+        if ($build_document) {
+          $documents = array_merge($documents, apachesolr_index_entity_to_documents($row, $env_id));
+        }
+      }
+      else {
+        // Delete the entity from our index if the status callback returned 0
+        apachesolr_remove_entity($env_id, $row->entity_type, $row->entity_id);
       }
     }
 
     $indexed = apachesolr_index_send_to_solr($env_id, $documents);
     if ($indexed !== FALSE) {
-      $entities_processed += count($rows);
+      $documents_submitted += count($documents);
       $index_position = apachesolr_get_last_index_position($env_id, $entity_type);
       $max_changed = $index_position['last_changed'];
       $max_entity_id = $index_position['last_entity_id'];
       foreach ($rows as $row) {
-        if (!empty($row)) {
+        if (!empty($row->status)) {
           if ($row->changed > $max_changed) {
             $max_changed = $row->changed;
           }
@@ -41,8 +63,7 @@ function apachesolr_index_entities($env_id, $limit) {
       apachesolr_set_last_index_updated($env_id, REQUEST_TIME);
     }
   }
-
-  return $entities_processed;
+  return $documents_submitted;
 }
 
 /**
@@ -68,7 +89,6 @@ function apachesolr_index_status($env_id) {
     // for ordering we're grabbing the oldest first and then ordering by ID so
     // that we get a definitive order.
     $query = db_select($table, 'aie')
-      ->condition('aie.status', 1)
       ->condition('aie.bundle', $bundles)
       ->condition(db_or()
         ->condition('aie.changed', $last_changed, '>')
@@ -104,7 +124,7 @@ function apachesolr_index_entity_to_documents($item, $env_id) {
   // Should indexing take place using anon ( default )
   // or as another user
   $uid = variable_get('apachesolr_index_user', 0);
-  if($uid == 0) {
+  if ($uid == 0) {
     $user = drupal_anonymous_user();
   }
   else {
@@ -128,7 +148,7 @@ function apachesolr_index_entity_to_documents($item, $env_id) {
   $document = _apachesolr_index_process_entity_get_document($entity, $entity_type);
 
   //Get the callback array to add stuff to the document
-  $callbacks = apachesolr_entity_get_callback($entity_type, 'document callback');
+  $callbacks = apachesolr_entity_get_callback($entity_type, 'document callback', $bundle);
   $documents = array();
   foreach ($callbacks as $callback) {
     // Call a type-specific callback to add stuff to the document.
@@ -167,7 +187,12 @@ function apachesolr_index_entity_to_documents($item, $env_id) {
   }
 
   // Now allow modules to alter each other's additions for maximum flexibility.
-  drupal_alter('apachesolr_index_documents', $documents, $entity, $entity_type, $env_id);
+
+  // Hook to allow modifications of the retrieved results
+  foreach (module_implements('apachesolr_index_documents_alter') as $module) {
+    $function = $module . '_apachesolr_index_documents_alter';
+    $function($documents, $entity, $entity_type, $env_id);
+  }
 
   // Restore the user.
   $user = $saved_user;
@@ -182,11 +207,6 @@ function apachesolr_index_entity_to_documents($item, $env_id) {
  * @return number indexed, or FALSE on failure.
  */
 function apachesolr_index_send_to_solr($env_id, $documents) {
-  // Do not index when we do not have any documents to send
-  if (empty($documents)) {
-    return FALSE;
-  }
-
   try {
     // Get the $solr object
     $solr = apachesolr_get_solr($env_id);
@@ -199,7 +219,11 @@ function apachesolr_index_send_to_solr($env_id, $documents) {
     watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
     return FALSE;
   }
-
+  // Do not index when we do not have any documents to send
+  // Send TRUE because this is not an error
+  if (empty($documents)) {
+    return TRUE;
+  }
   // Send the document off to Solr.
   watchdog('Apache Solr', 'Adding @count documents.', array('@count' => count($documents)));
   try {
@@ -337,9 +361,9 @@ function apachesolr_index_get_entities_to_index($env_id, $entity_type, $limit) {
   // Find the next batch of entities to index for this entity type.  Note that
   // for ordering we're grabbing the oldest first and then ordering by ID so
   // that we get a definitive order.
+  // Also note that we fetch ALL fields from the indexer table
   $query = db_select($table, 'aie')
-    ->fields('aie', array('entity_type', 'entity_id', 'changed'))
-    ->condition('aie.status', 1)
+    ->fields('aie')
     ->condition('aie.bundle', $bundles)
     ->condition(db_or()
       ->condition('aie.changed', $last_changed, '>')
@@ -357,55 +381,62 @@ function apachesolr_index_get_entities_to_index($env_id, $entity_type, $limit) {
 
   $status_callbacks = apachesolr_entity_get_callback($entity_type, 'status callback');
   foreach ($records as $record) {
-    // Check status callback before sending to the index
-    $status = TRUE;
-    foreach($status_callbacks as $status_callback) {
-      if (is_callable($status_callback)) {
-        // by placing $status in front we prevent calling any other callback
-        // after one status callback returned false
-        $status = $status && $status_callback($record->entity_id, $record->entity_type);
-      }
-    }
-
-    // Delete the entity from our index if the status callback returns 0
-    if ($status == TRUE) {
-      $rows[] = $record;
-    }
-    else {
-      // Discard this entry
-      $rows[] = NULL;
-      // Delete if from the index - Do not use apachesolr_entity_delete because
-      // the module does not want to load a complete entity
-      if (apachesolr_index_delete_entity_from_index($env_id, $record->entity_type, $record->entity_id)) {
-        // There was no exception, so delete from the table.
-        db_delete($table)
-          ->condition('entity_type', $entity_type)
-          ->condition('entity_id', $id)
-          ->execute();
+    // Check status and status callbacks before sending to the index
+    if (is_array($status_callbacks)) {
+      foreach($status_callbacks as $status_callback) {
+        if (is_callable($status_callback)) {
+          // by placing $status in front we prevent calling any other callback
+          // after one status callback returned false
+          $record->status = $record->status && $status_callback($record->entity_id, $record->entity_type);
+        }
       }
     }
+    $rows[] = $record;
   }
   return $rows;
 }
 
 /**
- * Delete an index from an environment and/or a specific entity type
- * @param String $env_id
- * @param String $type
+ * Delete the whole index for an environment.
+ *
+ * @param string $env_id
+ *   The solr environment indentifier.
+ * @param string $entity_type
+ *   (optional) specify to remove just this entity_type from the index.
+ * @param string $bundle
+ *   (optional) also specify a bundle to remove just the bundle from
+ *   the index.
  */
-function apachesolr_index_delete_index($env_id) {
+function apachesolr_index_delete_index($env_id, $entity_type = NULL, $bundle = NULL) {
   // Instantiate a new Solr object.
   try {
     $solr = apachesolr_get_solr($env_id);
     $query = '*:*';
 
+    if (!empty($entity_type) && !empty($bundle)) {
+      $query = "(bundle:$bundle AND entity_type:$entity_type) OR sm_parent_entity_bundle:{$entity_type}-{$bundle}";
+    }
+    elseif (!empty($bundle)) {
+      $query = "(bundle:$bundle)";
+    }
+
     // Allow other modules to modify the delete query.
     // For example, use the site hash so that you only delete this site's
     // content:  $query = 'hash:' . apachesolr_site_hash()
     drupal_alter('apachesolr_delete_by_query', $query);
     $solr->deleteByQuery($query);
     $solr->commit();
-    apachesolr_clear_last_index_position($env_id);
+
+    if (!empty($entity_type)) {
+      $rebuild_callback = apachesolr_entity_get_callback($entity_type, 'reindex callback');
+      if (is_callable($rebuild_callback)) {
+        $rebuild_callback($env_id, $bundle);
+      }
+    }
+    else {
+      apachesolr_index_mark_for_reindex($env_id);
+    }
+
     apachesolr_set_last_index_updated($env_id, REQUEST_TIME);
   }
   catch (Exception $e) {
@@ -413,12 +444,24 @@ function apachesolr_index_delete_index($env_id) {
   }
 }
 
-function apachesolr_index_delete_bundles($env_id, $entity_type, $excluded_bundles) {
+/**
+ * Delete from the index documents with the entity type and any of the excluded bundles.
+ *
+ * Also deletes all documents that have the entity type and bundle as a parent.
+ *
+ * @param string $env_id
+ * @param string $entity_type
+ * @param array $excluded_bundles
+ *
+ * @return TRUE on success, FALSE on failure.
+ */
+function apachesolr_index_delete_bundles($env_id, $entity_type, array $excluded_bundles) {
   // Remove newly omitted bundles.
   try {
     $solr = apachesolr_get_solr($env_id);
     foreach ($excluded_bundles as $bundle) {
-      $query = "bundle:$bundle AND entity_type:$entity_type";
+      $query = "(bundle:$bundle AND entity_type:$entity_type) OR sm_parent_entity_bundle:{$entity_type}-{$bundle}";
+
       // Allow other modules to modify the delete query.
       // For example, use the site hash so that you only delete this site's
       // content:  $query = 'hash:' . apachesolr_site_hash()
@@ -428,15 +471,24 @@ function apachesolr_index_delete_bundles($env_id, $entity_type, $excluded_bundle
     if ($excluded_bundles) {
       $solr->commit();
     }
+    return TRUE;
   }
   catch (Exception $e) {
     watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
-    drupal_set_message(t('The Apache Solr search engine is not available. Please contact your site administrator.'), 'error');
+    return FALSE;
   }
 }
 
 /**
- * Delete an entity from the indexer.
+ * Delete an entity from the index.
+ *
+ * Also deletes all documents that have the deleted document as a parent.
+ *
+ * @param string $env_id
+ * @param string $entity_type
+ * @param string $entity_id
+ *
+ * @return TRUE on success, FALSE on failure.
  */
 function apachesolr_index_delete_entity_from_index($env_id, $entity_type, $entity_id) {
   static $failed = FALSE;
@@ -445,7 +497,9 @@ function apachesolr_index_delete_entity_from_index($env_id, $entity_type, $entit
   }
   try {
     $solr = apachesolr_get_solr($env_id);
-    $solr->deleteById(apachesolr_document_id($entity_id, $entity_type));
+    $document_id = apachesolr_document_id($entity_id, $entity_type);
+    $query = "id:$document_id OR sm_parent_document_id:$document_id";
+    $solr->deleteByQuery($query);
     apachesolr_set_last_index_updated($env_id, REQUEST_TIME);
     return TRUE;
   }
@@ -458,7 +512,7 @@ function apachesolr_index_delete_entity_from_index($env_id, $entity_type, $entit
 }
 
 /**
- * @param $entity_id
+ * @param $entity_type
  *
  * @throws Exception
  */
@@ -571,17 +625,20 @@ function apachesolr_index_node_solr_document(ApacheSolrDocument $document, $node
   $document->label = apachesolr_clean_text($node->title);
 
   // Build the node body.
-  $build = node_view($node, 'search_index');
-  // Why do we need this?
+  $build = node_view($node, 'search_index', !empty($node->language) ? $node->language : LANGUAGE_NONE);
+  // Remove useless html crap out of the render.
   unset($build['#theme']);
   $text = drupal_render($build);
   $document->content = apachesolr_clean_text($text);
+
+  // Adding the teaser
   if (isset($node->teaser)) {
     $document->teaser = apachesolr_clean_text($node->teaser);
   }
   else {
     $document->teaser = truncate_utf8($document->content, 300, TRUE);
   }
+
   // Path aliases can have important information about the content.
   // Add them to the index as well.
   if (function_exists('drupal_get_path_alias')) {
@@ -595,6 +652,7 @@ function apachesolr_index_node_solr_document(ApacheSolrDocument $document, $node
     }
   }
 
+  // Author information
   $document->ss_name = $node->name;
   // We want the name to be searchable for keywords.
   $document->tos_name = $node->name;
@@ -604,14 +662,14 @@ function apachesolr_index_node_solr_document(ApacheSolrDocument $document, $node
   $username = format_username($account);
   $document->ss_name_formatted = $username;
   $document->tos_name_formatted = $username;
-
-  // Everything else uses dynamic fields
   $document->is_uid = $node->uid;
   $document->bs_status = $node->status;
   $document->bs_sticky = $node->sticky;
   $document->bs_promote = $node->promote;
   $document->is_tnid = $node->tnid;
   $document->bs_translate = $node->translate;
+
+  // Language specific checks
   if (empty($node->language)) {
     // 'und' is the language-neutral code in Drupal 7.
     $document->ss_language = LANGUAGE_NONE;
@@ -619,46 +677,29 @@ function apachesolr_index_node_solr_document(ApacheSolrDocument $document, $node
   else {
     $document->ss_language = $node->language;
   }
+
+  // Timestamp of the node
   $document->ds_created = apachesolr_date_iso($node->created);
   $document->ds_changed = apachesolr_date_iso($node->changed);
+
+  // Comment counts + time
   if (isset($node->last_comment_timestamp) && !empty($node->comment_count)) {
     $document->ds_last_comment_timestamp = apachesolr_date_iso($node->last_comment_timestamp);
     $document->ds_last_comment_or_change = apachesolr_date_iso(max($node->last_comment_timestamp, $node->changed));
+    $document->is_comment_count = $node->comment_count;
   }
   else {
     $document->ds_last_comment_or_change = apachesolr_date_iso($node->changed);
   }
-  $document->is_comment_count = isset($node->comment_count) ? $node->comment_count : 0;
 
   // Fetch extra data normally not visible, including comments.
   // We do this manually (with module_implements instead of node_invoke_nodeapi)
   // because we want a keyed array to come back. Only in this way can we decide
   // whether to index comments or not.
   $extra = array();
-  $exclude_comments = in_array($node->type, variable_get('apachesolr_exclude_comments_types', array()), TRUE);
+  $excludes = variable_get('apachesolr_exclude_nodeapi_types', array());
+  $exclude_nodeapi = isset($excludes[$node->type]) ? $excludes[$node->type] : array();
 
-  if (!empty($extra)) {
-    // Use an omit-norms text field since this is generally going to be short; not
-    // really a full-text field.
-    $document->tos_content_extra = apachesolr_clean_text(implode(' ', $extra));
-  }
-
-  $document->type_name = node_type_get_name($node);
-  $document->created = apachesolr_date_iso($node->created);
-  $document->changed = apachesolr_date_iso($node->changed);
-  $last_change = (isset($node->last_comment_timestamp) && $node->last_comment_timestamp > $node->changed) ? $node->last_comment_timestamp : $node->changed;
-  $document->last_comment_or_change = apachesolr_date_iso($last_change);
-  $document->comment_count = isset($node->comment_count) ? $node->comment_count : 0;
-
-  // We need to get the real username here, since it needs a full user object.
-  // That means we can't do the format_username() call on the display side.
-  $document->name = format_username(user_load($node->uid));
-
-  // Fetch extra data normally not visible, including comments.
-  // We do this manually (with module_implements instead of node_invoke_nodeapi)
-  // because we want a keyed array to come back. Only in this way can we decide
-  // whether to index comments or not.
-  $extra = array();
   foreach (module_implements('node_update_index') as $module) {
     // Invoke nodeapi if this module has not been excluded, for example,
     // exclude 'comment' for a type to skip indexing its comments.
@@ -667,17 +708,23 @@ function apachesolr_index_node_solr_document(ApacheSolrDocument $document, $node
       if ($output = $function($node)) {
         $extra[$module] = $output;
       }
+    }
   }
-  }
+
+  // Adding the text of the comments
   if (isset($extra['comment'])) {
     $comments = $extra['comment'];
+    // Remove comments from the extra fields
     unset($extra['comment']);
     $document->ts_comments = apachesolr_clean_text($comments);
     // @todo: do we want to reproduce apachesolr_add_tags_to_document() for comments?
   }
-  // Use an omit-norms text field since this is generally going to be short; not
-  // really a full-text field.
-  $document->tos_content_extra = apachesolr_clean_text(implode(' ', $extra));
+  // If there are other extra fields, add them to the document
+  if (!empty($extra)) {
+    // Use an omit-norms text field since this is generally going to be short; not
+    // really a full-text field.
+    $document->tos_content_extra = apachesolr_clean_text(implode(' ', $extra));
+  }
 
   //  Generic usecase for future reference. Callbacks can
   //  allow you to send back multiple documents
@@ -688,59 +735,59 @@ function apachesolr_index_node_solr_document(ApacheSolrDocument $document, $node
 
 
 function apachesolr_index_node_bundles_changed($env_id, $existing_bundles, $new_bundles) {
-  $removed_bundles = array_diff($existing_bundles, $new_bundles);
-  $added_bundles = array_diff($new_bundles, $existing_bundles);
-  $indexer_table = apachesolr_get_indexer_table('node');
-  $transaction = db_transaction();
-  try {
-    if ($removed_bundles) {
-      db_delete($indexer_table)
-        ->condition('entity_type', 'node')
-        ->condition('bundle', $removed_bundles)
-        ->execute();
-    }
-    if ($added_bundles) {
-      $select = db_select('node', 'n');
-      $select->addExpression("'node'", 'entity_type');
-      $select->condition('type', $added_bundles);
-      $select->addField('n', 'nid', 'entity_id');
-      $select->addField('n', 'type', 'bundle');
-      $select->addField('n', 'status', 'status');
-      $select->addExpression(REQUEST_TIME, 'changed');
-
-      $insert = db_insert($indexer_table)
-        ->fields(array('entity_id', 'bundle', 'status', 'entity_type', 'changed'))
-        ->from($select)
-        ->execute();
-    }
-  }
-  catch (Exception $e) {
-    $transaction->rollback();
-    throw $e;
-  }
+  // Nothing to do for now.
 }
 
 /**
  * Reindexing callback for ApacheSolr, for nodes.
  *
- * @param String $env_id
+ * @param string $env_id
+ *   The solr environment
+ * @param string|null $bundle
+ *   (optional) The bundle type to reindex. If not used
+ *   all bundles will be reindexed.
  *
  * @throws Exception
  */
-function apachesolr_index_node_solr_reindex($env_id) {
+function apachesolr_index_node_solr_reindex($env_id, $bundle = NULL) {
   $indexer_table = apachesolr_get_indexer_table('node');
   $transaction = db_transaction();
   try {
-    db_delete($indexer_table)
-      ->condition('entity_type', 'node')
-      ->execute();
+    // Leave status 0 rows - those need to be
+    // removed from the index later.
+    $delete = db_delete($indexer_table);
+    $delete->condition('status', 1);
+
+    if (!empty($bundle)) {
+      $delete->condition('bundle', $bundle);
+    }
+
+    $delete->execute();
+
+    $indexable_bundles = apachesolr_get_index_bundles($env_id, 'node');
+
+    if ($bundle && !empty($indexable_bundles) && !in_array($bundle, $indexable_bundles)) {
+      // The bundle specified is not in the indexable bundles list.
+      return;
+    }
+
     $select = db_select('node', 'n');
+    $select->condition('status', 1);
     $select->addExpression("'node'", 'entity_type');
     $select->addField('n', 'nid', 'entity_id');
     $select->addField('n', 'type', 'bundle');
     $select->addField('n', 'status', 'status');
     $select->addExpression(REQUEST_TIME, 'changed');
 
+    if ($bundle) {
+      // Mark all nodes of the specified content type for reindexing.
+      $select->condition('n.type', $bundle);
+    }
+    elseif (!empty($indexable_bundles)) {
+      // Restrict reindex to content types in the indexable bundles list.
+      $select->condition('n.type', $indexable_bundles, 'IN');
+    }
+
     $insert = db_insert($indexer_table)
       ->fields(array('entity_id', 'bundle', 'status', 'entity_type', 'changed'))
       ->from($select)
@@ -880,17 +927,16 @@ function apachesolr_fields_default_indexing_callback($entity, $field_name, $inde
         'key' => $index_key,
         'value' => $function($values[$i]['value']),
       );
-
-      // Only store the first value of the field in a singular index
-      if ($numeric && ($i == 0)) {
-        $singular_field_info = $field_info;
-        $singular_field_info['multiple'] = FALSE;
-        $single_key = apachesolr_index_key($singular_field_info);
-        $fields[] = array(
-          'key' => $single_key,
-          'value' => $function($values[$i]['value']),
-        );
-      }
+    }
+    // Also store the first value of the field in a singular index for multi value fields
+    if ($field_info['multiple'] && $numeric && !empty($values[0])) {
+      $singular_field_info = $field_info;
+      $singular_field_info['multiple'] = FALSE;
+      $single_key = apachesolr_index_key($singular_field_info);
+      $fields[] = array(
+        'key' => $single_key,
+        'value' => $function($values[0]['value']),
+      );
     }
   }
   return $fields;
@@ -1018,6 +1064,33 @@ function apachesolr_userreference_indexing_callback($entity, $field_name, $index
 }
 
 /**
+ * Indexing callback for entityreference fields.
+ */
+function apachesolr_entityreference_indexing_callback($entity, $field_name, $index_key, $field_info) {
+  $fields = array();
+  if (!empty($entity->{$field_name})) {
+
+    // Gets entity type and index key. We need to prefix the ID with the entity
+    // type so we know what entity we are dealing with in the mapping callback.
+    $entity_type = $field_info['field']['settings']['target_type'];
+    $index_key = apachesolr_index_key($field_info);
+
+    // Iterates over all references and adds them to the fields.
+    foreach ($entity->$field_name as $entity_references) {
+      foreach ($entity_references as $reference) {
+        if ($id = (!empty($reference['target_id'])) ? $reference['target_id'] : FALSE) {
+          $fields[] = array(
+            'key' => $index_key,
+            'value' => $entity_type . ':' . $id,
+          );
+        }
+      }
+    }
+  }
+  return $fields;
+}
+
+/**
  * Extract HTML tag contents from $text and add to boost fields.
  *
  * $text must be stripped of control characters before hand.
@@ -1076,7 +1149,7 @@ function apachesolr_index_node_check_table() {
 
   $node_lists = array_chunk($nodes, $limit, TRUE);
   foreach ($node_lists as $nodes) {
-    watchdog('Apache Solr', 'On cron running apachesolr_nodeapi_mass_update() on nids @nids', array('@nids' => implode(',', array_keys($nodes))), WATCHDOG_WARNING);
+    watchdog('Apache Solr', 'On cron running apachesolr_nodeapi_mass_update() on nids @nids', array('@nids' => implode(',', array_keys($nodes))), WATCHDOG_NOTICE);
     if (!apachesolr_index_nodeapi_mass_update($nodes, $table)) {
       // Solr query failed - so stop trying.
       break;
@@ -1085,15 +1158,15 @@ function apachesolr_index_node_check_table() {
 
   // Check for deleted content that wasn't deleted from the index.
   $query = db_select($table, 'aien')
-    ->fields('aien', array('entity_id'))
     ->isNull('n.nid')
     ->range(0, ($limit*2));
+  $query->addExpression('aien.entity_id', 'nid');
   $query->leftJoin('node', 'n', 'n.nid = aien.entity_id');
   $nodes = $query->execute()->fetchAllAssoc('nid');
   $node_lists = array_chunk($nodes, $limit, TRUE);
 
   foreach ($node_lists as $nodes) {
-    watchdog('Apache Solr', 'On cron running apachesolr_nodeapi_mass_delete() on nids @nids', array('@nids' => implode(',', array_keys($nodes))), WATCHDOG_WARNING);
+    watchdog('Apache Solr', 'On cron running apachesolr_nodeapi_mass_delete() on nids @nids', array('@nids' => implode(',', array_keys($nodes))), WATCHDOG_NOTICE);
     if (!apachesolr_index_nodeapi_mass_delete($nodes, $table)) {
       // Solr query failed - so stop trying.
       break;
diff --git a/profiles/acquia/modules/apachesolr/apachesolr.info b/profiles/acquia/modules/apachesolr/apachesolr.info
index 4418c05..4b5e052 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr.info
+++ b/profiles/acquia/modules/apachesolr/apachesolr.info
@@ -23,11 +23,11 @@ files[] = tests/solr_base_query.test
 files[] = tests/solr_base_subquery.test
 files[] = tests/solr_document.test
 
-; Information added by drupal.org packaging script on 2012-04-05
-version = "7.x-1.0-beta19"
+; Information added by drupal.org packaging script on 2012-08-10
+version = "7.x-1.0-rc3"
 core = "7.x"
 project = "apachesolr"
-datestamp = "1333625738"
+datestamp = "1344627704"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/apachesolr/apachesolr.install b/profiles/acquia/modules/apachesolr/apachesolr.install
index 2080e53..26b34c3 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr.install
+++ b/profiles/acquia/modules/apachesolr/apachesolr.install
@@ -106,8 +106,6 @@ function apachesolr_schema() {
       'can disable' => FALSE,
       // Variable name to use in exported code.
       'identifier' => 'environment',
-      // Use the environment load callback directly.
-      'load callback' => 'apachesolr_environment_load',
       // Thin wrapper for the environment save callback.
       'save callback' => 'apachesolr_ctools_environment_save',
       // Thin wrapper for the environment delete callback.
@@ -214,7 +212,7 @@ function apachesolr_schema() {
           'not null' => TRUE,
         ),
         'status' => array(
-          'description' => 'Boolean indicating whether the entity is visible to non-administrators (eg, published for nodes).',
+          'description' => 'Boolean indicating whether the entity should be in the index.',
           'type' => 'int',
           'not null' => TRUE,
           'default' => 1,
@@ -227,7 +225,7 @@ function apachesolr_schema() {
         ),
       ),
       'indexes' => array(
-        'changed' => array('bundle', 'status', 'changed'),
+        'bundle_changed' => array('bundle', 'changed'),
       ),
       'primary key' => array('entity_id'),
     );
@@ -280,6 +278,7 @@ function apachesolr_uninstall() {
   variable_del('apachesolr_index_updated');
   variable_del('apachesolr_read_only');
   variable_del('apachesolr_set_nodeapi_messages');
+  variable_del('apachesolr_last_optimize');
   // Remove blocks.
   db_delete('block')->condition('module', 'apachesolr')->execute();
 }
@@ -801,3 +800,26 @@ function apachesolr_update_7013() {
   db_add_primary_key('apachesolr_index_bundles', array('env_id', 'entity_type', 'bundle'));
 }
 
+/**
+ * Remove status from the key.
+ */
+function apachesolr_update_7014() {
+  $types = array(
+    'other' => 'apachesolr_index_entities',
+    'node' => 'apachesolr_index_entities_node',
+  );
+  foreach ($types as $type => $table) {
+    db_drop_index($table, 'changed');
+    db_add_index($table, 'bundle_changed', array('bundle', 'changed'));
+  }
+}
+
+
+/**
+ * Fix primary key schema mismatch for those who cleanly installed with beta16.
+ */
+function apachesolr_update_7015() {
+  // Brand new installations since update_7013 have the wrong primary key.
+  db_drop_primary_key('apachesolr_index_entities');
+  db_add_primary_key('apachesolr_index_entities', array('entity_id', 'entity_type'));
+}
diff --git a/profiles/acquia/modules/apachesolr/apachesolr.module b/profiles/acquia/modules/apachesolr/apachesolr.module
index 455caeb..dbcf67a 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr.module
+++ b/profiles/acquia/modules/apachesolr/apachesolr.module
@@ -60,7 +60,7 @@ function apachesolr_menu() {
     'access arguments'   => array('administer search'),
     'weight'             => 0,
     'file'               => 'apachesolr.admin.inc',
-    'type'               => MENU_DEFAULT_LOCAL_TASK,
+    'type'               => MENU_LOCAL_TASK,
   );
   $items[$settings_path . '%apachesolr_environment/index/remaining'] = array(
     'title'              => 'Remaining',
@@ -152,21 +152,29 @@ function apachesolr_menu() {
     'file'               => 'apachesolr.admin.inc',
     'type'               => MENU_CALLBACK,
   );
-  $env_id = apachesolr_default_environment();
-  $items['admin/reports/apachesolr'] = array(
+
+  $reports_path = 'admin/reports/apachesolr';
+  $items[$reports_path] = array(
     'title'              => 'Apache Solr search index',
     'description'        => 'Information about the contents of the index the server',
     'page callback'      => 'apachesolr_index_report',
-    'page arguments'     => array($env_id),
     'access arguments'   => array('access site reports'),
     'file'               => 'apachesolr.admin.inc',
   );
-  $items['admin/reports/apachesolr/index'] = array(
+  $items[$reports_path . '/%apachesolr_environment'] = array(
+    'title'              => 'Apache Solr search index',
+    'description'        => 'Information about the contents of the index the server',
+    'page callback'      => 'apachesolr_index_report',
+    'page arguments'     => array(3),
+    'access arguments'   => array('access site reports'),
+    'file'               => 'apachesolr.admin.inc',
+  );
+  $items[$reports_path . '/%apachesolr_environment/index'] = array(
     'title'              => 'Search index',
     'file'               => 'apachesolr.admin.inc',
     'type'               => MENU_DEFAULT_LOCAL_TASK,
   );
-  $items['admin/reports/apachesolr/conf'] = array(
+  $items[$reports_path . '/%apachesolr_environment/conf'] = array(
     'title'              => 'Configuration files',
     'page callback'      => 'apachesolr_config_files_overview',
     'access arguments'   => array('access site reports'),
@@ -174,14 +182,24 @@ function apachesolr_menu() {
     'weight'             => 5,
     'type'               => MENU_LOCAL_TASK,
   );
-  $items['admin/reports/apachesolr/conf/%'] = array(
+  $items[$reports_path . '/%apachesolr_environment/conf/%'] = array(
     'title'              => 'Configuration file',
     'page callback'      => 'apachesolr_config_file',
-    'page arguments'     => array(4),
+    'page arguments'     => array(5, 3),
     'access arguments'   => array('access site reports'),
     'file'               => 'apachesolr.admin.inc',
     'type'               => MENU_CALLBACK,
   );
+  if (module_exists('devel')) {
+    $items['node/%node/devel/apachesolr'] = array(
+      'title'              => 'Apache Solr',
+      'page callback'      => 'apachesolr_devel',
+      'page arguments'     => array(1),
+      'access arguments'   => array('access devel information'),
+      'file'               => 'apachesolr.admin.inc',
+      'type'               => MENU_LOCAL_TASK,
+    );
+  }
 
   // We handle our own menu paths for facets
   if (module_exists('facetapi')) {
@@ -329,41 +347,46 @@ function apachesolr_facetapi_facet_info($searcher_info) {
 
 function apachesolr_default_node_facet_info($searcher_info) {
   $facets = apachesolr_common_node_facets();
-  foreach (apachesolr_entity_fields('node') as $field_nm => $field_info) {
-    if (!empty($field_info['facets'])) {
-      $field = apachesolr_index_key($field_info);
-      $facets[$field] = array(
-        'label' => check_plain($field_info['display_name']),
-        'dependency plugins' => $field_info['dependency plugins'],
-        'field api name' => $field_info['field']['field_name'],
-        'description' => t('Filter by field of type @type.', array('@type' => $field_info['field']['type'])),
-        'map callback' => $field_info['map callback'],
-        'map options' => $field_info,
-        'hierarchy callback' => $field_info['hierarchy callback'],
-      );
-      if (!empty($field_info['facet mincount allowed'])) {
-        $facets[$field]['facet mincount allowed'] = $field_info['facet mincount allowed'];
-      }
-      if (!empty($field_info['facet missing allowed'])) {
-        $facets[$field]['facet missing allowed'] = $field_info['facet missing allowed'];
-      }
-      if (!empty($field_info['query types'])) {
-        $facets[$field]['query types'] = $field_info['query types'];
-      }
-      // TODO : This is actually deprecated but we should still support
-      // older versions of facetapi. We should remove once facetapi has RC1
-      // For reference : http://drupal.org/node/1161444
-      if (!empty($field_info['query type'])) {
-        $facets[$field]['query type'] = $field_info['query type'];
-      }
-      if (!empty($field_info['min callback'])) {
-        $facets[$field]['min callback'] = $field_info['min callback'];
-      }
-      if (!empty($field_info['max callback'])) {
-        $facets[$field]['max callback'] = $field_info['max callback'];
-      }
-      if (!empty($field_info['map callback'])) {
-        $facets[$field]['map callback'] = $field_info['map callback'];
+  foreach (apachesolr_entity_fields('node') as $field_nm => $nodefields) {
+    foreach ($nodefields as $field_info) {
+      if (!empty($field_info['facets'])) {
+        $field = apachesolr_index_key($field_info);
+        $facets[$field] = array(
+          'label' => check_plain($field_info['display_name']),
+          'dependency plugins' => $field_info['dependency plugins'],
+          'field api name' => $field_info['field']['field_name'],
+          'description' => t('Filter by field of type @type.', array('@type' => $field_info['field']['type'])),
+          'map callback' => $field_info['map callback'],
+          'map options' => $field_info,
+          'hierarchy callback' => $field_info['hierarchy callback'],
+        );
+        if (!empty($field_info['facet mincount allowed'])) {
+          $facets[$field]['facet mincount allowed'] = $field_info['facet mincount allowed'];
+        }
+        if (!empty($field_info['facet missing allowed'])) {
+          $facets[$field]['facet missing allowed'] = $field_info['facet missing allowed'];
+        }
+        if (!empty($field_info['query types'])) {
+          $facets[$field]['query types'] = $field_info['query types'];
+        }
+        if (!empty($field_info['allowed operators'])) {
+          $facets[$field]['allowed operators'] = $field_info['allowed operators'];
+        }
+        // TODO : This is actually deprecated but we should still support
+        // older versions of facetapi. We should remove once facetapi has RC1
+        // For reference : http://drupal.org/node/1161444
+        if (!empty($field_info['query type'])) {
+          $facets[$field]['query type'] = $field_info['query type'];
+        }
+        if (!empty($field_info['min callback'])) {
+          $facets[$field]['min callback'] = $field_info['min callback'];
+        }
+        if (!empty($field_info['max callback'])) {
+          $facets[$field]['max callback'] = $field_info['max callback'];
+        }
+        if (!empty($field_info['map callback'])) {
+          $facets[$field]['map callback'] = $field_info['map callback'];
+        }
       }
     }
   }
@@ -468,7 +491,7 @@ function apachesolr_failure($search_name, $querystring) {
         if (isset($search_info[$fail_rule])) {
           $search_info = $search_info[$fail_rule];
           drupal_set_message(t("%search_name is not available. Your search is being redirected.", array('%search_name' => $search_name)));
-          drupal_goto('search/' . $search_info['path'] . '/' . drupal_encode_path($querystring));
+          drupal_goto('search/' . $search_info['path'] . '/' . rawurlencode($querystring));
         }
       }
       // if search is not enabled, break and do nothing
@@ -554,7 +577,7 @@ function apachesolr_user_update(&$edit, $account, $category) {
 }
 
 /**
- * Implements hook_taxonomy().
+ * Implements hook_term_update().
  *
  * Mark nodes as needing re-indexing if a term name changes.
  *
@@ -634,7 +657,20 @@ function apachesolr_comment_unpublish($comment) {
  */
 function apachesolr_node_type_delete($info) {
   module_load_include('inc', 'apachesolr', 'apachesolr.index');
-  apachesolr_index_mark_for_reindex($env_id, $info->type);
+  $env_id = apachesolr_default_environment();
+  $existing_bundles = apachesolr_get_index_bundles($env_id, 'node');
+  $new_bundles = $existing_bundles;
+  $index = array_search($info->type, $existing_bundles);
+  if ($index !== FALSE) {
+    unset($new_bundles[$index]);
+    $new_bundles = array_values($new_bundles);
+    apachesolr_index_set_bundles($env_id, 'node', $new_bundles);
+  }
+  apachesolr_index_delete_bundles($env_id, 'node', array($info->type));
+  $callback = apachesolr_entity_get_callback($entity_type, 'bundles changed callback');
+  if (!empty($callback)) {
+    call_user_func($callback, $env_id, $existing_bundles, $new_bundles);
+  }
 }
 
 /**
@@ -1006,9 +1042,12 @@ function apachesolr_get_solr($env_id = NULL) {
   $solr_cache = &drupal_static(__FUNCTION__);
   $environments = apachesolr_load_all_environments();
 
-  if (empty($env_id) || empty($environments[$env_id])) {
+  if (empty($env_id)) {
     $env_id = apachesolr_default_environment();
   }
+  elseif (empty($environments[$env_id])) {
+    throw new Exception(t('Invalid Apache Solr environment: @env_id.', array('@env_id' => $env_id)));
+  }
 
   if (isset($environments[$env_id])) {
     $class = $environments[$env_id]['service_class'];
@@ -1038,6 +1077,14 @@ function apachesolr_get_solr($env_id = NULL) {
 function apachesolr_load_all_environments() {
   $environments = &drupal_static(__FUNCTION__);
 
+  // Sometimes this function is called when the 'apachesolr_index_bundles' is
+  // not created yet.
+  if (!db_table_exists('apachesolr_index_bundles')) {
+    return array();
+  }
+  if (!db_table_exists('apachesolr_environment')) {
+    return array();
+  }
   if (isset($environments)) {
     return $environments;
   }
@@ -1047,24 +1094,28 @@ function apachesolr_load_all_environments() {
     $environments = $cache->data;
   }
   else {
-    $environments = db_query('SELECT * FROM {apachesolr_environment}')->fetchAllAssoc('env_id', PDO::FETCH_ASSOC);
-    foreach ($environments as $id => &$environment) {
-      $environment['conf'] = array();
-      $conf = db_query('SELECT name, value FROM {apachesolr_environment_variable} WHERE env_id = :env_id', array('env_id' => $id))->fetchAllAssoc('name', PDO::FETCH_ASSOC);
-      foreach ($conf as $name => $data) {
-        $environment['conf'][$name] = unserialize($data['value']);
-      }
-    }
-
+    // If ctools is available use it's crud functions to load the environments.
     if (module_exists('ctools')) {
       ctools_include('export');
-      $defaults = ctools_export_load_object('apachesolr_environment', 'all');
-      foreach ($defaults as $env_id => $default) {
-        if (!isset($environments[$env_id])) {
-          $environments[$env_id] = (array) $default;
-        }
+      $environments = ctools_export_load_object('apachesolr_environment', 'all');
+      // Convert environments to array.
+      foreach ($environments as &$environment) {
+        $environment = (array) $environment;
       }
     }
+    else {
+      $environments = db_query('SELECT * FROM {apachesolr_environment}')->fetchAllAssoc('env_id', PDO::FETCH_ASSOC);
+    }
+
+    // Load conf and index bundles. We don't use 'subrecords callback' property
+    // of ctools export API.
+    apachesolr_environment_load_subrecords($environments);
+
+    // Allow overrides of environments from settings.php
+    $conf_environments = variable_get('apachesolr_environments', array());
+    if (!empty($conf_environments)) {
+      $environments = drupal_array_merge_deep($environments, $conf_environments);
+    }
 
     cache_set('apachesolr:environments', $environments, 'cache_apachesolr');
   }
@@ -1117,6 +1168,9 @@ function apachesolr_environment_delete($env_id) {
     db_delete('apachesolr_environment_variable')
       ->condition('env_id', $env_id)
       ->execute();
+    db_delete('apachesolr_index_bundles')
+      ->condition('env_id', $env_id)
+      ->execute();
 
     module_invoke_all('apachesolr_environment_delete', $environment);
 
@@ -1199,6 +1253,11 @@ function apachesolr_environment_save($environment) {
   if (!$old_environment || isset($old_environment['in_code_only'])) {
     $is_new = TRUE;
   }
+  // No need to save if there are no changes
+  if ($old_environment == $environment) {
+    // No need to do anything
+    return;
+  }
 
   $conf = isset($environment['conf']) ? $environment['conf'] : array();
   // Remove any unexpected fields.
@@ -1352,6 +1411,13 @@ function apachesolr_do_query(DrupalSolrQueryInterface $current_query) {
 
   $query = apachesolr_current_query($env_id, $current_query);
 
+  // Verify if this query was already executed in the same page load
+  if ($response = apachesolr_static_response_cache($searcher)) {
+    // Return cached query object
+    return array($query, $response);
+  }
+  $query->addParam('start', $query->page * $query->getParam('rows'));
+
   // This hook allows modules to modify the query and params objects.
   drupal_alter('apachesolr_query', $query);
 
@@ -1359,7 +1425,7 @@ function apachesolr_do_query(DrupalSolrQueryInterface $current_query) {
     // A module implementing HOOK_apachesolr_query_alter() aborted the search.
     return array(NULL, array());
   }
-  $query->addParam('start', $query->page * $query->getParam('rows'));
+  
 
   $keys = $query->getParam('q');
 
@@ -1604,6 +1670,7 @@ function apachesolr_field_name_map($field_name) {
       'content' => t('The full, rendered content (e.g. the rendered node body)'),
       'ts_comments' => t('The rendered comments associated with a node'),
       'tos_content_extra' => t('Extra rendered content or keywords'),
+      'tos_name_formatted' => t('Author name (Formatted)'),
       'label' => t('Title or label'),
       'teaser' => t('Teaser or preview'),
       'tos_name' => t('Author name'),
@@ -1626,8 +1693,10 @@ function apachesolr_field_name_map($field_name) {
         $map['im_vid_' . $vocab->vid] = t('Taxonomy term IDs from the %name vocabulary', array('%name' => $vocab->name));
       }
     }
-    foreach (apachesolr_entity_fields('node') as $field_nm => $field_info) {
-      $map[apachesolr_index_key($field_info)] = t('Field of type @type: %label', array('@type' => $field_info['field']['type'], '%label' => $field_info['display_name']));
+    foreach (apachesolr_entity_fields('node') as $field_nm => $nodefields) {
+      foreach ($nodefields as $field_info) {
+        $map[apachesolr_index_key($field_info)] = t('Field of type @type: %label', array('@type' => $field_info['field']['type'], '%label' => $field_info['display_name']));
+      }
     }
     drupal_alter('apachesolr_field_name_map', $map);
   }
@@ -1708,15 +1777,8 @@ function apachesolr_entity_info_alter(&$entity_info) {
  *   The bundles that should be indexed.
  */
 function apachesolr_get_index_bundles($env_id, $entity_type) {
-  // This could be called before the schema is installed so it is wise to
-  // Verify this
-  if (db_table_exists('apachesolr_index_bundles')) {
-    return db_query("SELECT bundle FROM {apachesolr_index_bundles} WHERE env_id = :env_id AND entity_type = :entity_type", array(
-      ':env_id' => $env_id,
-      ':entity_type' => $entity_type,
-      ))->fetchCol();
-  }
-  return array();
+  $environment = apachesolr_environment_load($env_id);
+  return !empty($environment['index_bundles'][$entity_type]) ? $environment['index_bundles'][$entity_type] : array();
 }
 
 /**
@@ -1760,20 +1822,24 @@ function apachesolr_entity_update($entity, $type) {
     $info = entity_get_info($type);
     list($id, $vid, $bundle) = entity_extract_ids($type, $entity);
 
-    $status_callbacks = apachesolr_entity_get_callback($type, 'status callback');
     // Check status callback before sending to the index
+    $status_callbacks = apachesolr_entity_get_callback($type, 'status callback', $bundle);
+
     $status = TRUE;
-    foreach($status_callbacks as $status_callback) {
-      if (is_callable($status_callback)) {
-        // by placing $status in front we prevent calling any other callback
-        // after one status callback returned false
-        $status = $status && $status_callback($id, $type);
+    if (is_array($status_callbacks)) {
+      foreach($status_callbacks as $status_callback) {
+        if (is_callable($status_callback)) {
+          // by placing $status in front we prevent calling any other callback
+          // after one status callback returned false
+          $status = $status && $status_callback($id, $type);
+        }
       }
     }
 
     // Delete the entity from our index if the status callback returns FALSE
-    if ($status == FALSE) {
-      return apachesolr_entity_delete($entity, $type);
+    if (!$status) {
+      apachesolr_entity_delete($entity, $type);
+      return;
     }
 
     $indexer_table = apachesolr_get_indexer_table($type);
@@ -1787,7 +1853,7 @@ function apachesolr_entity_update($entity, $type) {
       ))
       ->fields(array(
         'bundle' => $bundle,
-        'status' => $status,
+        'status' => 1,
         'changed' => REQUEST_TIME,
       ))
       ->execute();
@@ -1810,23 +1876,32 @@ function apachesolr_get_indexer_table($type) {
 
 /**
  * Implements hook_entity_delete().
- *
- * @see apachesolr_node_delete().
  */
 function apachesolr_entity_delete($entity, $entity_type) {
   $env_id = apachesolr_default_environment();
-  module_load_include('inc', 'apachesolr', 'apachesolr.index');
 
   // Delete the entity's entry from a fictional table of all entities.
   $info = entity_get_info($entity_type);
-  list($id) = entity_extract_ids($entity_type, $entity);
+  list($entity_id) = entity_extract_ids($entity_type, $entity);
+  apachesolr_remove_entity($env_id, $entity_type, $entity_id);
+}
 
-  if (apachesolr_index_delete_entity_from_index($env_id, $entity_type, $id)) {
+function apachesolr_remove_entity($env_id, $entity_type, $entity_id) {
+  module_load_include('inc', 'apachesolr', 'apachesolr.index');
+
+  $indexer_table = apachesolr_get_indexer_table($entity_type);
+  if (apachesolr_index_delete_entity_from_index($env_id, $entity_type, $entity_id)) {
     // There was no exception, so delete from the table.
-    $indexer_table = apachesolr_get_indexer_table($entity_type);
     db_delete($indexer_table)
       ->condition('entity_type', $entity_type)
-      ->condition('entity_id', $id)
+      ->condition('entity_id', $entity_id)
+      ->execute();
+  }
+  else {
+    // Set status 0 so we try to delete from the index again in the future.
+    db_update($indexer_table)
+      ->condition('entity_id', $entity_id)
+      ->fields(array('changed' => REQUEST_TIME, 'status' => 0))
       ->execute();
   }
 }
@@ -1905,7 +1980,7 @@ function apachesolr_entity_fields($entity_type = 'node') {
         // Only add to the $fields array if some instances are displayed for the search index.
         if (!empty($row['bundles'])) {
           // Use the Solr index key as the array key.
-          $fields[$entity_type][apachesolr_index_key($row)] = $row;
+          $fields[$entity_type][apachesolr_index_key($row)][] = $row;
         }
       }
     }
@@ -1921,19 +1996,21 @@ function field_apachesolr_index_document_build(ApacheSolrDocument $document, $en
   if ($info['fieldable']) {
     // Handle fields including taxonomy.
     $indexed_fields = apachesolr_entity_fields($entity_type);
-    foreach ($indexed_fields as $index_key => $field_info) {
-      $field_name = $field_info['field']['field_name'];
-      // See if the node has fields that can be indexed
-      if (isset($entity->{$field_name})) {
-        // Got a field.
-        $function = $field_info['indexing_callback'];
-        if ($function && function_exists($function)) {
-          // NOTE: This function should always return an array.  One
-          // entity field may be indexed to multiple Solr fields.
-          $fields = $function($entity, $field_name, $index_key, $field_info);
-          foreach ($fields as $field) {
-            // It's fine to use this method also for single value fields.
-            $document->setMultiValue($field['key'], $field['value']);
+    foreach ($indexed_fields as $index_key => $nodefields) {
+      foreach ($nodefields as $field_info) {
+        $field_name = $field_info['field']['field_name'];
+        // See if the node has fields that can be indexed
+        if (isset($entity->{$field_name})) {
+          // Got a field.
+          $function = $field_info['indexing_callback'];
+          if ($function && function_exists($function)) {
+            // NOTE: This function should always return an array.  One
+            // entity field may be indexed to multiple Solr fields.
+            $fields = $function($entity, $field_name, $index_key, $field_info);
+            foreach ($fields as $field) {
+              // It's fine to use this method also for single value fields.
+              $document->setMultiValue($field['key'], $field['value']);
+            }
           }
         }
       }
@@ -2068,6 +2145,28 @@ function apachesolr_userreference_map_callback($facets, $options) {
 }
 
 /**
+ * Mapping callback for entity references.
+ */
+function apachesolr_entityreference_facet_map_callback(array $values, array $options) {
+  $map = array();
+  // Gathers entity ids so we can load multiple entities at a time.
+  $entity_ids = array();
+  foreach ($values as $value) {
+    list($entity_type, $id) = explode(':', $value);
+    $entity_ids[$entity_type][] = $id;
+  }
+  // Loads and maps entities.
+  foreach ($entity_ids as $entity_type => $ids) {
+    $entities = entity_load($entity_type, $ids);
+    foreach ($entities as $id => $entity) {
+      $key = $entity_type . ':' . $id;
+      $map[$key] = entity_label($entity_type, $entity);
+    }
+  }
+  return $map;
+}
+
+/**
  * Returns the callback function appropriate for a given entity type/bundle.
  *
  * @param string $entity_type
@@ -2170,18 +2269,6 @@ function apachesolr_hook_info() {
 }
 
 /**
- * Implements hook_hook_info_alter().
- */
-function apachesolr_hook_info_alter(&$hooks) {
-  // we can't do this in apachesolr_hook_info() until http://drupal.org/node/1415278 is fixed
-  foreach (entity_get_info() as $entity_type => $info) {
-    $hooks['apachesolr_index_document_build_' . $entity_type] = array(
-        'group' => 'apachesolr',
-      );
-    }
-}
-
-/**
  * Implements hook_apachesolr_field_mappings().
  */
 function field_apachesolr_field_mappings() {
@@ -2249,6 +2336,8 @@ function field_apachesolr_field_mappings() {
       'index_type' => 'integer',
       'facet_block_callback' => 'apachesolr_search_taxonomy_facet_block',
       'facets' => TRUE,
+      'query types' => array('term'),
+      'query type' => 'term',
       'facet mincount allowed' => TRUE,
     ),
   );
@@ -2379,6 +2468,24 @@ function user_reference_apachesolr_field_mappings() {
 
   return $mappings;
 }
+/**
+ * Implements hook_apachesolr_field_mappings() on behalf of EntityReferences (entityreference)
+ * @see http://drupal.org/node/1572722
+ */
+function entityreference_apachesolr_field_mappings() {
+  $mappings = array(
+    'entityreference' => array(
+      'indexing_callback' => 'apachesolr_entityreference_indexing_callback',
+      'map callback' => 'apachesolr_entityreference_facet_map_callback',
+      'index_type' => 'string',
+      'facets' => TRUE,
+      'query types' => array('term'),
+      'facet missing allowed' => TRUE,
+    ),
+  );
+
+  return $mappings;
+}
 
 /**
  * A replacement for l()
@@ -2457,6 +2564,79 @@ function theme_apachesolr_settings_title($vars) {
 }
 
 /**
+ * Export callback to load the view subrecords, which are the index bundles.
+ */
+function apachesolr_environment_load_subrecords(&$environments) {
+  // This could be called before the schema is installed so it is wise to
+  // Verify this
+  if (db_table_exists('apachesolr_index_bundles')) {
+    $all_index_bundles = db_select('apachesolr_index_bundles', 'ib')
+      ->fields('ib', array('env_id', 'entity_type', 'bundle'))
+      ->condition('env_id', array_keys($environments), 'IN')
+      ->orderBy('env_id')
+      ->orderBy('entity_type')
+      ->orderBy('bundle')
+      ->execute()
+      ->fetchAll(PDO::FETCH_ASSOC);
+
+    $all_index_bundles_keyed = array();
+    foreach ($all_index_bundles as $env_info) {
+      extract($env_info);
+      $all_index_bundles_keyed[$env_id][$entity_type][] = $bundle;
+    }
+  }
+  
+  $all_variables = db_select('apachesolr_environment_variable', 'v')
+    ->fields('v', array('env_id', 'name', 'value'))
+    ->condition('env_id', array_keys($environments), 'IN')
+    ->orderBy('env_id')
+    ->orderBy('name')
+    ->orderBy('value')
+    ->execute()
+    ->fetchAll(PDO::FETCH_ASSOC);
+
+  $variables = array();
+  foreach ($all_variables as $variable) {
+    extract($variable);
+    $variables[$env_id][$name] = unserialize($value);
+  }
+
+  foreach ($environments as $env_id => &$environment) {
+    $index_bundles = !empty($all_index_bundles_keyed[$env_id]) ? $all_index_bundles_keyed[$env_id] : array();
+    $conf = !empty($variables[$env_id]) ? $variables[$env_id] : array();
+    if (is_array($environment)) {
+      // Environment is an array.
+      // If we have different values in the database compared with what we
+      // have in the given environment argument we allow the admin to revert
+      // the db values so we can stick with a consistent system
+      if (!empty($environment['index_bundles']) && !empty($index_bundles) && $environment['index_bundles'] !== $index_bundles) {
+        unset($environment['in_code_only']);
+        $environment['type'] = 'Overridden';
+      }
+      if (!empty($environment['conf']) && !empty($conf) && $environment['conf'] !== $conf) {
+        unset($environment['in_code_only']);
+        $environment['type'] = 'Overridden';
+      }
+      $environment['index_bundles'] = (empty($environment['index_bundles']) || !empty($index_bundles)) ? $index_bundles : $environment['index_bundles'];
+      $environment['conf'] = (empty($environment['conf']) || !empty($conf)) ? $conf : $environment['conf'];
+    }
+    elseif (is_object($environment)) {
+      // Environment is an object.
+      if ($environment->index_bundles !== $index_bundles && !empty($index_bundles)) {
+        unset($environment->in_code_only);
+        $environment->type = 'Overridden';
+      }
+      if ($environment->conf !== $conf && !empty($conf)) {
+        unset($environment->in_code_only);
+        $environment->type = 'Overridden';
+      }
+      $environment->index_bundles = (empty($environment->index_bundles) || !empty($index_bundles)) ? $index_bundles : $environment->index_bundles;
+      $environment->conf = (empty($environment->conf) || !empty($conf)) ? $conf : $environment->conf;
+    }
+  }
+}
+
+/**
  * Callback for saving Apache Solr environment CTools exportables.
  *
  * CTools uses objects, while Apache Solr uses arrays; turn CTools value into an
@@ -2499,7 +2679,14 @@ function apachesolr_ctools_environment_export($environment, $indent) {
   // Re-load the enviroment, since in some cases the conf
   // is stripped since it's not in the actual schema.
   $environment = (object) apachesolr_environment_load($environment->env_id);
+
+  $index_bundles = array();
+  foreach (entity_get_info() as $type => $info) {
+    if ($bundles = apachesolr_get_index_bundles($environment->env_id, $type)) {
+      $index_bundles[$type] = $bundles;
+    }
+  }
   $additions_top = array();
-  $additions_bottom = array('conf' => $environment->conf);
+  $additions_bottom = array('conf' => $environment->conf, 'index_bundles' => $index_bundles);
   return ctools_export_object('apachesolr_environment', $environment, $indent, NULL, $additions_top, $additions_bottom);
-}
+}
\ No newline at end of file
diff --git a/profiles/acquia/modules/apachesolr/apachesolr_access/apachesolr_access.info b/profiles/acquia/modules/apachesolr/apachesolr_access/apachesolr_access.info
index 21eef50..90af204 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr_access/apachesolr_access.info
+++ b/profiles/acquia/modules/apachesolr/apachesolr_access/apachesolr_access.info
@@ -7,11 +7,11 @@ core = 7.x
 files[] = apachesolr_access.module
 files[] = tests/apachesolr_access.test
 
-; Information added by drupal.org packaging script on 2012-04-05
-version = "7.x-1.0-beta19"
+; Information added by drupal.org packaging script on 2012-08-10
+version = "7.x-1.0-rc3"
 core = "7.x"
 project = "apachesolr"
-datestamp = "1333625738"
+datestamp = "1344627704"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/apachesolr/apachesolr_search.admin.inc b/profiles/acquia/modules/apachesolr/apachesolr_search.admin.inc
index 6d7cf14..8919627 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr_search.admin.inc
+++ b/profiles/acquia/modules/apachesolr/apachesolr_search.admin.inc
@@ -186,8 +186,8 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
     $options[$id] = $environment['name'];
   }
   // Validate the env_id.
-  if (!empty($search_page->env_id) && !apachesolr_environment_load($search_page->env_id)) {
-    $search_page->env_id = '';
+  if (!empty($search_page['env_id']) && !apachesolr_environment_load($search_page['env_id'])) {
+    $search_page['env_id'] = '';
   }
 
   // Initializes form with common settings.
@@ -203,7 +203,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
     '#required' => TRUE,
     '#size' => 30,
     '#maxlength' => 32,
-    '#default_value' => !empty($search_page->label) ? $search_page->label : '',
+    '#default_value' => !empty($search_page['label']) ? $search_page['label'] : '',
     '#description' => t('The human-readable name of the search page configuration.'),
   );
 
@@ -216,7 +216,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
       'source' => array('label'),
     ),
     '#description' => '',
-    '#default_value' => !empty($search_page->page_id) ? $search_page->page_id : '',
+    '#default_value' => !empty($search_page['page_id']) ? $search_page['page_id'] : '',
     '#disabled' => !empty($search_page),
     '#description' => t('A unique machine-readable identifier for the search page configuration. It must only contain lowercase letters, numbers, and underscores.'),
   );
@@ -224,7 +224,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
   $form['description_enable'] = array(
     '#type' => 'checkbox',
     '#title' => t('Description'),
-    '#default_value' => !empty($search_page->description)  ? TRUE : FALSE
+    '#default_value' => !empty($search_page['description'])  ? TRUE : FALSE
   );
 
   $form['description'] = array(
@@ -232,7 +232,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
     '#title' => t('Provide description'),
     '#title_display' => 'invisible',
     '#size' => 64,
-    '#default_value' => !empty($search_page->description) ? $search_page->description : '',
+    '#default_value' => !empty($search_page['description']) ? $search_page['description'] : '',
     '#dependency' => array(
       'edit-description-enable' => array(1),
     ),
@@ -240,7 +240,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
 
   $is_default = FALSE;
   if (!empty($search_page)) {
-    $is_default = $search_page->page_id == apachesolr_search_default_search_page();
+    $is_default = $search_page['page_id'] == apachesolr_search_default_search_page();
   }
   $form['make_default'] = array(
     '#type' => 'checkbox',
@@ -259,7 +259,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
   );
 
   $core_search = FALSE;
-  if (!empty($search_page->page_id) && ($search_page->page_id == 'core_search')) {
+  if (!empty($search_page['page_id']) && ($search_page['page_id'] == 'core_search')) {
     $core_search = TRUE;
   }
   if ($core_search) {
@@ -273,7 +273,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
     '#title' => t('Search environment'),
     '#type' => 'select',
     '#options' => $options,
-    '#default_value' => !empty($search_page->env_id) ? $search_page->env_id : '',
+    '#default_value' => !empty($search_page['env_id']) ? $search_page['env_id'] : '',
     '#disabled' => $core_search,
     '#description' => $description,
   );
@@ -284,7 +284,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
     '#required' => TRUE,
     '#maxlength' => 255,
     '#description' => 'You can use %value to place the search term in the title',
-    '#default_value' => !empty($search_page->page_title) ? $search_page->page_title : '',
+    '#default_value' => !empty($search_page['page_title']) ? $search_page['page_title'] : '',
   );
 
   $search_types = apachesolr_search_load_all_search_types();
@@ -297,7 +297,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
     '#title' => t('Search Type'),
     '#type' => 'select',
     '#options' => $options,
-    '#default_value' => !empty($search_page->settings['apachesolr_search_search_type']) ? $search_page->settings['apachesolr_search_search_type'] : '',
+    '#default_value' => !empty($search_page['settings']['apachesolr_search_search_type']) ? $search_page['settings']['apachesolr_search_search_type'] : '',
     '#access' => !$core_search,
     '#description' => t('Use this only when filtering on a value from the search path.
       For example, select Taxonomy Term to filter on a term ID (search/taxonomy/%).'),
@@ -316,7 +316,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
     '#required' => TRUE,
     '#maxlength' => 255,
     '#description' => t('For example: search/my-search-page. Search keywords will appear at the end of the path.'),
-    '#default_value' => !empty($search_page->search_path) ? $search_page->search_path : '',
+    '#default_value' => !empty($search_page['search_path']) ? $search_page['search_path'] : '',
   );
   if (!$core_search) {
     $form['info']['search_path']['#description'] .= ' ' . t('You can use one % to make the search page dynamic.');
@@ -325,7 +325,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
   $form['info']['custom_filter_enable'] = array(
     '#type' => 'checkbox',
     '#title' => t('Custom Filter'),
-    '#default_value' => !empty($search_page->settings['apachesolr_search_custom_enable'])  ? TRUE : FALSE
+    '#default_value' => !empty($search_page['settings']['apachesolr_search_custom_enable'])  ? TRUE : FALSE
   );
 
   $form['info']['filters'] = array(
@@ -334,7 +334,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
     '#required' => FALSE,
     '#maxlength' => 255,
     '#description' => t('A comma-separated list of lucene filter queries to apply by default.'),
-    '#default_value' => !empty($search_page->settings['fq'])  ? implode(', ', $search_page->settings['fq']) : '',
+    '#default_value' => !empty($search_page['settings']['fq'])  ? implode(', ', $search_page['settings']['fq']) : '',
     '#dependency' => array(
       'edit-custom-filter-enable' => array(1),
       'edit-search-type' => array('custom'),
@@ -352,7 +352,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
   );
 
   // Results per page per search page
-  $default_value = isset($search_page->settings['apachesolr_search_per_page']) ? $search_page->settings['apachesolr_search_per_page'] : '10';
+  $default_value = isset($search_page['settings']['apachesolr_search_per_page']) ? $search_page['settings']['apachesolr_search_per_page'] : '10';
   $form['advanced']['apachesolr_search_per_page'] = array(
     '#type' => 'textfield',
     '#size' => 3,
@@ -362,7 +362,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
   );
 
   // Enable/disable spellcheck on pages
-  $default_value = isset($search_page->settings['apachesolr_search_spellcheck']) ? $search_page->settings['apachesolr_search_spellcheck'] : TRUE;
+  $default_value = isset($search_page['settings']['apachesolr_search_spellcheck']) ? $search_page['settings']['apachesolr_search_spellcheck'] : TRUE;
   $form['advanced']['apachesolr_search_spellcheck'] = array(
     '#type' => 'checkbox',
     '#title' => t('Enable spell check'),
@@ -371,7 +371,7 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
   );
 
   // Enable/disable search form on search page (replaced by a block perhaps)
-  $default_value = isset($search_page->settings['apachesolr_search_search_box']) ? $search_page->settings['apachesolr_search_search_box'] : TRUE;
+  $default_value = isset($search_page['settings']['apachesolr_search_search_box']) ? $search_page['settings']['apachesolr_search_search_box'] : TRUE;
   $form['advanced']['apachesolr_search_search_box'] = array(
     '#type' => 'checkbox',
     '#title' => t('Enable the search box on the page'),
@@ -381,16 +381,16 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
   );
 
   // Enable/disable search form on search page (replaced by a block perhaps)
-  $default_value = isset($search_page->settings['apachesolr_search_allow_user_input']) ? $search_page->settings['apachesolr_search_allow_user_input'] : FALSE;
+  $default_value = isset($search_page['settings']['apachesolr_search_allow_user_input']) ? $search_page['settings']['apachesolr_search_allow_user_input'] : FALSE;
   $form['advanced']['apachesolr_search_allow_user_input'] = array(
     '#type' => 'checkbox',
     '#title' => t('Allow user input using the URL'),
-    '#description' => t('Allow users to use the URL (mysite.com?q=test&fq=userinput) for manual facetting. This will only work after a search term is searched. Recommended is to leave this unchecked'),
+    '#description' => t('Allow users to use the URL for manual facetting via fq[] params (e.g. http://example.com/search/site/test?fq[]=uid:1&fq[]=tid:99). This will only work in combination with a keyword search. The recommended value is unchecked'),
     '#default_value' => $default_value,
   );
 
   // Use the main search page setting as the default for new pages.
-  $default_value = isset($search_page->settings['apachesolr_search_browse']) ? $search_page->settings['apachesolr_search_browse'] : 'browse';
+  $default_value = isset($search_page['settings']['apachesolr_search_browse']) ? $search_page['settings']['apachesolr_search_browse'] : 'browse';
   $form['advanced']['apachesolr_search_browse'] = _apachesolr_search_browse_form($default_value);
 
   // Button for the corresponding actions
@@ -402,6 +402,10 @@ function apachesolr_search_page_settings_form($form, &$form_state, $search_page
     '#type' => 'submit',
     '#value' => t('Save configuration'),
   );
+  $form['actions']['submit_edit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save and edit'),
+  );
 
   $form['actions']['cancel'] = array(
     '#type' => 'link',
@@ -495,20 +499,28 @@ function apachesolr_search_page_settings_form_submit($form, &$form_state) {
     variable_set('apachesolr_search_default_search_page', $form_state['values']['page_id']);
   }
 
-  $search_page = new stdClass();
-  $search_page->page_id = $form_state['values']['page_id'];
-  $search_page->label = $form_state['values']['label'];
-  $search_page->description = $form_state['values']['description'];
-  $search_page->env_id = $form_state['values']['env_id'];
-  $search_page->search_path = $form_state['values']['search_path'];
-  $search_page->page_title = $form_state['values']['page_title'];
-  $search_page->settings = $settings;
+  $search_page = array();
+  $search_page['page_id'] = $form_state['values']['page_id'];
+  $search_page['label'] = $form_state['values']['label'];
+  $search_page['description'] = $form_state['values']['description'];
+  $search_page['env_id'] = $form_state['values']['env_id'];
+  $search_page['search_path'] = $form_state['values']['search_path'];
+  $search_page['page_title'] = $form_state['values']['page_title'];
+  $search_page['settings'] = $settings;
   apachesolr_search_page_save($search_page);
 
   // Saves our values in the database, sets redirect path on success.
   drupal_set_message(t('The configuration options have been saved for %page.', array('%page' => $form_state['values']['label'])));
-  $form_state['redirect'] = 'admin/config/search/apachesolr/search-pages';
-
+  if ($form_state['values']['op'] == t('Save')) {
+    $form_state['redirect'] = 'admin/config/search/apachesolr/search-pages';
+  }
+  else {
+    $form_state['redirect'] = current_path();
+  }
+  // Regardlessly of the destination parameter we want to go to another page
+  unset($_GET['destination']);
+  drupal_static_reset('drupal_get_destination');
+  drupal_get_destination();
   // Menu rebuild needed to pick up search path.
   menu_rebuild();
 }
@@ -519,15 +531,23 @@ function apachesolr_search_page_settings_form_submit($form, &$form_state) {
 function apachesolr_search_delete_search_page_confirm($form, &$form_state, $search_page) {
 
   // Sets values required for deletion.
-  $form['page_id'] = array('#type' => 'value', '#value' => $search_page->page_id);
-  $form['label'] = array('#type' => 'value', '#value' => $search_page->label);
+  $form['page_id'] = array('#type' => 'value', '#value' => $search_page['page_id']);
+  $form['label'] = array('#type' => 'value', '#value' => $search_page['label']);
+
+  if (isset($search_page['export_type']) && $search_page['export_type'] == '3') {
+    $verb = t('Revert');
+  }
+  else {
+    $verb = t('Delete');
+  }
 
   // Sets the message, or the title of the page.
   $message = t(
-    'Are you sure you want to delete the %label search page configuration?',
-    array('%label' => $form['label']['#value'])
+    'Are you sure you want to !verb the %label search page configuration?',
+    array('%label' => $form['label']['#value'], '!verb' => strtolower($verb))
   );
 
+
   // Builds caption.
   $caption = '<p>';
   $caption .= t(
@@ -539,8 +559,8 @@ function apachesolr_search_delete_search_page_confirm($form, &$form_state, $sear
 
   // Finalizes and returns the confirmation form.
   $return_path = 'admin/config/search/apachesolr/search-pages';
-  $button_text = t('Delete page');
-  if (!isset($search_page->settings['apachesolr_search_not_removable'])) {
+  $button_text = $verb;
+  if (!isset($search_page['settings']['apachesolr_search_not_removable'])) {
     return confirm_form($form, filter_xss($message), $return_path, filter_xss($caption), check_plain($button_text));
   }
   else {
@@ -581,11 +601,11 @@ function apachesolr_search_delete_search_page_confirm_submit($form, &$form_state
 function apachesolr_search_clone_search_page_confirm($form, &$form_state, $search_page) {
   $form['page_id'] = array(
     '#type' => 'value',
-    '#value' => $search_page->page_id,
+    '#value' => $search_page['page_id'],
   );
   return confirm_form(
     $form,
-    t('Are you sure you want to clone search page %name?', array('%name' => $search_page->label)),
+    t('Are you sure you want to clone search page %name?', array('%name' => $search_page['label'])),
     'admin/config/search/apachesolr',
     '',
     t('Clone'),
@@ -825,7 +845,7 @@ function apachesolr_search_field_bias_form($fields, $env_id) {
         // By default we only show text fields.  Use hook_form_alter to change.
         // We use filter_xss to make sure links are allowed
         $form['field_bias'][$field_name] = array(
-          '#access' => $field->type == 'text',
+          '#access' => ($field->type == 'text' || $field->type == 'text_und'),
           '#type' => 'select',
           '#options' => $weights,
           '#title' => filter_xss(apachesolr_field_name_map($field_name)),
diff --git a/profiles/acquia/modules/apachesolr/apachesolr_search.info b/profiles/acquia/modules/apachesolr/apachesolr_search.info
index a9a7e3a..240e1f7 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr_search.info
+++ b/profiles/acquia/modules/apachesolr/apachesolr_search.info
@@ -11,11 +11,11 @@ files[] = apachesolr_search.module
 files[] = apachesolr_search.admin.inc
 files[] = apachesolr_search.pages.inc
 
-; Information added by drupal.org packaging script on 2012-04-05
-version = "7.x-1.0-beta19"
+; Information added by drupal.org packaging script on 2012-08-10
+version = "7.x-1.0-rc3"
 core = "7.x"
 project = "apachesolr"
-datestamp = "1333625738"
+datestamp = "1344627704"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/apachesolr/apachesolr_search.install b/profiles/acquia/modules/apachesolr/apachesolr_search.install
index 9afad44..c3f4551 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr_search.install
+++ b/profiles/acquia/modules/apachesolr/apachesolr_search.install
@@ -78,16 +78,23 @@ function apachesolr_search_schema() {
   $schema['apachesolr_search_page'] = array(
     'description' => 'Apache Solr Search search page settings.',
     'export' => array(
+      // Environment machine name.
       'key' => 'page_id',
+      // Description of key.
+      'key name' => 'search page machine name',
+      // Variable name to use in exported code.
       'identifier' => 'searcher',
+      // Use the same hook as the API name below.
       'default hook' => 'apachesolr_search_default_searchers',
       'status' => 'apachesolr_search_page_status',
+      // CTools API implementation.
       'api' => array(
         'owner' => 'apachesolr_search',
         'api' => 'apachesolr_search_defaults',
         'minimum_version' => 3,
         'current_version' => 3,
       ),
+      // Includes all search page specific configurations.
       'export callback' => 'apachesolr_search_page_settings_export',
     ),
     'fields' => array(
@@ -164,6 +171,10 @@ function apachesolr_search_uninstall() {
   }
   // Remove variables.
   variable_del('apachesolr_search_spellcheck');
+  variable_del('apachesolr_search_mlt_blocks');
+  variable_del('apachesolr_search_default_search_page');
+  // Remove blocks.
+  db_delete('block')->condition('module', 'apachesolr_search')->execute();
 }
 
 /**
diff --git a/profiles/acquia/modules/apachesolr/apachesolr_search.module b/profiles/acquia/modules/apachesolr/apachesolr_search.module
index 90d1a30..a8eeffb 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr_search.module
+++ b/profiles/acquia/modules/apachesolr/apachesolr_search.module
@@ -20,12 +20,12 @@ function apachesolr_search_init() {
     return;
   }
 
-  $show_facets = apachesolr_environment_variable_get($search_page->env_id, 'apachesolr_search_show_facets', 0);
+  $show_facets = apachesolr_environment_variable_get($search_page['env_id'], 'apachesolr_search_show_facets', 0);
   if ($show_facets && module_exists('facetapi')) {
 
     // Converts current path to lowercase for case insensitive matching.
     $path = drupal_strtolower(drupal_get_path_alias(current_path()));
-    $facet_pages = apachesolr_environment_variable_get($search_page->env_id, 'apachesolr_search_facet_pages', '');
+    $facet_pages = apachesolr_environment_variable_get($search_page['env_id'], 'apachesolr_search_facet_pages', '');
 
     // Iterates over each environment to check if an empty query should be run.
     if (!empty($facet_pages)) {
@@ -33,15 +33,15 @@ function apachesolr_search_init() {
       $patterns = drupal_strtolower($facet_pages);
       if (drupal_match_path($path, $patterns)) {
         try {
-          if (!empty($search_page->search_path)) {
-            $solr = apachesolr_get_solr($search_page->env_id);
+          if (!empty($search_page['search_path'])) {
+            $solr = apachesolr_get_solr($search_page['env_id']);
             // Initializes params for empty query.
             $params = array(
               'spellcheck' => 'false',
               'fq' => array(),
               'rows' => 1,
             );
-            apachesolr_search_run_empty('apachesolr', $params, $search_page->search_path, $solr);
+            apachesolr_search_run_empty('apachesolr', $params, $search_page['search_path'], $solr);
           }
         }
         catch (Exception $e) {
@@ -144,11 +144,16 @@ function apachesolr_search_menu_alter(&$items) {
     $parts = explode('/', $search_page['search_path']);
     $keys_pos = count($parts);
     // Tests whether we are simulating a core search tab.
-    $core_search = ($parts[0] == 'search');
-    $taxonomy_search = ($search_page['search_path'] == 'taxonomy/term/%');
+    $core_search = ($parts[0] == 'search');    
     $position = array_search('%', $parts);
     $page_title = isset($search_page['page_title']) ? $search_page['page_title'] : 'Search Results';
 
+    // If we have a taxonomy search, remove existing menu paths
+    if ($search_page['search_path'] == 'taxonomy/term/%') {
+      unset($items['taxonomy/term/%taxonomy_term']);
+      unset($items['taxonomy/term/%taxonomy_term/view']);
+    }
+
     // Replace possible tokens [term:tid], [node:nid], [user:uid] with their
     // menu-specific variant
     $items[$search_page['search_path']] = array(
@@ -161,13 +166,13 @@ function apachesolr_search_menu_alter(&$items) {
       'file path' => drupal_get_path('module', 'apachesolr_search'),
     );
 
-    $items[$search_page['search_path'] . '/%menu_tail'] = array(
+    // Not using menu tail because of inflexibility with clean urls
+    $items[$search_page['search_path'] . '/%'] = array(
       'title' => $page_title,
-      'load arguments' => array('%map', '%index'),
       'page callback' => 'apachesolr_search_custom_page',
       'page arguments' => array($search_page['page_id'], $keys_pos, $position),
       'access arguments' => array('search content'),
-      'type' => ($taxonomy_search) ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
+      'type' => !($core_search) ? MENU_CALLBACK : MENU_LOCAL_TASK,
       'file' => 'apachesolr_search.pages.inc',
       'file path' => drupal_get_path('module', 'apachesolr_search'),
     );
@@ -180,18 +185,13 @@ function apachesolr_search_menu_alter(&$items) {
       $title_callback = $search_type['title callback'];
       $items[$search_page['search_path']]['title callback'] = $title_callback;
       $items[$search_page['search_path']]['title arguments'] = array($search_page['page_id'], $position);
-      $items[$search_page['search_path'] . '/%menu_tail']['title callback'] = $title_callback;
-      $items[$search_page['search_path'] . '/%menu_tail']['title arguments'] = array($search_page['page_id'], $position);
+      $items[$search_page['search_path'] . '/%']['title callback'] = $title_callback;
+      $items[$search_page['search_path'] . '/%']['title arguments'] = array($search_page['page_id'], $position);
     }
     // If we have additional searches in the search/* path
     if ($core_search) {
-      $items[$search_page['search_path'] . '/%menu_tail']['tab_root'] = 'search/' . $default_info['path'] . '/%';
-      $items[$search_page['search_path'] . '/%menu_tail']['tab_parent'] = 'search/' . $default_info['path'];
-    }
-
-    if ($taxonomy_search) {
-      unset($items['taxonomy/term/%taxonomy_term']);
-      unset($items['taxonomy/term/%taxonomy_term/view']);
+      $items[$search_page['search_path'] . '/%']['tab_root'] = 'search/' . $default_info['path'] . '/%';
+      $items[$search_page['search_path'] . '/%']['tab_parent'] = 'search/' . $default_info['path'];
     }
   }
 }
@@ -252,7 +252,7 @@ function apachesolr_search_get_taxonomy_term_title($search_page_id = NULL, $valu
    $page_title = 'Search results for %value';
    if (isset($value) && isset($search_page_id)) {
      $search_page = apachesolr_search_page_load($search_page_id);
-     $page_title = str_replace('%value', '!value', $search_page->page_title);
+     $page_title = str_replace('%value', '!value', $search_page['page_title']);
      $term = taxonomy_term_load($value);
      if (!$term) {
        return;
@@ -274,7 +274,7 @@ function apachesolr_search_get_user_title($search_page_id = NULL, $value = NULL)
   $title = '';
   if (isset($value) && isset($search_page_id)) {
     $search_page = apachesolr_search_page_load($search_page_id);
-    $page_title = str_replace('%value', '!value', $search_page->page_title);
+    $page_title = str_replace('%value', '!value', $search_page['page_title']);
     $user = user_load($value);
     if (!$user) {
        return;
@@ -295,7 +295,7 @@ function apachesolr_search_get_value_title($search_page_id = NULL, $value = NULL
   $page_title = 'Search results for %value';
   if (isset($value)  && isset($search_page_id)) {
     $search_page = apachesolr_search_page_load($search_page_id);
-    $page_title = str_replace('%value', '!value', $search_page->page_title);
+    $page_title = str_replace('%value', '!value', $search_page['page_title']);
     $title = $value;
   }
   return t($page_title, array('!value' => $title));
@@ -322,41 +322,25 @@ function apachesolr_search_default_search_page($page_id = NULL) {
  * @return array
  */
 function apachesolr_search_page_load($page_id) {
-  $pages = &drupal_static(__FUNCTION__, array());
-
-  if (!isset($pages[$page_id])) {
-    $page = db_query('SELECT * FROM {apachesolr_search_page} s WHERE s.page_id = :page_id', array(':page_id' => $page_id))->fetchObject();
-    if ($page) {
-      $page->settings = unserialize($page->settings);
-      // Special case page - always uses the default environment.
-      if ($page->page_id == 'core_search') {
-        $page->env_id = apachesolr_default_environment();
-      }
-    }
-    elseif (module_exists('ctools')) {
-      // Try also loading the page from ctools exportables.
-      ctools_include('export');
-      if ($pages_from_code = ctools_export_load_object('apachesolr_search_page', 'names', array($page_id))) {
-        $page = array_shift($pages_from_code);
-      }
-    }
-    $pages[$page_id] = $page;
+  $search_pages = apachesolr_search_load_all_search_pages();
+  if (!empty($search_pages[$page_id])) {
+    return $search_pages[$page_id];
   }
-  return $pages[$page_id];
+  return FALSE;
 }
 
 function apachesolr_search_page_save($search_page) {
   if (!empty($search_page)) {
     db_merge('apachesolr_search_page')
-      ->key(array('page_id' => $search_page->page_id))
+      ->key(array('page_id' => $search_page['page_id']))
       ->fields(array(
-        'label' => $search_page->label,
-        'page_id' => $search_page->page_id,
-        'description' => $search_page->description,
-        'env_id' => $search_page->env_id,
-        'search_path' => $search_page->search_path,
-        'page_title' => $search_page->page_title,
-        'settings' => serialize($search_page->settings),
+        'label' => $search_page['label'],
+        'page_id' => $search_page['page_id'],
+        'description' => $search_page['description'],
+        'env_id' => $search_page['env_id'],
+        'search_path' => $search_page['search_path'],
+        'page_title' => $search_page['page_title'],
+        'settings' => serialize($search_page['settings']),
       ))
       ->execute();
   }
@@ -374,13 +358,13 @@ function apachesolr_search_page_clone($page_id) {
   // Get all search_pages
   $search_pages = apachesolr_search_load_all_search_pages();
   // Create an unique ID
-  $new_search_page_id = apachesolr_create_unique_id($search_pages, $search_page->page_id);
+  $new_search_page_id = apachesolr_create_unique_id($search_pages, $search_page['page_id']);
   // Set this id to the new search page
-  $search_page->page_id = $new_search_page_id;
-  $search_page->label = $search_page->label . ' [cloned]';
+  $search_page['page_id'] = $new_search_page_id;
+  $search_page['label'] = $search_page['label'] . ' [cloned]';
   // All cloned search pages should be removable
-  if (isset($search_page->settings['apachesolr_search_not_removable'])) {
-    unset($search_page->settings['apachesolr_search_not_removable']);
+  if (isset($search_page['settings']['apachesolr_search_not_removable'])) {
+    unset($search_page['settings']['apachesolr_search_not_removable']);
   }
   // Save our new search page in the database
   apachesolr_search_page_save($search_page);
@@ -629,9 +613,8 @@ function apachesolr_search_mlt_suggestions($settings, $id, $solr = NULL) {
 
     $response = $query->search();
 
-    if ($response->response) {
-      $docs = (array) end($response->response);
-      return $docs;
+    if (isset($response->response->docs)) {
+      return (array) $response->response->docs;
     }
   }
   catch (Exception $e) {
@@ -663,14 +646,14 @@ function apachesolr_search_search_info() {
 
   // This can happen during install, or if the DB was manually changed.
   if (empty($search_page)) {
-    $search_page = new stdClass();
-    $search_page->page_title = 'Site';
-    $search_page->search_path = 'search/site';
+    $search_page = array();
+    $search_page['page_title'] = 'Site';
+    $search_page['search_path'] = 'search/site';
   }
 
   return array(
-    'title' => $search_page->page_title,
-    'path' => str_replace('search/', '', $search_page->search_path),
+    'title' => $search_page['page_title'],
+    'path' => str_replace('search/', '', $search_page['search_path']),
     'conditions_callback' => variable_get('apachesolr_search_conditions_callback', 'apachesolr_search_conditions'),
   );
 }
@@ -742,17 +725,17 @@ function apachesolr_search_search_page($results) {
  */
 function apachesolr_search_search_page_custom($results, $search_page, $build = array()) {
   // Retrieve suggestion
-  $suggestions = apachesolr_search_get_search_suggestions($search_page->env_id);
+  $suggestions = apachesolr_search_get_search_suggestions($search_page['env_id']);
   if ($search_page && !empty($suggestions)) {
     $build['suggestions'] = array(
       '#theme' => 'apachesolr_search_suggestions',
-      '#links' => array(l($suggestions[0], $search_page->search_path . '/' . $suggestions[0])),
+      '#links' => array(l($suggestions[0], $search_page['search_path'] . '/' . $suggestions[0])),
     );
   }
   // Retrieve expected results from searching
   if (!empty($results['apachesolr_search_browse'])) {
     // Show facet browsing blocks.
-    $build['search_results'] = apachesolr_search_page_browse($results['apachesolr_search_browse'], $search_page->env_id);
+    $build['search_results'] = apachesolr_search_page_browse($results['apachesolr_search_browse'], $search_page['env_id']);
   }
   elseif ($results) {
     $build['search_results'] = array(
@@ -796,6 +779,7 @@ function apachesolr_search_search_results($keys = NULL, $conditions = NULL, $sea
       if (empty($search_page)) {
         // Something must have been really messed up.
         apachesolr_failure(t('Solr search'), $keys);
+        return array();
       }
     }
     if (empty($conditions)) {
@@ -807,16 +791,16 @@ function apachesolr_search_search_results($keys = NULL, $conditions = NULL, $sea
     //   See This condition callback to find out how.
     $solrsort = isset($conditions['apachesolr_search_sort']) ? $conditions['apachesolr_search_sort'] : '';
     // What to do when we have an initial empty search
-    $empty_search_behavior = isset($search_page->settings['apachesolr_search_browse']) ? $search_page->settings['apachesolr_search_browse'] : '';
+    $empty_search_behavior = isset($search_page['settings']['apachesolr_search_browse']) ? $search_page['settings']['apachesolr_search_browse'] : '';
 
     try {
 
-      $solr = apachesolr_get_solr($search_page->env_id);
+      $solr = apachesolr_get_solr($search_page['env_id']);
       // Default parameters
       $params['fq'] = isset($conditions['fq']) ? $conditions['fq'] : array();
-      $params['rows'] = $search_page->settings['apachesolr_search_per_page'];
+      $params['rows'] = $search_page['settings']['apachesolr_search_per_page'];
 
-      if (empty($search_page->settings['apachesolr_search_spellcheck'])) {
+      if (empty($search_page['settings']['apachesolr_search_spellcheck'])) {
         // Spellcheck needs to have a string as false/true
         $params['spellcheck'] = 'false';
       }
@@ -828,19 +812,19 @@ function apachesolr_search_search_results($keys = NULL, $conditions = NULL, $sea
       if (!$keys && !isset($conditions['f']) && ($empty_search_behavior == 'browse' || $empty_search_behavior == 'blocks')) {
         // Pass empty search behavior as string on to apachesolr_search_search_page()
         // Hardcoded apachesolr name since we rely on this for the facets
-        apachesolr_search_run_empty('apachesolr', $params, $search_page->search_path, $solr);
+        apachesolr_search_run_empty('apachesolr', $params, $search_page['search_path'], $solr);
         $results['apachesolr_search_browse'] = $empty_search_behavior;
 
         if ($empty_search_behavior == 'browse') {
           // Hide sidebar blocks for content-area browsing instead.
-          apachesolr_suppress_blocks($search_page->env_id, TRUE);
+          apachesolr_suppress_blocks($search_page['env_id'], TRUE);
         }
       }
       // Full text behavior. Triggers with a text search or a facet
       elseif (($keys || isset($conditions['f'])) || ($empty_search_behavior == 'results')) {
         $params['q'] = $keys;
         // Hardcoded apachesolr name since we rely on this for the facets
-        $results = apachesolr_search_run('apachesolr', $params, $solrsort, $search_page->search_path, pager_find_page(), $solr);
+        $results = apachesolr_search_run('apachesolr', $params, $solrsort, $search_page['search_path'], pager_find_page(), $solr);
       }
     }
     catch (Exception $e) {
@@ -853,11 +837,11 @@ function apachesolr_search_search_results($keys = NULL, $conditions = NULL, $sea
 
 function apachesolr_search_conditions_default($search_page) {
   $conditions = array();
-  $search_type = isset($search_page->settings['apachesolr_search_search_type']) ? $search_page->settings['apachesolr_search_search_type'] : '';
-  $allow_user_input = isset($search_page->settings['apachesolr_search_allow_user_input']) ? $search_page->settings['apachesolr_search_allow_user_input'] : FALSE;
-  $path_replacer = isset($search_page->settings['apachesolr_search_path_replacer']) ? $search_page->settings['apachesolr_search_path_replacer'] : '';
-  $set_custom_filter = isset($search_page->settings['apachesolr_search_custom_enable']) ? $search_page->settings['apachesolr_search_custom_enable'] : '';
-  $search_page_fq = !empty($search_page->settings['fq']) ? $search_page->settings['fq'] : '';
+  $search_type = isset($search_page['settings']['apachesolr_search_search_type']) ? $search_page['settings']['apachesolr_search_search_type'] : '';
+  $allow_user_input = isset($search_page['settings']['apachesolr_search_allow_user_input']) ? $search_page['settings']['apachesolr_search_allow_user_input'] : FALSE;
+  $path_replacer = isset($search_page['settings']['apachesolr_search_path_replacer']) ? $search_page['settings']['apachesolr_search_path_replacer'] : '';
+  $set_custom_filter = isset($search_page['settings']['apachesolr_search_custom_enable']) ? $search_page['settings']['apachesolr_search_custom_enable'] : '';
+  $search_page_fq = !empty($search_page['settings']['fq']) ? $search_page['settings']['fq'] : '';
 
   $conditions['fq'] = array();
   // We only allow this to happen if the search page explicitely allows it
@@ -998,9 +982,6 @@ function apachesolr_search_run($name, array $params = array(), $solrsort = '', $
     apachesolr_search_add_spellcheck_params($query);
   }
 
-  // Add custom params after we add the default params
-  $query->addParams($params);
-
   // Add the paging parameters
   $query->page = $page;
 
@@ -1027,9 +1008,10 @@ function apachesolr_search_run($name, array $params = array(), $solrsort = '', $
   }
 
   list($final_query, $response) = apachesolr_do_query($query, $page);
-  $solr_id = $query->solr('getId');
-  apachesolr_has_searched($solr_id, TRUE);
-  return apachesolr_search_process_response($response, $final_query);
+  $env_id = $query->solr('getId');
+  apachesolr_has_searched($env_id, TRUE);
+  $process_response_callback = apachesolr_environment_variable_get($env_id, 'process_response_callback', 'apachesolr_search_process_response');
+  return call_user_func($process_response_callback, $response, $final_query);
 }
 
 function apachesolr_search_basic_params(DrupalSolrQueryInterface $query = NULL) {
@@ -1185,6 +1167,8 @@ function apachesolr_search_process_response($response, DrupalSolrQueryInterface
     // 'score' is generated by solr.
     foreach ($response->response->docs as $doc) {
       $extra = array();
+      // Allow modules to alter each document and its extra information.
+      drupal_alter('apachesolr_search_result', $doc, $extra, $query);
 
       // Start with an empty snippets array.
       $snippets = array();
@@ -1204,9 +1188,11 @@ function apachesolr_search_process_response($response, DrupalSolrQueryInterface
           $snippets[] = truncate_utf8($doc->teaser, 256, TRUE);
         }
       }
+
       $hook = 'apachesolr_search_snippets__' . $doc->entity_type;
-      if (!empty($doc->bundle)) {
-        $hook .= '__' . $doc->bundle;
+      $bundle = !empty($doc->bundle) ? $doc->bundle : NULL;
+      if ($bundle) {
+        $hook .= '__' . $bundle;
       }
       $snippet = theme($hook, array('doc' => $doc, 'snippets' => $snippets));
 
@@ -1237,13 +1223,9 @@ function apachesolr_search_process_response($response, DrupalSolrQueryInterface
         $doc->name = NULL;
       }
 
-      $extra = array();
-
-      // Allow modules to alter each document and its extra information.
-      drupal_alter('apachesolr_search_result', $doc, $extra, $query);
-
       // Set all expected fields from fl to NULL if they are missing so
       // as to prevent Notice: Undefined property.
+      $fl = array_merge($fl, array('path', 'label', 'score'));
       foreach ($fl as $field) {
         if (!isset($doc->{$field})) {
           $doc->{$field} = NULL;
@@ -1265,11 +1247,11 @@ function apachesolr_search_process_response($response, DrupalSolrQueryInterface
         'snippet' => $snippet,
         'fields' => $fields,
         'entity_type' => $doc->entity_type,
-        'bundle' => $doc->bundle,
+        'bundle' => $bundle,
       );
 
       // Call entity-type-specific callbacks for extra handling.
-      $function = apachesolr_entity_get_callback($doc->entity_type, 'result callback');
+      $function = apachesolr_entity_get_callback($doc->entity_type, 'result callback', $bundle);
       if (is_callable($function)) {
         $function($doc, $result, $extra);
       }
@@ -1278,12 +1260,11 @@ function apachesolr_search_process_response($response, DrupalSolrQueryInterface
 
       $results[] = $result;
     }
-
-    // Hook to allow modifications of the retrieved results
-    foreach (module_implements('apachesolr_process_results') as $module) {
-      $function = $module . '_apachesolr_process_results';
-      $function($results, $query);
-    }
+  }
+  // Hook to allow modifications of the retrieved results
+  foreach (module_implements('apachesolr_process_results') as $module) {
+    $function = $module . '_apachesolr_process_results';
+    $function($results, $query);
   }
   return $results;
 }
@@ -1373,7 +1354,12 @@ function apachesolr_search_preprocess_search_result(&$variables) {
   // template potential to make life easier for themers.
   if ($variables['module'] == 'apachesolr_search') {
     $result = $variables['result'];
-    $variables['theme_hook_suggestions'][] = 'search_result__' . $variables['module'] . '__' . $result['entity_type'] . '__' . $result['bundle'];
+    if (!empty($result['entity_type'])) {
+      $variables['theme_hook_suggestions'][] = 'search_result__' . $variables['module'] . '__' . $result['entity_type'];
+      if (!empty($result['bundle'])) {
+        $variables['theme_hook_suggestions'][] = 'search_result__' . $variables['module'] . '__' . $result['entity_type'] . '__' . $result['bundle'];
+      }
+    }
   }
 }
 
@@ -1384,8 +1370,8 @@ function apachesolr_search_preprocess_search_results(&$variables) {
   // If this is a solr search, expose more data to themes to play with.
   if ($variables['module'] == 'apachesolr_search') {
     // Fetch our current query
-    if (!empty($variables['search_page']->env_id)) {
-      $env_id = $variables['search_page']->env_id;
+    if (!empty($variables['search_page']['env_id'])) {
+      $env_id = $variables['search_page']['env_id'];
     }
     $query = apachesolr_current_query($env_id);
 
@@ -1408,6 +1394,17 @@ function apachesolr_search_preprocess_search_results(&$variables) {
     // Redefine the pager if it was missing
     pager_default_initialize($total, $params['rows']);
     $variables['pager'] = theme('pager', array('tags' => NULL));
+
+    // Add template hints for environments
+    if (!empty($env_id)) {
+      $variables['theme_hook_suggestions'][] = 'search_results__' . $variables['module'] . '__' . $env_id;
+      // Add template hints for search pages
+      if (!empty($variables['search_page']['page_id'])) {
+        $variables['theme_hook_suggestions'][] = 'search_results__' . $variables['module'] . '__' . $variables['search_page']['page_id'];
+        // Add template hints for both
+        $variables['theme_hook_suggestions'][] = 'search_results__' . $variables['module'] . '__' . $env_id . '__' . $variables['search_page']['page_id'];
+      }
+    }
   }
 }
 
@@ -1426,7 +1423,11 @@ function apachesolr_search_apachesolr_environment_delete($server) {
   menu_rebuild();
 }
 
-
+function apachesolr_search_form_search_block_form_alter(&$form, $form_state) {
+  if (variable_get('search_default_module') == 'apachesolr_search') {
+    $form['#submit'][] = 'apachesolr_search_form_search_submit';
+  }
+}
 /**
  * Implements hook_form_[form_id]_alter().
  *
@@ -1440,12 +1441,12 @@ function apachesolr_search_form_search_form_alter(&$form, $form_state) {
     // calling drupal_get_form('search_form').
     // Load core search page
     $search_page = apachesolr_search_page_load('core_search');
-    $apachesolr_has_searched = apachesolr_has_searched($search_page->env_id);
+    $apachesolr_has_searched = apachesolr_has_searched($search_page['env_id']);
 
     $searcher = NULL;
     $fq = NULL;
     if ($apachesolr_has_searched) {
-      $query = apachesolr_current_query($search_page->env_id);
+      $query = apachesolr_current_query($search_page['env_id']);
       $searcher = $query->getSearcher();
       // We use the presence of filter query params as a flag for the retain filters checkbox.
       $fq = $query->getParam('fq');
@@ -1487,11 +1488,19 @@ function theme_apachesolr_search_suggestions($variables) {
  */
 function apachesolr_search_form_search_submit($form, &$form_state) {
   $fv = $form_state['values'];
-  $get = json_decode($fv['apachesolr_search']['get'], TRUE);
-  if (!empty($fv['apachesolr_search']['retain-filters'])) {
-    $get['retain-filters'] = '1';
-    // Add the query values into the redirect.
-    $form_state['redirect'] = array($form_state['redirect'], array('query' => $get));
+
+  if (isset($fv['apachesolr_search'])) {
+    $get = json_decode($fv['apachesolr_search']['get'], TRUE);
+    if (!empty($fv['apachesolr_search']['retain-filters'])) {
+      $get['retain-filters'] = '1';
+      // Add the query values into the redirect.
+      $form_state['redirect'] = array($form_state['redirect'], array('query' => $get));
+    }
+  }
+  // Replace keys with their rawurlencoded value
+  if (isset($fv['search_block_form'])) {
+    $raw_keys = rawurlencode($fv['search_block_form']);
+    $form_state['redirect'] = str_replace($fv['search_block_form'], $raw_keys, $form_state['redirect']);
   }
 }
 
diff --git a/profiles/acquia/modules/apachesolr/apachesolr_search.pages.inc b/profiles/acquia/modules/apachesolr/apachesolr_search.pages.inc
index ae87ad1..f462e08 100644
--- a/profiles/acquia/modules/apachesolr/apachesolr_search.pages.inc
+++ b/profiles/acquia/modules/apachesolr/apachesolr_search.pages.inc
@@ -12,22 +12,24 @@ function apachesolr_search_custom_page($page_id, $keys = '', $path_replacer = NU
   $search_page = apachesolr_search_page_load($page_id);
   if (empty($search_page)) {
     drupal_set_message(t('This search page cannot be found'), 'error');
-    drupal_not_found();
+    return drupal_not_found();
   }
   // Add our replacement value in the conditions array
   if (!empty($path_replacer)) {
-    $search_page->settings['apachesolr_search_path_replacer'] = $path_replacer;
+    $search_page['settings']['apachesolr_search_path_replacer'] = $path_replacer;
   }
   // Replace dynamic path with current path
-  $search_page->search_path = str_replace('%', $path_replacer, $search_page->search_path);
+  $search_page['search_path'] = str_replace('%', $path_replacer, $search_page['search_path']);
   // Retrieve the conditions that apply to this page
   $conditions = apachesolr_search_conditions_default($search_page);
+  // Process our keys so they are clean
+  $keys = rawurldecode($keys);
   // Retrieve the results of the search
   $results = apachesolr_search_search_results($keys, $conditions, $search_page);
   // Initiate our build array
   $build = array();
   // Add a custom search form if required
-  if (!empty($search_page->settings['apachesolr_search_search_box'])) {
+  if (!empty($search_page['settings']['apachesolr_search_search_box'])) {
     // Adds the search form to the page.
     $build['search_form'] = drupal_get_form('apachesolr_search_custom_page_search_form', $search_page, $keys);
   }
@@ -63,30 +65,27 @@ function apachesolr_search_custom_page_search_form($form, &$form_state, $search_
     '#value' => t('Search'),
   );
 
-  $apachesolr_has_searched = apachesolr_has_searched($search_page->env_id);
-  $query = apachesolr_current_query($search_page->env_id);
+  $form['basic']['get'] = array(
+    '#type' => 'hidden',
+    '#default_value' => json_encode(array_diff_key($_GET, array('q' => 1, 'page' => 1, 'solrsort' => 1, 'retain-filters' => 1))),
+  );
+
+  $fq = NULL;
 
-  if ($apachesolr_has_searched) {
-    $query = apachesolr_current_query($search_page->env_id);
-    $searcher = $query->getSearcher();
+  if (apachesolr_has_searched($search_page['env_id'])) {
+    $query = apachesolr_current_query($search_page['env_id']);
     // We use the presence of filter query params as a flag for the retain filters checkbox.
     $fq = $query->getParam('fq');
   }
 
-  if ($apachesolr_has_searched && ($response = apachesolr_static_response_cache($searcher))) {
-    $form['basic']['get'] = array(
-      '#type' => 'hidden',
-      '#default_value' => json_encode(array_diff_key($_GET, array('q' => 1, 'page' => 1, 'solrsort' => 1, 'retain-filters' => 1))),
+  if ($fq || isset($form_state['input']['retain-filters'])) {
+    $form['basic']['retain-filters'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Retain current filters'),
+      '#default_value' => (int) !empty($_GET['retain-filters']),
     );
+  }
 
-    if ($fq) {
-      $form['basic']['retain-filters'] = array(
-        '#type' => 'checkbox',
-        '#title' => t('Retain current filters'),
-        '#default_value' => (int) isset($_GET['retain-filters']),
-      );
-    }
-        }
   return $form;
 }
 
@@ -95,21 +94,26 @@ function apachesolr_search_custom_page_search_form($form, &$form_state, $search_
  */
 function apachesolr_search_custom_page_search_form_submit(&$form, &$form_state) {
   $search_page = $form['#search_page'];
-  $redirect = $search_page->search_path;
+  $redirect = $search_page['search_path'];
+
+  // Also encode slashes so we don't get akward situations when obtaining the
+  // search key. We can't use drupal_encode_path because for "aestetic" reasons
+  // they don't encode slashes...
+  $redirect_value = rawurlencode($form_state['values']['keys']);
+
   if (strlen($form_state['values']['keys'])) {
-    $redirect .= '/' . $form_state['values']['keys'];
+    $redirect .= '/' . $redirect_value;
   }
   if (isset($form_state['values']['get'])) {
     $get = json_decode($form_state['values']['get'], TRUE);
   }
   if (!empty($form_state['values']['retain-filters'])) {
-    // Add our saved value
+    // Add our saved values
     $get['retain-filters'] = '1';
-    // Add the query values into the redirect.
-    $form_state['redirect'] = array($redirect, array('query' => $get));
   }
   else {
-    // Redirects to path set in configuration.
-    $form_state['redirect'] = $redirect;
+    $get = array();
   }
+  // Add the query values into the redirect.
+  $form_state['redirect'] = array($redirect, array('query' => $get));
 }
diff --git a/profiles/acquia/modules/apachesolr/drush/apachesolr.drush.inc b/profiles/acquia/modules/apachesolr/drush/apachesolr.drush.inc
index 1969592..e84c621 100644
--- a/profiles/acquia/modules/apachesolr/drush/apachesolr.drush.inc
+++ b/profiles/acquia/modules/apachesolr/drush/apachesolr.drush.inc
@@ -8,45 +8,33 @@
 /**
  * Implements hook_drush_command().
  *
- * In this hook, you specify which commands your
- * drush module makes available, what it does and
- * description.
- *
- * Notice how this structure closely resembles how
- * you define menu hooks.
- *
- * @see drush_parse_command()
- *   for a list of recognized keys.
- *
- * @return
+ * @return array
  *   An associative array describing your command(s).
  */
 function apachesolr_drush_command() {
   $items = array();
 
-  // the key in the $items array is the name of the command.
   $items['solr-delete-index'] = array(
-    // the name of the function implementing your command.
     'callback' => 'apachesolr_drush_solr_delete_index',
-    // a short description of your command
     'description' => dt('Deletes the content from the index. Can take content types as parameters.'),
     'arguments' => array(
       'types' => dt('Optional. A space delimited list of content types to be deleted from the index.'),
     ),
+    'examples' => array(
+      'drush solr-delete-index node' => 'Delete all node content from the index.',
+      'drush solr-delete-index node:article' => 'Delete all content of the article content type from the index.',
+      'drush solr-delete-index node:article node:blog' => 'Delete all content of the article and blog content types from the index.',
+    ),
   );
   $items['solr-mark-all'] = array(
-    // the name of the function implementing your command.
     'callback' => 'apachesolr_drush_solr_mark_for_reindex',
-    // a short description of your command
     'description' => dt('Marks content for reindexing. Can take content types as parameters.'),
     'arguments' => array(
       'types' => dt('Optional. A space delimited list of content types to be marked for reindexing.'),
     ),
   );
   $items['solr-index'] = array(
-    // the name of the function implementing your command.
     'callback' => 'apachesolr_drush_solr_index',
-    // a short description of your command
     'description' => dt('Reindexes content marked for (re)indexing.'),
   );
   $items['solr-search'] = array(
@@ -58,31 +46,111 @@ function apachesolr_drush_command() {
   );
   $items['solr-get-env-id'] = array(
     'callback' => 'apachesolr_drush_solr_get_env_id',
-    'description' => dt('Get the default Apache Solr environment id'),
+    'description' => dt('Get the default Apache Solr environment ID, or all IDs and names'),
     'arguments' => array(),
+    'options' => array(
+      'all' => array(
+         'description' => 'List all environment IDs',
+      ),
+    ),
   );
   $items['solr-get-env-name'] = array(
     'callback' => 'apachesolr_drush_solr_get_env_name',
-    'description' => dt('Get the default Apache Solr environment name, uses the default environment by default.'),
-    'arguments' => array(
-      'id' => dt('Optional. Apache Solr environment id.'),
+    'description' => dt('Get the Apache Solr environment name.'),
+    'options' => array(
+      'id' => array(
+         'description' => 'Apache Solr environment ID to use (uses the default environment if not specified)',
+      ),
     ),
   );
   $items['solr-get-env-url'] = array(
     'callback' => 'apachesolr_drush_solr_get_env_url',
-    'description' => dt('Get the default Apache Solr environment url, uses the default environment by default.'),
-    'arguments' => array(
-      'id' => dt('Optional. Apache Solr environment id.'),
+    'description' => dt('Get the Apache Solr environment url.'),
+    'options' => array(
+      'id' => array(
+         'description' => 'Apache Solr environment ID to use (uses the default environment if not specified)',
+      ),
     ),
   );
   $items['solr-set-env-url'] = array(
     'callback' => 'apachesolr_drush_solr_set_env_url',
-    'description' => dt('Set the url for an Apache Solr environment, uses the default environment by default.'),
+    'description' => dt('Set the url for an Apache Solr environment.'),
     'arguments' => array(
       'url' => dt('Apache Solr server url string.'),
-      'id' => dt('Optional. Apache Solr environment id.'),
+    ),
+    'required-arguments' => TRUE,
+    'options' => array(
+      'id' => array(
+         'description' => 'Apache Solr environment ID to use (uses the default environment if not specified)',
+      ),
     ),
   );
+  $items['solr-variable-get'] = array(
+    'description' => 'Get a list of Apache Solr environment variable names and values.',
+    'arguments' => array(
+      'name' => 'A string to filter the variables by. Variables that have any part of their name matching the string will b listed.',
+    ),
+    'examples' => array(
+      'drush solr-vget' => 'List all variables and values.',
+      'drush solr-vget user' => 'List all variables containing the string "user".',
+    ),
+    'options' => array(
+      'id' => array(
+         'description' => 'Apache Solr environment ID to use (uses the default environment if not specified)',
+      ),
+      'format' => array(
+        'description' => 'Format to output the object. Use "print_r" for print_r (default), "export" for var_export, and "json" for JSON.',
+        'example-value' => 'export',
+      ),
+      'pipe' => 'A synonym for --format=export. Useful for pasting into code.',
+    ),
+    'aliases' => array('solr-vget'),
+  );
+  $items['solr-variable-set'] = array(
+    'description' => "Set an Apache Solr environment variable.",
+    'arguments' => array(
+      'name' => 'The name of a variable or the first few letters of its name.',
+      'value' => 'The value to assign to the variable. Use \'-\' to read the object from STDIN.',
+    ),
+    'required-arguments' => TRUE,
+    'options' => array(
+      'id' => array(
+         'description' => 'Apache Solr environment ID to use (uses the default environment if not specified)',
+      ),
+      'yes' => 'Skip confirmation if only one variable name matches.',
+      'always-set' => 'Always skip confirmation.',
+      'format' => array(
+        'description' => 'Format to parse the object. Use "auto" to detect format from value (default), "string", "integer" or "boolean" for corresponding primitive type, and "json" for JSON.',
+        'example-value' => 'boolean',
+      ),
+    ),
+    'examples' => array(
+      'drush solr-vset --yes apachesolr_read_only 1' => 'Set the apachesolr_read_only variable to 1. Skip confirmation if variable already exists.',
+      'drush solr-vset pr TRUE' => 'Choose from a list of variables beginning with "pr" to set to (bool)true.',
+      'php -r "print json_encode(array(\'drupal\', \'simpletest\'));"  | drush solr-vset --format=json project_dependency_excluded_dependencies -'=> 'Set a variable to a complex value (e.g. array)',
+    ),
+    'aliases' => array('solr-vset'),
+  );
+  $items['solr-variable-delete'] = array(
+    'description' => "Delete an Apache Solr environment variable.",
+    'arguments' => array(
+      'name' => 'The name of a variable or the first few letters of its name.',
+    ),
+    'required-arguments' => TRUE,
+    'options' => array(
+      'id' => array(
+         'description' => 'Apaches Solr environment ID to use (uses the default environment if not specified)',
+      ),
+      'yes' => 'Skip confirmation if only one variable name matches.',
+      'exact' => 'Only delete the one variable that exactly matches the specified name.',
+    ),
+    'examples' => array(
+      'drush solr-vdel apachesolr_read_only --id=solr2' => 'Delete the apachesolr_read_only variable for the solr2 environment.',
+      'drush solr-vdel apa' => 'Choose from a list of variables beginning with "u" to delete.',
+      'drush solr-vdel -y --exact apachesolr_read_only' => 'Delete variable, skipping confirmation.',
+    ),
+    'aliases' => array('solr-vdel'),
+  );
   return $items;
 }
 
@@ -92,10 +160,10 @@ function apachesolr_drush_command() {
  * This function is called whenever a drush user calls
  * 'drush help <name-of-your-command>'
  *
- * @param
+ * @param string $section
  *   A string with the help section (prepend with 'drush:')
  *
- * @return
+ * @return string
  *   A string with the help text for your command.
  */
 function apachesolr_drush_help($section) {
@@ -108,25 +176,42 @@ function apachesolr_drush_help($section) {
       return dt("Reindexes content marked for (re)indexing. If you want to reindex all content or content of a specific type, use solr-reindex first to mark that content.");
     case 'drush:solr-search':
       return dt('Executes a search against the site\'s Apache Solr search index and returns the restults.');
+    case 'error:APACHESOLR_ENV_ID_ERROR':
+      return dt('Not a valid environment ID.');
   }
 }
 
 /**
- * Example drush command callback.
- *
- * This is where the action takes place.
- *
- * In this function, all of Drupals API is (usually) available, including
- * any functions you have added in your own modules/themes.
- *
- * To print something to the terminal window, use drush_print().
+ * Selectively delete content from the apachesolr index.
  *
+ * Each argument is a filter on what to delete from the index.
+ * They are of the form entity (to delete all content of that
+ * entity) or entity:bundle (to delete all content of that
+ * bundle).
  */
 function apachesolr_drush_solr_delete_index() {
   module_load_include('inc', 'apachesolr', 'apachesolr.index');
   $args = func_get_args();
   $env_id = apachesolr_default_environment();
-  apachesolr_index_delete_index($env_id);
+
+  if (count($args) > 0) {
+    foreach ($args as $type) {
+      $parts = explode(':', $type);
+      if (count($parts) === 1) {
+        apachesolr_index_delete_index($env_id, $type);
+      }
+      elseif (count($parts) == 2) {
+        apachesolr_index_delete_index($env_id, $parts[0], $parts[1]);
+      }
+      else {
+        drush_set_error('The syntax for each type is either entity or entity:bundle');
+      }
+    }
+  }
+  else {
+    apachesolr_index_delete_index($env_id);
+  }
+
   drush_print(t('Deleted the Solr index'));
 }
 
@@ -165,55 +250,265 @@ function apachesolr_drush_solr_search() {
 }
 
 function apachesolr_drush_solr_get_env_id() {
-  $solr_env_id = apachesolr_default_environment();
-  drush_print($solr_env_id);
-}
+  $all = drush_get_option('all');
 
-function apachesolr_drush_solr_get_env_name() {
-  $args = func_get_args();
-  if (isset($args[0])) {
-    $solr_env_id = $args[0];
+  if ($all) {
+    foreach (apachesolr_load_all_environments() as $id => $env) {
+      drush_print(drush_format($env['name'], $id));
+    }
   }
   else {
     $solr_env_id = apachesolr_default_environment();
+    drush_print($solr_env_id);
   }
+}
 
-  $solr_env = apachesolr_environment_load($solr_env_id);
-  drush_print($solr_env['name']);
+function apachesolr_drush_solr_get_env_name() {
+  $env_id = drush_get_option('id', apachesolr_default_environment());
+  try {
+    $environment = _apachesolr_drush_environment_load_and_validate($env_id);
+  }
+  catch (Exception $e) {
+    return drush_set_error('APACHESOLR_ENV_ID_ERROR', $e->getMessage());
+  }
+  drush_print($environment['name']);
 }
 
 function apachesolr_drush_solr_get_env_url() {
+  $env_id = drush_get_option('id', apachesolr_default_environment());
+  try {
+    $environment = _apachesolr_drush_environment_load_and_validate($env_id);
+  }
+  catch (Exception $e) {
+    return drush_set_error('APACHESOLR_ENV_ID_ERROR', $e->getMessage());
+  }
+  drush_print($environment['url']);
+}
+
+function apachesolr_drush_solr_set_env_url($url) {
+  $env_id = drush_get_option('id', apachesolr_default_environment());
+  try {
+    $environment = _apachesolr_drush_environment_load_and_validate($env_id);
+  }
+  catch (Exception $e) {
+    return drush_set_error('APACHESOLR_ENV_ID_ERROR', $e->getMessage());
+  }
+  $environment['url'] = $url;
+  apachesolr_environment_save($environment);
+}
+
+/*** variable code - much of it copied from dush core **/
+
+/**
+ * Command callback.
+ * List your site's variables.
+ */
+function drush_apachesolr_solr_variable_get($arg_name = NULL) {
+  $output = NULL;
+
+  $found = array();
+
+  $env_id = drush_get_option('id', apachesolr_default_environment());
+  try {
+    $found = _apachesolr_drush_variable_like($env_id, $arg_name);
+  }
+  catch (Exception $e) {
+    return drush_set_error('APACHESOLR_ENV_ID_ERROR', $e->getMessage());
+  }
+
+  foreach ($found as $name => $value) {
+    drush_print_pipe(drush_format($value, $name, 'export'));
+    drush_print(drush_format($value, $name));
+  }
+
+  if (empty($found)) {
+    return drush_set_error('DRUSH_VARIABLE_ERROR', 'No matching variable found.');
+  }
+  else {
+    return $found;
+  }
+}
+
+/**
+ * Command callback.
+ * Set a variable.
+ */
+function drush_apachesolr_solr_variable_set($arg_name, $value) {
   $args = func_get_args();
-  if (isset($args[0])) {
-    $solr_env_id = $args[0];
+
+  if (!isset($value)) {
+    return drush_set_error('DRUSH_VARIABLE_ERROR', dt('No value specified.'));
+  }
+
+  $env_id = drush_get_option('id', apachesolr_default_environment());
+  try {
+    $found = _apachesolr_drush_variable_like($env_id, $arg_name, TRUE);
+  }
+  catch (Exception $e) {
+    return drush_set_error('APACHESOLR_ENV_ID_ERROR', $e->getMessage());
+  }
+
+  $options[] = "$arg_name ". dt('(new variable)');
+  $match = isset($found[$arg_name]);
+  if (!$match && $found) {
+    $options = array_merge($options, array_keys($found));
+  }
+
+  if ($value == '-') {
+    $value = stream_get_contents(STDIN);
+  }
+
+  // If the value is a string (usual case, unless we are called from code),
+  // then format the input
+  if (is_string($value)) {
+    $value = _apachesolr_drush_variable_format($value, drush_get_option('format', 'auto'));
+  }
+
+  // Format the output for display
+  if (is_array($value)) {
+    $display = "\n" . var_export($value, TRUE);
+  }
+  elseif (is_integer($value)) {
+    $display = $value;
+  }
+  elseif (is_bool($value)) {
+    $display = $value ? "TRUE" : "FALSE";
   }
   else {
-    $solr_env_id = apachesolr_default_environment();
+    $display = '"' . $value . '"';
   }
 
-  $solr_env = apachesolr_environment_load($solr_env_id);
-  if (!empty($solr_env['url'])) {
-    drush_print($solr_env['url']);
+  $name = NULL;
+  if (drush_get_option('always-set', FALSE) || $match) {
+    $name = $arg_name;
+  }
+  else {
+    $choice = drush_choice($options, 'Enter a number to choose which variable to set.');
+    if ($choice !== FALSE) {
+      $name = ($choice == 0) ? $arg_name : $options[$choice];
+    }
+  }
+  if ($name) {
+    drush_op('apachesolr_environment_variable_set', $env_id, $name, $value);
+    drush_log(dt('!name was set to !value', array('!name' => $name, '!value' => $display)), 'success');
   }
 }
 
-function apachesolr_drush_solr_set_env_url() {
-  $args = func_get_args();
+function _apachesolr_drush_variable_format($value, $format) {
+  if ($format == 'auto') {
+    if (is_numeric($value)) {
+      $format = 'integer';
+    }
+    elseif (($value == 'TRUE') || ($value == 'FALSE')) {
+      $format = 'bool';
+    }
+  }
+
+  // Now, we parse the object.
+  switch ($format) {
+    case 'integer':
+      $value = (integer)$value;
+      break;
+
+    case 'bool':
+    case 'boolean':
+      if ($value == 'TRUE') {
+        $value = TRUE;
+      }
+      elseif ($value == 'FALSE') {
+        $value = FALSE;
+      }
+      else {
+        $value = (bool)$value;
+      }
+      break;
+
+    case 'json':
+      $value = drush_json_decode($value);
+      break;
+  }
+  return $value;
+}
+
+/**
+ * Command callback.
+ * Delete a variable.
+ */
+function drush_apachesolr_solr_variable_delete($arg_name) {
+
+  $env_id = drush_get_option('id', apachesolr_default_environment());
+  // Look for similar variable names.
+  try {
+    $found = _apachesolr_drush_variable_like($env_id, $arg_name, TRUE);
+  }
+  catch (Exception $e) {
+    return drush_set_error('APACHESOLR_ENV_ID_ERROR', $e->getMessage());
+  }
+  drush_log(dt('Using environment ID "!env_id"', array('!env_id' => $env_id)), 'success');
+  $options = array_keys($found);
 
-  // url
-  if (!isset($args[0])) {
-    return drush_set_error('DRUSH_VARIABLE_ERROR', dt('No apachesolr environment url specified'));
+  if (drush_get_option('exact', FALSE)) {
+    $options = isset($found[$arg_name]) ? array($arg_name) : array();
   }
-  // environment id
-  if (isset($args[1])) {
-    $solr_env_id = $args[1];
+
+  if (empty($options)) {
+    drush_print(dt('!name not found.', array('!name' => $arg_name)));
+    return '';
+  }
+
+  $name = NULL;
+  if ((count($options) == 1) && drush_get_context('DRUSH_AFFIRMATIVE')) {
+    $name = $arg_name;
   }
   else {
-    $solr_env_id = apachesolr_default_environment();
+    $choice = drush_choice($options, 'Enter a number to choose which variable to delete.');
+    if ($choice !== FALSE) {
+      $name = $options[$choice];
+    }
+  }
+  if ($name) {
+    drush_op('apachesolr_environment_variable_del', $env_id, $name);
+    drush_log(dt('!choice was deleted.', array('!choice' => $name)), 'success');
   }
+}
 
-  $solr_env = array();
-  $solr_env['url'] = $args[0];
-  $solr_env['env_id'] = $solr_env_id;
-  apachesolr_environment_save($solr_env);
+/**
+ * Load an environment from an id and validate the result.
+ *
+ * @throws Exception
+ */
+function _apachesolr_drush_environment_load_and_validate($env_id) {
+  $environment = apachesolr_environment_load($env_id);
+  if (!$environment) {
+    throw new Exception(dt('!env_id is not a valid environment ID.', array('!env_id' => $env_id)));
+  }
+  drush_log(dt('Using environment ID: "!env_id"', array('!env_id' => $env_id)), 'success');
+  return $environment;
 }
+
+/**
+ * Search for similar variable names.
+ *
+ * @throws Exception
+ */
+function _apachesolr_drush_variable_like($env_id, $arg = NULL, $starts_with = FALSE) {
+  $found = array();
+  $environment = _apachesolr_drush_environment_load_and_validate($env_id);
+  if (!isset($arg)) {
+    return $environment['conf'];
+  }
+  if ($starts_with) {
+    $pattern = "/^{$arg}/i";
+  }
+  else {
+    $pattern = "/{$arg}/i";
+  }
+  foreach ($environment['conf'] as $name => $value) {
+    // Find all variable that start with $arg.
+    if (preg_match($pattern, $name)) {
+      $found[$name] = $value;
+    }
+  }
+  return $found;
+}
+
diff --git a/profiles/acquia/modules/apachesolr/plugins/facetapi/query_type_term.inc b/profiles/acquia/modules/apachesolr/plugins/facetapi/query_type_term.inc
index de1f6b2..5a518b5 100644
--- a/profiles/acquia/modules/apachesolr/plugins/facetapi/query_type_term.inc
+++ b/profiles/acquia/modules/apachesolr/plugins/facetapi/query_type_term.inc
@@ -65,6 +65,12 @@ class ApacheSolrFacetapiTerm extends FacetapiQueryType implements FacetapiQueryT
       $local = "tag={$this->facet['field']}";
       $values = array_keys($active);
       if ($values) {
+        // Quote any values that have white space.
+        foreach ($values as &$v) {
+          if (preg_match('/\s/', $v)) {
+            $v = '"' . $v . '"';
+          }
+        }
         $query->addFilter($this->facet['field'], '(' . implode(' OR ', $values) . ')', FALSE, $local);
       }
     }
diff --git a/profiles/acquia/modules/apachesolr/solr-conf/schema-solr3x.xml b/profiles/acquia/modules/apachesolr/solr-conf/schema-solr3x.xml
index c66174c..8c16bf0 100644
--- a/profiles/acquia/modules/apachesolr/solr-conf/schema-solr3x.xml
+++ b/profiles/acquia/modules/apachesolr/solr-conf/schema-solr3x.xml
@@ -10,7 +10,7 @@
  http://wiki.apache.org/solr/SchemaXml
 -->
 
-<schema name="drupal-3.0-beta16-solr3" version="1.3">
+<schema name="drupal-3.0-rc2-solr3" version="1.3">
     <!-- attribute "name" is the name of this schema and is only used for display purposes.
          Applications should change this to reflect the nature of the search collection.
          version="1.2" is Solr's version number for the schema syntax and semantics.  It should
@@ -90,6 +90,14 @@
     <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
     <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
 
+    <!--
+     The ExternalFileField type gets values from an external file instead of the
+     index. This is useful for data such as rankings that might change frequently
+     and require different update frequencies than the documents they are
+     associated with.
+    -->
+    <fieldType name="pfloat" class="solr.FloatField" omitNorms="true"/>
+    <fieldType name="file" keyField="id" defVal="1" stored="false" indexed="false" class="solr.ExternalFileField" valType="pfloat"/>
 
     <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
          is a more restricted form of the canonical representation of dateTime
@@ -481,6 +489,9 @@
    <dynamicField name="locm_*" type="location" indexed="true"  stored="true" multiValued="true"/>
    <dynamicField name="geos_*" type="geohash" indexed="true"  stored="true" multiValued="false"/>
    <dynamicField name="geom_*" type="geohash" indexed="true"  stored="true" multiValued="true"/>
+
+   <!-- External file fields -->
+   <dynamicField name="eff_*" type="file"/>
    <!-- End added fields for Solr 3.4+ -->
 
    <!-- Sortable version of the dynamic string field -->
diff --git a/profiles/acquia/modules/apachesolr/solr-conf/schema.xml b/profiles/acquia/modules/apachesolr/solr-conf/schema.xml
index 517f894..7f42de4 100644
--- a/profiles/acquia/modules/apachesolr/solr-conf/schema.xml
+++ b/profiles/acquia/modules/apachesolr/solr-conf/schema.xml
@@ -10,7 +10,7 @@
  http://wiki.apache.org/solr/SchemaXml
 -->
 
-<schema name="drupal-3.0-beta16" version="1.2">
+<schema name="drupal-3.0-rc2" version="1.2">
     <!-- attribute "name" is the name of this schema and is only used for display purposes.
          Applications should change this to reflect the nature of the search collection.
          version="1.2" is Solr's version number for the schema syntax and semantics.  It should
diff --git a/profiles/acquia/modules/apachesolr/solr-conf/solrconfig-solr3x.xml b/profiles/acquia/modules/apachesolr/solr-conf/solrconfig-solr3x.xml
index 0d56601..627637e 100644
--- a/profiles/acquia/modules/apachesolr/solr-conf/solrconfig-solr3x.xml
+++ b/profiles/acquia/modules/apachesolr/solr-conf/solrconfig-solr3x.xml
@@ -16,7 +16,7 @@
  limitations under the License.
 -->
 
-<config name="drupal-3.0-beta16-solr3">
+<config name="drupal-3.0-rc2-solr3">
   <!-- Controls what version of Lucene various components of Solr
        adhere to.  Generally, you want to use the latest version to
        get all bug fixes and improvements. It is highly recommended
@@ -80,7 +80,7 @@
 
      Other implementations of MergePolicy must have a no-argument constructor
      -->
-    <mergePolicy>org.apache.lucene.index.LogByteSizeMergePolicy</mergePolicy>
+    <mergePolicy class="org.apache.lucene.index.LogByteSizeMergePolicy" />
 
     <!--
      Expert:
diff --git a/profiles/acquia/modules/apachesolr/solr-conf/solrconfig.xml b/profiles/acquia/modules/apachesolr/solr-conf/solrconfig.xml
index 5aebf42..070f327 100644
--- a/profiles/acquia/modules/apachesolr/solr-conf/solrconfig.xml
+++ b/profiles/acquia/modules/apachesolr/solr-conf/solrconfig.xml
@@ -16,7 +16,7 @@
  limitations under the License.
 -->
 
-<config name="drupal-3.0-beta16">
+<config name="drupal-3.0-rc2">
   <!-- Set this to 'false' if you want solr to continue working after it has
        encountered an severe configuration error.  In a production environment,
        you may want solr to keep working even if one handler is mis-configured.
@@ -73,7 +73,7 @@
 
      Other implementations of MergePolicy must have a no-argument constructor
      -->
-    <mergePolicy>org.apache.lucene.index.LogByteSizeMergePolicy</mergePolicy>
+    <mergePolicy class="org.apache.lucene.index.LogByteSizeMergePolicy" />
 
     <!--
      Expert:
diff --git a/profiles/acquia/modules/apachesolr/tests/apachesolr_base.test b/profiles/acquia/modules/apachesolr/tests/apachesolr_base.test
index 4e84f8e..17b28e6 100644
--- a/profiles/acquia/modules/apachesolr/tests/apachesolr_base.test
+++ b/profiles/acquia/modules/apachesolr/tests/apachesolr_base.test
@@ -325,7 +325,7 @@ class DrupalSolrOfflineSearchPagesWebTestCase extends DrupalWebTestCase {
     // Remove the same environment
     $this->clickLink(t('Delete'));
     $this->assertText(t('search page configuration will be deleted.This action cannot be undone.'), t('Delete confirmation page was succesfully loaded'));
-    $this->drupalPost($this->getUrl(), array(), t('Delete page'));
+    $this->drupalPost($this->getUrl(), array(), t('Delete'));
     $this->assertResponse(200);
     drupal_static_reset('apachesolr_search_page_load');
     $this->drupalGet('admin/config/search/apachesolr/search-pages');
diff --git a/profiles/acquia/modules/apachesolr/tests/apachesolr_test/apachesolr_test.info b/profiles/acquia/modules/apachesolr/tests/apachesolr_test/apachesolr_test.info
index 619bbff..26916b8 100644
--- a/profiles/acquia/modules/apachesolr/tests/apachesolr_test/apachesolr_test.info
+++ b/profiles/acquia/modules/apachesolr/tests/apachesolr_test/apachesolr_test.info
@@ -4,11 +4,11 @@ package = Search Toolkit
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-04-05
-version = "7.x-1.0-beta19"
+; Information added by drupal.org packaging script on 2012-08-10
+version = "7.x-1.0-rc3"
 core = "7.x"
 project = "apachesolr"
-datestamp = "1333625738"
+datestamp = "1344627704"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/ctools/API.txt b/profiles/acquia/modules/ctools/API.txt
index bb9748e..2df7e22 100644
--- a/profiles/acquia/modules/ctools/API.txt
+++ b/profiles/acquia/modules/ctools/API.txt
@@ -3,6 +3,10 @@ Current API Version: 2.0.5
 Please note that the API version is an internal number and does not match release numbers. It is entirely possible that releases will not increase the API version number, and increasing this number too often would burden contrib module maintainers who need to keep up with API changes.
 
 This file contains a log of changes to the API.
+API Version 2.0.7
+  All ctools object cache database functions can now accept session_id as an optional
+  argument to facilitate using non-session id keys.
+
 API Version 2.0.6
   Introduce a hook to alter the implementors of a certain api via hook_[ctools_api_hook]_alter.
 
diff --git a/profiles/acquia/modules/ctools/bulk_export/bulk_export.info b/profiles/acquia/modules/ctools/bulk_export/bulk_export.info
index f534351..02cab44 100644
--- a/profiles/acquia/modules/ctools/bulk_export/bulk_export.info
+++ b/profiles/acquia/modules/ctools/bulk_export/bulk_export.info
@@ -4,11 +4,11 @@ core = 7.x
 dependencies[] = ctools
 package = Chaos tool suite
 
-; Information added by drupal.org packaging script on 2012-03-28
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
 core = "7.x"
 project = "ctools"
-datestamp = "1332962446"
+datestamp = "1344463011"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/ctools/css/modal.css b/profiles/acquia/modules/ctools/css/modal.css
index 66c4a1c..d9f44e2 100644
--- a/profiles/acquia/modules/ctools/css/modal.css
+++ b/profiles/acquia/modules/ctools/css/modal.css
@@ -23,7 +23,6 @@ div.ctools-modal-content .modal-header {
 
 div.ctools-modal-content .modal-header a {
   color: white;
-  float: right;
 }
 
 div.ctools-modal-content .modal-content {
@@ -37,6 +36,7 @@ div.ctools-modal-content .modal-form {
 
 div.ctools-modal-content a.close {
   color: white;
+  float: right;
 }
 
 div.ctools-modal-content a.close:hover {
diff --git a/profiles/acquia/modules/ctools/ctools.info b/profiles/acquia/modules/ctools/ctools.info
index e2289ed..3092ced 100644
--- a/profiles/acquia/modules/ctools/ctools.info
+++ b/profiles/acquia/modules/ctools/ctools.info
@@ -6,11 +6,11 @@ files[] = includes/context.inc
 files[] = includes/math-expr.inc
 files[] = includes/stylizer.inc
 
-; Information added by drupal.org packaging script on 2012-03-28
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
 core = "7.x"
 project = "ctools"
-datestamp = "1332962446"
+datestamp = "1344463011"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/ctools/ctools.module b/profiles/acquia/modules/ctools/ctools.module
index f8e3369..7dfc989 100644
--- a/profiles/acquia/modules/ctools/ctools.module
+++ b/profiles/acquia/modules/ctools/ctools.module
@@ -9,7 +9,7 @@
  * must be implemented in the module file.
  */
 
-define('CTOOLS_API_VERSION', '2.0.6');
+define('CTOOLS_API_VERSION', '2.0.7');
 
 /**
  * Test the CTools API version.
diff --git a/profiles/acquia/modules/ctools/ctools_access_ruleset/ctools_access_ruleset.info b/profiles/acquia/modules/ctools/ctools_access_ruleset/ctools_access_ruleset.info
index b4a1879..24e36ab 100644
--- a/profiles/acquia/modules/ctools/ctools_access_ruleset/ctools_access_ruleset.info
+++ b/profiles/acquia/modules/ctools/ctools_access_ruleset/ctools_access_ruleset.info
@@ -4,11 +4,11 @@ core = 7.x
 package = Chaos tool suite
 dependencies[] = ctools
 
-; Information added by drupal.org packaging script on 2012-03-28
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
 core = "7.x"
 project = "ctools"
-datestamp = "1332962446"
+datestamp = "1344463011"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/ctools/ctools_access_ruleset/plugins/access/ruleset.inc b/profiles/acquia/modules/ctools/ctools_access_ruleset/plugins/access/ruleset.inc
index 782c7ca..f8abea6 100644
--- a/profiles/acquia/modules/ctools/ctools_access_ruleset/plugins/access/ruleset.inc
+++ b/profiles/acquia/modules/ctools/ctools_access_ruleset/plugins/access/ruleset.inc
@@ -99,7 +99,7 @@ function ctools_ruleset_ctools_access_check($conf, $context, $plugin) {
  * Provide a summary description based upon the checked roles.
  */
 function ctools_ruleset_ctools_access_summary($conf, $context, $plugin) {
-  if (!empty($form_state['plugin']['ruleset']->admin_description)) {
+  if (!empty($plugin['ruleset']->admin_description)) {
     return check_plain($plugin['ruleset']->admin_description);
   }
   else {
diff --git a/profiles/acquia/modules/ctools/ctools_ajax_sample/ctools_ajax_sample.info b/profiles/acquia/modules/ctools/ctools_ajax_sample/ctools_ajax_sample.info
index e7fcbbc..1b4ee13 100644
--- a/profiles/acquia/modules/ctools/ctools_ajax_sample/ctools_ajax_sample.info
+++ b/profiles/acquia/modules/ctools/ctools_ajax_sample/ctools_ajax_sample.info
@@ -4,11 +4,11 @@ package = Chaos tool suite
 dependencies[] = ctools
 core = 7.x
 
-; Information added by drupal.org packaging script on 2012-03-28
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
 core = "7.x"
 project = "ctools"
-datestamp = "1332962446"
+datestamp = "1344463011"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/ctools/ctools_custom_content/ctools_custom_content.info b/profiles/acquia/modules/ctools/ctools_custom_content/ctools_custom_content.info
index d41ae48..1ecba04 100644
--- a/profiles/acquia/modules/ctools/ctools_custom_content/ctools_custom_content.info
+++ b/profiles/acquia/modules/ctools/ctools_custom_content/ctools_custom_content.info
@@ -4,11 +4,11 @@ core = 7.x
 package = Chaos tool suite
 dependencies[] = ctools
 
-; Information added by drupal.org packaging script on 2012-03-28
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
 core = "7.x"
 project = "ctools"
-datestamp = "1332962446"
+datestamp = "1344463011"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/ctools/ctools_plugin_example/ctools_plugin_example.info b/profiles/acquia/modules/ctools/ctools_plugin_example/ctools_plugin_example.info
index 8990da1..61c9626 100644
--- a/profiles/acquia/modules/ctools/ctools_plugin_example/ctools_plugin_example.info
+++ b/profiles/acquia/modules/ctools/ctools_plugin_example/ctools_plugin_example.info
@@ -7,11 +7,11 @@ dependencies[] = page_manager
 dependencies[] = advanced_help
 core = 7.x
 
-; Information added by drupal.org packaging script on 2012-03-28
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
 core = "7.x"
 project = "ctools"
-datestamp = "1332962446"
+datestamp = "1344463011"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/ctools/drush/ctools.drush.inc b/profiles/acquia/modules/ctools/drush/ctools.drush.inc
index 353bbde..bf1df1f 100644
--- a/profiles/acquia/modules/ctools/drush/ctools.drush.inc
+++ b/profiles/acquia/modules/ctools/drush/ctools.drush.inc
@@ -11,8 +11,12 @@
 function ctools_drush_command() {
   $items = array();
 
+  $module_text = 'Filter the list of exportables by module. This will come from the \'export_module\' key on the exportable.';
+  $all_text = 'Perform this operation all CTools exportables available on the system (all tables).';
+
   $items['ctools-export'] = array(
     'aliases' => array('ctex'),
+    'callback' => 'ctools_drush_export',
     'description' => 'Export multiple CTools exportable objects directly to code.',
     'arguments' => array(
       'module'    => 'Name of your module.',
@@ -20,36 +24,40 @@ function ctools_drush_command() {
     'options' => array(
       'subdir' => 'The name of the sub directory to create the module in. Defaults to ctools_export which will be placed into sites/all/modules.',
       'remove' => 'Remove existing files before writing, except the .module file.',
+      'filter' => 'Filter the list of exportables by status. Available options are enabled, disabled, overridden, database, code and all. Defaults to enabled.',
+      'tables' => 'Comma separated list of exportable table names to filter by.',
     ),
-    'drupal dependencies' => array('bulk_export'),
     'examples' => array(
       'drush ctex export_module' => 'Export CTools exportables to a module called "export_module".',
       'drush ctex export_module --subdir=exports' => 'Same as above, but into the sites/all/modules/exports directory.',
       'drush ctex export_module --subdir=exports --remove' => 'Same as above, but automatically removing all files, except for the .module file.',
+      'drush ctex --filter="views_view"' => 'Filter export selection to the views_view table only.',
     ),
   );
 
   $items['ctools-export-info'] = array(
     'aliases' => array('ctei'),
+    'callback' => 'ctools_drush_export_info',
     'description' => 'Show available CTools exportable objects.',
     'arguments' => array(),
     'options' => array(
       'format' => 'Display exportables info in a different format such as print_r, json, export. The default is to show in a tabular format.',
       'tables-only' => 'Only show list of exportable types/table names and not available objects.',
-      'enabled' => 'Only show exportables that are currently enabled.',
-      'disabled' => 'Only show exportables that are currently disabled.',
-      'overridden' => 'Only show exportables that have been overridden in the database.',
-      'database' => 'Only show exportables defined in the database (and not in code).',
+      'filter' => 'Filter the list of exportables by status. Available options are enabled, disabled, overridden, database, and code.',
+      'module' => $module_text,
     ),
     'examples' => array(
       'drush ctools-export-info' => 'View export info on all exportables.',
       'drush ctools-export-info views_view variable' => 'View export info for views_view and variable exportable types only.',
+      'drush ctei --filter=enabled' => 'Show all enabled exportables.',
+      'drush ctei views_view --filter=disabled' => 'Show all enabled exportables.',
+      'drush ctei views_view --module=node' => 'Show all exportables provided by/on behalf of the node module.',
     ),
   );
 
   $items['ctools-export-view'] = array(
     'aliases' => array('ctev'),
-    'callback' => 'drush_ctools_export_op_command',
+    'callback' => 'ctools_drush_export_op_command',
     'description' => 'View CTools exportable object code output.',
     'arguments' => array(
       'table name' => 'Base table of the exportable you want to view.',
@@ -58,6 +66,8 @@ function ctools_drush_command() {
     'options' => array(
       'indent' => 'The string to use for indentation when dispalying the exportable export code. Defaults to \'\'.',
       'no-colour' => 'Remove any colour formatting from export string output. Ideal if you are sending the output of this command to a file.',
+      'module' => $module_text,
+      'all' => $all_text,
     ),
     'examples' => array(
       'drush ctools-export-view views_view' => 'View all views exportable objects.',
@@ -67,28 +77,35 @@ function ctools_drush_command() {
 
   $items['ctools-export-revert'] = array(
     'aliases' => array('cter'),
-    'callback' => 'drush_ctools_export_op_command',
+    'callback' => 'ctools_drush_export_op_command',
     'description' => 'Revert CTools exportables from changes overridden in the database.',
     'arguments' => array(
       'table name' => 'Base table of the exportable you want to revert.',
       'machine names' => 'Space separated list of exportables you want to revert.',
     ),
-    'options' => array(),
+    'options' => array(
+      'module' => $module_text,
+      'all' => $all_text,
+    ),
     'examples' => array(
       'drush ctools-export-revert views_view' => 'Revert all overridden views exportable objects.',
       'drush ctools-export-revert views_view archive' => 'Revert overridden default views archive view.',
+      'drush ctools-export-revert --all' => 'Revert all exportables on the system.',
     ),
   );
 
   $items['ctools-export-enable'] = array(
     'aliases' => array('ctee'),
-    'callback' => 'drush_ctools_export_op_command',
+    'callback' => 'ctools_drush_export_op_command',
     'description' => 'Enable CTools exportables.',
     'arguments' => array(
       'table name' => 'Base table of the exportable you want to enable.',
       'machine names' => 'Space separated list of exportables you want to enable.',
     ),
-    'options' => array(),
+    'options' => array(
+      'module' => $module_text,
+      'all' => $all_text,
+    ),
     'examples' => array(
       'drush ctools-export-enable views_view' => 'Enable all overridden views exportable objects.',
       'drush ctools-export-enable views_view archive' => 'Enable overridden default views archive view.',
@@ -97,13 +114,16 @@ function ctools_drush_command() {
 
   $items['ctools-export-disable'] = array(
     'aliases' => array('cted'),
-    'callback' => 'drush_ctools_export_op_command',
+    'callback' => 'ctools_drush_export_op_command',
     'description' => 'Disable CTools exportables.',
     'arguments' => array(
       'table name' => 'Base table of the exportable you want to disable.',
       'machine names' => 'Space separated list of exportables you want to disable.',
     ),
-    'options' => array(),
+    'options' => array(
+      'module' => $module_text,
+      'all' => $all_text,
+    ),
     'examples' => array(
       'drush ctools-export-disable views_view' => 'Disable all overridden views exportable objects.',
       'drush ctools-export-disable views_view archive' => 'Disable overridden default views archive view.',
@@ -128,7 +148,7 @@ function ctools_drush_help($section) {
 /**
  * Drush callback: export
  */
-function drush_ctools_export($module = 'foo') {
+function ctools_drush_export($module = 'foo') {
   $error = FALSE;
   if (preg_match('@[^a-z_]+@', $module)) {
     $error = dt('The name of the module must contain only lowercase letters and underscores') . '.';
@@ -136,6 +156,15 @@ function drush_ctools_export($module = 'foo') {
     return;
   }
 
+  // Filter by tables.
+  $tables = _ctools_drush_explode_options('tables');
+
+  // Check status.
+  $filter = drush_get_option('filter', FALSE);
+  if (empty($filter)) {
+    drush_set_option('filter', 'enabled');
+  }
+
   // Selection.
   $options = array('all' => dt('Export everything'), 'select' => dt('Make selection'));
   $selection = drush_choice($options, dt('Select to proceed'));
@@ -146,10 +175,11 @@ function drush_ctools_export($module = 'foo') {
 
   // Present the selection screens.
   if ($selection == 'select') {
-    $selections = _drush_ctools_selection_screen();
+    $selections = _ctools_drush_selection_screen($tables);
   }
   else {
-    $selections = _drush_ctools_export_info();
+    $info = _ctools_drush_export_info($tables, TRUE);
+    $selections = $info['exportables'];
   }
 
   // Subdirectory.
@@ -177,7 +207,7 @@ function drush_ctools_export($module = 'foo') {
 
   // Remove files (except for the .module file) if the destination folder exists.
   if ($remove && $dest_exists) {
-    _drush_ctools_file_delete($dest);
+    _ctools_drush_file_delete($dest);
   }
 
   // Create new dir if needed.
@@ -190,6 +220,9 @@ function drush_ctools_export($module = 'foo') {
   // Create destination directory.
   drush_mkdir($dest);
 
+  // Load bulk export module.
+  module_load_include('module', 'bulk_export');
+
   // Create options and call Bulk export function.
   // We create an array, because maybe in the future we can pass in more
   // options to the export function (pre-selected modules and/or exportables).
@@ -199,6 +232,14 @@ function drush_ctools_export($module = 'foo') {
   );
   $files = bulk_export_export(TRUE, $options);
 
+  $alter = array(
+    'module' => $module,
+    'files' => $files,
+  );
+  // Let other drush commands alter the files.
+  drush_command_invoke_all_ref('drush_ctex_files_alter', $alter);
+  $files = $alter['files'];
+
   // Start writing.
   if (is_array($files)) {
     foreach ($files as $base_file => $data) {
@@ -220,7 +261,6 @@ function drush_ctools_export($module = 'foo') {
         drush_log(dt('Error writing !filename', array('!filename' => $filename)), 'error');
       }
     }
-    drush_log("\n" . dt('No penguins were harmed in the generation of this code.') . "\n", 'success');
   }
   else {
     drush_log(dt('No files were found to be written.'), 'error');
@@ -230,19 +270,24 @@ function drush_ctools_export($module = 'foo') {
 /**
  * Helper function to select the exportables. By default, all exportables
  * will be selected, so it will be easier to deselect them.
+ *
+ * @param $tables
  */
-function _drush_ctools_selection_screen() {
+function _ctools_drush_selection_screen(array $tables = array()) {
   $selections = $build = array();
   $files = system_rebuild_module_data();
 
   $selection_number = 0;
 
-  $exportables = _drush_ctools_export_info();
+  $info = _ctools_drush_export_info($tables, TRUE);
+  $exportables = $info['exportables'];
+  $schemas = $info['schemas'];
+
   $export_tables = array();
 
   foreach (array_keys($exportables) as $table) {
     natcasesort($exportables[$table]);
-    $export_tables[$table] = $files[$schema['module']]->info['name'] . ' (' . $table . ')';
+    $export_tables[$table] = $files[$schemas[$table]['module']]->info['name'] . ' (' . $table . ')';
   }
 
   foreach ($export_tables as $table => $table_title) {
@@ -268,7 +313,7 @@ function _drush_ctools_selection_screen() {
     // Present the tables choice.
     $table_rows = array();
     foreach ($build as $table => $info) {
-      $table_rows[$table] = $info['title'] . ' (' . dt($info['count']) . ')';
+      $table_rows[$table] = $info['title'] . ' (' . $info['count'] . ')';
     }
     $table_choice = drush_choice($table_rows, dt('Select a table. Select cancel to start writing files.'));
 
@@ -305,7 +350,7 @@ function _drush_ctools_selection_screen() {
  * @param $path
  *   Path to directory in which to remove files.
  */
-function _drush_ctools_file_delete($path) {
+function _ctools_drush_file_delete($path) {
   if (is_dir($path)) {
     $files = new DirectoryIterator($path);
     foreach ($files as $fileInfo) {
@@ -320,74 +365,40 @@ function _drush_ctools_file_delete($path) {
  * Drush callback: Export info.
  *
  * @params $table_names
- *  Each argument will be taken as a CTools exportable table name.
+ *   Each argument will be taken as a CTools exportable table name.
  */
-function drush_ctools_export_info() {
+function ctools_drush_export_info() {
   // Collect array of table names from args.
   $table_names = func_get_args();
 
   // Get format option to allow for alternative output.
   $format = drush_get_option('format', FALSE);
   $tables_only = drush_get_option('tables-only', FALSE);
-  $show_overridden = drush_get_option('overridden', FALSE);
-  $show_enabled = drush_get_option('enabled', FALSE);
-  $show_disabled = drush_get_option('disabled', FALSE);
-  $show_database_only = drush_get_option('database', FALSE);
+  $filter = drush_get_option('filter', FALSE);
+  $export_module = drush_get_option('module', FALSE);
 
-  // Only load exportable objects for each type fully if we need to.
-  $load = ($show_overridden || $show_enabled || $show_disabled || $show_database_only) ? TRUE : FALSE;
+  $load = (bool) $filter || $export_module;
 
-  // Get info on these tables, or all if none specified.
-  $exportables = _drush_ctools_export_info($table_names, $load);
+  // Get info on these tables, or all tables if none specified.
+  $info = _ctools_drush_export_info($table_names, $load);
+  $exportables = $info['exportables'];
 
   if (empty($exportables)) {
     drush_log(dt('There are no exportables available.'), 'warning');
     return;
   }
 
-  // The order of these conditionals set a hierarchy for options if there are mulitple.
-  // Show enabled exportables only.
-  if ($show_enabled) {
-    foreach ($exportables as $table => $objects) {
-      foreach ($objects as $key => $object) {
-        if (_ctools_drush_object_is_disabled($object)) {
-          unset($exportables[$table][$key]);
-        }
-      }
-    }
-  }
-  // Show disabled exportables only.
-  elseif ($show_disabled) {
-    foreach ($exportables as $table => $objects) {
-      foreach ($objects as $key => $object) {
-        if (!_ctools_drush_object_is_disabled($object)) {
-          unset($exportables[$table][$key]);
-        }
-      }
-    }
-  }
-  // Show overridden exportables only.
-  elseif ($show_overridden) {
-    foreach ($exportables as $table => $objects) {
-      foreach ($objects as $key => $object) {
-        if (!_ctools_drush_object_is_overridden($object)) {
-          unset($exportables[$table][$key]);
-        }
-      }
-    }
+  // Filter by export module.
+  if (is_string($export_module)) {
+    $exportables = _ctools_drush_export_module_filter($exportables, $export_module);
   }
-  // Show database only exportables.
-  elseif ($show_database_only) {
-    foreach ($exportables as $table => $objects) {
-      foreach ($objects as $key => $object) {
-        if (!_ctools_drush_object_is_db_only($object)) {
-          unset($exportables[$table][$key]);
-        }
-      }
-    }
+
+  if (empty($exportables)) {
+    drush_log(dt('There are no exportables matching this criteria.'), 'notice');
+    return;
   }
 
-  $exportables = array_filter($exportables);
+  $exportable_counts = _ctools_drush_count_exportables($exportables);
 
   // Only use array keys if --tables-only option is set.
   if ($tables_only) {
@@ -396,7 +407,12 @@ function drush_ctools_export_info() {
 
   // Use format from --format option if it's present, and send to drush_format.
   if ($format) {
-    drush_print(drush_format($exportables, NULL, $format));
+    // Create array with all exportable info and counts in one.
+    $output = array(
+      'exportables' => $exportables,
+      'count' => $exportable_counts,
+    );
+    drush_print(drush_format($output, NULL, $format));
   }
   // Build a tabular output as default.
   else {
@@ -416,19 +432,22 @@ function drush_ctools_export_info() {
       }
     }
     if (!empty($rows)) {
+      drush_print("\n");
       array_unshift($rows, $header);
-      drush_print_table($rows, TRUE);
-    }
-    else {
-      drush_log(dt('There are no exportables matching this criteria.'), 'notice');
+      drush_print_table($rows, TRUE, array(20));
+      drush_print(dt('Total exportables found: !total', array('!total' => $exportable_counts['total'])));
+      foreach ($exportable_counts['exportables'] as $table_name => $count) {
+        drush_print(dt('!table_name (!count)', array('!table_name' => $table_name, '!count' => $count)), 2);
+      }
+      drush_print("\n");
     }
   }
 }
-
 /**
- * Drush callback: Acts as the hub for all op commands to keep all arg handling etc in one place.
+ * Drush callback: Acts as the hub for all op commands to keep
+ * all arg handling etc in one place.
  */
-function drush_ctools_export_op_command() {
+function ctools_drush_export_op_command() {
   // Get all info for the current drush command.
   $command = drush_get_command();
   $op = '';
@@ -453,17 +472,34 @@ function drush_ctools_export_op_command() {
     return;
   }
 
-  $args = func_get_args();
-  // Table name should always be first arg...
-  $table_name = array_shift($args);
-  // Any additional args are assumed to be exportable names.
-  $object_names = $args;
+  if (drush_get_option('all', FALSE)) {
+    $info = _ctools_drush_export_info('', TRUE);
+    $exportable_info = $info['exportables'];
 
-  // Return any exportables based on table name, object names, options.
-  $exportables = _drush_ctools_export_op_command_logic($op, $table_name, $object_names);
+    $all = drush_confirm(dt('Are you sure you would like to !op all exportables on the system?',
+      array('!op' => _ctools_drush_export_op_alias($op))));
 
-  if ($exportables) {
-    drush_ctools_export_op($op, $table_name, $exportables);
+    if ($all && $exportable_info) {
+      foreach ($exportable_info as $table => $exportables) {
+        if (!empty($exportables)) {
+          ctools_drush_export_op($op, $table, $exportables);
+        }
+      }
+    }
+  }
+  else {
+    $args = func_get_args();
+    // Table name should always be first arg...
+    $table_name = array_shift($args);
+    // Any additional args are assumed to be exportable names.
+    $object_names = $args;
+
+    // Return any exportables based on table name, object names, options.
+    $exportables = _ctools_drush_export_op_command_logic($op, $table_name, $object_names);
+
+    if ($exportables) {
+      ctools_drush_export_op($op, $table_name, $exportables);
+    }
   }
 }
 
@@ -476,10 +512,10 @@ function drush_ctools_export_op_command() {
  * @param $exportables
  *
  */
-function drush_ctools_export_op($op = '', $table_name = '', $exportables = NULL) {
+function ctools_drush_export_op($op = '', $table_name = '', $exportables = NULL) {
   $objects = ctools_export_crud_load_multiple($table_name, array_keys($exportables));
 
-  $function = '_drush_ctools_export_' . $op;
+  $function = '_ctools_drush_export_' . $op;
   if (function_exists($function)) {
     foreach ($objects as $object) {
       $function($table_name, $object);
@@ -500,27 +536,27 @@ function drush_ctools_export_op($op = '', $table_name = '', $exportables = NULL)
  * @param $object_names
  *
  * @return
- *  Array of exportable objects (filtered if necessary, by name etc..) or FALSE if not.
+ *    Array of exportable objects (filtered if necessary, by name etc..) or FALSE if not.
  */
-function _drush_ctools_export_op_command_logic($op = '', $table_name = NULL, $object_names = array()) {
+function _ctools_drush_export_op_command_logic($op = '', $table_name = NULL, array $object_names = array()) {
   if (!$table_name) {
-    drush_log(dt('Exportable table name empty.'), 'error');
+    drush_log(dt('Exportable table name empty. Use the --all command if you want to perform this operation on all tables.'), 'error');
     return FALSE;
   }
 
   // Get export info based on table name.
-  $info = _drush_ctools_export_info(array($table_name));
+  $info = _ctools_drush_export_info(array($table_name), TRUE);
 
-  if (!isset($info[$table_name])) {
+  if (!isset($info['exportables'][$table_name])) {
     drush_log(dt('Exportable table name not found.'), 'error');
     return FALSE;
   }
 
-  $exportables = $info[$table_name];
+  $exportables = &$info['exportables'];
 
   if (empty($object_names)) {
     $all = drush_confirm(dt('No object names entered. Would you like to try and !op all exportables of type !type',
-      array('!op' => _drush_ctools_export_op_aliases($op), '!type' => $table_name)));
+      array('!op' => _ctools_drush_export_op_alias($op), '!type' => $table_name)));
     if (!$all) {
       drush_log(dt('Command cancelled'), 'success');
       return FALSE;
@@ -530,20 +566,26 @@ function _drush_ctools_export_op_command_logic($op = '', $table_name = NULL, $ob
     // Iterate through object names and check they exist in exportables array.
     // Log error and unset them if they don't.
     foreach ($object_names as $object_name) {
-      if (!isset($exportables[$object_name])) {
+      if (!isset($exportables[$table_name][$object_name])) {
         drush_log(dt('Invalid exportable: !exportable', array('!exportable' => $object_name)), 'error');
-        unset($object_names[$object_name]);
+        unset($object_names[$table_name][$object_name]);
       }
     }
     // Iterate through exportables to get just a list of selected ones.
-    foreach (array_keys($exportables) as $exportable) {
+    foreach (array_keys($exportables[$table_name]) as $exportable) {
       if (!in_array($exportable, $object_names)) {
-        unset($exportables[$exportable]);
+        unset($exportables[$table_name][$exportable]);
       }
     }
   }
 
-  return $exportables;
+  $export_module = drush_get_option('module', FALSE);
+
+  if (is_string($export_module)) {
+    $exportables = _ctools_drush_export_module_filter($exportables, $export_module);
+  }
+
+  return $exportables[$table_name];
 }
 
 /**
@@ -551,15 +593,15 @@ function _drush_ctools_export_op_command_logic($op = '', $table_name = NULL, $ob
  * ctools_export_get_schemas().
  *
  * @param $table_names
- *  Array of table names to return.
+ *   Array of table names to return.
  * @param $load
- *  (bool) should ctools exportable objects be loaded for each type.
- *  The default behaviour will load just a list of exportable names.
+ *   (bool) should ctools exportable objects be loaded for each type.
+ *   The default behaviour will load just a list of exportable names.
  *
  * @return
- *  Nested arrays of available exportables, keyed by table name.
+ *   Nested arrays of available exportables, keyed by table name.
  */
-function _drush_ctools_export_info($table_names = array(), $load = FALSE) {
+function _ctools_drush_export_info(array $table_names = array(), $load = FALSE) {
   ctools_include('export');
   // Get available schemas that declare exports.
   $schemas = ctools_export_get_schemas(TRUE);
@@ -592,7 +634,12 @@ function _drush_ctools_export_info($table_names = array(), $load = FALSE) {
     }
   }
 
-  return $exportables;
+  if ($load) {
+    $filter = drush_get_option('filter', FALSE);
+    $exportables = _ctools_drush_filter_exportables($exportables, $filter);
+  }
+
+  return array('exportables' => $exportables, 'schemas' => $schemas);
 }
 
 /*
@@ -601,12 +648,12 @@ function _drush_ctools_export_info($table_names = array(), $load = FALSE) {
  * @param $table_name
  * @param $object
  */
-function _drush_ctools_export_view($table_name, $object) {
+function _ctools_drush_export_view($table_name, $object) {
   $indent = drush_get_option('indent', '');
   $no_colour = drush_get_option('no-colour', FALSE);
   $export = ctools_export_crud_export($table_name, $object, $indent);
   if ($no_colour) {
-    drush_print($export);
+    drush_print("\n$export");
   }
   else {
     drush_print(shellColours::getColouredOutput("\n$export", 'light_green'));
@@ -619,14 +666,16 @@ function _drush_ctools_export_view($table_name, $object) {
  * @param $table_name
  * @param $object
  */
-function _drush_ctools_export_delete($table_name, $object) {
+function _ctools_drush_export_delete($table_name, $object) {
+  $name = _ctools_drush_get_export_name($table_name, $object);
+
   if (_ctools_drush_object_is_overridden($object)) {
     // Remove from db.
     ctools_export_crud_delete($table_name, $object);
-    drush_log("Reverted object: $object->name", 'success');
+    drush_log("Reverted object: $name", 'success');
   }
   else {
-    drush_log("Nothing to revert for: $object->name", 'notice');
+    drush_log("Nothing to revert for: $name", 'notice');
   }
 }
 
@@ -636,14 +685,17 @@ function _drush_ctools_export_delete($table_name, $object) {
  * @param $table_name
  * @param $object
  */
-function _drush_ctools_export_enable($table_name, $object) {
+function _ctools_drush_export_enable($table_name, $object) {
+  $name = _ctools_drush_get_export_name($table_name, $object);
+
   if (_ctools_drush_object_is_disabled($object)) {
+
     // Enable object.
     ctools_export_crud_enable($table_name, $object);
-    drush_log("Enabled object: $object->name", 'success');
+    drush_log("Enabled object: $name", 'success');
   }
   else {
-    drush_log("$object->name is already Enabled", 'notice');
+    drush_log("$name is already Enabled", 'notice');
   }
 }
 
@@ -653,64 +705,216 @@ function _drush_ctools_export_enable($table_name, $object) {
  * @param $table_name
  * @param $object
  */
-function _drush_ctools_export_disable($table_name, $object) {
+function _ctools_drush_export_disable($table_name, $object) {
+  $name = _ctools_drush_get_export_name($table_name, $object);
+
   if (!_ctools_drush_object_is_disabled($object)) {
     // Disable object.
     ctools_export_crud_disable($table_name, $object);
-    drush_log("Disabled object: $object->name", 'success');
+    drush_log("Disabled object: $name", 'success');
   }
   else {
-    drush_log("$object->name is already disabled", 'notice');
+    drush_log("$name is already disabled", 'notice');
+  }
+}
+
+/**
+ * Filter a nested array of exportables by export module.
+ *
+ * @param $exportables array
+ *   Passed by reference. A nested array of exportables, keyed by table name.
+ * @param $export_module string
+ *   The name of the export module providing the exportable.
+ */
+function _ctools_drush_export_module_filter($exportables, $export_module) {
+  $module_list = module_list();
+
+  if (!isset($module_list[$export_module])) {
+    drush_log(dt('Invalid export module: !export_module', array('!export_module' => $export_module)), 'error');
+  }
+
+  foreach ($exportables as $table => $objects) {
+    foreach ($objects as $key => $object) {
+      if (empty($object->export_module) || ($object->export_module !== $export_module)) {
+        unset($exportables[$table][$key]);
+      }
+    }
   }
+
+  return array_filter($exportables);
 }
 
 /**
- * Helper to determine if an object is disabled.
+ * Gets the key for an exportable type.
  *
+ * @param $table_name
+ *   The exportable table name.
  * @param $object
- *  Loaded CTools exportable object.
+ *   The exportable object.
  *
- * @return TRUE or FALSE
+ * @return string
+ *   The key defined in the export schema data.
  */
-function _ctools_drush_object_is_disabled($object) {
-  return (isset($object->disabled) && ($object->disabled == TRUE)) ? TRUE : FALSE;
+function _ctools_drush_get_export_name($table_name, $object) {
+  $info = _ctools_drush_export_info(array($table_name));
+  $key = $info['schemas'][$table_name]['export']['key'];
+  return $object->{$key};
 }
 
 /**
- * Helper to determine if an object is overridden.
+ * Determine if an object is disabled.
  *
  * @param $object
- *  Loaded CTools exportable object.
+ *   Loaded CTools exportable object.
  *
  * @return TRUE or FALSE
  */
+function _ctools_drush_object_is_disabled($object) {
+  return (isset($object->disabled) && ($object->disabled == TRUE)) ? TRUE : FALSE;
+}
+
+/**
+ * Determine if an object is enabled.
+ *
+ * @see _ctools_drush_object_is_disabled.
+ */
+function _ctools_drush_object_is_enabled($object) {
+  return (empty($object->disabled)) ? TRUE : FALSE;
+}
+
+/**
+ * Determine if an object is overridden.
+ */
 function _ctools_drush_object_is_overridden($object) {
-  return ($object->export_type == 3) ? TRUE : FALSE;
+  $status = EXPORT_IN_CODE + EXPORT_IN_DATABASE;
+  return ($object->export_type == $status) ? TRUE : FALSE;
+}
+
+/**
+ * Determine if an object is not overridden.
+ */
+function _ctools_drush_object_is_not_overridden($object) {
+  $status = EXPORT_IN_CODE + EXPORT_IN_DATABASE;
+  return ($object->export_type == $status) ? FALSE : TRUE;
+}
+
+/**
+ * Determine if an object is only in the db.
+ */
+function _ctools_drush_object_is_db_only($object) {
+  return ($object->export_type == EXPORT_IN_DATABASE) ? TRUE : FALSE;
+}
+
+/**
+ * Determine if an object is not in the db.
+ */
+function _ctools_drush_object_is_not_db_only($object) {
+  return ($object->export_type == EXPORT_IN_DATABASE) ? FALSE : TRUE;
+}
+
+/**
+ * Determine if an object is a code only default.
+ */
+function _ctools_drush_object_is_code_only($object) {
+  return ($object->export_type == EXPORT_IN_CODE) ? TRUE : FALSE;
+}
+
+/**
+ * Determine if an object is not a code only default.
+ */
+function _ctools_drush_object_is_not_code_only($object) {
+  return ($object->export_type == EXPORT_IN_CODE) ? FALSE : TRUE;
 }
 
 /**
- * Helper to determine if an object is only in the db.
+ * Return an array of count information based on exportables array.
  *
- * @param $object
- *  Loaded CTools exportable object.
+ * @param $exportables
+ *   Array of exportables to count.
  *
- * @return TRUE or FALSE
+ * @return
+ *    Array of count data containing the following:
+ *     'total' - A total count of all exportables.
+ *     'exportables' - An array of exportable counts per table.
  */
-function _ctools_drush_object_is_db_only($object) {
-  return ($object->export_type == 1) ? TRUE : FALSE;
+function _ctools_drush_count_exportables($exportables) {
+  $count = array('exportables' => array());
+
+  foreach ($exportables as $table => $objects) {
+    // Add the object count for each table.
+    $count['exportables'][$table] = count($objects);
+  }
+
+  // Once all tables have been counted, total these up.
+  $count['total'] = array_sum($count['exportables']);
+
+  return $count;
 }
 
 /**
- * Return any aliases for an op, that will be used to show as output.
+ * Filters a collection of exportables based on filters.
+ *
+ * @param $exportables
+ * @param $filter
+ */
+function _ctools_drush_filter_exportables($exportables, $filter) {
+  $eval = FALSE;
+
+  if (is_string($filter)) {
+    switch ($filter) {
+      // Show enabled exportables only.
+      case 'enabled':
+        $eval = '_ctools_drush_object_is_disabled';
+      break;
+      // Show disabled exportables only.
+      case 'disabled':
+        $eval = '_ctools_drush_object_is_enabled';
+      break;
+      // Show overridden exportables only.
+      case 'overridden':
+        $eval = '_ctools_drush_object_is_not_overridden';
+      break;
+      // Show database only exportables.
+      case 'database':
+        $eval = '_ctools_drush_object_is_not_db_only';
+      break;
+      // Show code only exportables.
+      case 'code':
+        $eval = '_ctools_drush_object_is_not_code_only';
+      break;
+      // Do nothing.
+      case 'all':
+        break;
+      default:
+        drush_log(dt('Invalid filter option. Available options are: enabled, disabled, overridden, database, and code.'), 'error');
+        return;
+    }
+
+    if ($eval) {
+      foreach ($exportables as $table => $objects) {
+        foreach ($objects as $key => $object) {
+          if ($eval($object)) {
+            unset($exportables[$table][$key]);
+          }
+        }
+      }
+    }
+  }
+
+  return array_filter($exportables);
+}
+
+/**
+ * Return an alias for an op, that will be used to show as output.
  * For now, this is mainly necessary for delete => revert alias.
  *
  * @param $op
- *  The op name. Such as 'enable', 'disable', or 'delete'.
+ *   The op name. Such as 'enable', 'disable', or 'delete'.
  *
  * @return
- *  The matched alias value or the original $op passed in if not found.
+ *   The matched alias value or the original $op passed in if not found.
  */
-function _drush_ctools_export_op_aliases($op) {
+function _ctools_drush_export_op_alias($op) {
   $aliases = array(
     'delete' => 'revert',
   );
@@ -723,6 +927,25 @@ function _drush_ctools_export_op_aliases($op) {
 }
 
 /**
+ * Convert the drush options from a csv list into an array.
+ *
+ * @param $drush_option
+ *   The drush option name to invoke.
+ *
+ * @return
+ *   Exploded array of options.
+ */
+function _ctools_drush_explode_options($drush_option) {
+  $options = drush_get_option($drush_option, array());
+  if (!empty($options)) {
+    $options = explode(',', $options);
+    return array_map('trim', $options);
+  }
+
+  return $options;
+}
+
+/**
  * Class to deal with wrapping output strings with
  * colour formatting for the shell.
  */
diff --git a/profiles/acquia/modules/ctools/help/about.html b/profiles/acquia/modules/ctools/help/about.html
index 8184565..30b64c2 100644
--- a/profiles/acquia/modules/ctools/help/about.html
+++ b/profiles/acquia/modules/ctools/help/about.html
@@ -1,28 +1,28 @@
-<p>The Chaos Tool Suite is a series of tools for developers to make code that I've found to be very useful to Views and Panels more readily available. Certain methods of doing things, particularly with AJAX, exportable objects, and a plugin system are proving to be ideas that are useful outside of just Views and Panels. This module does not offer much directly ot the end user, but instead creates a library for other modules to use. If you are an end user and some module asked you to install the CTools suite, then this is far as you really need to go. If you're a developer and are interested in these tools, read on!</p>
+<p>The Chaos Tool Suite is a series of tools for developers to make code that I've found to be very useful to Views and Panels more readily available. Certain methods of doing things, particularly with AJAX, exportable objects and a plugin system, are proving to be ideas that are useful outside of just Views and Panels. This module does not offer much directly to the end user, but instead, creates a library for other modules to use. If you are an end user and some module asked you to install the CTools suite, then this is far as you really need to go. If you're a developer and are interested in these tools, read on!</p>
 
 <h2>Tools provided by CTools</h2>
 
 <dl>
 <dt><a href="&topic:ctools/plugins&">Plugins</a></dt>
-<dd>The plugins tool allows a module to allow <b>other</b> modules (and themes!) to provide plugins which provide some kind of functionality or some kind of task. For example, in Panels there are several types of plugins: Content types (which are like blocks), layouts (which are page layouts) and styles (which can be used to style a panel). Each plugin is represented by a .inc file, and the functionaly they offer can differ wildly.
+<dd>The plugins tool allows a module to allow <b>other</b> modules (and themes!) to provide plugins which provide some kind of functionality or some kind of task. For example, in Panels there are several types of plugins: Content types (which are like blocks), layouts (which are page layouts) and styles (which can be used to style a panel). Each plugin is represented by a .inc file, and the functionality they offer can differ wildly.</dd>
 
 <dt><a href="&topic:ctools/context&">Context</a></dt>
 <dd>Context is the idea that the objects that are used in page generation have more value than simply creating a single piece of output. Instead, contexts can be used to create multiple pieces of content that can all be put onto the page. Additionally, contexts can be used to derive other contexts via relationships, such as determining the node author and displaying data about the new context.</dd>
 
 <dt><a href="&topic:ctools/ajax&">AJAX Tools</a></dt>
-<dd>AJAX (also known as AHAH) is a method of allowing the browser and the server to communicate without requiring a page refresh. It can be used to create complicated interactive forms, but it is somewhat difficult to integrate into Drupal's Form API. These tools make it easier to accomplish this goal. In addition, CTools provides a few other javascript helpers, such as a modal dialog, a collapsible div, a simple dropdown and dependent checkboxes.
+<dd>AJAX (also known as AHAH) is a method of allowing the browser and the server to communicate without requiring a page refresh. It can be used to create complicated interactive forms, but it is somewhat difficult to integrate into Drupal's Form API. These tools make it easier to accomplish this goal. In addition, CTools provides a few other javascript helpers, such as a modal dialog, a collapsible div, a simple dropdown and dependent checkboxes.</dd>
 
 <dt><a href="&topic:ctools/css&">CSS scrubbing and caching</a></dt>
-<dd>Drupal comes with a fantastic array of tools to ensure HTML is safe to output, but does not contain any similar tools for CSS. CTools provides a small tool to sanitize CSS so that user-input CSS code can still be safely used. It also provides a method for caching CSS for better performance.</dd>
+<dd>Drupal comes with a fantastic array of tools to ensure HTML is safe to output but does not contain any similar tools for CSS. CTools provides a small tool to sanitize CSS, so user-input CSS code can still be safely used. It also provides a method for caching CSS for better performance.</dd>
 
 <dt><a href="&topic:ctools/export&">Exportable objects</a></dt>
-<dd>Views and Panels both use objects that can either be in code or in the database, and the object can be exported into a piece of PHP code so that it can be moved from site to site or out of the database entirely. This library abstracts that so that other modules can use this same concept for their data.</dd>
+<dd>Views and Panels both use objects that can either be in code or in the database, and the objects can be exported into a piece of PHP code, so they can be moved from site to site or out of the database entirely. This library abstracts that functionality, so other modules can use this same concept for their data.</dd>
 
 <dt><a href="&topic:ctools/form&">Form tools</a></dt>
 <dd>Drupal 6's FAPI really improved over Drupal 5, and made a lot of things possible. Still, it missed a few items that were needed to make form wizards and truly dynamic AJAX forms possible. CTools includes a replacement for drupal_get_form() that has a few more options and allows the caller to examine the $form_state once the form has completed.</dd>
 
 <dt><a href="&topic:ctools/wizard&">Form wizards</a></dt>
-<dd>Finally! An easy way to have form wizards, which is any 'form' which is actually a string of forms that build up to a final conclusion. The form wizard supports a single entry point, the ability to choose whether or not the user can go forward/back/up on the form and easy callbacks to handle the difficult job of dealing with data in between forms.</dd>
+<dd>Finally! An easy way to have form wizards, which is any 'form' that is actually a string of forms that build up to a final conclusion. The form wizard supports a single entry point, the ability to choose whether or not the user can go forward/back/up on the form and easy callbacks to handle the difficult job of dealing with data in between forms.</dd>
 
 <dt><a href="&topic:ctools/object-cache&">Temporary object cache</a></dt>
 <dd>For normal forms, all of the data needed for an object is stored in the form so that the browser handles a lot of the work. For multi-step and ajax forms, however, this is impractical, and letting the browser store data can be insecure. The object cache provides a non-volatile location to store temporary data while the form is being worked on. This is much safer than the standard Drupal caching mechanism, which is volatile, meaning it can be cleared at any time and any system using it must be capable of recreating the data that was there. This system also allows for object locking, since any object which has an item in the cache from another person can be assumed to be 'locked for editing'.</dd>
diff --git a/profiles/acquia/modules/ctools/help/export.html b/profiles/acquia/modules/ctools/help/export.html
index 57ccd93..3a774e8 100644
--- a/profiles/acquia/modules/ctools/help/export.html
+++ b/profiles/acquia/modules/ctools/help/export.html
@@ -112,7 +112,7 @@ function mymodule_schema() {
 <dd>Human readable title of the export key. Defaults to 'Name'. Because the schema is cached, do not translate this. It must instead be translated when used.</dd>
 
 <dt>primary key</dt>
-<dd>Objects should contain a primary key which is a database identifier primarily used to determine if an object has been written or not. This is required for the default CRUD save callback to work.</dd>
+<dd>A single field within the table that is to be used as the main identifier to discern whether or not the object has been written. As the schema definition's primary key value will be used by default, it is not usually necessary to define this.</dd>
 
 <dt>object</dt>
 <dd>The class the object should be created as, if 'object factory' is not set. If this is not set either, defaults as stdClass.</dd>
diff --git a/profiles/acquia/modules/ctools/help/object-cache.html b/profiles/acquia/modules/ctools/help/object-cache.html
index 7e31c74..801a836 100644
--- a/profiles/acquia/modules/ctools/help/object-cache.html
+++ b/profiles/acquia/modules/ctools/help/object-cache.html
@@ -16,7 +16,7 @@ ctools_include('object-cache');
  * will not result in multiple database reads.
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $name
  *   The name of the object being stored.
@@ -34,7 +34,7 @@ function ctools_object_cache_get($obj, $name, $skip_cache = FALSE) {
  * Store an object in the non-volatile ctools cache.
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $name
  *   The name of the object being stored.
@@ -49,7 +49,7 @@ function ctools_object_cache_set($obj, $name, $cache) {
  * Remove an object from the non-volatile ctools cache
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $name
  *   The name of the object being removed.
@@ -67,7 +67,7 @@ function ctools_object_cache_clear($obj, $name) {
  * modify them.
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $name
  *   The name of the object being removed.
@@ -89,7 +89,7 @@ function ctools_object_cache_test($obj, $name) {
  * This is useful for clearing a lock.
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $name
  *   The name of the object being removed.
diff --git a/profiles/acquia/modules/ctools/help/plugins-implementing.html b/profiles/acquia/modules/ctools/help/plugins-implementing.html
index ea62aa2..070f08d 100644
--- a/profiles/acquia/modules/ctools/help/plugins-implementing.html
+++ b/profiles/acquia/modules/ctools/help/plugins-implementing.html
@@ -56,4 +56,6 @@ $plugin = array(
 
 <p>Several values will be filled in for you automatically, but you can override them if necessary. They include 'name', 'path', 'file' and 'module'. Additionally, the plugin can owner can provide other defaults as well.</p>
 
+<p>There are no required keys by the plugin system itself. The only requirements in the $plugin array will be defined by the plugin type.</p>
+
 <p>After this array, if your plugin needs functions, they can be declared. Different plugin types have different needs here, so exactly what else will be needed will change from type to type.</p>
diff --git a/profiles/acquia/modules/ctools/includes/cleanstring.inc b/profiles/acquia/modules/ctools/includes/cleanstring.inc
index 530fc0f..56b3e36 100644
--- a/profiles/acquia/modules/ctools/includes/cleanstring.inc
+++ b/profiles/acquia/modules/ctools/includes/cleanstring.inc
@@ -58,10 +58,9 @@ define('CTOOLS_PREG_CLASS_ALNUM',
 '\x{2ce5}-\x{2cff}\x{2d6f}\x{2e00}-\x{3005}\x{3007}-\x{303b}\x{303d}-\x{303f}' .
 '\x{3099}-\x{309e}\x{30a0}\x{30fb}-\x{30fe}\x{3190}-\x{319f}\x{31c0}-\x{31cf}' .
 '\x{3200}-\x{33ff}\x{4dc0}-\x{4dff}\x{a015}\x{a490}-\x{a716}\x{a802}\x{a806}' .
-'\x{a80b}\x{a823}-\x{a82b}\x{f8ff}\x{fb1e}\x{fb29}\x{fd3e}\x{fd3f}\x{fdfc}-' .
-'\x{fe6b}\x{feff}-\x{ff0f}\x{ff1a}-\x{ff20}\x{ff3b}-\x{ff40}\x{ff5b}-\x{ff65}' .
-'\x{ff70}\x{ff9e}\x{ff9f}\x{ffe0}-\x{fffd}');
-
+'\x{a80b}\x{a823}-\x{a82b}\x{e000}-\x{f8ff}\x{fb1e}\x{fb29}\x{fd3e}\x{fd3f}' .
+'\x{fdfc}-\x{fe6b}\x{feff}-\x{ff0f}\x{ff1a}-\x{ff20}\x{ff3b}-\x{ff40}\x{ff5b}-' .
+'\x{ff65}\x{ff70}\x{ff9e}\x{ff9f}\x{ffe0}-\x{fffd}');
 
 /**
  * Clean up a string value provided by a module.
diff --git a/profiles/acquia/modules/ctools/includes/content.inc b/profiles/acquia/modules/ctools/includes/content.inc
index 134c951..890ec23 100644
--- a/profiles/acquia/modules/ctools/includes/content.inc
+++ b/profiles/acquia/modules/ctools/includes/content.inc
@@ -458,9 +458,12 @@ function ctools_content_admin_info($type, $subtype, $conf, $context = NULL) {
   if ($function = ctools_plugin_get_function($plugin, 'admin info')) {
     $output = $function($subtype, $conf, $context);
   }
+
   if (empty($output) || !is_object($output)) {
     $output = new stdClass();
-    $output->title = t('No info');
+    // replace the _ with " " for a better output
+    $subtype = check_plain(str_replace("_", " ", $subtype));
+    $output->title = $subtype;
     $output->content = t('No info available.');
   }
   return $output;
diff --git a/profiles/acquia/modules/ctools/includes/context-admin.inc b/profiles/acquia/modules/ctools/includes/context-admin.inc
index aeb7270..7e5cd02 100644
--- a/profiles/acquia/modules/ctools/includes/context-admin.inc
+++ b/profiles/acquia/modules/ctools/includes/context-admin.inc
@@ -636,8 +636,8 @@ function ctools_context_get_defaults($plugin_definition, $object, $type) {
     'name' => $plugin_definition['name'],
   );
 
-  if (isset($plugin['defaults'])) {
-    $defaults = $plugin['defaults'];
+  if (isset($plugin_definition['defaults'])) {
+    $defaults = $plugin_definition['defaults'];
   }
   else if (isset($subtype['defaults'])) {
     $defaults = $subtype['defaults'];
diff --git a/profiles/acquia/modules/ctools/includes/context-task-handler.inc b/profiles/acquia/modules/ctools/includes/context-task-handler.inc
index 3735870..10fd793 100644
--- a/profiles/acquia/modules/ctools/includes/context-task-handler.inc
+++ b/profiles/acquia/modules/ctools/includes/context-task-handler.inc
@@ -66,9 +66,9 @@ function ctools_context_handler_get_render_handler($task, $subtask, $handlers, $
       // If not, if it's a 'context' type handler, use the default tester.
       if ($plugin['handler type'] == 'context') {
         $test = ctools_context_handler_default_test($handler, $contexts, $args);
-      }
-      if ($test) {
-        return $id;
+        if ($test) {
+          return $id;
+        }
       }
     }
   }
diff --git a/profiles/acquia/modules/ctools/includes/context.inc b/profiles/acquia/modules/ctools/includes/context.inc
index cc6d39c..720a6fc 100644
--- a/profiles/acquia/modules/ctools/includes/context.inc
+++ b/profiles/acquia/modules/ctools/includes/context.inc
@@ -509,7 +509,7 @@ function ctools_context_get_all_converters() {
 /**
  * Let the context convert an argument based upon the converter that was given.
  */
-function ctools_context_convert_context($context, $converter) {
+function ctools_context_convert_context($context, $converter, $converter_options = array()) {
   // Contexts without plugins might be optional placeholders.
   if (empty($context->plugin)) {
     return;
@@ -518,12 +518,12 @@ function ctools_context_convert_context($context, $converter) {
   $value = $context->argument;
   $plugin = ctools_get_context($context->plugin);
   if ($function = ctools_plugin_get_function($plugin, 'convert')) {
-    $value = $function($context, $converter);
+    $value = $function($context, $converter, $converter_options);
   }
 
   foreach (module_implements('ctools_context_converter_alter') as $module) {
     $function = $module . '_ctools_context_converter_alter';
-    $function($context, $converter, $value);
+    $function($context, $converter, $value, $converter_options);
   }
 
   return $value;
@@ -619,7 +619,7 @@ function ctools_context_create_empty($type) {
 /**
  * Perform keyword and context substitutions.
  */
-function ctools_context_keyword_substitute($string, $keywords, $contexts) {
+function ctools_context_keyword_substitute($string, $keywords, $contexts, $converter_options = array()) {
   // Ensure a default keyword exists:
   $keywords['%%'] = '%';
 
@@ -666,7 +666,7 @@ function ctools_context_keyword_substitute($string, $keywords, $contexts) {
         $keywords['%' . $keyword] = '';
       }
       else if (!empty($converter)) {
-        $keywords['%' . $keyword] = ctools_context_convert_context($context_keywords[$context], $converter);
+        $keywords['%' . $keyword] = ctools_context_convert_context($context_keywords[$context], $converter, $converter_options);
       }
       else {
         $keywords['%' . $keyword] = $context_keywords[$keyword]->title;
diff --git a/profiles/acquia/modules/ctools/includes/css.inc b/profiles/acquia/modules/ctools/includes/css.inc
index 29ac2ec..8bc4c66 100644
--- a/profiles/acquia/modules/ctools/includes/css.inc
+++ b/profiles/acquia/modules/ctools/includes/css.inc
@@ -285,7 +285,8 @@ function ctools_css_disassemble($css) {
   // Remove comments.
   $css = preg_replace("/\/\*(.*)?\*\//Usi", "", $css);
   // Split out each statement
-  $statements = explode("}", $css);
+  $statements = preg_split('/[;}]/', $css);
+
   // If we have any statements, parse them.
   if (!empty($statements)) {
     // Iterate through all of the statements.
@@ -306,7 +307,10 @@ function ctools_css_disassemble($css) {
       }
 
       // Disassemble the declaration, check it and tuck it into an array.
-      $disassembled_css[$selector_str] = _ctools_css_disassemble_declaration($declaration);
+      if (!isset($disassembled_css[$selector_str])) {
+        $disassembled_css[$selector_str] = array();
+      }
+      $disassembled_css[$selector_str] += _ctools_css_disassemble_declaration($declaration);
     }
   }
   return $disassembled_css;
diff --git a/profiles/acquia/modules/ctools/includes/export-ui.inc b/profiles/acquia/modules/ctools/includes/export-ui.inc
index 89b6d16..16e57d6 100644
--- a/profiles/acquia/modules/ctools/includes/export-ui.inc
+++ b/profiles/acquia/modules/ctools/includes/export-ui.inc
@@ -19,6 +19,7 @@ function ctools_export_ui_process(&$plugin, $info) {
     'export' => array(),
     'allowed operations' => array(),
     'menu' => array(),
+    'redirect' => array(),
     'form' => array(),
     'strings' => array(),
     'list' => NULL,
@@ -115,171 +116,176 @@ function ctools_export_ui_process(&$plugin, $info) {
   );
 
   $plugin['menu']['items'] += array(
-    'list callback' => array(
-      'path' => '',
-      // Menu items are translated by the menu system.
-      // TODO: We need more flexibility in title. The title of the admin page
-      // is not necessarily the title of the object, plus we need
-      // plural, singular, proper, not proper, etc.
-      'title' => $plugin['menu']['menu title'],
-      'description' => $plugin['menu']['menu description'],
-      'page callback' => 'ctools_export_ui_switcher_page',
-      'page arguments' => array($plugin['name'], 'list'),
-      'access callback' => 'ctools_export_ui_task_access',
-      'access arguments' => array($plugin['name'], 'list'),
-      'type' => MENU_NORMAL_ITEM,
-    ),
-    'list' => array(
-      'path' => 'list',
-      'title' => 'List',
-      'page callback' => 'ctools_export_ui_switcher_page',
-      'page arguments' => array($plugin['name'], 'list'),
-      'access callback' => 'ctools_export_ui_task_access',
-      'access arguments' => array($plugin['name'], 'list'),
-      'type' => MENU_DEFAULT_LOCAL_TASK,
-      'weight' => -10,
-    ),
-    'add' => array(
-      'path' => 'add',
-      'title' => 'Add',
-      'page callback' => 'ctools_export_ui_switcher_page',
-      'page arguments' => array($plugin['name'], 'add'),
-      'access callback' => 'ctools_export_ui_task_access',
-      'access arguments' => array($plugin['name'], 'add'),
-      'type' => MENU_LOCAL_ACTION,
-    ),
-    'edit callback' => array(
-      'path' => 'list/%ctools_export_ui',
-      'page callback' => 'ctools_export_ui_switcher_page',
-      'page arguments' => array($plugin['name'], 'edit', $prefix_count + 2),
-      'load arguments' => array($plugin['name']),
-      'access callback' => 'ctools_export_ui_task_access',
-      'access arguments' => array($plugin['name'], 'edit', $prefix_count + 2),
-      'type' => MENU_CALLBACK,
-    ),
-    'edit' => array(
-      'path' => 'list/%ctools_export_ui/edit',
-      'title' => 'Edit',
-      'page callback' => 'ctools_export_ui_switcher_page',
-      'page arguments' => array($plugin['name'], 'edit', $prefix_count + 2),
-      'load arguments' => array($plugin['name']),
-      'access callback' => 'ctools_export_ui_task_access',
-      'access arguments' => array($plugin['name'], 'edit', $prefix_count + 2),
-      'type' => MENU_DEFAULT_LOCAL_TASK,
-      'weight' => -10,
-    ),
+    'list callback' => array(),
+    'list' => array(),
+    'add' => array(),
+    'edit callback' => array(),
+    'edit' => array(),
+  );
+
+  $plugin['menu']['items']['list callback'] += array(
+    'path' => '',
+    // Menu items are translated by the menu system.
+    // TODO: We need more flexibility in title. The title of the admin page
+    // is not necessarily the title of the object, plus we need
+    // plural, singular, proper, not proper, etc.
+    'title' => $plugin['menu']['menu title'],
+    'description' => $plugin['menu']['menu description'],
+    'page callback' => 'ctools_export_ui_switcher_page',
+    'page arguments' => array($plugin['name'], 'list'),
+    'access callback' => 'ctools_export_ui_task_access',
+    'access arguments' => array($plugin['name'], 'list'),
+    'type' => MENU_NORMAL_ITEM,
+  );
+
+  $plugin['menu']['items']['list'] += array(
+    'path' => 'list',
+    'title' => 'List',
+    'page callback' => 'ctools_export_ui_switcher_page',
+    'page arguments' => array($plugin['name'], 'list'),
+    'access callback' => 'ctools_export_ui_task_access',
+    'access arguments' => array($plugin['name'], 'list'),
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+    'weight' => -10,
+  );
+
+  $plugin['menu']['items']['add'] += array(
+    'path' => 'add',
+    'title' => 'Add',
+    'page callback' => 'ctools_export_ui_switcher_page',
+    'page arguments' => array($plugin['name'], 'add'),
+    'access callback' => 'ctools_export_ui_task_access',
+    'access arguments' => array($plugin['name'], 'add'),
+    'type' => MENU_LOCAL_ACTION,
+  );
+
+  $plugin['menu']['items']['edit callback'] += array(
+    'path' => 'list/%ctools_export_ui',
+    'page callback' => 'ctools_export_ui_switcher_page',
+    'page arguments' => array($plugin['name'], 'edit', $prefix_count + 2),
+    'load arguments' => array($plugin['name']),
+    'access callback' => 'ctools_export_ui_task_access',
+    'access arguments' => array($plugin['name'], 'edit', $prefix_count + 2),
+    'type' => MENU_CALLBACK,
+  );
+
+  $plugin['menu']['items']['edit'] += array(
+    'path' => 'list/%ctools_export_ui/edit',
+    'title' => 'Edit',
+    'page callback' => 'ctools_export_ui_switcher_page',
+    'page arguments' => array($plugin['name'], 'edit', $prefix_count + 2),
+    'load arguments' => array($plugin['name']),
+    'access callback' => 'ctools_export_ui_task_access',
+    'access arguments' => array($plugin['name'], 'edit', $prefix_count + 2),
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+    'weight' => -10,
   );
 
   if ($plugin['allowed operations']['import']) {
-    $plugin['menu']['items'] += array(
-      'import' => array(
-        'path' => 'import',
-        'title' => 'Import',
-        'page callback' => 'ctools_export_ui_switcher_page',
-        'page arguments' => array($plugin['name'], 'import'),
-        'access callback' => 'ctools_export_ui_task_access',
-        'access arguments' => array($plugin['name'], 'import'),
-        'type' => MENU_LOCAL_ACTION,
-      ),
+    $plugin['menu']['items'] += array('import' => array());
+    $plugin['menu']['items']['import'] += array(
+      'path' => 'import',
+      'title' => 'Import',
+      'page callback' => 'ctools_export_ui_switcher_page',
+      'page arguments' => array($plugin['name'], 'import'),
+      'access callback' => 'ctools_export_ui_task_access',
+      'access arguments' => array($plugin['name'], 'import'),
+      'type' => MENU_LOCAL_ACTION,
     );
   }
 
   if ($plugin['allowed operations']['export']) {
-    $plugin['menu']['items'] += array(
-      'export' => array(
-        'path' => 'list/%ctools_export_ui/export',
-        'title' => 'Export',
-        'page callback' => 'ctools_export_ui_switcher_page',
-        'page arguments' => array($plugin['name'], 'export', $prefix_count + 2),
-        'load arguments' => array($plugin['name']),
-        'access callback' => 'ctools_export_ui_task_access',
-        'access arguments' => array($plugin['name'], 'export', $prefix_count + 2),
-        'type' => MENU_LOCAL_TASK,
-      ),
+    $plugin['menu']['items'] += array('export' => array());
+    $plugin['menu']['items']['export'] += array(
+      'path' => 'list/%ctools_export_ui/export',
+      'title' => 'Export',
+      'page callback' => 'ctools_export_ui_switcher_page',
+      'page arguments' => array($plugin['name'], 'export', $prefix_count + 2),
+      'load arguments' => array($plugin['name']),
+      'access callback' => 'ctools_export_ui_task_access',
+      'access arguments' => array($plugin['name'], 'export', $prefix_count + 2),
+      'type' => MENU_LOCAL_TASK,
     );
   }
 
   if ($plugin['allowed operations']['revert']) {
-    $plugin['menu']['items'] += array(
-      'revert' => array(
-        'path' => 'list/%ctools_export_ui/revert',
-        'title' => 'Revert',
-        'page callback' => 'ctools_export_ui_switcher_page',
-        // Note: Yes, 'delete' op is correct.
-        'page arguments' => array($plugin['name'], 'delete', $prefix_count + 2),
-        'load arguments' => array($plugin['name']),
-        'access callback' => 'ctools_export_ui_task_access',
-        'access arguments' => array($plugin['name'], 'revert', $prefix_count + 2),
-        'type' => MENU_CALLBACK,
-      ),
+    $plugin['menu']['items'] += array('revert' => array());
+    $plugin['menu']['items']['revert'] += array(
+      'path' => 'list/%ctools_export_ui/revert',
+      'title' => 'Revert',
+      'page callback' => 'ctools_export_ui_switcher_page',
+      // Note: Yes, 'delete' op is correct.
+      'page arguments' => array($plugin['name'], 'delete', $prefix_count + 2),
+      'load arguments' => array($plugin['name']),
+      'access callback' => 'ctools_export_ui_task_access',
+      'access arguments' => array($plugin['name'], 'revert', $prefix_count + 2),
+      'type' => MENU_CALLBACK,
     );
   }
 
   if ($plugin['allowed operations']['delete']) {
-    $plugin['menu']['items'] += array(
-      'delete' => array(
-        'path' => 'list/%ctools_export_ui/delete',
-        'title' => 'Delete',
-        'page callback' => 'ctools_export_ui_switcher_page',
-        'page arguments' => array($plugin['name'], 'delete', $prefix_count + 2),
-        'load arguments' => array($plugin['name']),
-        'access callback' => 'ctools_export_ui_task_access',
-        'access arguments' => array($plugin['name'], 'delete', $prefix_count + 2),
-        'type' => MENU_CALLBACK,
-      ),
+    $plugin['menu']['items'] += array('delete' => array());
+    $plugin['menu']['items']['delete'] += array(
+      'path' => 'list/%ctools_export_ui/delete',
+      'title' => 'Delete',
+      'page callback' => 'ctools_export_ui_switcher_page',
+      'page arguments' => array($plugin['name'], 'delete', $prefix_count + 2),
+      'load arguments' => array($plugin['name']),
+      'access callback' => 'ctools_export_ui_task_access',
+      'access arguments' => array($plugin['name'], 'delete', $prefix_count + 2),
+      'type' => MENU_CALLBACK,
     );
   }
 
   if ($plugin['allowed operations']['clone']) {
-    $plugin['menu']['items'] += array(
-      'clone' => array(
-        'path' => 'list/%ctools_export_ui/clone',
-        'title' => 'Clone',
-        'page callback' => 'ctools_export_ui_switcher_page',
-        'page arguments' => array($plugin['name'], 'clone', $prefix_count + 2),
-        'load arguments' => array($plugin['name']),
-        'access callback' => 'ctools_export_ui_task_access',
-        'access arguments' => array($plugin['name'], 'clone', $prefix_count + 2),
-        'type' => MENU_CALLBACK,
-      ),
+    $plugin['menu']['items'] += array('clone' => array());
+    $plugin['menu']['items']['clone'] += array(
+      'path' => 'list/%ctools_export_ui/clone',
+      'title' => 'Clone',
+      'page callback' => 'ctools_export_ui_switcher_page',
+      'page arguments' => array($plugin['name'], 'clone', $prefix_count + 2),
+      'load arguments' => array($plugin['name']),
+      'access callback' => 'ctools_export_ui_task_access',
+      'access arguments' => array($plugin['name'], 'clone', $prefix_count + 2),
+      'type' => MENU_CALLBACK,
     );
   }
 
   if ($plugin['allowed operations']['enable']) {
-    $plugin['menu']['items'] += array(
-      'enable' => array(
-        'path' => 'list/%ctools_export_ui/enable',
-        'title' => 'Enable',
-        'page callback' => 'ctools_export_ui_switcher_page',
-        'page arguments' => array($plugin['name'], 'enable', $prefix_count + 2),
-        'load arguments' => array($plugin['name']),
-        'access callback' => 'ctools_export_ui_task_access',
-        'access arguments' => array($plugin['name'], 'enable', $prefix_count + 2),
-        'type' => MENU_CALLBACK,
-      ),
+    $plugin['menu']['items'] += array('enable' => array());
+    $plugin['menu']['items']['enable'] += array(
+      'path' => 'list/%ctools_export_ui/enable',
+      'title' => 'Enable',
+      'page callback' => 'ctools_export_ui_switcher_page',
+      'page arguments' => array($plugin['name'], 'enable', $prefix_count + 2),
+      'load arguments' => array($plugin['name']),
+      'access callback' => 'ctools_export_ui_task_access',
+      'access arguments' => array($plugin['name'], 'enable', $prefix_count + 2),
+      'type' => MENU_CALLBACK,
     );
   }
 
   if ($plugin['allowed operations']['disable']) {
-    $plugin['menu']['items'] += array(
-      'disable' => array(
-        'path' => 'list/%ctools_export_ui/disable',
-        'title' => 'Disable',
-        'page callback' => 'ctools_export_ui_switcher_page',
-        'page arguments' => array($plugin['name'], 'disable', $prefix_count + 2),
-        'load arguments' => array($plugin['name']),
-        'access callback' => 'ctools_export_ui_task_access',
-        'access arguments' => array($plugin['name'], 'disable', $prefix_count + 2),
-        'type' => MENU_CALLBACK,
-      ),
+    $plugin['menu']['items'] += array('disable' => array());
+    $plugin['menu']['items']['disable'] += array(
+      'path' => 'list/%ctools_export_ui/disable',
+      'title' => 'Disable',
+      'page callback' => 'ctools_export_ui_switcher_page',
+      'page arguments' => array($plugin['name'], 'disable', $prefix_count + 2),
+      'load arguments' => array($plugin['name']),
+      'access callback' => 'ctools_export_ui_task_access',
+      'access arguments' => array($plugin['name'], 'disable', $prefix_count + 2),
+      'type' => MENU_CALLBACK,
     );
   }
 
-  // Define some redirects that should happen after edit/add/clone operations.
-  $plugin['redirect'] = array(
+  // Define some redirects that should happen after edit/add/clone/delete operations.
+  $plugin['redirect'] += array(
     'add' => $base_path,
     'clone' => $base_path,
     'edit' => $base_path,
+    'delete' => $base_path,
+    'revert' => $base_path,
     'import' => $base_path,
   );
 
diff --git a/profiles/acquia/modules/ctools/includes/object-cache.inc b/profiles/acquia/modules/ctools/includes/object-cache.inc
index 5de4df7..29225b0 100644
--- a/profiles/acquia/modules/ctools/includes/object-cache.inc
+++ b/profiles/acquia/modules/ctools/includes/object-cache.inc
@@ -16,26 +16,33 @@
  * will not result in multiple database reads.
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $name
  *   The name of the object being stored.
  * @param $skip_cache
  *   Skip the memory cache, meaning this must be read from the db again.
+ * @param $sid
+ *   The session id, allowing someone to use Session API or their own solution;
+ *   defaults to session_id().
  *
  * @deprecated $skip_cache is deprecated in favor of drupal_static*
  * @return
  *   The data that was cached.
  */
-function ctools_object_cache_get($obj, $name, $skip_cache = FALSE) {
+function ctools_object_cache_get($obj, $name, $skip_cache = FALSE, $sid = NULL) {
   $cache = &drupal_static(__FUNCTION__, array());
   $key = "$obj:$name";
   if ($skip_cache) {
     unset($cache[$key]);
   }
 
+  if (!$sid) {
+    $sid = session_id();
+  }
+
   if (!array_key_exists($key, $cache)) {
-    $data = db_query('SELECT * FROM {ctools_object_cache} WHERE sid = :session_id AND obj = :object AND name = :name', array(':session_id' => session_id(), ':object' => $obj, ':name' => $name))
+    $data = db_query('SELECT * FROM {ctools_object_cache} WHERE sid = :session_id AND obj = :object AND name = :name', array(':session_id' => $sid, ':object' => $obj, ':name' => $name))
       ->fetchObject();
     if ($data) {
       $cache[$key] = unserialize($data->data);
@@ -48,14 +55,17 @@ function ctools_object_cache_get($obj, $name, $skip_cache = FALSE) {
  * Store an object in the non-volatile ctools cache.
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $name
  *   The name of the object being stored.
  * @param $cache
  *   The object to be cached. This will be serialized prior to writing.
+ * @param $sid
+ *   The session id, allowing someone to use Session API or their own solution;
+ *   defaults to session_id().
  */
-function ctools_object_cache_set($obj, $name, $cache) {
+function ctools_object_cache_set($obj, $name, $cache, $sid = NULL) {
   // Store the CTools session id in the user session to force a
   // session for anonymous users in Drupal 7 and Drupal 6 Pressflow.
   // see http://drupal.org/node/562374, http://drupal.org/node/861778
@@ -63,10 +73,15 @@ function ctools_object_cache_set($obj, $name, $cache) {
     $_SESSION['ctools_hold_session'] = TRUE;
   }
 
-  ctools_object_cache_clear($obj, $name);
+  ctools_object_cache_clear($obj, $name, $sid);
+
+  if (!$sid) {
+    $sid = session_id();
+  }
+
   db_insert('ctools_object_cache')
     ->fields(array(
-      'sid' => session_id(),
+      'sid' => $sid,
       'obj' => $obj,
       'name' => $name,
       'data' => serialize($cache),
@@ -79,14 +94,22 @@ function ctools_object_cache_set($obj, $name, $cache) {
  * Remove an object from the non-volatile ctools cache
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $name
  *   The name of the object being removed.
+ * @param $sid
+ *   The session id, allowing someone to use Session API or their own solution;
+ *   defaults to session_id().
  */
-function ctools_object_cache_clear($obj, $name) {
+function ctools_object_cache_clear($obj, $name, $sid = NULL) {
+
+  if (!$sid) {
+    $sid = session_id();
+  }
+
   db_delete('ctools_object_cache')
-    ->condition('sid', session_id())
+    ->condition('sid', $sid)
     ->condition('obj', $obj)
     ->condition('name', $name)
     ->execute();
@@ -102,16 +125,24 @@ function ctools_object_cache_clear($obj, $name) {
  * modify them.
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $name
  *   The name of the object being removed.
+ * @param $sid
+ *   The session id, allowing someone to use Session API or their own solution;
+ *   defaults to session_id().
  *
  * @return
  *   An object containing the UID and updated date if found; NULL if not.
  */
-function ctools_object_cache_test($obj, $name) {
-  return db_query('SELECT s.uid, c.updated FROM {ctools_object_cache} c INNER JOIN {sessions} s ON c.sid = s.sid WHERE s.sid <> :session_id AND c.obj = :obj AND c.name = :name ORDER BY c.updated ASC', array(':session_id' => session_id(), ':obj' => $obj, ':name' => $name))
+function ctools_object_cache_test($obj, $name, $sid = NULL) {
+
+  if (!$sid) {
+    $sid = session_id();
+  }
+
+  return db_query('SELECT s.uid, c.updated FROM {ctools_object_cache} c INNER JOIN {sessions} s ON c.sid = s.sid WHERE s.sid <> :session_id AND c.obj = :obj AND c.name = :name ORDER BY c.updated ASC', array(':session_id' => $sid, ':obj' => $obj, ':name' => $name))
     ->fetchObject();
 }
 
@@ -122,7 +153,7 @@ function ctools_object_cache_test($obj, $name) {
  * an an administration UI.
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $names
  *   An array of names of objects
@@ -141,7 +172,7 @@ function ctools_object_cache_test_objects($obj, $names) {
  * This is useful for clearing a lock.
  *
  * @param $obj
- *   A 32 character or less string to define what kind of object is being
+ *   A 128 character or less string to define what kind of object is being
  *   stored; primarily this is used to prevent collisions.
  * @param $name
  *   The name of the object being removed.
diff --git a/profiles/acquia/modules/ctools/includes/plugins.inc b/profiles/acquia/modules/ctools/includes/plugins.inc
index a6d4bd6..2dbdd48 100644
--- a/profiles/acquia/modules/ctools/includes/plugins.inc
+++ b/profiles/acquia/modules/ctools/includes/plugins.inc
@@ -246,17 +246,10 @@ function ctools_get_plugins($module, $type, $id = NULL) {
     $cache = cache_get("plugins:$module:$type", $info[$module][$type]['cache table']);
 
     if (!empty($cache->data)) {
-      // Verify that the file exists as it may have been moved in a multisite environment
-      if (isset($cache->data['path'])) {
-        // Files to be registered may be in two locations. Check for both of them.
-        if ((is_array($cache->data['path']) && file_exists($cache->data['path']['file'])) ||
-           file_exists($cache->data['path'])) {
-          // Cache load succeeded so use the cached plugin list.
-          $plugins[$module][$type]   = $cache->data;
-          // Set $setup to true so we know things where loaded.
-          $setup[$module][$type]     = TRUE;
-        }
-      }
+      // Cache load succeeded so use the cached plugin list.
+      $plugins[$module][$type]   = $cache->data;
+      // Set $setup to true so we know things where loaded.
+      $setup[$module][$type]     = TRUE;
     }
     else {
       // Cache load failed so store that we need to build and write the cache.
diff --git a/profiles/acquia/modules/ctools/includes/stylizer.inc b/profiles/acquia/modules/ctools/includes/stylizer.inc
index 1f94598..9fdc81d 100644
--- a/profiles/acquia/modules/ctools/includes/stylizer.inc
+++ b/profiles/acquia/modules/ctools/includes/stylizer.inc
@@ -960,7 +960,7 @@ function ctools_stylizer_edit_style_form_choose_submit($form, &$form_state) {
 function ctools_stylizer_edit_style_form_default($form, &$form_state) {
   ctools_add_js('stylizer');
   ctools_add_css('stylizer');
-  drupal_add_library('system', 'drupal.farbtastic');
+  drupal_add_library('system', 'farbtastic');
 
   $plugin = &$form_state['base_style_plugin'];
   $settings = &$form_state['settings'];
diff --git a/profiles/acquia/modules/ctools/includes/wizard.inc b/profiles/acquia/modules/ctools/includes/wizard.inc
index 0e2e11d..946ed0f 100644
--- a/profiles/acquia/modules/ctools/includes/wizard.inc
+++ b/profiles/acquia/modules/ctools/includes/wizard.inc
@@ -256,16 +256,13 @@ function ctools_wizard_wrapper($form, &$form_state) {
 
     if (!empty($form_info['show trail'])) {
       if (!empty($form_info['free trail'])) {
-        // ctools_wizard_get_path() returns results suitable for #redirect
-        // which can only be directly used in drupal_goto. We have to futz
-        // with it.
+        // ctools_wizard_get_path() returns results suitable for
+        // $form_state['redirect] which can only be directly used in
+        // drupal_goto. We have to futz a bit with it.
         $path = ctools_wizard_get_path($form_info, $id);
         $options = array();
         if (!empty($path[1])) {
-          $options['query'] = $path[1];
-        }
-        if (!empty($path[2])) {
-          $options['fragment'] = $path[2];
+          $options = $path[1];
         }
         $title = l($title, $path[0], $options);
       }
diff --git a/profiles/acquia/modules/ctools/js/ajax-responder.js b/profiles/acquia/modules/ctools/js/ajax-responder.js
index e244106..1cad618 100644
--- a/profiles/acquia/modules/ctools/js/ajax-responder.js
+++ b/profiles/acquia/modules/ctools/js/ajax-responder.js
@@ -88,10 +88,11 @@
     var url_class = '.' + $(item).attr('id') + '-url';
     $(url_class).each(
       function() {
-        if (url && $(this).val()) {
+        var $this = $(this);
+        if (url && $this.val()) {
           url += '/';
         }
-        url += $(this).val();
+        url += $this.val();
       });
     return url;
   };
diff --git a/profiles/acquia/modules/ctools/js/auto-submit.js b/profiles/acquia/modules/ctools/js/auto-submit.js
index bc5a58e..59178c4 100644
--- a/profiles/acquia/modules/ctools/js/auto-submit.js
+++ b/profiles/acquia/modules/ctools/js/auto-submit.js
@@ -30,8 +30,9 @@ Drupal.behaviors.CToolsAutoSubmit = {
   attach: function(context) {
     // 'this' references the form element
     function triggerSubmit (e) {
-      if (!$(this).hasClass('ctools-ajaxing')) {
-        $(this).find('.ctools-auto-submit-click').click();
+      var $this = $(this);
+      if (!$this.hasClass('ctools-ajaxing')) {
+        $this.find('.ctools-auto-submit-click').click();
       }
     }
 
diff --git a/profiles/acquia/modules/ctools/js/collapsible-div.js b/profiles/acquia/modules/ctools/js/collapsible-div.js
index 363345c..da9bff9 100644
--- a/profiles/acquia/modules/ctools/js/collapsible-div.js
+++ b/profiles/acquia/modules/ctools/js/collapsible-div.js
@@ -232,11 +232,9 @@
   /**
    * Support Drupal's 'behaviors' system for binding.
    */
-  Drupal.behaviors.CToolsCollapsible = { 
+  Drupal.behaviors.CToolsCollapsible = {
     attach: function(context) {
-      $('.ctools-collapsible-container:not(.ctools-collapsible-processed)', context)
-        .each(Drupal.CTools.bindCollapsible)
-        .addClass('ctools-collapsible-processed');
+      $('.ctools-collapsible-container', context).once('ctools-collapsible', Drupal.CTools.bindCollapsible);
     }
   }
 })(jQuery);
diff --git a/profiles/acquia/modules/ctools/js/dependent.js b/profiles/acquia/modules/ctools/js/dependent.js
index cca3622..07ff021 100644
--- a/profiles/acquia/modules/ctools/js/dependent.js
+++ b/profiles/acquia/modules/ctools/js/dependent.js
@@ -1,17 +1,15 @@
 /**
  * @file
- *
- * Written by dmitrig01 (Dmitri Gaskin) for CTools; this provides dependent
- * visibility for form items in CTools' ajax forms.
+ * Provides dependent visibility for form items in CTools' ajax forms.
  *
  * To your $form item definition add:
- * - '#process' => array('CTools_process_dependency'),
- * - Add '#dependency' => array('id-of-form-item' => array(list, of, values, that,
-     make, this, item, show),
+ * - '#process' => array('ctools_process_dependency'),
+ * - '#dependency' => array('id-of-form-item' => array(list, of, values, that,
+ *   make, this, item, show),
  *
  * Special considerations:
- * - radios are harder. Because Drupal doesn't give radio groups individual ids,
- *   use 'radio:name-of-radio'
+ * - Radios are harder. Because Drupal doesn't give radio groups individual IDs,
+ *   use 'radio:name-of-radio'.
  *
  * - Checkboxes don't have their own id, so you need to add one in a div
  *   around the checkboxes via #prefix and #suffix. You actually need to add TWO
@@ -215,8 +213,8 @@
 
       // Really large sets of fields are too slow with the above method, so this
       // is a sort of hacked one that's faster but much less flexible.
-      $("select.ctools-master-dependent:not(.ctools-processed)")
-        .addClass('ctools-processed')
+      $("select.ctools-master-dependent")
+        .once('ctools-dependent')
         .change(function() {
           var val = $(this).val();
           if (val == 'all') {
diff --git a/profiles/acquia/modules/ctools/js/dropbutton.js b/profiles/acquia/modules/ctools/js/dropbutton.js
index 4dd20b0..49bc107 100644
--- a/profiles/acquia/modules/ctools/js/dropbutton.js
+++ b/profiles/acquia/modules/ctools/js/dropbutton.js
@@ -26,13 +26,12 @@
   Drupal.behaviors.CToolsDropbutton = {
     attach: function() {
       // Process buttons. All dropbuttons are buttons.
-      $('.ctools-button:not(.ctools-button-processed)')
-      .removeClass('ctools-no-js')
-      .addClass('ctools-button-processed');
+      $('.ctools-button')
+        .once('ctools-button')
+        .removeClass('ctools-no-js');
+
       // Process dropbuttons. Not all buttons are dropbuttons.
-      $('.ctools-dropbutton:not(.ctools-dropbutton-processed)')
-      .addClass('ctools-dropbutton-processed')
-      .each(function() {
+      $('.ctools-dropbutton').once('ctools-dropbutton', function() {
         var $dropbutton = $(this);
         var $button = $('.ctools-content', $dropbutton);
         var $secondaryActions = $('li', $button).not(':first');
diff --git a/profiles/acquia/modules/ctools/js/dropdown.js b/profiles/acquia/modules/ctools/js/dropdown.js
index 522f4d5..c829ae2 100644
--- a/profiles/acquia/modules/ctools/js/dropdown.js
+++ b/profiles/acquia/modules/ctools/js/dropdown.js
@@ -24,50 +24,50 @@
 (function ($) {
   Drupal.behaviors.CToolsDropdown = {
     attach: function() {
-      $('div.ctools-dropdown:not(.ctools-dropdown-processed)')
-        .removeClass('ctools-dropdown-no-js')
-        .addClass('ctools-dropdown-processed')
-        .each(function() {
-          var $dropdown = $(this);
-          var open = false;
-          var hovering = false;
-          var timerID = 0;
+      $('div.ctools-dropdown').once('ctools-dropdown', function() {
+        var $dropdown = $(this);
+        var open = false;
+        var hovering = false;
+        var timerID = 0;
 
-          var toggle = function(close) {
-            // if it's open or we're told to close it, close it.
-            if (open || close) {
-              // If we're just toggling it, close it immediately.
-              if (!close) {
-                open = false;
-                $("div.ctools-dropdown-container", $dropdown).slideUp(100);
-              }
-              else {
-                // If we were told to close it, wait half a second to make
-                // sure that's what the user wanted.
-                // Clear any previous timer we were using.
-                if (timerID) {
-                  clearTimeout(timerID);
-                }
-                timerID = setTimeout(function() {
-                  if (!hovering) {
-                    open = false;
-                    $("div.ctools-dropdown-container", $dropdown).slideUp(100);
-                  }}, 500);
-              }
+        $dropdown.removeClass('ctools-dropdown-no-js');
+
+        var toggle = function(close) {
+          // if it's open or we're told to close it, close it.
+          if (open || close) {
+            // If we're just toggling it, close it immediately.
+            if (!close) {
+              open = false;
+              $("div.ctools-dropdown-container", $dropdown).slideUp(100);
             }
             else {
-              // open it.
-              open = true;
-              $("div.ctools-dropdown-container", $dropdown)
-                .animate({height: "show", opacity: "show"}, 100);
+              // If we were told to close it, wait half a second to make
+              // sure that's what the user wanted.
+              // Clear any previous timer we were using.
+              if (timerID) {
+                clearTimeout(timerID);
+              }
+              timerID = setTimeout(function() {
+                if (!hovering) {
+                  open = false;
+                  $("div.ctools-dropdown-container", $dropdown).slideUp(100);
+                }
+              }, 500);
             }
           }
-          $("a.ctools-dropdown-link", $dropdown).click(function() {
-              toggle();
-              return false;
-            });
+          else {
+            // open it.
+            open = true;
+            $("div.ctools-dropdown-container", $dropdown)
+              .animate({height: "show", opacity: "show"}, 100);
+          }
+        }
+        $("a.ctools-dropdown-link", $dropdown).click(function() {
+          toggle();
+          return false;
+        });
 
-          $dropdown.hover(
+        $dropdown.hover(
             function() {
               hovering = true;
             }, // hover in
@@ -76,12 +76,12 @@
               toggle(true);
               return false;
             });
-            // @todo -- just use CSS for this noise.
-          $("div.ctools-dropdown-container a").hover(
-            function() { $(this).addClass('ctools-dropdown-hover'); },
-            function() { $(this).removeClass('ctools-dropdown-hover'); }
-            );
-        });
+        // @todo -- just use CSS for this noise.
+        $("div.ctools-dropdown-container a").hover(
+          function() { $(this).addClass('ctools-dropdown-hover'); },
+          function() { $(this).removeClass('ctools-dropdown-hover'); }
+        );
+      });
     }
   }
 })(jQuery);
diff --git a/profiles/acquia/modules/ctools/js/jump-menu.js b/profiles/acquia/modules/ctools/js/jump-menu.js
index 6bd0af6..7b0928a 100644
--- a/profiles/acquia/modules/ctools/js/jump-menu.js
+++ b/profiles/acquia/modules/ctools/js/jump-menu.js
@@ -1,13 +1,13 @@
 
 (function($) {
-  Drupal.behaviors.CToolsJumpMenu = { 
+  Drupal.behaviors.CToolsJumpMenu = {
     attach: function(context) {
-      $('.ctools-jump-menu-hide:not(.ctools-jump-menu-processed)')
-        .addClass('ctools-jump-menu-processed')
+      $('.ctools-jump-menu-hide')
+        .once('ctools-jump-menu')
         .hide();
 
-      $('.ctools-jump-menu-change:not(.ctools-jump-menu-processed)')
-        .addClass('ctools-jump-menu-processed')
+      $('.ctools-jump-menu-change')
+        .once('ctools-jump-menu')
         .change(function() {
           var loc = $(this).val();
           var urlArray = loc.split('::');
@@ -20,8 +20,8 @@
           return false;
         });
 
-      $('.ctools-jump-menu-button:not(.ctools-jump-menu-processed)')
-        .addClass('ctools-jump-menu-processed')
+      $('.ctools-jump-menu-button')
+        .once('ctools-jump-menu')
         .click(function() {
           // Instead of submitting the form, just perform the redirect.
 
diff --git a/profiles/acquia/modules/ctools/js/modal.js b/profiles/acquia/modules/ctools/js/modal.js
index acb2227..1376d82 100644
--- a/profiles/acquia/modules/ctools/js/modal.js
+++ b/profiles/acquia/modules/ctools/js/modal.js
@@ -175,10 +175,10 @@
    * Submit responder to do an AJAX submit on all modal forms.
    */
   Drupal.CTools.Modal.submitAjaxForm = function(e) {
-    var url = $(this).attr('action');
-    var form = $(this);
+    var $form = $(this);
+    var url = $form.attr('action');
 
-    setTimeout(function() { Drupal.CTools.AJAX.ajaxSubmit(form, url); }, 1);
+    setTimeout(function() { Drupal.CTools.AJAX.ajaxSubmit($form, url); }, 1);
     return false;
   }
 
@@ -192,83 +192,79 @@
       // used together safely.
       /*
        * @todo remimplement the warm caching feature
-      $('a.ctools-use-modal-cache:not(.ctools-use-modal-processed)', context)
-        .addClass('ctools-use-modal-processed')
-        .click(Drupal.CTools.Modal.clickAjaxCacheLink)
-        .each(function () {
-          Drupal.CTools.AJAX.warmCache.apply(this);
-        });
+       $('a.ctools-use-modal-cache', context).once('ctools-use-modal', function() {
+         $(this).click(Drupal.CTools.Modal.clickAjaxCacheLink);
+         Drupal.CTools.AJAX.warmCache.apply(this);
+       });
         */
 
-      $('area.ctools-use-modal:not(.ctools-use-modal-processed), a.ctools-use-modal:not(.ctools-use-modal-processed)', context)
-        .addClass('ctools-use-modal-processed')
-        .click(Drupal.CTools.Modal.clickAjaxLink)
-        .each(function () {
-          // Create a drupal ajax object
-          var element_settings = {};
-          if ($(this).attr('href')) {
-            element_settings.url = $(this).attr('href');
-            element_settings.event = 'click';
-            element_settings.progress = { type: 'throbber' };
-          }
-          var base = $(this).attr('href');
-          Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);
-
-          // Attach the display behavior to the ajax object
+      $('area.ctools-use-modal, a.ctools-use-modal', context).once('ctools-use-modal', function() {
+        var $this = $(this);
+        $this.click(Drupal.CTools.Modal.clickAjaxLink);
+        // Create a drupal ajax object
+        var element_settings = {};
+        if ($this.attr('href')) {
+          element_settings.url = $this.attr('href');
+          element_settings.event = 'click';
+          element_settings.progress = { type: 'throbber' };
         }
-      );
+        var base = $this.attr('href');
+        Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);
+      });
 
       // Bind buttons
-      $('input.ctools-use-modal:not(.ctools-use-modal-processed), button.ctools-use-modal:not(.ctools-use-modal-processed)', context)
-        .addClass('ctools-use-modal-processed')
-        .click(Drupal.CTools.Modal.clickAjaxLink)
-        .each(function() {
-          var button = this;
-          var element_settings = {};
-
-          // AJAX submits specified in this manner automatically submit to the
-          // normal form action.
-          element_settings.url = Drupal.CTools.Modal.findURL(this);
-          element_settings.event = 'click';
-
-          var base = $(this).attr('id');
-          Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);
-
-          // Make sure changes to settings are reflected in the URL.
-          $('.' + $(button).attr('id') + '-url').change(function() {
-            Drupal.ajax[base].options.url = Drupal.CTools.Modal.findURL(button);
-          });
+      $('input.ctools-use-modal, button.ctools-use-modal', context).once('ctools-use-modal', function() {
+        var $this = $(this);
+        $this.click(Drupal.CTools.Modal.clickAjaxLink);
+        var button = this;
+        var element_settings = {};
+
+        // AJAX submits specified in this manner automatically submit to the
+        // normal form action.
+        element_settings.url = Drupal.CTools.Modal.findURL(this);
+        element_settings.event = 'click';
+
+        var base = $this.attr('id');
+        Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);
+
+        // Make sure changes to settings are reflected in the URL.
+        $('.' + $(button).attr('id') + '-url').change(function() {
+          Drupal.ajax[base].options.url = Drupal.CTools.Modal.findURL(button);
         });
+      });
 
       // Bind our custom event to the form submit
-      $('#modal-content form:not(.ctools-use-modal-processed)', context)
-        .addClass('ctools-use-modal-processed')
-        .each(function() {
-          var element_settings = {};
-
-          element_settings.url = $(this).attr('action');
-          element_settings.event = 'submit';
-          element_settings.progress = { 'type': 'throbber' }
-          var base = $(this).attr('id');
-
-          Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);
-          Drupal.ajax[base].form = $(this);
-
-          $('input[type=submit], button', this).click(function() {
-            Drupal.ajax[base].element = this;
-            this.form.clk = this;
-          });
-
+      $('#modal-content form', context).once('ctools-use-modal', function() {
+        var $this = $(this);
+        var element_settings = {};
+
+        element_settings.url = $this.attr('action');
+        element_settings.event = 'submit';
+        element_settings.progress = { 'type': 'throbber' }
+        var base = $this.attr('id');
+
+        Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);
+        Drupal.ajax[base].form = $this;
+
+        $('input[type=submit], button', this).click(function(event) {
+          Drupal.ajax[base].element = this;
+          this.form.clk = this;
+          // An empty event means we were triggered via .click() and
+          // in jquery 1.4 this won't trigger a submit.
+          if (event.bubbles == undefined) {
+            $(this.form).trigger('submit');
+            return false;
+          }
         });
+      });
 
       // Bind a click handler to allow elements with the 'ctools-close-modal'
       // class to close the modal.
-      $('.ctools-close-modal', context).once('ctools-close-modal-processed', function () {
-        $(this).click(function() {
+      $('.ctools-close-modal', context).once('ctools-close-modal')
+        .click(function() {
           Drupal.CTools.Modal.dismiss();
           return false;
         });
-      });
     }
   };
 
@@ -318,10 +314,11 @@
     var url_class = '.' + $(item).attr('id') + '-url';
     $(url_class).each(
       function() {
-        if (url && $(this).val()) {
+        var $this = $(this);
+        if (url && $this.val()) {
           url += '/';
         }
-        url += $(this).val();
+        url += $this.val();
       });
     return url;
   };
@@ -508,12 +505,23 @@
     // jQuery magic loop through the instances and run the animations or removal.
     content.each(function(){
       if ( animation == 'fade' ) {
-        $('#modalContent').fadeOut(speed,function(){$('#modalBackdrop').fadeOut(speed, function(){$(this).remove();});$(this).remove();});
+        $('#modalContent').fadeOut(speed, function() {
+          $('#modalBackdrop').fadeOut(speed, function() {
+            $(this).remove();
+          });
+          $(this).remove();
+        });
       } else {
         if ( animation == 'slide' ) {
-          $('#modalContent').slideUp(speed,function(){$('#modalBackdrop').slideUp(speed, function(){$(this).remove();});$(this).remove();});
+          $('#modalContent').slideUp(speed,function() {
+            $('#modalBackdrop').slideUp(speed, function() {
+              $(this).remove();
+            });
+            $(this).remove();
+          });
         } else {
-          $('#modalContent').remove();$('#modalBackdrop').remove();
+          $('#modalContent').remove();
+          $('#modalBackdrop').remove();
         }
       }
     });
diff --git a/profiles/acquia/modules/ctools/js/stylizer.js b/profiles/acquia/modules/ctools/js/stylizer.js
index dc1caaa..16d6c49 100644
--- a/profiles/acquia/modules/ctools/js/stylizer.js
+++ b/profiles/acquia/modules/ctools/js/stylizer.js
@@ -183,11 +183,12 @@
       };
 
       // Add hook
+      var $this = $(this);
       var hook = $('<div class="hook"></div>');
-      $(this).after(hook);
+      $this.after(hook);
       hooks.push(hook);
 
-      $(this).parent().find('.lock').click();
+      $this.parent().find('.lock').click();
       this.i = i;
       inputs.push(this);
     })
diff --git a/profiles/acquia/modules/ctools/page_manager/page_manager.admin.inc b/profiles/acquia/modules/ctools/page_manager/page_manager.admin.inc
index 22ecd63..c01961b 100644
--- a/profiles/acquia/modules/ctools/page_manager/page_manager.admin.inc
+++ b/profiles/acquia/modules/ctools/page_manager/page_manager.admin.inc
@@ -27,7 +27,11 @@ function page_manager_list_page($js = NULL) {
   }
 
   if (module_exists('advanced_help') && !$js) {
-    drupal_set_message(theme('advanced_help_topic', 'page_manager', 'getting-started', t('See the getting started guide for more information.')));
+    drupal_set_message(theme('advanced_help_topic', array(
+      'module' => 'page_manager',
+      'topic' => 'getting-started',
+      'type' => t('See the getting started guide for more information.'),
+    )));
   }
 
   $tasks = page_manager_get_tasks_by_type('page');
@@ -1208,7 +1212,10 @@ function page_manager_render_operations(&$page, $operations, $active_trail, $att
   }
 
   if ($output[$location]) {
-    $output[$location] = '<ul class="page-manager-operations ' . $attributes['class'] . '">' . $output[$location] . '</ul>';
+    $classes = isset($attributes['class']) && is_array($attributes['class']) ? $attributes['class'] : array();
+    $classes[] = 'page-manager-operations';
+
+    $output[$location] = '<ul class="' . implode(' ', $classes) . '">' . $output[$location] . '</ul>';
 
     if (!empty($attributes['title'])) {
       $class = '';
diff --git a/profiles/acquia/modules/ctools/page_manager/page_manager.info b/profiles/acquia/modules/ctools/page_manager/page_manager.info
index e0f8be8..57a6f15 100644
--- a/profiles/acquia/modules/ctools/page_manager/page_manager.info
+++ b/profiles/acquia/modules/ctools/page_manager/page_manager.info
@@ -4,11 +4,11 @@ core = 7.x
 dependencies[] = ctools
 package = Chaos tool suite
 
-; Information added by drupal.org packaging script on 2012-03-28
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
 core = "7.x"
 project = "ctools"
-datestamp = "1332962446"
+datestamp = "1344463011"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/ctools/page_manager/page_manager.module b/profiles/acquia/modules/ctools/page_manager/page_manager.module
index 790c64e..6d6c199 100644
--- a/profiles/acquia/modules/ctools/page_manager/page_manager.module
+++ b/profiles/acquia/modules/ctools/page_manager/page_manager.module
@@ -140,7 +140,6 @@ function page_manager_menu() {
 
   // Provide menu items for each task.
   foreach ($tasks as $task_id => $task) {
-    $handlers = page_manager_get_task_handler_plugins($task);
     // Allow the task to add its own menu items.
     if ($function = ctools_plugin_get_function($task, 'hook menu')) {
       $function($items, $task);
diff --git a/profiles/acquia/modules/ctools/page_manager/plugins/tasks/page.admin.inc b/profiles/acquia/modules/ctools/page_manager/plugins/tasks/page.admin.inc
index 4e6e749..69ac02d 100644
--- a/profiles/acquia/modules/ctools/page_manager/plugins/tasks/page.admin.inc
+++ b/profiles/acquia/modules/ctools/page_manager/plugins/tasks/page.admin.inc
@@ -1056,7 +1056,6 @@ function page_manager_page_subtask_argument_ajax($step = NULL, $task_name = NULL
 
     $clone_state = $form_state;
     $clone_state['allow temp'] = TRUE;
-    page_manager_page_form_argument($form, $clone_state);
     $form = drupal_build_form('page_manager_page_form_argument', $form_state);
 
     // Render just the table portion.
diff --git a/profiles/acquia/modules/ctools/plugins/content_types/entity_context/entity_field.inc b/profiles/acquia/modules/ctools/plugins/content_types/entity_context/entity_field.inc
index acc5684..fb3fad2 100644
--- a/profiles/acquia/modules/ctools/plugins/content_types/entity_context/entity_field.inc
+++ b/profiles/acquia/modules/ctools/plugins/content_types/entity_context/entity_field.inc
@@ -154,6 +154,10 @@ function ctools_entity_field_content_type_render($subtype, $conf, $panel_args, $
   $clone->{$field_name}[$language] = $all_values;
   $field_output = field_view_field($entity_type, $clone, $field_name, $field_settings, $language);
 
+  if (!empty($conf['override_title'])) {
+    $field_output['#title'] = filter_xss_admin($conf['override_title_text']);
+  }
+
   // Build the content type block.
   $block = new stdClass();
   $block->module  = 'entity_field';
@@ -219,9 +223,10 @@ function ctools_entity_field_content_type_formatter_styles($form, &$form_state)
   $subtype = $form_state['subtype_name'];
   list($entity_type, $field_name) = explode(':', $subtype, 2);
   $field = field_info_field($field_name);
-  module_load_include('inc', 'field_ui', 'field_ui.admin');
 
-  ctools_include('fields');
+  ctools_form_include($form_state, 'field_ui.admin', 'field_ui', '');
+  ctools_form_include($form_state, 'fields');
+
   $form['ctools_field_list'] = array(
     '#type' => 'value',
     '#value' => array(),
diff --git a/profiles/acquia/modules/ctools/plugins/content_types/form/entity_form_field.inc b/profiles/acquia/modules/ctools/plugins/content_types/form/entity_form_field.inc
index 1caec71..0183fc6 100644
--- a/profiles/acquia/modules/ctools/plugins/content_types/form/entity_form_field.inc
+++ b/profiles/acquia/modules/ctools/plugins/content_types/form/entity_form_field.inc
@@ -84,8 +84,10 @@ function ctools_entity_form_field_content_type_render($subtype, $conf, $panel_ar
   if (empty($field)) {
     return;
   }
+  $block = new stdClass();
 
   if (isset($context->form)) {
+    $block->content = array();
     $block->content[$field_name] = $context->form[$field_name];
     unset($context->form[$field_name]);
   }
diff --git a/profiles/acquia/modules/ctools/plugins/content_types/term_context/term_description.inc b/profiles/acquia/modules/ctools/plugins/content_types/term_context/term_description.inc
index dc1d26f..35988e6 100644
--- a/profiles/acquia/modules/ctools/plugins/content_types/term_context/term_description.inc
+++ b/profiles/acquia/modules/ctools/plugins/content_types/term_context/term_description.inc
@@ -27,7 +27,7 @@ function ctools_term_description_content_type_render($subtype, $conf, $panel_arg
       $block->admin_links['update'] = array(
         'title' => t('Edit term'),
         'alt' => t("Edit this term"),
-        'href' => "admin/content/taxonomy/edit/term/$term->tid",
+        'href' => "taxonomy/term/$term->tid/edit",
         'query' => drupal_get_destination(),
       );
     }
diff --git a/profiles/acquia/modules/ctools/plugins/content_types/term_context/term_list.inc b/profiles/acquia/modules/ctools/plugins/content_types/term_context/term_list.inc
index c5ea4a6..4585611 100644
--- a/profiles/acquia/modules/ctools/plugins/content_types/term_context/term_list.inc
+++ b/profiles/acquia/modules/ctools/plugins/content_types/term_context/term_list.inc
@@ -77,7 +77,9 @@ function ctools_term_list_content_type_render($subtype, $conf, $panel_args, $con
         }
       }
 
-      $block->content = theme('item_list', array('items' => $items, 'type' => $conf['list_type']));
+      if (!empty($items)) {
+        $block->content = theme('item_list', array('items' => $items, 'type' => $conf['list_type']));
+      }
     }
   }
   else {
diff --git a/profiles/acquia/modules/ctools/plugins/contexts/entity.inc b/profiles/acquia/modules/ctools/plugins/contexts/entity.inc
index 4cccdf6..b214aa0 100644
--- a/profiles/acquia/modules/ctools/plugins/contexts/entity.inc
+++ b/profiles/acquia/modules/ctools/plugins/contexts/entity.inc
@@ -247,7 +247,7 @@ function ctools_context_entity_convert_list($plugin) {
 /**
  * Convert a context into a string.
  */
-function ctools_context_entity_convert($context, $type) {
+function ctools_context_entity_convert($context, $type, $options = array()) {
   $entity_type = $context->type[2];
   $entity = entity_get_info($entity_type);
 
@@ -266,7 +266,7 @@ function ctools_context_entity_convert($context, $type) {
 
   $tokens = token_info();
 
-  $values = token_generate($token, array($type => $type), array($token => $context->data));
+  $values = token_generate($token, array($type => $type), array($token => $context->data), $options);
   if (isset($values[$type])) {
     return $values[$type];
   }
diff --git a/profiles/acquia/modules/ctools/plugins/export_ui/ctools_export_ui.class.php b/profiles/acquia/modules/ctools/plugins/export_ui/ctools_export_ui.class.php
index d326dd9..4b44c4a 100644
--- a/profiles/acquia/modules/ctools/plugins/export_ui/ctools_export_ui.class.php
+++ b/profiles/acquia/modules/ctools/plugins/export_ui/ctools_export_ui.class.php
@@ -339,7 +339,6 @@ class ctools_export_ui {
   function list_form_submit(&$form, &$form_state) {
     // Filter and re-sort the pages.
     $plugin = $this->plugin;
-    $schema = ctools_export_get_schema($this->plugin['schema']);
 
     $prefix = ctools_export_ui_plugin_base_path($plugin);
 
@@ -350,44 +349,7 @@ class ctools_export_ui {
         continue;
       }
 
-      // Note: Creating this list seems a little clumsy, but can't think of
-      // better ways to do this.
-      $allowed_operations = drupal_map_assoc(array_keys($plugin['allowed operations']));
-      $not_allowed_operations = array('import');
-
-      if ($item->{$schema['export']['export type string']} == t('Normal')) {
-        $not_allowed_operations[] = 'revert';
-      }
-      elseif ($item->{$schema['export']['export type string']} == t('Overridden')) {
-        $not_allowed_operations[] = 'delete';
-      }
-      else {
-        $not_allowed_operations[] = 'revert';
-        $not_allowed_operations[] = 'delete';
-      }
-
-      $not_allowed_operations[] = empty($item->disabled) ? 'enable' : 'disable';
-
-      foreach ($not_allowed_operations as $op) {
-        // Remove the operations that are not allowed for the specific
-        // exportable.
-        unset($allowed_operations[$op]);
-      }
-
-      $operations = array();
-
-      foreach ($allowed_operations as $op) {
-        $operations[$op] = array(
-          'title' => $plugin['allowed operations'][$op]['title'],
-          'href' => ctools_export_ui_plugin_menu_path($plugin, $op, $name),
-        );
-        if (!empty($plugin['allowed operations'][$op]['ajax'])) {
-          $operations[$op]['attributes'] = array('class' => array('use-ajax'));
-        }
-        if (!empty($plugin['allowed operations'][$op]['token'])) {
-          $operations[$op]['query'] = array('token' => drupal_get_token($op));
-        }
-      }
+      $operations = $this->build_operations($item);
 
       $this->list_build_row($item, $form_state, $operations);
     }
@@ -501,6 +463,52 @@ class ctools_export_ui {
   }
 
   /**
+   * Builds the operation links for a specific exportable item.
+   */
+  function build_operations($item) {
+    $plugin = $this->plugin;
+    $schema = ctools_export_get_schema($plugin['schema']);
+    $operations = $plugin['allowed operations'];
+    $operations['import'] = FALSE;
+
+    if ($item->{$schema['export']['export type string']} == t('Normal')) {
+      $operations['revert'] = FALSE;
+    }
+    elseif ($item->{$schema['export']['export type string']} == t('Overridden')) {
+      $operations['delete'] = FALSE;
+    }
+    else {
+      $operations['revert'] = FALSE;
+      $operations['delete'] = FALSE;
+    }
+    if (empty($item->disabled)) {
+      $operations['enable'] = FALSE;
+    }
+    else {
+      $operations['disable'] = FALSE;
+    }
+
+    $allowed_operations = array();
+
+    foreach ($operations as $op => $info) {
+      if (!empty($info)) {
+        $allowed_operations[$op] = array(
+          'title' => $info['title'],
+          'href' => ctools_export_ui_plugin_menu_path($plugin, $op, $item->{$this->plugin['export']['key']}),
+        );
+        if (!empty($info['ajax'])) {
+          $allowed_operations[$op]['attributes'] = array('class' => array('use-ajax'));
+        }
+        if (!empty($info['token'])) {
+          $allowed_operations[$op]['query'] = array('token' => drupal_get_token($op));
+        }
+      }
+    }
+
+    return $allowed_operations;
+  }
+
+  /**
    * Build a row based on the item.
    *
    * By default all of the rows are placed into a table by the render
@@ -1187,17 +1195,26 @@ class ctools_export_ui {
 
     $output = drupal_build_form('ctools_export_ui_delete_confirm_form', $form_state);
     if (!empty($form_state['executed'])) {
-      ctools_export_crud_delete($this->plugin['schema'], $item);
-      $export_key = $this->plugin['export']['key'];
-      $message = str_replace('%title', check_plain($item->{$export_key}), $this->plugin['strings']['confirmation'][$form_state['op']]['success']);
-      drupal_set_message($message);
-      drupal_goto(ctools_export_ui_plugin_base_path($this->plugin));
+      $this->delete_form_submit($form_state);
+      $this->redirect($form_state['op'], $item);
     }
 
     return $output;
   }
 
   /**
+   * Deletes exportable items from the database.
+   */
+  function delete_form_submit(&$form_state) {
+    $item = $form_state['item'];
+
+    ctools_export_crud_delete($this->plugin['schema'], $item);
+    $export_key = $this->plugin['export']['key'];
+    $message = str_replace('%title', check_plain($item->{$export_key}), $this->plugin['strings']['confirmation'][$form_state['op']]['success']);
+    drupal_set_message($message);
+  }
+
+  /**
    * Page callback to display export information for an exportable item.
    */
   function export_page($js, $input, $item) {
diff --git a/profiles/acquia/modules/ctools/stylizer/stylizer.info b/profiles/acquia/modules/ctools/stylizer/stylizer.info
index 8ad6830..ebe1404 100644
--- a/profiles/acquia/modules/ctools/stylizer/stylizer.info
+++ b/profiles/acquia/modules/ctools/stylizer/stylizer.info
@@ -5,11 +5,11 @@ package = Chaos tool suite
 dependencies[] = ctools
 dependencies[] = color
 
-; Information added by drupal.org packaging script on 2012-03-28
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
 core = "7.x"
 project = "ctools"
-datestamp = "1332962446"
+datestamp = "1344463011"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/ctools/tests/ctools.drush.sh b/profiles/acquia/modules/ctools/tests/ctools.drush.sh
index 1a02cd6..31bdee3 100755
--- a/profiles/acquia/modules/ctools/tests/ctools.drush.sh
+++ b/profiles/acquia/modules/ctools/tests/ctools.drush.sh
@@ -15,8 +15,8 @@ MODULE_NAME="ctools_drush_test"
 
 stamp
 
-echo 'Enabling views module.'
-drush en views ctools --yes
+echo 'Enabling ctools, views, and bulk_export modules.'
+drush en ctools views bulk_export --yes
 
 stamp
 echo 'Reading all export info'
@@ -36,13 +36,25 @@ drush ctools-export-info --tables-only --format=json
 
 stamp
 echo 'Reading all disabled exportables'
-drush ctools-export-info --disabled
+drush ctools-export-info --filter=disabled
 
 stamp
 echo 'Enabling all default views'
 drush ctools-export-enable views_view --yes
 
 stamp
+echo 'Reading all enabled exportables'
+drush ctools-export-info --filter=enabled
+
+stamp
+echo 'Reading all overridden exportables'
+drush ctools-export-info --filter=overridden
+
+stamp
+echo 'Reading all database only exportables'
+drush ctools-export-info --filter=database
+
+stamp
 echo 'View all default views export data'
 drush ctools-export-view views_view --yes
 
@@ -71,6 +83,30 @@ echo 'Revert all default views'
 drush ctools-export-revert views_view --yes
 
 stamp
+echo 'Enable all node views'
+drush ctools-export-enable views_view --module=node --yes
+
+stamp
+echo 'Disable all node views'
+drush ctools-export-disable views_view --module=node --yes
+
+stamp
+echo 'Revert all node views'
+drush ctools-export-revert views_view --module=node --yes
+
+stamp
+echo 'Revert all exportables'
+drush ctools-export-revert --all --yes
+
+stamp
+echo 'Enable all exportables'
+drush ctools-export-enable --all --yes
+
+stamp
+echo 'Disable all exportables'
+drush ctools-export-disable --all --yes
+
+stamp
 echo 'Bulk export all objects'
 drush ctools-export $MODULE_NAME --subdir='tests' --choice=1
 
diff --git a/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export.test b/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export.test
new file mode 100644
index 0000000..1accfd7
--- /dev/null
+++ b/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export.test
@@ -0,0 +1,215 @@
+<?php
+
+/**
+ * @file
+ * Tests for the CTools export system.
+ */
+
+/**
+ * Tests export CRUD.
+ */
+class CtoolsExportCrudTestCase extends DrupalWebTestCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => 'CTools export CRUD tests',
+      'description' => 'Test the CRUD functionality for the ctools export system.',
+      'group' => 'Chaos Tools Suite',
+    );
+  }
+
+  protected function setUp() {
+    parent::setUp('ctools_export_test');
+    $this->resetAll();
+  }
+
+  /**
+   * Tests CRUD operation: Load.
+   */
+  function testCrudExportLoad() {
+    $loaded_export = ctools_export_crud_load('ctools_export_test', 'database_test');
+
+    $expected_export = new stdClass();
+    $expected_export->machine = 'database_test';
+    $expected_export->title = 'Database test';
+    $expected_export->number = 0;
+    $expected_export->data = array(
+      'test_1' => 'Test 1',
+      'test_2' => 'Test 2',
+    );
+    $expected_export->table = 'ctools_export_test';
+    $expected_export->export_type = EXPORT_IN_DATABASE;
+    $expected_export->type = 'Normal';
+
+    $this->assertEqual($expected_export, $loaded_export, 'An exportable object has been loaded correctly from the database.');
+  }
+
+  /**
+   * Tests CRUD operation: Load multiple.
+   */
+  function testCrudExportLoadMultiple() {
+    $exportable_names = array('database_test', 'overridden_test', 'default_test');
+    $loaded_exports = ctools_export_crud_load_multiple('ctools_export_test', $exportable_names);
+
+    $this->assertEqual(count($loaded_exports), 3, 'All exportables have been loaded.');
+  }
+
+  /**
+   * Tests CRUD operation: Load all.
+   */
+  function testCrudExportLoadAll() {
+    $loaded_exports = ctools_export_crud_load_all('ctools_export_test');
+
+    $this->assertEqual(count($loaded_exports), 3, 'All exportables have been loaded.');
+  }
+
+  /**
+   * Tests CRUD operation: Save.
+   */
+  function testCrudExportSave() {
+    $default_export = ctools_export_crud_load('ctools_export_test', 'default_test');
+
+    $this->assertTrue($default_export->in_code_only,'The loaded exportable is in code only.');
+
+    ctools_export_crud_save('ctools_export_test', $default_export);
+
+    // Clear the static cache.
+    ctools_export_load_object_reset('ctools_export_test');
+
+    $overridden_export = ctools_export_crud_load('ctools_export_test', 'default_test');
+
+    $this->assertTrue($overridden_export->export_type === 3, 'The loaded exportable is overridden in the database.');
+  }
+
+  /**
+   * Tests CRUD operation: New.
+   */
+  function testCrudExportNew() {
+    // Default exportable with defualt values.
+    $new_export = ctools_export_crud_new('ctools_export_test');
+
+    $expected_export = new stdClass();
+    $expected_export->machine = '';
+    $expected_export->title = '';
+    $expected_export->number = 0;
+    $expected_export->data = NULL;
+    $expected_export->export_type = NULL;
+    $expected_export->type = 'Local';
+
+    $this->assertEqual($expected_export, $new_export, 'An exportable with default values is created.');
+
+    // Default exportable without default values.
+    $new_export = ctools_export_crud_new('ctools_export_test', FALSE);
+
+    $expected_export = new stdClass();
+    $expected_export->machine = '';
+    $expected_export->title = '';
+    $expected_export->number = NULL;
+    $expected_export->data = NULL;
+
+    $this->assertEqual($expected_export, $new_export, 'An exportable without default values has been created.');
+  }
+
+  /**
+   * Tests CRUD operation: Revert.
+   */
+  function testCrudExportRevert() {
+    // Load exportable, will come from database.
+    $original_export = ctools_export_crud_load('ctools_export_test', 'overridden_test');
+
+    $this->assertTrue($original_export->export_type === 3, 'Loaded export is overridden.');
+
+    $machine = $original_export->machine;
+    ctools_export_crud_delete('ctools_export_test', $original_export);
+
+    $result = db_query("SELECT machine FROM {ctools_export_test} WHERE machine = :machine", array(':machine' => $machine))->fetchField();
+
+    $this->assertFalse($result, 'The exportable object has been removed from the database.');
+
+    // Clear the static cache.
+    ctools_export_load_object_reset('ctools_export_test');
+
+    // Reload the same object.
+    $default_export = ctools_export_crud_load('ctools_export_test', 'overridden_test');
+
+    // Check the exportable is now in_code_only.
+    $this->assertTrue($default_export->in_code_only, 'The loaded exportable is in the database only.');
+
+    // Make sure the default object loaded matches the same overridden one in the database.
+    $this->assertEqual($original_export->machine, $default_export->machine, 'The default exportable has been loaded and matches the overridden exportable.');
+  }
+
+  /**
+   * Tests CRUD operation: Delete.
+   */
+  function testCrudExportDelete() {
+    // Create a stub entry save it and delete it from the database.
+    $new_export = ctools_export_crud_new('ctools_export_test');
+    ctools_export_crud_save('ctools_export_test', $new_export);
+
+    $machine = $new_export->machine;
+    ctools_export_crud_delete('ctools_export_test', $new_export);
+    $result = ctools_export_crud_load('ctools_export_test', $machine);
+
+    $this->assertFalse($result, 'The new exportable has been removed from the database.');
+
+    // Load the database only exportable.
+    $database_export = ctools_export_crud_load('ctools_export_test', 'database_test');
+
+    $machine = $database_export->machine;
+    ctools_export_crud_delete('ctools_export_test', $database_export);
+    // Clear the exportable caches as it's been loaded above.
+    ctools_export_load_object_reset('ctools_export_test');
+    $result = ctools_export_crud_load('ctools_export_test', $machine);
+
+    $this->assertFalse($result, 'The database exportable has been removed from the database.');
+  }
+
+  /**
+   * Tests CRUD operation: Set status.
+   */
+  function testCrudExportSetStatus() {
+    // Database only object.
+    $database_export = ctools_export_crud_load('ctools_export_test', 'database_test');
+    ctools_export_crud_disable('ctools_export_test', $database_export);
+    ctools_export_load_object_reset('ctools_export_test');
+    $disabled_export = ctools_export_crud_load('ctools_export_test', 'database_test');
+
+    $this->assertTrue($disabled_export->disabled, 'The database only exportable has been disabled.');
+
+    ctools_export_crud_enable('ctools_export_test', $disabled_export);
+    ctools_export_load_object_reset('ctools_export_test');
+    $enabled_export = ctools_export_crud_load('ctools_export_test', 'database_test');
+
+    $this->assertTrue(empty($enabled_export->disabled), 'The database only exportable has been enabled.');
+
+    // Overridden object.
+    $overridden_export = ctools_export_crud_load('ctools_export_test', 'overridden_test');
+    ctools_export_crud_disable('ctools_export_test', $overridden_export);
+    ctools_export_load_object_reset('ctools_export_test');
+    $disabled_export = ctools_export_crud_load('ctools_export_test', 'overridden_test');
+
+    $this->assertTrue($disabled_export->disabled, 'The overridden exportable has been disabled.');
+
+    ctools_export_crud_enable('ctools_export_test', $disabled_export);
+    ctools_export_load_object_reset('ctools_export_test');
+    $enabled_export = ctools_export_crud_load('ctools_export_test', 'overridden_test');
+
+    $this->assertTrue(empty($enabled_export->disabled), 'The overridden exportable has been enabled.');
+
+    // Default object.
+    $default_export = ctools_export_crud_load('ctools_export_test', 'default_test');
+    ctools_export_crud_disable('ctools_export_test', $default_export);
+    ctools_export_load_object_reset('ctools_export_test');
+    $disabled_export = ctools_export_crud_load('ctools_export_test', 'default_test');
+
+    $this->assertTrue($disabled_export->disabled, 'The default exportable has been disabled.');
+
+    ctools_export_crud_enable('ctools_export_test', $disabled_export);
+    ctools_export_load_object_reset('ctools_export_test');
+    $enabled_export = ctools_export_crud_load('ctools_export_test', 'default_test');
+
+    $this->assertTrue(empty($enabled_export->disabled), 'The default exportable has been enabled.');
+  }
+
+}
diff --git a/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.default_ctools_export_tests.inc b/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.default_ctools_export_tests.inc
new file mode 100644
index 0000000..9f2dd6c
--- /dev/null
+++ b/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.default_ctools_export_tests.inc
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * Implements hook_default_export_tests().
+ */
+function ctools_export_test_default_ctools_export_tests() {
+  $ctools_export_tests = array();
+
+  $ctools_export_test = new stdClass();
+  $ctools_export_test->disabled = FALSE; /* Edit this to true to make a default export_test disabled initially */
+  $ctools_export_test->api_version = 1;
+  $ctools_export_test->machine = 'overridden_test';
+  $ctools_export_test->title = 'Overridden test';
+  $ctools_export_test->number = 1;
+  $ctools_export_test->data = array(
+    'test_1' => 'Test 1',
+    'test_2' => 'Test 2',
+  );
+  $ctools_export_tests['overridden_test'] = $ctools_export_test;
+
+  $ctools_export_test = new stdClass();
+  $ctools_export_test->disabled = FALSE; /* Edit this to true to make a default export_test disabled initially */
+  $ctools_export_test->api_version = 1;
+  $ctools_export_test->machine = 'default_test';
+  $ctools_export_test->title = 'Default test';
+  $ctools_export_test->number = 2;
+  $ctools_export_test->data = '';
+  $ctools_export_tests['default_test'] = $ctools_export_test;
+
+  return $ctools_export_tests;
+}
diff --git a/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.info b/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.info
new file mode 100644
index 0000000..28e0d59
--- /dev/null
+++ b/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.info
@@ -0,0 +1,19 @@
+name = CTools export test
+description = CTools export test module
+core = 7.x
+package = Chaos tool suite
+dependencies[] = ctools
+hidden = TRUE
+
+files[] = ctools_export.test
+
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
+core = "7.x"
+project = "ctools"
+datestamp = "1344463011"
+
+
+; Information added by Acquia.com packaging script
+acquia = "1"
+
diff --git a/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.install b/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.install
new file mode 100644
index 0000000..2eb54ca
--- /dev/null
+++ b/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.install
@@ -0,0 +1,86 @@
+<?php
+
+/**
+ * Implements hook_schema();
+ */
+function ctools_export_test_schema() {
+  $schema['ctools_export_test'] = array(
+   'description' => 'CTools export test data table',
+   'export' => array(
+      'key' => 'machine',
+      'identifier' => 'ctools_export_test',
+      'default hook' => 'default_ctools_export_tests',
+      'bulk export' => TRUE,
+      'api' => array(
+        'owner' => 'ctools_export_test',
+        'api' => 'default_ctools_export_tests',
+        'minimum_version' => 1,
+        'current_version' => 1,
+      ),
+    ),
+    'fields' => array(
+      'machine' => array(
+        'description' => "The unique machine name (required by ctools).",
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'title' => array(
+        'description' => "The human readable title.",
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'number' => array(
+        'description' => "A number.",
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'data' => array(
+        'type' => 'blob',
+        'description' => "A serialized array of data.",
+        'serialize' => TRUE,
+        'serialized default' => 'a:0:{}',
+      ),
+    ),
+    'primary key' => array('machine'),
+  );
+
+  return $schema;
+}
+
+/**
+ * Implments hook_install();
+ */
+function ctools_export_test_install() {
+  $ctools_export_tests = array();
+  // Put this default in the database only (no default).
+  $ctools_export_test = new stdClass();
+  $ctools_export_test->machine = 'database_test';
+  $ctools_export_test->title = 'Database test';
+  $ctools_export_test->number = 0;
+  $ctools_export_test->data = array(
+    'test_1' => 'Test 1',
+    'test_2' => 'Test 2',
+  );
+  $ctools_export_tests['database_test'] = $ctools_export_test;
+
+  // Put this default in the database, so we have this in code and in the database.
+  $ctools_export_test = new stdClass();
+  $ctools_export_test->machine = 'overridden_test';
+  $ctools_export_test->title = 'Overridden test';
+  $ctools_export_test->number = 1;
+  $ctools_export_test->data = array(
+    'test_1' => 'Test 1',
+    'test_2' => 'Test 2',
+  );
+  $ctools_export_tests['overridden_test'] = $ctools_export_test;
+
+  foreach ($ctools_export_tests as $ctools_export_test) {
+    // Save the record to the database.
+    drupal_write_record('ctools_export_test', $ctools_export_test);
+  }
+}
diff --git a/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.module b/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.module
new file mode 100644
index 0000000..80f1adb
--- /dev/null
+++ b/profiles/acquia/modules/ctools/tests/ctools_export_test/ctools_export_test.module
@@ -0,0 +1,10 @@
+<?php
+
+/**
+ * Implements hook_ctools_plugin_api().
+ */
+function ctools_export_test_ctools_plugin_api($module, $api) {
+  if ($module == 'ctools_export_test' && $api == 'default_ctools_export_tests') {
+    return array('version' => 1);
+  }
+}
diff --git a/profiles/acquia/modules/ctools/tests/ctools_plugin_test.info b/profiles/acquia/modules/ctools/tests/ctools_plugin_test.info
index 8ab4c58..4548d06 100644
--- a/profiles/acquia/modules/ctools/tests/ctools_plugin_test.info
+++ b/profiles/acquia/modules/ctools/tests/ctools_plugin_test.info
@@ -5,13 +5,14 @@ core = 7.x
 dependencies[] = ctools
 files[] = ctools.plugins.test
 files[] = object_cache.test
+files[] = css.test
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-03-28
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
 core = "7.x"
 project = "ctools"
-datestamp = "1332962446"
+datestamp = "1344463011"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/ctools/views_content/plugins/content_types/views.inc b/profiles/acquia/modules/ctools/views_content/plugins/content_types/views.inc
index 04b6869..deea741 100644
--- a/profiles/acquia/modules/ctools/views_content/plugins/content_types/views.inc
+++ b/profiles/acquia/modules/ctools/views_content/plugins/content_types/views.inc
@@ -147,6 +147,10 @@ function views_content_views_content_type_render($subtype, $conf, $panel_args, $
         $arg = ctools_context_convert_context($contexts[$cid], $converter);
         array_splice($args, $count, 0, array($arg));
       }
+      else {
+        // Make sure we put an argument in even if it was not there.
+        $arg = NULL;
+      }
     }
   }
 
diff --git a/profiles/acquia/modules/ctools/views_content/plugins/content_types/views_panes.inc b/profiles/acquia/modules/ctools/views_content/plugins/content_types/views_panes.inc
index 181f02f..a27a26c 100644
--- a/profiles/acquia/modules/ctools/views_content/plugins/content_types/views_panes.inc
+++ b/profiles/acquia/modules/ctools/views_content/plugins/content_types/views_panes.inc
@@ -232,44 +232,31 @@ function views_content_views_panes_content_type_render($subtype, $conf, $panel_a
   }
 
   if ($allow['items_per_page'] && isset($conf['items_per_page'])) {
-    $view->display_handler->set_option('items_per_page', $conf['items_per_page']);
-    // And here too, which works in Views 3 where the above does not.
     $view->set_items_per_page($conf['items_per_page']);
   }
 
   if ($allow['offset']) {
-    $view->display_handler->set_option('offset', $conf['offset']);
     $view->set_offset($conf['offset']);
   }
 
   if ($allow['use_pager']) {
     // Only set use_pager if they differ, this way we can avoid overwriting the
     // pager type that Views uses.
-    // Views 3 version
-    if (method_exists($view, 'init_pager')) {
-      $pager = $view->display_handler->get_option('pager');
-      if ($conf['use_pager'] && ($pager['type'] == 'none' || $pager['type'] == 'some')) {
-        $pager['type'] = 'full';
-      }
-      elseif (!$conf['use_pager'] && $pager['type'] != 'none' && $pager['type'] != 'some') {
-        $pager['type'] = $view->get_items_per_page() || !empty($pager['options']['items_per_page']) ? 'some' : 'none';
-      }
+    $pager = $view->display_handler->get_option('pager');
+    if ($conf['use_pager'] && ($pager['type'] == 'none' || $pager['type'] == 'some')) {
+      $pager['type'] = 'full';
+    }
+    elseif (!$conf['use_pager'] && $pager['type'] != 'none' && $pager['type'] != 'some') {
+      $pager['type'] = $view->get_items_per_page() || !empty($pager['options']['items_per_page']) ? 'some' : 'none';
+    }
 
-      if ($conf['use_pager']) {
-        if (!isset($pager['options']['id']) || (isset($conf['pager_id']) && $pager['options']['id'] != $conf['pager_id'])) {
-          $pager['options']['id'] = $conf['pager_id'];
-        }
+    if ($conf['use_pager']) {
+      if (!isset($pager['options']['id']) || (isset($conf['pager_id']) && $pager['options']['id'] != $conf['pager_id'])) {
+        $pager['options']['id'] = $conf['pager_id'];
       }
-
-      $view->display_handler->set_option('pager', $pager);
     }
-    else {
-      if (!$view->display_handler->get_option('use_pager') || empty($conf['use_pager'])) {
-        $view->display_handler->set_option('use_pager', $conf['use_pager']);
-      }
 
-      $view->display_handler->set_option('pager_element', $conf['pager_id']);
-    }
+    $view->display_handler->set_option('pager', $pager);
   }
 
   if ($allow['fields_override']) {
@@ -296,7 +283,7 @@ function views_content_views_panes_content_type_render($subtype, $conf, $panel_a
 
   $block->title = $view->get_title();
 
-  if (empty($view->total_rows) || $view->total_rows <= $view->display_handler->get_option('items_per_page')) {
+  if (empty($view->total_rows) || $view->total_rows <= $view->get_items_per_page()) {
     unset($block->more);
   }
 
@@ -319,14 +306,16 @@ function views_content_views_panes_content_type_render($subtype, $conf, $panel_a
  * settings for a particular item.
  */
 function views_content_views_panes_add_defaults(&$conf, $view) {
+  $pager = $view->display_handler->get_option('pager');
+
   $conf += array(
     'link_to_view' => $view->display_handler->get_option('link_to_view'),
     'more_link' => $view->display_handler->get_option('more_link'),
     'feed_icons' => FALSE,
-    'use_pager' => $view->display_handler->get_option('use_pager'),
-    'pager_id' => $view->display_handler->get_option('element_id'),
-    'items_per_page' => $view->display_handler->get_option('items_per_page'),
-    'offset' => $view->display_handler->get_option('offset'),
+    'use_pager' => $pager['type'] != 'none' && $pager['type'] != 'some',
+    'pager_id' => isset($pager['options']['id']) ? $pager['options']['id'] : 0,
+    'items_per_page' => !empty($pager['options']['items_per_page']) ? $pager['options']['items_per_page'] : 10,
+    'offset' => !empty($pager['options']['offset']) ? $pager['options']['offset'] : 0,
     'path_override' => FALSE,
     'path' => $view->get_path(),
     'fields_override' => $view->display_handler->get_option('fields_override'),
@@ -426,13 +415,13 @@ function views_content_views_panes_content_type_edit_form($form, &$form_state) {
     $form['use_pager'] = array(
       '#type' => 'checkbox',
       '#title' => t('Use pager'),
-        '#default_value' => isset($conf['use_pager']) ? $conf['use_pager'] : $view->display_handler->get_option('use_pager'),
+        '#default_value' => $conf['use_pager'],
       '#id' => 'use-pager-checkbox',
       '#prefix' => '<div class="container-inline">',
     );
     $form['pager_id'] = array(
       '#type' => 'textfield',
-      '#default_value' => isset($conf['pager_id']) ? $conf['pager_id'] : $view->display_handler->get_option('element_id'),
+      '#default_value' => $conf['pager_id'],
       '#title' => t('Pager ID'),
       '#size' => 4,
       '#id' => 'use-pager-textfield',
@@ -443,7 +432,7 @@ function views_content_views_panes_content_type_edit_form($form, &$form_state) {
   if ($allow['items_per_page']) {
     $form['items_per_page'] = array(
       '#type' => 'textfield',
-      '#default_value' => isset($conf['items_per_page']) ? $conf['items_per_page'] : $view->display_handler->get_option('items_per_page'),
+      '#default_value' => $conf['items_per_page'],
       '#title' => t('Num items'),
       '#size' => 4,
       '#description' => t('Select the number of items to display, or 0 to display all results.'),
@@ -452,7 +441,7 @@ function views_content_views_panes_content_type_edit_form($form, &$form_state) {
   if ($allow['offset']) {
     $form['offset'] = array(
       '#type' => 'textfield',
-      '#default_value' => isset($conf['offset']) ? $conf['offset'] : $view->display_handler->get_option('offset'),
+      '#default_value' => $conf['offset'],
       '#title' => t('Offset'),
       '#size' => 4,
       '#description' => t('Enter the number of items to skip; enter 0 to skip no items.'),
@@ -537,6 +526,16 @@ function views_content_views_panes_content_type_edit_form($form, &$form_state) {
     }
   }
 
+  // The exposed sort stuff doesn't fall into $exposed_form['#info'] so we
+  // have to handle it separately.
+  if (isset($exposed_form['sort_by'])) {
+    $form['exposed']['sort_by'] = $exposed_form['sort_by'];
+  }
+
+  if (isset($exposed_form['sort_order'])) {
+    $form['exposed']['sort_order'] = $exposed_form['sort_order'];
+  }
+
   // Add the view object to the form to allow additional customization
   $form_state['view'] = $view;
 
diff --git a/profiles/acquia/modules/ctools/views_content/views_content.info b/profiles/acquia/modules/ctools/views_content/views_content.info
index 08a20dd..0894532 100644
--- a/profiles/acquia/modules/ctools/views_content/views_content.info
+++ b/profiles/acquia/modules/ctools/views_content/views_content.info
@@ -9,11 +9,11 @@ files[] = plugins/views/views_content_plugin_display_ctools_context.inc
 files[] = plugins/views/views_content_plugin_display_panel_pane.inc
 files[] = plugins/views/views_content_plugin_style_ctools_context.inc
 
-; Information added by drupal.org packaging script on 2012-03-28
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-1.1"
 core = "7.x"
 project = "ctools"
-datestamp = "1332962446"
+datestamp = "1344463011"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.block.inc b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.block.inc
index ce0ec6b..3a868c2 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.block.inc
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.block.inc
@@ -75,34 +75,15 @@ function current_search_block_info() {
 }
 
 /**
- * Implements hook_block_list_alter().
- *
- * Enforces visibility settings.
- */
-function current_search_block_list_alter(&$blocks) {
-  foreach ($blocks as $bid => $block) {
-    if ('current_search' == $block->module) {
-      if (!current_search_check_visibility($block->delta)) {
-        unset($blocks[$bid]);
-      }
-    }
-  }
-}
-
-/**
  * Returns the content for a facet based on the delta.
  */
 function current_search_block_view($delta = '') {
-  // Test block visibility if not already tested. This is necessary when using
-  // modules such as Context that do not invoke hook_block_list_alter().
-  $map = &drupal_static('current_search_delta_map');
-  if (NULL === $map && !current_search_check_visibility($delta)) {
+  // Test block visibility.
+  $searcher = current_search_get_block_searcher($delta);
+  if (!current_search_check_visibility($delta)) {
     return;
   }
 
-  // Gets searcher from delta map.
-  $searcher = $map[$delta];
-
   // Makes sure the adapter and configuration can be loaded.
   $adapter = facetapi_adapter_load($searcher);
   if ($adapter && ($config = ctools_export_crud_load('current_search', $delta))) {
@@ -172,31 +153,16 @@ function current_search_set_block_searcher($name, $searcher) {
  *   A boolean flagging whether to display this block or not.
  */
 function current_search_check_visibility($delta) {
-
-  // Caches the delta map, defaults to NULL so we can test whether this function
-  // was called in hook_block_list_alter() or not.
-  $map = &drupal_static('current_search_delta_map');
-  if (NULL === $map) {
-    $map = array();
-    $result = db_query('SELECT delta, searcher FROM {block_current_search}');
-    foreach ($result as $record) {
-      $map[$record->delta] = $record->searcher;
-    }
-  }
-
-  // Apply default if necessary.
-  if (empty($map[$delta])) {
-    $map[$delta] = current_search_get_default_searcher();
-  }
+  $searcher = current_search_get_block_searcher($delta);
 
   // Checks whether block should be displayed.
-  if (!facetapi_is_active_searcher($map[$delta])) {
+  if (!facetapi_is_active_searcher($searcher)) {
     return FALSE;
   }
-  if (!$adapter = facetapi_adapter_load($map[$delta])) {
+  if (!$adapter = facetapi_adapter_load($searcher)) {
     return FALSE;
   }
-  if (!$adapter->searchExecuted($map[$delta])) {
+  if (!$adapter->searchExecuted($searcher)) {
     return FALSE;
   }
   if (!$config = current_search_item_load($delta)) {
@@ -209,6 +175,30 @@ function current_search_check_visibility($delta) {
 }
 
 /**
+ * Gets the searcher associated with the delta.
+ *
+ * @param string $delta
+ *   The block delta.
+ *
+ * @return string
+ *   The machine name of the searcher associated with the block.
+ */
+function current_search_get_block_searcher($delta) {
+  $map = &drupal_static('current_search_delta_map');
+  if (NULL === $map) {
+    $map = array();
+    $result = db_query('SELECT delta, searcher FROM {block_current_search}');
+    foreach ($result as $record) {
+      $map[$record->delta] = $record->searcher;
+    }
+  }
+  if (!isset($map[$delta])) {
+    $map[$delta] = current_search_get_default_searcher();
+  }
+  return $map[$delta];
+}
+
+/**
  * Gets the default searcher.
  *
  * @return
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.info b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.info
index ce77764..4f6282a 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.info
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.info
@@ -7,13 +7,14 @@ files[] = plugins/current_search/item.inc
 files[] = plugins/current_search/item_active.inc
 files[] = plugins/current_search/item_group.inc
 files[] = plugins/current_search/item_text.inc
+files[] = tests/current_search.test
 configure = admin/config/search/current_search
 
-; Information added by drupal.org packaging script on 2012-02-24
-version = "7.x-1.0-rc4"
+; Information added by drupal.org packaging script on 2012-07-31
+version = "7.x-1.1"
 core = "7.x"
 project = "facetapi"
-datestamp = "1330124142"
+datestamp = "1343771560"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.install b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.install
index abeefe0..fb69f16 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.install
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.install
@@ -2,7 +2,8 @@
 
 /**
  * @file
- * Installation functions for the Current Search Blocks module.
+ * Install, update, and uninstall functions for the Current Search Blocks
+ * module.
  */
 
 /**
@@ -75,6 +76,17 @@ function current_search_schema() {
 }
 
 /**
+ * Implements hook_uninstall().
+ */
+function current_search_uninstall() {
+  // Remove Current Search blocks.
+  // @see http://drupal.org/node/1567928
+  if (db_table_exists('block')) {
+    db_delete('block')->condition('module', 'current_search')->execute();
+  }
+}
+
+/**
  * Update the structure of saved settings objects.
  */
 function current_search_update_7101() {
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.js b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.js
index cf32f3e..18baaee 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.js
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.js
@@ -1,5 +1,5 @@
 (function ($) {
-  
+
 /**
  * Provide the summary information for the block settings vertical tabs.
  */
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.module b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.module
index 183c9ad..b802dca 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.module
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.module
@@ -31,6 +31,16 @@ function current_search_menu() {
  * Implements hook_menu_alter().
  */
 function current_search_menu_alter(&$items) {
+  // Use same access callback as Facet API. We can't define access callbacks in
+  // CTools plugins, so we have to alter the menu and define them here.
+  $base_path = 'admin/config/search/current_search';
+  foreach ($items as $path => $item) {
+    if ($base_path == $path || 0 === strpos($path, "$base_path/")) {
+      $items[$path]['access callback'] = 'facetapi_access_callback';
+      $items[$path]['access arguments'] = array();
+    }
+  }
+
   // Ensures that the edit link shows up in contextual links.
   $item = &$items['admin/config/search/current_search/list/%ctools_export_ui/edit'];
   $item['title'] = 'Configure current search items';
@@ -55,6 +65,10 @@ function current_search_theme() {
       'arguments' => array('text' => NULL, 'path' => NULL, 'options' => array()),
       'file' => 'current_search.theme.inc',
     ),
+    'current_search_keys' => array(
+      'arguments' => array('keys' => NULL, 'adapter' => NULL),
+      'file' => 'current_search.theme.inc',
+    ),
     'current_search_deactivate_widget' => array(
       'file' => 'current_search.theme.inc',
     ),
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.theme.inc b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.theme.inc
index 9636494..2b309fe 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/current_search.theme.inc
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/current_search.theme.inc
@@ -118,6 +118,18 @@ function theme_current_search_link_active($variables) {
 }
 
 /**
+ * Returns HTML for a search keys facet item.
+ *
+ * @param $variables
+ *   An associative array containing the keys 'keys' and 'adapter'.
+ *
+ * @ingroup themeable
+ */
+function theme_current_search_keys($variables) {
+  return check_plain($variables['keys']);
+}
+
+/**
  * Returns HTML for the deactivation widget.
  *
  * @param $variables
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item.inc b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item.inc
index e2ed7b2..42fdbbc 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item.inc
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item.inc
@@ -2,30 +2,37 @@
 
 /**
  * @file
- * Current search plugin base class.
+ * Base current search item plugin class.
  */
 
 /**
- * Base class for current search item plugins.
+ * Abstract class extended by current search item plugins.
+ *
+ * Current search items are plugins that  contextual information about the
+ * search being executed, for example a list of active items or a message
+ * containing information about the number of results returned by the query.
  */
 abstract class CurrentSearchItem {
 
   /**
-   * The machine readable name of the current search block configuration.
+   * The machine readable name of current search block configuration.
    *
    * @var string
    */
   protected $configName;
 
   /**
-   * The machine readable name of the item this instance is associated with.
+   * The machine readable name of the current search item plugin.
    *
    * @var string
    */
   protected $name;
 
   /**
-   * An array of facet settings.
+   * An array of the current search item's settings.
+   *
+   * This is the item's settings under the "items" key of the settings property
+   * in the object returned by current_search_item_load().
    *
    * @var array
    */
@@ -42,9 +49,11 @@ abstract class CurrentSearchItem {
    * Constructs a CurrentSearchItem object.
    *
    * @param string $name
-   *   The machine readable name of the item this instance is associated with.
+   *   The machine readable name of the current search item plugin as defined in
+   *   hook_current_search_items() implementations.
    * @param stdClass $config
-   *   The full current search block configuration.
+   *   The current search block configurations as returned by
+   *   current_search_item_load().
    */
   public function __construct($name, $config = NULL) {
     $this->name = $name;
@@ -58,25 +67,38 @@ abstract class CurrentSearchItem {
   }
 
   /**
-   * Executes the abstract class behavior.
+   * Executes the plugin that returns the current search item's render array.
+   *
+   * See the documentation at http://drupal.org/node/930760 for more information
+   * on how to work with render arrays.
    *
    * @param FacetapiAdapter $adapter
    *   The adapter object of the current search.
    *
    * @return array
-   *   The element's render array.
+   *   The current search item's render array.
+   *
+   * @see http://drupal.org/node/930760
    */
   abstract public function execute(FacetapiAdapter $adapter);
 
   /**
-   * Allows for backend specific overrides to the settings form.
+   * Allows the plugin to add settings to the current search item form.
+   *
+   * @see current_search_settings_form()
    */
   public function settingsForm(&$form, &$form_state) {
     // Nothing to do...
   }
 
   /**
-   * Returns an array of default settings.
+   * Provides default values for the plugin settings.
+   *
+   * All settings added via CurrentSearchItem::settingsForm() should have
+   * corresponding defaults in this method.
+   *
+   * @return array
+   *   The defaults keyed by setting name to value.
    */
   public function getDefaultSettings() {
     return array();
@@ -86,7 +108,8 @@ abstract class CurrentSearchItem {
    * Helper function for translating strings.
    *
    * @param string $key
-   *   The array key of the element being translated.
+   *   The array key of the item being translated as defined in the plugin's
+   *   CurrentSearchItem::settingsForm() function.
    * @param string $string
    *   The string being translated.
    *
@@ -101,7 +124,17 @@ abstract class CurrentSearchItem {
   }
 
   /**
-   * Returns "wrapper HTML" form elements.
+   * Returns form elements that allow users to add wrapper HTML around items.
+   *
+   * Inspired by Semantic Views which was integrated into Views 3, these form
+   * elements allow the user to add wrapper HTML and CSS classes around the
+   * current search items for easier theming and better semantic markup. This
+   * method is usually called in CurrentSearchItem::settingsForm() overrides.
+   *
+   * @return array
+   *   The wrapper HTML form elements.
+   *
+   * @see CurrentSearchItem::settingsForm()
    */
   public function wrapperForm(&$form, &$form_state) {
 
@@ -164,10 +197,16 @@ abstract class CurrentSearchItem {
   }
 
   /**
-   * Returns defaults for "wrapper HTML" elements.
+   * Returns defaults for the wrapper HTML elements.
+   *
+   * This method is usually called in CurrentSearchItem::getDefaultSettings()
+   * overrides.
    *
    * @return array
    *   An array of default values.
+   *
+   * @see CurrentSearchItem::wrapperForm()
+   * @see CurrentSearchItem::getDefaultSettings()
    */
   public function wrapperDefaults() {
     return array(
@@ -181,6 +220,9 @@ abstract class CurrentSearchItem {
   /**
    * Returns the token tree element.
    *
+   * if the Token module is not installed, alerts the administrator that using
+   * Token module will allow them to view the replacement patterns.
+   *
    * @return array
    *   The token FAPI element.
    */
@@ -204,7 +246,7 @@ abstract class CurrentSearchItem {
    * @param array $item
    *   The item as returned by FacetapiAdapter::getAllActiveItems().
    * @param FacetapiAdapter $adapter
-   *   The adapter object of the current search.
+   *   The adapter object associated with the searcher executing the search.
    *
    * @return array
    *   An array of the item's value and all its children.
@@ -259,10 +301,12 @@ abstract class CurrentSearchItem {
    * @param array $item
    *   The item as returned by FacetapiAdapter::getAllActiveItems().
    * @param FacetapiAdapter $adapter
-   *   The adapter object of the current search.
+   *   The adapter object associated with the searcher executing the search.
    *
    * @return array
    *   An array containing the query string variables.
+   *
+   * @see UrlProcessor::getQueryString()
    */
   public function getQueryString(array $item, FacetapiAdapter $adapter) {
     return $adapter
@@ -274,7 +318,7 @@ abstract class CurrentSearchItem {
 /**
  * Parses the classes setting into an array of sanitized classes.
  *
- * @param $setting
+ * @param string $setting
  *   The classes setting passed by the user.
  * @param array $data
  *   An optional array of data to pass to token_replace().
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_active.inc b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_active.inc
index c25fc36..4ba6839 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_active.inc
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_active.inc
@@ -2,11 +2,17 @@
 
 /**
  * @file
- * Displays all active items.
+ * The active current search item plugin class.
  */
 
 /**
- * Extension of CurrentSearchItem that displays all active items.
+ * Current search item plugin that displays the active facet items.
+ *
+ * It is a common use case that active items be displayed in the Current Search
+ * block as opposed to inline with the facets. This plugin displays the active
+ * items in the Current Search block. Administrators can optionally use Token
+ * replacements to prefix values with the human readalbe label of the facet that
+ * the item belongs to.
  */
 class CurrentSearchItemActive extends CurrentSearchItem {
 
@@ -20,8 +26,9 @@ class CurrentSearchItemActive extends CurrentSearchItem {
     $adapter->processFacets();
 
     // Adds the keywords if any were passed.
-    if ($this->settings['keys'] && $adapter->getSearchKeys()) {
-      $items[] = check_plain($adapter->getSearchKeys());
+    $keys = $adapter->getSearchKeys();
+    if ($this->settings['keys'] && $keys) {
+      $items[] = theme('current_search_keys', array('keys' => $keys, 'adapter' => $adapter));
     }
 
     // Initializes links attributes, adds rel="nofollow" if configured.
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_group.inc b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_group.inc
index a6b3542..388e970 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_group.inc
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_group.inc
@@ -2,11 +2,14 @@
 
 /**
  * @file
- * Displays field groups.
+ * The group current search item plugin class.
  */
 
 /**
- * Extension of CurrentSearchItem that displays field groups.
+ * Current search item plugin that displays the active facet items in a group.
+ *
+ * This plugins displays displays active items grouped by field in a horizontal
+ * list.
  */
 class CurrentSearchGroup extends CurrentSearchItem {
 
@@ -46,7 +49,7 @@ class CurrentSearchGroup extends CurrentSearchItem {
       // Builds list items.
       foreach ($group as $item) {
         $markup = $adapter->getMappedValue($item['facets'][0], $item['value']);
-        $text = ($markup['#html']) ? $markup['#markup'] : check_plain($markup['#markup']);
+        $text = empty($markup['#html']) ? check_plain($markup['#markup']) : $markup['#markup'];
         $variables = array(
           'text' => $text,
           'path' => $this->getFacetPath($item, $adapter),
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_text.inc b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_text.inc
index a0eae4f..48e367c 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_text.inc
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/current_search/item_text.inc
@@ -2,11 +2,16 @@
 
 /**
  * @file
- * Plugin that adds custom text to the current search block.
+ * The text current search item plugin class.
  */
 
 /**
- * Extension of CurrentSearchItem that displays all active items.
+ * Current search item plugin that displays text configured by the user.
+ *
+ * It is a common use case to display the number of results returned by the
+ * query or addition to pagination information to end users. This plugin allows
+ * administrators to set arbitrary strings with replacement patterns to build
+ * the messages they want to display to users in the Current Search block.
  */
 class CurrentSearchItemText extends CurrentSearchItem {
 
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/export_ui/current_search_ctools_export_ui.inc b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/export_ui/current_search_ctools_export_ui.inc
index b1bbeb7..ee9569b 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/export_ui/current_search_ctools_export_ui.inc
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/export_ui/current_search_ctools_export_ui.inc
@@ -1,8 +1,10 @@
 <?php
 
 /**
+ * @file
  * CTools Export UI plugin for current search block configurations.
  */
+
 $plugin = array(
   'schema' => 'current_search',
   'access' => 'administer search',
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/export_ui/current_search_export_ui.class.php b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/export_ui/current_search_export_ui.class.php
index 5d04fa6..346a5be 100644
--- a/profiles/acquia/modules/facetapi/contrib/current_search/plugins/export_ui/current_search_export_ui.class.php
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/plugins/export_ui/current_search_export_ui.class.php
@@ -11,7 +11,7 @@
 class current_search_export_ui extends ctools_export_ui {
 
   /**
-   * Implements ctools_export_ui::list_form().
+   * Overrides ctools_export_ui::list_form().
    *
    * Simplifies the form similar to how the Context module does it.
    */
@@ -24,14 +24,14 @@ class current_search_export_ui extends ctools_export_ui {
   }
 
   /**
-   * Implements ctools_export_ui::list_build_row().
+   * Overrides ctools_export_ui::list_build_row().
    */
   function list_build_row($item, &$form_state, $operations) {
     parent::list_build_row($item, $form_state, $operations);
   }
 
   /**
-   * Implements ctools_export_ui::edit_execute_form().
+   * Overrides ctools_export_ui::edit_execute_form().
    *
    * This is hacky, but since CTools Export UI uses drupal_goto() we have to
    * effectively change the plugin to modify the redirect path dynamically.
@@ -61,7 +61,7 @@ class current_search_export_ui extends ctools_export_ui {
   }
 
   /**
-   * Implements ctools_export_ui::edit_page().
+   * Overrides ctools_export_ui::edit_page().
    *
    * Allows passing of options to drupal_goto() as opposed to just a path.
    *
@@ -94,7 +94,7 @@ class current_search_export_ui extends ctools_export_ui {
 
     $output = $this->edit_execute_form($form_state);
     if (!empty($form_state['executed'])) {
-      // @see @see http://drupal.org/node/1373048
+      // @see http://drupal.org/node/1373048
       $export_key = $this->plugin['export']['key'];
       $args = (array) $this->plugin['redirect']['edit'];
       $args[0] = str_replace('%ctools_export_ui', $form_state['item']->{$export_key}, $args[0]);
@@ -105,7 +105,7 @@ class current_search_export_ui extends ctools_export_ui {
   }
 
    /**
-   * Implements ctools_export_ui::add_page().
+   * Overrides ctools_export_ui::add_page().
    *
    * Allows passing of options to drupal_goto() as opposed to just a path.
    *
@@ -185,7 +185,7 @@ function current_search_settings_form(&$form, &$form_state) {
       'exists' => 'current_search_config_exists',
       'source' => array('info', 'label'),
     ),
-    '#disabled' => !empty($item->name),
+    '#disabled' => ('clone' != $form_state['form type'] && !empty($item->name)),
     '#description' => t('The machine readable name of the current search block configuration. This value can only contain letters, numbers, and underscores.'),
   );
 
diff --git a/profiles/acquia/modules/facetapi/contrib/current_search/tests/current_search.test b/profiles/acquia/modules/facetapi/contrib/current_search/tests/current_search.test
new file mode 100644
index 0000000..e49d9ba
--- /dev/null
+++ b/profiles/acquia/modules/facetapi/contrib/current_search/tests/current_search.test
@@ -0,0 +1,150 @@
+<?php
+
+/**
+ * @file
+ * Test cases for the Current Search Blocks module.
+ */
+
+/**
+ * Base class for all Current Search Blocks test cases.
+ */
+class CurrentSearchTestCase extends FacetapiTestCase {
+
+  /**
+   * Overrides FacetapiTestCase::setUp().
+   */
+  public function setUp() {
+    parent::setUp('current_search');
+  }
+
+  /**
+   * Enables a current search block via the UI.
+   */
+  public function currentSearchEnableBlock($name = 'standard') {
+    // Capture current user, switch to admin user if necessary.
+    $account = $this->loggedInUser;
+    if ($account != $this->adminUser) {
+      $this->drupalLogin($this->adminUser);
+    }
+
+    // Enables the facet in the "sidebar_first" region.
+    $edit = array('blocks[current_search_' . $name . '][region]' => 'sidebar_first');
+    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
+
+    // Log back in as original user if necessary.
+    if ($account != $this->adminUser) {
+      if ($account) {
+        $this->drupalLogin($account);
+      }
+      else {
+        $this->drupalLogout();
+      }
+    }
+  }
+}
+
+/**
+ * Test cases for operations taken through the admin UI.
+ */
+class CurrentSearchInterfaceTestCase extends CurrentSearchTestCase {
+  protected $authenticatedUser;
+  protected $adminUser;
+
+  public static function getInfo() {
+    return array(
+      'name' => 'Administrative UI',
+      'description' => 'Tests the UI for Current Search Blocks administrative pages.',
+      'group' => 'Current Search Blocks',
+    );
+  }
+
+  /**
+   * Tests access to callbacks.
+   */
+  public function testFormAccess() {
+    $paths = array(
+      'admin/config/search/current_search' => t('list'),
+      'admin/config/search/current_search/list/standard/edit' => t('edit'),
+      'admin/config/search/current_search/list/standard/disable' => t('disable'),
+      'admin/config/search/current_search/list/standard/clone' => t('clone'),
+      'admin/config/search/current_search/list/standard/export' => t('export'),
+      'admin/config/search/current_search/item/standard/delete/results' => t('remove item'),
+    );
+
+    // Test wheter unprivileged user is denied access to forms.
+    $this->drupalLogin($this->authenticatedUser);
+    foreach ($paths as $path => $form_name) {
+      $this->drupalGet($path);
+      $this->assertResponse(403, t('Unprivileged user does not have access to the @form-name form.', array('@form-name' => $form_name)), 'Facet API');
+    }
+
+    // Common message for privileged access checks.
+    $privileged_message = t('Privileged user with "@permission" permission is granted access to the @form-name form.');
+
+    // Test whether privileged user is granted access for forms.
+    // NOTE: $this->adminUser has "administer search" permission.
+    $this->drupalLogin($this->adminUser);
+    foreach ($paths as $path => $form_name) {
+      $this->drupalGet($path);
+      $args = array('@permission' => 'administer search', '@form-name' => $form_name);
+      $this->assertResponse(200, t($privileged_message, $args));
+    }
+
+    // Tests whether privileged user is granted access for forms.
+    // Create another user with the "administer facets" permission, test whether
+    $facet_admin_user = $this->drupalCreateUser(array('administer facets'));
+    $this->drupalLogin($facet_admin_user);
+    foreach ($paths as $path => $form_name) {
+      $this->drupalGet($path);
+      $args = array('@permission' => 'administer facets', '@form-name' => $form_name);
+      $this->assertResponse(200, t($privileged_message, $args));
+    }
+  }
+
+  public function testEnableBlock() {
+    // Enable the standard current search block via the UI.
+    $this->drupalLogin($this->adminUser);
+    $this->currentSearchEnableBlock();
+
+    // Test that block is positioned on the search page.
+    $this->drupalLogin($this->authenticatedUser);
+    $this->drupalGet('facetapi_test/search', array('query' => array('keys' => 'test')));
+    $raw = t('Current search');
+    $this->assertRaw($raw, t('Current search block displayed on search page.'), 'Current Search Blocks');
+  }
+}
+
+/**
+ * Test cases for operations taken through the admin UI.
+ */
+class CurrentSearchBugFixTestCase extends CurrentSearchTestCase {
+  protected $authenticatedUser;
+  protected $adminUser;
+
+  public static function getInfo() {
+    return array(
+      'name' => 'Bug Fixes',
+      'description' => 'Tests fixed bugs to prevent regressions.',
+      'group' => 'Current Search Blocks',
+    );
+  }
+
+  /**
+   * Tests bug fixed at http://drupal.org/node/1668980.
+   *
+   * @see http://drupal.org/node/1668980
+   */
+  public function testMultipleBlocks() {
+    // Enable the standard current search block via the UI.
+    $this->drupalLogin($this->adminUser);
+    $this->currentSearchEnableBlock('standard');
+    $this->currentSearchEnableBlock('second');
+
+    // Test that block is positioned on the search page.
+    $this->drupalLogin($this->authenticatedUser);
+    $this->drupalGet('facetapi_test/search', array('query' => array('keys' => 'test')));
+    $this->assertRaw('Second current search block', t('Second current search block displayed on search page.'), 'Current Search Blocks');
+
+    $this->facetapiIssueMessage('http://drupal.org/node/1668980');
+  }
+}
diff --git a/profiles/acquia/modules/facetapi/facetapi.admin.css b/profiles/acquia/modules/facetapi/facetapi.admin.css
index 1135b17..b5f5e13 100644
--- a/profiles/acquia/modules/facetapi/facetapi.admin.css
+++ b/profiles/acquia/modules/facetapi/facetapi.admin.css
@@ -108,6 +108,8 @@ td.facetapi-operations {
   float: right;
   margin-top: -2em;
   padding: 0 1em 1em .5em;
+  position: relative;
+  z-index: 1000;
 }
 
 .form-item-widget select {
diff --git a/profiles/acquia/modules/facetapi/facetapi.admin.inc b/profiles/acquia/modules/facetapi/facetapi.admin.inc
index 3e934a8..4f2a43d 100644
--- a/profiles/acquia/modules/facetapi/facetapi.admin.inc
+++ b/profiles/acquia/modules/facetapi/facetapi.admin.inc
@@ -311,7 +311,7 @@ function facetapi_get_settings_path($searcher, $realm_name, $facet_name, $op) {
  * Returns the widget plugin definitions available to the facet.
  *
  * All widget plugins are checked against their requirmenets. Only widgets that
- * pall all requirements are returned by this function.
+ * pass all requirements are returned by this function.
  *
  * @param array $realm
  *   The realm definition.
diff --git a/profiles/acquia/modules/facetapi/facetapi.api.php b/profiles/acquia/modules/facetapi/facetapi.api.php
index 38e5f12..1715251 100644
--- a/profiles/acquia/modules/facetapi/facetapi.api.php
+++ b/profiles/acquia/modules/facetapi/facetapi.api.php
@@ -13,12 +13,11 @@
 /**
  * Define all searchers provided by the module.
  *
- * Searchers are synonymous with search pages, or environments. Each searcher is
- * associated with an adapter instance. Multiple searchers can share the same
- * adapter class, but each searcher will spawn a separate instance of the
- * adapter. Each searcher must be unique, so it is common practice to prefix the
- * name with the module implementing the hook, such as "apachesolr@searcher-1",
- * "apachesolr@searcher-2", "search_api@searcher-1", etc.
+ * Searchers are synonymous with search pages, or environments. Multiple
+ * searchers can share the same adapter class, but each searcher will spawn a
+ * separate instance of the adapter. Each searcher must be unique, so it is
+ * common practice to prefix the name with the module implementing the hook,
+ * such as "apachesolr@searcher-x", "search_api@searcher-y", etc.
  *
  * @return array
  *   An associative array keyed by unique name of the searcher. Each searcher is
@@ -41,6 +40,8 @@
  *   - include default facets: (optional) TRUE if the searcher should include
  *     the facets defined in facetapi_facetapi_facet_info() when indexing node
  *     content, FALSE if they should be skipped.
+ *
+ * @see FacetapiAdapter
  */
 function hook_facetapi_searcher_info() {
   return array(
@@ -124,6 +125,12 @@ function hook_facetapi_realm_info_alter(array &$realm_info) {
 /**
  * Define all facets provided by the module.
  *
+ * Facets correspond with fields in the search index and are usually related to
+ * entity properties and fields. However, it is not a requirement that the
+ * source data be stored in Drupal. For example, if you are indexing external
+ * RSS feeds, facets can be defined that filter by the field in the index that
+ * stores the publication dates.
+ *
  * @param array $searcher_info
  *   The definition of the searcher that facets are being collected for.
  *
@@ -241,6 +248,9 @@ function hook_facetapi_facet_info_alter(array &$facet_info, array $searcher_info
 /**
  * Define all facets sorting algorithms provided by the module.
  *
+ * Sorts are applied in the FacetapiWidget::sortFacet() method which is called
+ * by FacetapiWidget::init().
+ *
  * @return array
  *   An associative array keyed by unique name of the sort. Each sort is an
  *   associative array containing:
@@ -249,6 +259,9 @@ function hook_facetapi_facet_info_alter(array &$facet_info, array $searcher_info
  *   - description: The description of the sort displayed in the admin UI.
  *   - weight: (optional) The default weight of the sort specifying its
  *     default processing order. Defaults to 0.
+ *
+ * @see FacetapiWidget::init()
+ * @see FacetapiWidget::sortFacet()
  */
 function hook_facetapi_sort_info() {
   $sorts = array();
@@ -278,15 +291,15 @@ function hook_facetapi_sort_info_alter(array &$sort_info) {
 /**
  * Define all adapter plugins provided by the module.
  *
- * Adapters are the abstraction layer through which searchers integrate with
- * Facet API and various backend functionality.
+ * See the FacetapiAdapter docblock for more information on what an adapter does
+ * and how it interacts with the implementing search module.
  *
  * @return array
  *   An associative array keyed by unique name of the adapter. Each adapter is
  *   an associative array keyed by "handler" containing:
  *   - class: The name of the plugin class.
  *
- * @see FacetapiApachesolr
+ * @see FacetapiAdapter
  */
 function hook_facetapi_adapters() {
   return array(
@@ -301,10 +314,8 @@ function hook_facetapi_adapters() {
 /**
  * Define all dependency plugins provided by the module.
  *
- * Dependency plugins control what criteria must be met for the backend to
- * process the facet. It is designed to implement the "progressive disclosure"
- * pattern where more facets are displayed to users the deeper they get into
- * the refinement of their search.
+ * See the FacetapiDependency docblock for more information on what dependency
+ * plugins do and what their responsibilities are.
  *
  * @return array
  *   An associative array keyed by unique name of the dependency. Each
@@ -328,8 +339,8 @@ function hook_facetapi_dependencies() {
 /**
  * Define all empty behavior plugins provided by the module.
  *
- * Empty behavior plugins determine what to display when a facet has no
- * available items.
+ * See the FacetapiEmptyBehavior docblock for more information on what empty
+ * behavior plugins do and what their responsibilities are.
  *
  * @return array
  *   An associative array keyed by unique name of the empty behavior. Each empty
@@ -353,10 +364,8 @@ function hook_facetapi_empty_behaviors() {
 /**
  * Define all filter plugins provided by the module.
  *
- * Filter plugins provide last minute modifications to the facet's render array
- * prior to being acted on by the widget plugin. Filters are also an alter
- * mechanism for the facet that developers can use to make any customizations
- * prior to the widget being rendered.
+ * See the FacetapiFilter docblock for more information on what filter plugins
+ * do and what their responsibilities are.
  *
  * @return array
  *   An associative array keyed by unique name of the filter. Each filter is an
@@ -380,10 +389,8 @@ function hook_facetapi_filters() {
 /**
  * Define all query type plugins provided by the module.
  *
- * Query type plugins are responsible for converting the active facet items into
- * facet queries that are processed by the backend. They are also responsible
- * for extracting extra information about the active item, such as the start and
- * end values of a range query.
+ * See the FacetapiQueryTypeInterface docblock for more information on what
+ * query type plugins do and what their responsibilities are.
  *
  * @return array
  *   An associative array keyed by unique name of the query type. Each query
@@ -392,7 +399,6 @@ function hook_facetapi_filters() {
  *   - adapter: The adapter that the query type plugin is associated with.
  *
  * @see FacetapiQueryTypeInterface
- * @see FacetapiQueryType
  */
 function hook_facetapi_query_types() {
   return array(
@@ -408,9 +414,8 @@ function hook_facetapi_query_types() {
 /**
  * Define all URL processor plugins provided by the module.
  *
- * URL processors are responsible for building and formatting facet URLs. The
- * standard processor passes all facet filters through the "f" query string
- * variable.
+ * See the FacetapiUrlProcessor docblock for more information on what url
+ * processor plugins do and what their responsibilities are.
  *
  * @return array
  *   An associative array keyed by unique name of the URL processor. Each URL
@@ -418,7 +423,7 @@ function hook_facetapi_query_types() {
  *   - label: The human readable name of the plugin displayed in the admin UI.
  *   - class: The name of the plugin class.
  *
- * @see FacetapiFilter
+ * @see FacetapiUrlProcessor
  */
 function hook_facetapi_url_processors() {
   return array(
@@ -434,8 +439,8 @@ function hook_facetapi_url_processors() {
 /**
  * Define all widget plugins provided by the module.
  *
- * Widget plugins process the facet render arrays to the structure that wille be
- * passed to drupal_render(), which in turn converts the facet to HTML.
+ * See the FacetapiWidget docblock for more information on what widget plugins
+ * do and what their responsibilities are.
  *
  * @return array
  *   An associative array keyed by unique name of the widget. Each widget is an
@@ -444,7 +449,7 @@ function hook_facetapi_url_processors() {
  *   - class: The name of the plugin class.
  *   - query types: An array of query-types that this widget is compatible with
  *
- * @see FacetapiFilter
+ * @see FacetapiWidget
  */
 function hook_facetapi_widgets() {
   return array(
diff --git a/profiles/acquia/modules/facetapi/facetapi.block.inc b/profiles/acquia/modules/facetapi/facetapi.block.inc
index d96225d..55a38be 100644
--- a/profiles/acquia/modules/facetapi/facetapi.block.inc
+++ b/profiles/acquia/modules/facetapi/facetapi.block.inc
@@ -7,29 +7,54 @@
 
 /**
  * Implements hook_block_info().
+ *
+ * @see facetapi_get_block_info()
  */
 function facetapi_block_info() {
-  $blocks = array();
+  return facetapi_get_block_info(array('block'));
+}
 
-  // Gets delta map, iterates over all enabled facets.
-  $map = facetapi_get_delta_map();
-  foreach (facetapi_get_searcher_info() as $searcher => $info) {
-
-    // Gets cache settings for the searcher.
-    $cache = variable_get('facetapi:block_cache:' . $searcher, DRUPAL_NO_CACHE);
-
-    // Adds blocks for facets that are enabled or whose delta mapping is forced.
-    foreach (facetapi_get_delta_map_queue($searcher, 'block') as $facet_name) {
-      if ($facet = facetapi_facet_load($facet_name, $searcher)) {
-        // Gets the delta from the delta map.
-        $string = facetapi_build_delta($searcher, 'block', $facet_name);
-        $delta = array_search($string, $map);
-
-        // Defines the block.
-        $blocks[$delta] = array(
-          'info' => 'Facet API: ' . $info['label'] . ' : ' . $facet['label'],
-          'cache' => $cache,
-        );
+/**
+ * Helper function to get block info for all block-like realms.
+ *
+ * @param array $realm_names
+ *   An array of machine readable realm names blocks are being collected for.
+ *
+ * @return array
+ *   An array of block information.
+ *
+ * @see http://api.drupal.org/api/drupal/modules%21block%21block.api.php/function/hook_block_info/7
+ */
+function facetapi_get_block_info(array $realm_names) {
+  $blocks = array();
+  foreach ($realm_names as $realm_name) {
+
+    // Gets delta map, iterates over all enabled facets.
+    $map = facetapi_get_delta_map();
+    foreach (facetapi_get_searcher_info() as $searcher => $info) {
+
+      // Gets cache settings for the searcher.
+      $cache = facetapi_get_block_cache_setting($searcher, $realm_name);
+
+      // Adds blocks for facets that are enabled or whose delta mapping is forced.
+      foreach (facetapi_get_delta_map_queue($searcher, $realm_name) as $facet_name) {
+        if ($facet = facetapi_facet_load($facet_name, $searcher)) {
+          // Gets the delta from the delta map.
+          $string = facetapi_build_delta($searcher, $realm_name, $facet_name);
+          $delta = array_search($string, $map);
+
+          // Builds the info. For non-block realm, append the realm name.
+          $subject = 'Facet API: ' . $info['label'] . ' : ' . $facet['label'];
+          if ('block' != $realm_name && ($realm = facetapi_realm_load($realm_name))) {
+            $subject .= ' (' . $realm['label'] . ')';
+          }
+
+          // Defines the block.
+          $blocks[$delta] = array(
+            'info' => $subject,
+            'cache' => $cache,
+          );
+        }
       }
     }
   }
@@ -39,18 +64,36 @@ function facetapi_block_info() {
 }
 
 /**
- * Implements hook_block_list_alter().
+ * Implements hook_ctools_block_info().
  *
- * Parses delta information, checks whether to display block.
+ * @see http://drupal.org/node/1669918
  */
-function facetapi_block_list_alter(&$blocks) {
-  foreach ($blocks as $bid => $block) {
-    if ('facetapi' == $block->module) {
-      if (!facetapi_check_block_visibility($block->delta)) {
-        unset($blocks[$bid]);
-      }
-    }
+function facetapi_ctools_block_info($module, $delta, &$info) {
+  // Give the Facet API blocks their own category.
+  $info['category'] = t('Facet API');
+  // Allow blocks to be used before the search results in Panels.
+  $info['render last'] = TRUE;
+}
+
+/**
+ * Returns block cache settings.
+ *
+ * @param $searcher
+ *   The machine readable name of searcher.
+ * @param string $realm_name
+ *   The machine readable name of the realm.
+ *
+ * @return int
+ *   The constands defined in includes/common.inc, defaults to DRUPAL_NO_CACHE.
+ *
+ * @see includes/common.inc
+ */
+function facetapi_get_block_cache_setting($searcher, $realm_name) {
+  $name = 'facetapi:block_cache:' . $searcher;
+  if ('block' != $realm_name) {
+    $name .= ':' . $realm_name;
   }
+  return variable_get($name, DRUPAL_NO_CACHE);
 }
 
 /**
@@ -60,8 +103,7 @@ function facetapi_block_view($delta = '') {
   $builds = &drupal_static(__FUNCTION__, array());
   $parsed = &drupal_static('facetapi_parsed_deltas', array());
 
-  // Test block visibility if not already tested. This is necessary when using
-  // modules such as Context that do not invoke hook_block_list_alter().
+  // Test block visibility if not already tested.
   if (!isset($parsed[$delta]) && !facetapi_check_block_visibility($delta)) {
     return;
   }
@@ -142,7 +184,7 @@ function facetapi_check_block_visibility($delta) {
 /**
  * Returns a cached delta map of hashes to names.
  *
- * Sometimes our deltas are longer than 32 chars and need to be passed to hash().
+ * Sometimes deltas are longer than 32 chars and need to be passed to hash().
  * Due to the block table's schema, deltas cannot be longer than 32 characters.
  * However, hashes are nasty as CSS IDs, so we can use the map to convert
  * the hashes back to a nicer value in facetapi_preprocess_block().
@@ -157,13 +199,18 @@ function facetapi_get_delta_map() {
       $map = $data->data;
     }
     else {
-      $map = array();
 
-      // Maps facet deltas.
-      foreach (facetapi_get_searcher_info() as $searcher => $info) {
-        foreach (facetapi_get_delta_map_queue($searcher, 'block') as $facet_name) {
-          $delta = facetapi_build_delta($searcher, 'block', $facet_name);
-          $map[facetapi_hash_delta($delta)] = $delta;
+      // Maps deltas for all realms. This is a hack since not all realms display
+      // facets in blocks, but it doesn't hurt to store the extra data. The map
+      // is cached anyways, so it shouldn't cause too much additional resource
+      // consumption. It is also an edge-case to have non-block facets.
+      $searcher_info = facetapi_get_searcher_info();
+      foreach (facetapi_get_realm_info() as $realm_name => $realm_info) {
+        foreach ($searcher_info as $searcher => $info) {
+          foreach (facetapi_get_delta_map_queue($searcher, $realm_name) as $facet_name) {
+            $delta = facetapi_build_delta($searcher, $realm_name, $facet_name);
+            $map[facetapi_hash_delta($delta)] = $delta;
+          }
         }
       }
 
diff --git a/profiles/acquia/modules/facetapi/facetapi.callbacks.inc b/profiles/acquia/modules/facetapi/facetapi.callbacks.inc
index 810911b..86996ef 100644
--- a/profiles/acquia/modules/facetapi/facetapi.callbacks.inc
+++ b/profiles/acquia/modules/facetapi/facetapi.callbacks.inc
@@ -38,7 +38,7 @@ function facetapi_map_author(array $values) {
   $map = array();
   $users = user_load_multiple($values);
   foreach ($users as $user) {
-    $map[$user->uid] = $user->name;
+    $map[$user->uid] = format_username($user);
   }
   if (isset($map[0])) {
     $map[0] = variable_get('anonymous', t('Anonymous'));
@@ -132,7 +132,7 @@ function facetapi_map_taxonomy_terms(array $values) {
   $map = array();
   $terms = taxonomy_term_load_multiple($values);
   foreach ($terms as $term) {
-    $map[$term->tid] = $term->name;
+    $map[$term->tid] = entity_label('taxonomy_term', $term);
   }
   return $map;
 }
diff --git a/profiles/acquia/modules/facetapi/facetapi.info b/profiles/acquia/modules/facetapi/facetapi.info
index e930cac..7b0939f 100644
--- a/profiles/acquia/modules/facetapi/facetapi.info
+++ b/profiles/acquia/modules/facetapi/facetapi.info
@@ -18,11 +18,11 @@ files[] = plugins/facetapi/widget_links.inc
 files[] = tests/facetapi_test.plugins.inc
 files[] = tests/facetapi.test
 
-; Information added by drupal.org packaging script on 2012-02-24
-version = "7.x-1.0-rc4"
+; Information added by drupal.org packaging script on 2012-07-31
+version = "7.x-1.1"
 core = "7.x"
 project = "facetapi"
-datestamp = "1330124142"
+datestamp = "1343771560"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/facetapi/facetapi.install b/profiles/acquia/modules/facetapi/facetapi.install
index 0d5a876..de39d53 100644
--- a/profiles/acquia/modules/facetapi/facetapi.install
+++ b/profiles/acquia/modules/facetapi/facetapi.install
@@ -2,7 +2,7 @@
 
 /**
  * @file
- * Installation functions for the Facet API module.
+ * Install, update, and uninstall functions for the Facet API module.
  */
 
 /**
@@ -60,7 +60,7 @@ function facetapi_schema() {
       ),
       'settings' => array(
         'description' => 'Serialized storage of general settings.',
-        'type' => 'text',
+        'type' => 'blob',
         'serialize' => TRUE,
       ),
     ),
@@ -87,6 +87,10 @@ function facetapi_uninstall() {
   foreach ($result as $record) {
     variable_del($record->name);
   }
+  // Remove blocks.
+  if (db_table_exists('block')) {
+    db_delete('block')->condition('module', 'facetapi')->execute();
+  }
 }
 
 /**
@@ -200,3 +204,21 @@ function facetapi_update_7101() {
     'default' => '',
   ));
 }
+
+/**
+ * Fix Postgres compatibility issue.
+ */
+function facetapi_update_7102() {
+  db_change_field('facetapi', 'settings', 'settings', array(
+    'type' => 'blob',
+    'description' => 'Serialized storage of general settings.',
+    'serialize' => TRUE,
+  ));
+}
+
+/**
+ * Clears facetapi:delta_map cache item to ensure that new realms are mapped.
+ */
+function facetapi_update_7103() {
+  cache_clear_all('facetapi:delta_map', 'cache');
+}
diff --git a/profiles/acquia/modules/facetapi/facetapi.module b/profiles/acquia/modules/facetapi/facetapi.module
index cdd18b8..2536291 100644
--- a/profiles/acquia/modules/facetapi/facetapi.module
+++ b/profiles/acquia/modules/facetapi/facetapi.module
@@ -297,11 +297,18 @@ function facetapi_theme() {
  * Custom access callback. Checks if the user has either the "administer search"
  * OR "administer facets" permissions.
  *
+ * @param stdClass|NULL $account
+ *   (optional) The account to check, if not given use currently logged in user.
+ *
  * @return boolean
  *   TRUE if the user has access to the resource, FALSE otherwise.
  */
-function facetapi_access_callback() {
-  return user_access('administer search') || user_access('administer facets');
+function facetapi_access_callback($account = NULL) {
+  global $user;
+  if (!isset($account)) {
+    $account = $user;
+  }
+  return user_access('administer search', $account) || user_access('administer facets', $account);
 }
 
 /**
@@ -628,7 +635,7 @@ function facetapi_get_facet_info($searcher) {
         }
 
         // Iterates over facet definitions, merges defaults.
-        foreach($facets as $facet_name => $info) {
+        foreach ($facets as $facet_name => $info) {
 
           // @see http://drupal.org/node/1161434
           // Converts "query type" to an array and stores in "query types".
@@ -1116,6 +1123,7 @@ function facetapi_save_facet_status(FacetapiAdapter $adapter, array $realm, arra
 
   // Clears caches and statics if we are not batch processing.
   if ($success && !$batch_process) {
+    drupal_static('facetapi_get_searcher_settings', array(), TRUE);
     drupal_static('facetapi_get_enabled_facets', array(), TRUE);
     if ('block' == $realm['name']) {
       cache_clear_all(NULL, 'cache_block');
diff --git a/profiles/acquia/modules/facetapi/facetapi.theme.inc b/profiles/acquia/modules/facetapi/facetapi.theme.inc
index 8eccab2..097a6fa 100644
--- a/profiles/acquia/modules/facetapi/facetapi.theme.inc
+++ b/profiles/acquia/modules/facetapi/facetapi.theme.inc
@@ -87,6 +87,8 @@ function theme_facetapi_count($variables) {
  *   An associative array containing the keys 'text', 'path', and 'options'. See
  *   the l() function for information about these variables.
  *
+ * @see l()
+ *
  * @ingroup themeable
  */
 function theme_facetapi_link_active($variables) {
@@ -105,7 +107,7 @@ function theme_facetapi_link_active($variables) {
   // Builds link, passes through t() which gives us the ability to change the
   // position of the widget on a per-language basis.
   $replacements = array(
-    '!facetapi_deactivate_widget' => theme('facetapi_deactivate_widget'),
+    '!facetapi_deactivate_widget' => theme('facetapi_deactivate_widget', $variables),
     '!facetapi_accessible_markup' => theme('facetapi_accessible_markup', $accessible_vars),
   );
   $variables['text'] = t('!facetapi_deactivate_widget !facetapi_accessible_markup', $replacements);
@@ -117,8 +119,11 @@ function theme_facetapi_link_active($variables) {
  * Returns HTML for the deactivation widget.
  *
  * @param $variables
- *   An associative array containing:
- *   - text: The text of the facet link.
+ *   An associative array containing the keys 'text', 'path', and 'options'. See
+ *   the l() function for information about these variables.
+ *
+ * @see l()
+ * @see theme_facetapi_link_active()
  *
  * @ingroup themable
  */
diff --git a/profiles/acquia/modules/facetapi/facetapi.tokens.inc b/profiles/acquia/modules/facetapi/facetapi.tokens.inc
index 5462466..5d4534e 100644
--- a/profiles/acquia/modules/facetapi/facetapi.tokens.inc
+++ b/profiles/acquia/modules/facetapi/facetapi.tokens.inc
@@ -151,18 +151,19 @@ function facetapi_tokens($type, $tokens, array $data = array(), array $options =
           break;
 
         case 'offset':
-          $offset = ($adapter->getPageNumber() - 1) * $adapter->getPageLimit;
+          $offset = ($adapter->getPageNumber() - 1) * $adapter->getPageLimit();
           $replacements[$original] = $offset;
           break;
 
         case 'start-count':
-          $offset = (($adapter->getPageNumber() - 1) * $adapter->getPageLimit) + 1;
+          $offset = (($adapter->getPageNumber() - 1) * $adapter->getPageLimit()) + 1;
           $replacements[$original] = $offset;
           break;
 
         case 'end-count':
-          $offset = ($adapter->getPageNumber()) * $adapter->getPageLimit;
-          $replacements[$original] = $offset;
+          $page_max = $adapter->getPageNumber() * $adapter->getPageLimit();
+          $total_max = (int) $adapter->getResultCount();
+          $replacements[$original] = min($page_max, $total_max);
           break;
       }
     }
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/adapter.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/adapter.inc
index 4ac9b5e..67adce5 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/adapter.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/adapter.inc
@@ -2,33 +2,41 @@
 
 /**
  * @file
- * Adapter plugin and adapter related calsses.
+ * Adapter plugin and adapter related classes.
  */
 
 /**
- * Abstract class extended by search backends that retrieves facet information
- * from the database.
+ * Abstract class extended by Facet API adapters.
+ *
+ * Adapters are responsible for abstracting interactions with the Search backend
+ * that are necessary for faceted search. The adapter is also responsible for
+ * retrieving facet information passed by the user via the url processor plugin
+ * taking the appropriate action, whether it is checking dependencies for all
+ * enabled facets or passing the appropriate query type plugin to the backend
+ * so that it can execute the actual facet query.
  */
 abstract class FacetapiAdapter {
 
   /**
-   * Searcher information retrieved by the hook.
+   * The searcher information as returned by facetapi_get_searcher_info().
    *
    * @var array
    */
   protected $info = array();
 
   /**
-   * The search keys passed by the user.
+   * The search keys, or query text, submitted by the user.
    *
    * @var string
    */
   protected $keys;
 
   /**
-   * An array of FacetapiFacet objects.
+   * An array of FacetapiFacet objects for facets being rendered.
    *
    * @var array
+   *
+   * @see FacetapiFacet
    */
   protected $facets = array();
 
@@ -36,6 +44,9 @@ abstract class FacetapiAdapter {
    * An array of FacetapiFacetProcessor objects.
    *
    * @var array
+   *
+   * @see FacetapiFacetProcessor
+   * @see FacetapiAdapter::processFacets()
    */
   protected $processors = array();
 
@@ -43,39 +54,69 @@ abstract class FacetapiAdapter {
    * An array of executed query type plugins keyed by field name.
    *
    * @var array
+   *
+   * @see FacetapiQueryTypeInterface
    */
   protected $queryTypes = array();
 
   /**
-   * The URL processor associated with this adapter.
+   * The url processor plugin associated with this adapter.
    *
    * @var FacetapiUrlProcessor
+   *
+   * @see FacetapiUrlProcessor
    */
   protected $urlProcessor;
 
   /**
-   * An array of active filters.
+   * An array of active items created by FacetapiAdapter::processActiveItems().
+   *
+   * In order to retrieve data efficiently, the active items are stored in two
+   * ways. The "filter" key is an associative array of active items keyed by
+   * the raw filter passed through the source, usually in field:value format.
+   * The "facet" key is a multidimensional array where the second dimension is
+   * keyed by the machine name of the facet and the third dimension is an array
+   * of active items keyed by the facet value.
+   *
+   * The active items are associative arrays containing (but not limited to):
+   * - field alias: The facet alias defined in the facet definition.
+   * - value: The active value passed through the source (usually $_GET) to
+   *   filter the result set.
+   * - pos: The zero-based position of the value in the source data. The url
+   *   processor plugin uses the "pos" to efficiently remove certain values when
+   *   building query strings in FacetapiQueryTypeInterface::getQueryString().
+   *
+   * Additional keys may be added to this array via the query type plugin's
+   * FacetapiQueryTypeInterface::extract() method. For example, date and range
+   * query types add the "start" and "end" values of the range.
    *
    * @var array
+   *
+   * @see FacetapiAdapter::processActiveItems()
    */
   protected $activeItems;
 
   /**
-   * A boolean flagging whether the facets have been processed.
+   * A boolean flagging whether the facets have been processed, or built.
+   *
+   * This variable acts as a per-adapter semaphore that ensures facet data is
+   * processed only once.
    *
    * @var boolean
+   *
+   * @see FacetapiAdapter::processFacets()
    */
   protected $processed = FALSE;
 
   /**
-   * Stores the search path so we only need to calculate it once.
+   * Stores the search path associated with this searcher.
    *
    * @var string
    */
   protected $searchPath;
 
   /**
-   * Stores whether each facet passed dependencies.
+   * An array of facets that passed their dependencies.
    *
    * @var array
    */
@@ -85,67 +126,40 @@ abstract class FacetapiAdapter {
    * Stores settings with defaults.
    *
    * @var array
+   *
+   * @see FacetapiAdapter::getFacetSettings()
    */
   protected $settings = array();
 
   /**
-   * Constructor, sets searcher and type of content being indexed.
+   * Constructs a FacetapiAdapter object.
+   *
+   * Stores information about the searcher that the adapter is associated with.
+   * Registers and instantiates all query type plugins that are associated with
+   * the searcher's active facets. Instantiates the url processor plugin
+   * associated with this adapter and retrieves facet information from some
+   * source, usually $_GET. See the url processor plugin's implementation of
+   * FacetapiUrlProcessor::fetchParams() for details on the source containing
+   * the facet data.
    *
    * @param array $searcher_info
-   *   The searcher definition.
+   *   The searcher information as returned by facetapi_get_searcher_info().
    */
   public function __construct(array $searcher_info) {
     $this->info = $searcher_info;
 
-    // Registers the query type plugins classes associated with this adapter.
-    $registered_types = array();
-    foreach (ctools_get_plugins('facetapi', 'query_types') as $plugin) {
-      if ($searcher_info['adapter'] == $plugin['handler']['adapter']) {
-        $type = call_user_func(array($plugin['handler']['class'], 'getType'));
-        $registered_types[$type] = $plugin['handler']['class'];
-      }
-    }
-
-    // Iterates over facets and registers query type plugins.
-    foreach ($this->getEnabledFacets() as $facet) {
-
-      // Gets widget type from setting if there are more than one available.
-      if (1 == count($facet['query types'])) {
-        $query_type = $facet['query types'][0];
-      }
-      else {
-        $settings = $this->getFacetSettingsGlobal($facet)->settings;
-        $query_type = !empty($settings['query_type']) ? $settings['query_type'] : FALSE;
-      }
-
-      // If we found a query type, register the query type plugin.
-      if ($query_type && isset($registered_types[$query_type])) {
-        $plugin = new $registered_types[$query_type]($this, $facet);
-        $this->queryTypes[$facet['name']] = $plugin;
-      }
-      else {
-        $this->queryTypes[$facet['name']] = FALSE;
-      }
-    }
-
-    // Instantiates URL processor plugin.
-    $id = $searcher_info['url processor'];
-    $class = ctools_plugin_load_class('facetapi', 'url_processors', $id, 'handler');
-    if (!$class) {
-      $class = ctools_plugin_load_class('facetapi', 'url_processors', 'standard', 'handler');
-    }
-    $this->urlProcessor = new $class($this);
-
-    // Fetches, normalizes, and sets filter params.
-    $filter_key = $this->urlProcessor->getFilterKey();
-    $params = $this->urlProcessor->fetchParams();
-    $this->setParams($params, $filter_key);
+    // Load and initialize the url processor plugin. Initializing the plugin
+    // fetches the data from a source, usually $_GET, and trigger the methods
+    // that instantiate the query type plugins and process the active items.
+    $this->urlProcessor = $this->loadUrlProcessor($this->info['url processor']);
+    $this->initUrlProcessor();
   }
 
   /**
-   * Returns a boolean flagging whether $this->info['searcher'] executed a search.
+   * Returns a boolean flagging whether $this->info['searcher'] executed a
+   * search.
    *
-   * @return
+   * @return boolean
    *   A boolean flagging whether $this->info['searcher'] executed a search.
    *
    * @todo Generic search API should provide consistent functionality.
@@ -155,25 +169,90 @@ abstract class FacetapiAdapter {
   /**
    * Returns a boolean flagging whether facets in a realm shoud be displayed.
    *
-   * Useful, for example, for suppressing sidebar blocks in some cases.
+   * Useful, for example, for suppressing sidebar blocks in some cases. Apache
+   * Solr Search Integration used this method to prevent blocks from being
+   * displayed when the module was configured to render them in the search body
+   * on "empty" searches instead of the normal facet location.
    *
-   * @return
+   * @param string $realm_name
+   *   The machine readable name of the realm.
+   *
+   * @return boolean
    *   A boolean flagging whether to display a given realm.
    *
-   * @todo Generic search API should provide consistent functionality.
+   * @todo It appears that no implementing modules are leveraging this anymore.
+   *   Let's discuss whether to deprecate this method or even remove it from
+   *   future versions of Facet API at http://drupal.org/node/1661410.
    */
   abstract public function suppressOutput($realm_name);
 
   /**
-   * Processes a raw array of active filters.
+   * Loads the URL processor associated with this adapter.
+   *
+   * Use FacetapiAdapter::getUrlProcessor() in favor of this method when getting
+   * the adapter for use in other classes. This method is separated out form the
+   * constructor for testing purposes only.
+   *
+   * @param string $id
+   *   The machine name of the url processor plugin.
+   *
+   * @return FacetapiUrlProcessor
+   *   An instance of the url processor plugin.
+   *
+   * @see http://drupal.org/node/1668484
+   */
+  public function loadUrlProcessor($id) {
+    // Ensure all required url processor classes are loaded.
+    // See http://drupal.org/node/1306198
+    $plugin_path = dirname(__FILE__);
+    require_once $plugin_path . '/url_processor.inc';
+    require_once $plugin_path . '/url_processor_standard.inc';
+
+    // Get the url processor plugin class. If the class for the passed plugin
+    // cannot be retrieved, log the error and load the standard plugin.
+    if (!$class = ctools_plugin_load_class('facetapi', 'url_processors', $id, 'handler')) {
+      watchdog('facetapi', 'Url processor plugin "@id" not valid, loading standard plugin.', array('@id' => $id), WATCHDOG_ERROR);
+      $class = ctools_plugin_load_class('facetapi', 'url_processors', 'standard', 'handler');
+    }
+
+    // Instantiates and initializes plugin.
+    return new $class($this);
+  }
+
+  /**
+   * Extracts, stores, and processes facet data.
+   *
+   * Wrapper around FacetapiAdapter::setParams() that fetches the params via the
+   * url processor plugin from some source, usually $_GET, and passes the filter
+   * key that is set in the plugin. This method is useful when the params and
+   * filter key are reset directly through the url processor and the active
+   * items need to be reprocessed by the adapter.
+   *
+   * @see FacetapiAdapter::setParams()
+   */
+  public function initUrlProcessor() {
+    $params = $this->urlProcessor->fetchParams();
+    $filter_key = $this->urlProcessor->getFilterKey();
+    $this->setParams($params, $filter_key);
+  }
+
+  /**
+   * Processes and stores the extracted facet data.
+   *
+   * Uses the url processor plugin to normalize the data extracted from the
+   * source and store it for later retrieval. Calls the active item processing
+   * routine, see FacetapiAdapter::processActiveItems() for more details.
    *
    * @param array $params
    *   An array of keyed params, such as $_GET.
    * @param string $filter_key
-   *   The array key in $params corresponding to filters.
+   *   The array key in $params containing the facet data.
    *
    * @return FacetapiAdapter
    *   An instance of this class.
+   *
+   * @see FacetapiUrlProcessor::normalizeParams()
+   * @see FacetapiAdapter::processActiveItems()
    */
   public function setParams(array $params = array(), $filter_key = 'f') {
     $this->facets = array();
@@ -184,46 +263,57 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Processes active items.
+   * Processes active facet items.
+   *
+   * Instantiates the query type plugins for all enabled facets. Extracts active
+   * items from the source, usually the query string, and uses the query type
+   * plugins to extract any additional information such as the start and end
+   * values for ranges.
    *
    * @see FacetapiAdapter::setParams()
    */
   public function processActiveItems() {
     $this->activeItems = array('facet' => array(), 'filter' => array());
 
-    // Groups enabled facets by facet alias.
+    // Refresh the query type plugins for all enabled facets.
+    $this->queryTypes = $this->loadQueryTypePlugins();
+
+    // Group enabled facets by facet alias. It is possible for aliases to be
+    // common across different facets, although they are usually unique.
     $enabled_aliases = array();
     foreach ($this->getEnabledFacets() as $facet) {
       $enabled_aliases[$facet['field alias']][] = $facet['name'];
       $this->activeItems['facet'][$facet['name']] = array();
     }
 
-    // Extracts valid filters from query string.
+    // Get the stored facet data and iterate over the passed values.
     $filter_key = $this->urlProcessor->getFilterKey();
     $params = $this->urlProcessor->getParams();
     foreach ($params[$filter_key] as $pos => $filter) {
-      // Bails if an object or array.
+      // Bail if the value is not a scalar, for example an object or array.
       if (!is_scalar($filter)) {
         continue;
       }
 
-      // Performs basic parsing of the filter.
+      // Perform basic parsing of the filter.
       $parts = explode(':', $filter, 2);
       $field_alias = rawurldecode($parts[0]);
       if (isset($parts[1]) && isset($enabled_aliases[$field_alias])) {
 
-        // Stores the base item.
+        // Store basic information about the active item. For details on how
+        // this array is structured, refer to the FacetapiAdapter::activeItems
+        // docblock.
         $item = array(
           'field alias' => $field_alias,
           'value' => $parts[1],
           'pos' => $pos,
         );
 
-        // Stores active items in the global active item array.
+        // Initialize and populate the active items. For details on how this
+        // array is structured, refer to the FacetapiAdapter::activeItems
+        // docblock.
         $this->activeItems['filter'][$filter] = $item;
         $this->activeItems['filter'][$filter]['facets'] = array();
-
-        // Stores active items per facet.
         foreach ($enabled_aliases[$field_alias] as $facet_name) {
           $item += $this->queryTypes[$facet_name]->extract($item);
           $this->activeItems['filter'][$filter]['facets'][] = $facet_name;
@@ -234,20 +324,79 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Returns the URL Processor.
+   * Returns an array of instantiated query type plugins for enabled facets.
+   *
+   * Iterates over the adapter's enabled facets and loads the appropriate query
+   * type plugin. If the adapter does not support the plugin, FALSE is set in
+   * place of a FacetapiQueryTypeInterface object.
+   *
+   * @return array
+   *   An associative array keyed by facet name to FacetapiQueryTypeInterface
+   *   object, FALSE if the query type is not supported bu this searcher.
+   *
+   * @see FacetapiAdapter::processActiveItems()
+   */
+  public function loadQueryTypePlugins() {
+    $query_types = array();
+
+    // Gather a whitelist of query type plugins supported by this searcher.
+    $plugin_ids = array();
+    foreach (ctools_get_plugins('facetapi', 'query_types') as $plugin) {
+      if ($this->info['adapter'] == $plugin['handler']['adapter']) {
+        $type = call_user_func(array($plugin['handler']['class'], 'getType'));
+        $plugin_ids[$type] = $plugin['handler']['class'];
+      }
+    }
+
+    // Iterate over enabled facets and instantiate each one's query type plugin.
+    foreach ($this->getEnabledFacets() as $facet) {
+
+      // Get the machine name of the query type plugin used by this facet.
+      if (1 == count($facet['query types'])) {
+        // There is only one query type supported by this facet, so use it.
+        $query_type = $facet['query types'][0];
+      }
+      else {
+        // Get query type from settings if there is more than one supported by
+        // this facet. For example, some facets only support simple term queries
+        // while others also support numeric range queries. In those instances,
+        // administrators have to select which one to use in the facet's
+        // administrative interface.
+        $settings = $this->getFacetSettingsGlobal($facet)->settings;
+        $query_type = !empty($settings['query_type']) ? $settings['query_type'] : FALSE;
+      }
+
+      // Instantiate the query type plugin if it is in the whitelist of query
+      // types supported by the backend. Store objects in an instance variable
+      // keyed by the machine name of the facet.
+      if ($query_type && isset($plugin_ids[$query_type])) {
+        $plugin = new $plugin_ids[$query_type]($this, $facet);
+        $query_types[$facet['name']] = $plugin;
+      }
+      else {
+        $query_types[$facet['name']] = FALSE;
+      }
+    }
+
+    // Return the instantiated query type plugins.
+    return $query_types;
+  }
+
+  /**
+   * Return the instantiated url processor plugin.
    *
    * @return FacetapiUrlProcessor
-   *   The URL Processor plugin.
+   *   The url processor plugin.
    */
   public function getUrlProcessor() {
     return $this->urlProcessor;
   }
 
   /**
-   * Returns all active filters.
+   * Return all active items keyed by raw filter, usually in field:value format.
    *
    * @return array
-   *   An array of active filters.
+   *   An array of active filters keyed by raw filter.
    */
   public function getAllActiveItems() {
     return $this->activeItems['filter'];
@@ -257,10 +406,20 @@ abstract class FacetapiAdapter {
    * Returns a facet's active items.
    *
    * @param array|string $facet
-   *   The facet definition or facet name,
+   *   Either the facet definition as returned by facetapi_facet_load() or the
+   *   machine readable name of the facet.
    *
    * @return array
-   *   The facet's active items.
+   *   An associative array containing (but not limited to):
+   * - field alias: The facet alias defined in the facet definition.
+   * - value: The active value passed through the source (usually $_GET) to
+   *   filter the result set.
+   * - pos: The zero-based position of the value in the source data. The url
+   *   processor plugin uses the "pos" to efficiently remove certain values when
+   *   building query strings in FacetapiQueryTypeInterface::getQueryString().
+   * - ...: Additional keys added to the array by the query type plugin's
+   *   FacetapiQueryTypeInterface::extract() method. For example, date and range
+   *   query types add the "start" and "end" values of the range.
    */
   public function getActiveItems(array $facet) {
     return $this->activeItems['facet'][$facet['name']];
@@ -270,11 +429,11 @@ abstract class FacetapiAdapter {
    * Tests whether a facet item is active by passing it's value.
    *
    * @param string $facet_name
-   *   The facet name.
+   *   The machine readable name of the facet.
    * @param string $value
    *   The facet item's value.
    *
-   * @return
+   * @return int
    *   Returns 1 if the item is active, 0 if it is inactive.
    */
   public function itemActive($facet_name, $value) {
@@ -312,20 +471,24 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Returns the path to the admin settings for a given realm.
+   * Returns the path to the the realm's admin settings page.
    *
-   * @param $realm_name
-   *   The name of the realm.
+   * @param string $realm_name
+   *   The machine readable name of the realm.
    *
    * @return
    *   The path to the admin settings.
+   *
+   * @todo This method is too nondescript. It cannot be changed since it is used
+   *   heavily by implementing modules, but it should be deprecated in favor of
+   *   a method with a more descript name.
    */
   public function getPath($realm_name) {
     return $this->info['path'] . '/facets/' . $realm_name;
   }
 
   /**
-   * Returns the search path.
+   * Returns the search path associated with this searcher.
    *
    * @return string
    *   A string containing the search path.
@@ -350,10 +513,10 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Sets the search keys.
+   * Sets the search keys, or query text, submitted by the user.
    *
    * @param string $keys
-   *   The search keys entered by the user.
+   *   The search keys, or query text, submitted by the user.
    *
    * @return FacetapiAdapter
    *   An instance of this class.
@@ -364,10 +527,10 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Gets the search keys.
+   * Gets the search keys, or query text, submitted by the user.
    *
    * @return string
-   *   The search keys entered by the user.
+   *   The search keys, or query text, submitted by the user.
    */
   public function getSearchKeys() {
     return $this->keys;
@@ -377,7 +540,7 @@ abstract class FacetapiAdapter {
    * Returns the number of results returned by the search query.
    *
    * @return int
-   *   An integer containing the number of results.
+   *   The number of results returned by the search query.
    */
   public function getResultCount() {
     global $pager_total;
@@ -418,6 +581,8 @@ abstract class FacetapiAdapter {
 
   /**
    * Allows for backend specific overrides to the settings form.
+   *
+   * @see facetapi_facet_display_form()
    */
   public function settingsForm(&$form, &$form_state) {
     // Nothing to do...
@@ -426,6 +591,9 @@ abstract class FacetapiAdapter {
   /**
    * Provides default values for the backend specific settings.
    *
+   * All settings added via FacetapiAdapter::settingsForm() should have
+   * corresponding defaults in this method.
+   *
    * @return array
    *   The defaults keyed by setting name to value.
    */
@@ -434,10 +602,10 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Returns TRUE if the back-end supports "missing" facets.
+   * Returns TRUE if the backend supports "missing" facets.
    *
    * @return bool
-   *   TRUE or FALSE.
+   *   TRUE if the backend supports "missing" facets, FALSE otherwise.
    */
   public function supportsFacetMissing() {
     return $this->info['supports facet missing'];
@@ -447,29 +615,41 @@ abstract class FacetapiAdapter {
    * Returns TRUE if the back-end supports "minimum facet counts".
    *
    * @return bool
-   *   TRUE or FALSE.
+   *   TRUE if the backend supports "minimum facet counts" facets, FALSE
+   *   otherwise.
    */
   public function supportsFacetMincount() {
     return $this->info['supports facet mincount'];
   }
 
   /**
-   * Adds facet query type plugins to the queue and invokes the execute() hook
-   * to allow for the backend to add filters to its native query object.
+   * Allows the backend to add facet queries to its native query object.
+   *
+   * This method is called by the implementing module to initialize the facet
+   * display process. The following actions are taken:
+   * - FacetapiAdapter::initActiveFilters() hook is invoked.
+   * - Dependency plugins are instantiated and executed.
+   * - Query type plugins are executed.
    *
    * @param mixed $query
-   *   The backend's native object.
+   *   The backend's native query object.
+   *
+   * @todo Should this method be deprecated in favor of one name init()? This
+   *   might make the code more readable in implementing modules.
+   *
+   * @see FacetapiAdapter::initActiveFilters()
    */
   function addActiveFilters($query) {
     module_load_include('inc', 'facetapi', 'facetapi.callbacks');
     facetapi_add_active_searcher($this->info['name']);
 
-    // Runs initActiveFilters hook, finds active facets.
+    // Invoke initActiveFilters hook.
     $this->initActiveFilters($query);
+
     foreach ($this->getEnabledFacets() as $facet) {
       $settings = $this->getFacet($facet)->getSettings();
 
-      // Invoke the dependency plugins.
+      // Instantiate and execute dependency plugins.
       $display = TRUE;
       foreach ($facet['dependency plugins'] as $id) {
         $class = ctools_plugin_load_class('facetapi', 'dependencies', $id, 'handler');
@@ -479,12 +659,12 @@ abstract class FacetapiAdapter {
         }
       }
 
-      // Stores whether this facet passed its dependencies.
+      // Store whether this facet passed its dependencies.
       $this->dependenciesPassed[$facet['name']] = $display;
 
-      // Add query type plugin if dependencies were met, otherwise remove the
-      // facet's active items so they don't display in the current search block
-      // or appear as active in the breadcrumb trail.
+      // Execute query type plugin if dependencies were met, otherwise remove
+      // the facet's active items so they don't display in the current search
+      // block or appear as active in the breadcrumb trail.
       if ($display && $this->queryTypes[$facet['name']]) {
         $this->queryTypes[$facet['name']]->execute($query);
       }
@@ -500,8 +680,7 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Allows the backend to initialize its query object before adding the facet
-   * filters.
+   * Hook that allows the backend to initialize its query object for faceting.
    *
    * @param mixed $query
    *   The backend's native object.
@@ -513,16 +692,18 @@ abstract class FacetapiAdapter {
   /**
    * Initializes a new settings object.
    *
-   * @param $name
+   * @param string $name
    *   A string containing the unique name of the configuration.
-   * @param array $facet_name
-   *   A string containing the machine readable name of the facet.
-   * @param $realm_name
+   * @param string $facet_name
+   *   The machine readable name of the facet.
+   * @param string $realm_name
    *   A string containing the machine readable name of the realm, NULL if we
    *   are initializing global settings.
    *
    * @return stdClass
    *   An object containing the initialized settings.
+   *
+   * @see ctools_export_crud_new()
    */
   public function initSettingsObject($name, $facet_name, $realm_name = NULL) {
     $cached_settings = facetapi_get_searcher_settings($this->info['name']);
@@ -544,20 +725,28 @@ abstract class FacetapiAdapter {
   /**
    * Returns realm specific settings for a facet.
    *
+   * Realm specific settings usually act on the facet data after it has been
+   * returned by the backend, for example the display widget and sort settings.
+   *
    * @param array $facet
-   *   An array containing the facet definition.
+   *   The facet definition as returned by facetapi_facet_load().
    * @param array $realm
-   *   An array containing the realm definition.
+   *   The realm definition as returned by facetapi_realm_load().
    *
    * @return stdClass
    *   An object containing the settings.
    *
+   * @see FacetapiAdapter::initSettingsObject()
    * @see ctools_export_crud_load()
    */
   public function getFacetSettings(array $facet, array $realm) {
-    // Builds the unique name of the configuration settings and loads.
+    // Build the unique name of the configuration and check whether the setting
+    // has already be loaded so defaults are processed only once per setting.
     $name = $this->info['name'] . ':' . $realm['name'] . ':' . $facet['name'];
     if (!isset($this->settings[$name])) {
+
+      // Initialize settings and flag whether it is "new" meaning that all
+      // setting defaults are used.
       $this->settings[$name] = $this->initSettingsObject($name, $facet['name'], $realm['name']);
       $is_new = empty($this->settings[$name]->settings);
 
@@ -569,7 +758,7 @@ abstract class FacetapiAdapter {
         $widget = $realm['default widget'];
       }
 
-      // Apply default settings.
+      // Apply defaults common across all configs.
       $this->settings[$name]->settings += array(
         'weight' => 0,
         'widget' => $widget,
@@ -580,7 +769,7 @@ abstract class FacetapiAdapter {
         'empty_behavior' => 'none',
       );
 
-      // Apply default sort info if necessary.
+      // Apply default sort info only if the configuration is "new".
       if ($is_new) {
         $weight = -50;
         foreach ($facet['default sorts'] as $sort => $default) {
@@ -593,7 +782,7 @@ abstract class FacetapiAdapter {
       // Apply the widget plugin's default settings.
       $id = $this->settings[$name]->settings['widget'];
       $class = ctools_plugin_load_class('facetapi', 'widgets', $id, 'handler');
-      // If we have an invalid widget, fall back to the realm's default.
+      // If we have an invalid widget, fall back to the realm's default widget.
       if (!$class) {
         $id = $this->settings[$name]->settings['widget'] = $realm['default widget'];
         $class = ctools_plugin_load_class('facetapi', 'widgets', $id, 'handler');
@@ -608,10 +797,15 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Returns realm specific settings for a facet.
+   * Returns global settings for a facet.
+   *
+   * Global settings are usually things that are processed by the backend such
+   * as the hard limit or query type. It isn't practical to execute separate
+   * search queries per realm to make these settings realm specific, so they
+   * are configured globally and reflected across all realms for this searcher.
    *
    * @param array $facet
-   *   An array containing the facet definition.
+   *   The facet definition as returned by facetapi_facet_load().
    *
    * @return
    *   An object containing the settings.
@@ -619,20 +813,31 @@ abstract class FacetapiAdapter {
    * @see ctools_export_crud_load()
    */
   public function getFacetSettingsGlobal(array $facet) {
+    // Build the unique name of the configuration and check whether the setting
+    // has already be loaded so defaults are processed only once per setting.
     $name = $this->info['name'] . '::' . $facet['name'];
     if (!isset($this->settings[$name])) {
+
+      // Initialize settings and flag whether it is "new" meaning that all
+      // setting defaults are used.
       $this->settings[$name] = $this->initSettingsObject($name, $facet['name']);
       $is_new = empty($this->settings[$name]->settings);
 
-      // Apply default settings.
+      // Ensure the default operator and query type are valid.
+      // @see http://drupal.org/node/1443340
+      $default_query_type = reset($facet['query types']);
+      $allowed_operators = array_filter($facet['allowed operators']);
+      $default_operator = key($allowed_operators);
+
+      // Apply defaults common across all configs.
       $this->settings[$name]->settings += array(
-        'operator' => FACETAPI_OPERATOR_AND,
+        'operator' => $default_operator,
         'hard_limit' => 50,
         'dependencies' => array(),
         'facet_mincount' => 1,
         'facet_missing' => 0,
         'flatten' => 0,
-        'query_type' => 'term',
+        'query_type' => $default_query_type,
       );
 
       // Apply the adapter's default settings.
@@ -655,7 +860,7 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Returns the enabled facets associated with the instance of the adapter.
+   * Returns enabled facets for the searcher associated with this adapter.
    *
    * @param string $realm_name
    *   The machine readable name of the realm, pass NULL to get the enabled
@@ -663,6 +868,8 @@ abstract class FacetapiAdapter {
    *
    * @return array
    *   An array of enabled facets.
+   *
+   * @see facetapi_get_enabled_facets()
    */
   public function getEnabledFacets($realm_name = NULL) {
     return facetapi_get_enabled_facets($this->info['name'], $realm_name);
@@ -672,7 +879,7 @@ abstract class FacetapiAdapter {
    * Returns a FacetapiFacet instance for the facet being rendered.
    *
    * @param array $facet
-   *   The facet definition.
+   *   The facet definition as returned by facetapi_facet_load().
    *
    * @return FacetapiFacet
    *   The facet rendering object object.
@@ -685,13 +892,15 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Returns a registered facet query
+   * Returns the facet's instantiated query type plugin.
    *
    * @param array|string $facet
-   *   The facet definition or facet name.
+   *   Either the facet definition as returned by facetapi_facet_load() or the
+   *   machine readable name of the facet.
    *
-   * @return FacetapiQueryTypeInterface
-   *   The instantiated query type plugin.
+   * @return FacetapiQueryTypeInterface|NULL
+   *   The instantiated query type plugin, NULL if the passed facet is not valid
+   *   or does not have a query type plugin associated with it.
    */
   public function getFacetQuery($facet) {
     $facet_name = (is_array($facet)) ? $facet['name'] : $facet;
@@ -701,7 +910,7 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Returns the human readable value associated with a facet's raw value.
+   * Maps a facet's index value to a human readable value displayed to the user.
    *
    * @param string $facet_name
    *   The machine readable name of the facet.
@@ -721,12 +930,14 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Returns the processor associates with the facet.
+   * Returns the processor associated with the facet.
    *
    * @param string $facet_name
    *   The machine readable name of the facet.
    *
-   * @return FacetapiFacetProcessor
+   * @return FacetapiFacetProcessor|FALSE
+   *   The instantiated processor object, FALSE if the passed facet is not valid
+   *   or does not have processor instantiated for it.
    */
   public function getProcessor($facet_name) {
     if (isset($this->processors[$facet_name])) {
@@ -741,7 +952,7 @@ abstract class FacetapiAdapter {
    * Helper function that returns the query string variables for a facet item.
    *
    * @param array $facet
-   *   The facet definition.
+   *   The facet definition as returned by facetapi_facet_load().
    * @param array $values
    *   An array containing the item's values being added to or removed from the
    *   query string dependent on whether or not the item is active.
@@ -750,16 +961,18 @@ abstract class FacetapiAdapter {
    *
    * @return array
    *   The query string vriables.
+   *
+   * @see FacetapiUrlProcessor::getQueryString()
    */
   public function getQueryString(array $facet, array $values, $active) {
     return $this->urlProcessor->getQueryString($facet, $values, $active);
   }
 
   /**
-   * Helper function that returns the facet path for a facet item.
+   * Helper function that returns the path for a facet link.
    *
    * @param array $facet
-   *   The facet definition.
+   *   The facet definition as returned by facetapi_facet_load().
    * @param array $values
    *   An array containing the item's values being added to or removed from the
    *   query string dependent on whether or not the item is active.
@@ -768,26 +981,37 @@ abstract class FacetapiAdapter {
    *
    * @return string
    *   The facet path.
+   *
+   * @see FacetapiUrlProcessor::getFacetPath()
    */
   public function getFacetPath(array $facet, array $values, $active) {
     return $this->urlProcessor->getFacetPath($facet, $values, $active);
   }
 
   /**
-   * Initializes facet builds, adds breadcrumb trail.
+   * Initializes facet builds, sets the breadcrumb trail.
+   *
+   * Facets are built via FacetapiFacetProcessor objects. Facets only need to be
+   * processed, or built, once regardless of how many realms they are rendered
+   * in. The FacetapiAdapter::processed semaphore is set when this method is
+   * called ensuring that facets are built only once regardless of how many
+   * times this method is called.
+   *
+   * @todo For clarity, should this method be named buildFacets()?
    */
   public function processFacets() {
     if (!$this->processed) {
       $this->processed = TRUE;
 
-      // Initializes each facet's render array.
+      // Initialize each facet's render array. This render array is a common
+      // base for all realms and widgets.
       foreach ($this->getEnabledFacets() as $facet) {
         $processor = new FacetapiFacetProcessor($this->getFacet($facet));
         $this->processors[$facet['name']] = $processor;
         $this->processors[$facet['name']]->process();
       }
 
-      // Sets the breadcrumb trail if a search was executed.
+      // Set the breadcrumb trail if a search was executed.
       if ($this->searchExecuted()) {
         $this->urlProcessor->setBreadcrumb();
       }
@@ -795,52 +1019,58 @@ abstract class FacetapiAdapter {
   }
 
   /**
-   * Builds the render array for facets in a realm.
+   * Uses each facet's widget to build the realm's render array.
+   *
+   * This array is passed to Drupal's rendering layer for display. The widget
+   * plugins are executed to convert the base render arrays constructed by
+   * FacetapiAdapter::processFacets() to a realm specific render array.
    *
    * @param string $realm_name
    *   The machine readable name of the realm.
    *
    * @return array
-   *   The render array.
+   *   The realm's render array.
+   *
+   * @see FacetapiAdapter::processFacets()
    */
   public function buildRealm($realm_name) {
-    // Bails if realm isn't valid.
+    // Bail if realm isn't valid.
     // @todo Call watchdog()?
     if (!$realm = facetapi_realm_load($realm_name)) {
       return array();
     }
 
-    // Makes sure facet builds are initialized.
+    // Make sure facet builds are initialized and breakcrumb trail is set.
     $this->processFacets();
 
-    // Adds JavaScript, initializes render array.
+    // Add JavaScript, initializes the realm specific render array.
     drupal_add_js(drupal_get_path('module', 'facetapi') . '/facetapi.js');
     $build = array(
       '#adapter' => $this,
       '#realm' => $realm,
     );
 
-    // Builds each facet in the realm, merges into realm's render array.
+    // Iterate over the realm's enabled facets and build their render arrays.
     foreach ($this->getEnabledFacets($realm['name']) as $facet) {
       // Continue to the next facet if this one failed its dependencies.
       if (!$this->dependenciesPassed[$facet['name']]) {
         continue;
       }
 
-      // Gets the initialized build.
+      // Initialize the facet's render array.
       $field_alias = $facet['field alias'];
       $processor = $this->processors[$facet['name']];
       $facet_build = $this->getFacet($facet)->build($realm, $processor);
 
-      // Tries to be smart when merging the render arrays. Crazy things happen
-      // when merging facets with the same field alias such as taxonomy terms in
-      // the fieldset realm. We want to merge only the values.
+      // Try to be smart when merging the render arrays. Crazy things happen
+      // when merging facets with the same field alias. In these instances we
+      // want to merge only the values.
       foreach (element_children($facet_build) as $child) {
-        // Bails if there is nothing to render.
+        // Bail if there is nothing to render.
         if (!element_children($facet_build[$child])) {
           continue;
         }
-        // Attempts to merge gracefully.
+        // Our attempt at merging gracefully.
         if (!isset($build[$child])) {
           $build = array_merge_recursive($build, $facet_build);
         }
@@ -869,38 +1099,48 @@ abstract class FacetapiAdapter {
 }
 
 /**
- * Stores facet data, provides methods that build the facet's render array.
+ * Wrapper around the facet definition with methods that build render arrays.
+ *
+ * Thic class contain methods that assist in render array generation and stores
+ * additional context about how and what generated the render arrays for
+ * consumption by the widget plugins. Objects can also be used as if they are
+ * the facet definitions returned by facetapi_facet_load().
  */
 class FacetapiFacet implements ArrayAccess {
 
   /**
-   * The FacetapiAdapter object.
+   * The FacetapiAdapter object this class was instantiated from.
    *
    * @var FacetapiAdapter
    */
   protected $adapter;
 
   /**
-   * The facet definition.
+   * The facet definition as returned by facetapi_facet_load().
+   *
+   * This is the array acted on by the ArrayAccess interface methods so the
+   * object can be used as if it were the facet definition array.
    *
    * @var array
    */
   protected $facet;
 
   /**
-   * The build array for the facet items.
+   * The base render array used as a starting point for rendering.
    *
    * @var array
    */
   protected $build = array();
 
   /**
-   * Constructor, sets adapter and facet definition.
+   * Constructs a FacetapiAdapter object.
    *
-   * @param $adapter
-   *   A FacetapiAdapter object.
-   * @param $facet
-   *   An array containing the facet definition.
+   * Sets the adapter and facet definitions.
+   *
+   * @param FacetapiAdapter $adapter
+   *   he FacetapiAdapter object this class was instantiated from.
+   * @param array $facet
+   *   The facet definition as returned by facetapi_facet_load().
    */
   public function __construct(FacetapiAdapter $adapter, array $facet) {
     $this->adapter = $adapter;
@@ -908,36 +1148,21 @@ class FacetapiFacet implements ArrayAccess {
   }
 
   /**
-   * Whether a offset exists
-   *
-   * @param mixed offset
-   *   An offset to check for.
-   *
-   * @return boolean
+   * Implements ArrayAccess::offsetExists().
    */
   public function offsetExists($offset) {
     return isset($this->facet[$offset]);
   }
 
   /**
-   * Returns the value at specified offset.
-   *
-   * @param mixed offset
-   *   The offset to retrieve.
-   *
-   * @return mixed
+   * Implements ArrayAccess::offsetGet().
    */
   public function offsetGet($offset) {
     return isset($this->facet[$offset]) ? $this->facet[$offset] : NULL;
   }
 
   /**
-   * Assigns a value to the specified offset.
-   *
-   * @param mixed offset
-   *   The offset to assign the value to.
-   * @param mixed value
-   *   The value to set.
+   * Implements ArrayAccess::offsetSet().
    */
   public function offsetSet($offset, $value) {
     if (NULL === $offset) {
@@ -949,17 +1174,14 @@ class FacetapiFacet implements ArrayAccess {
   }
 
   /**
-   * Unsets an offset.
-   *
-   * @param mixed offset
-   *   The offset to unset.
+   * Implements ArrayAccess::offsetUnset().
    */
   public function offsetUnset($offset) {
     unset($this->facet[$offset]);
   }
 
   /**
-   * Returns the adapter object.
+   * Returns the FacetapiAdapter object this class was instantiated from.
    *
    * @return FacetapiAdapter
    *   The adapter object.
@@ -969,7 +1191,7 @@ class FacetapiFacet implements ArrayAccess {
   }
 
   /**
-   * Returns the facet definition.
+   * Returns the facet definition as returned by facetapi_facet_load().
    *
    * @return array
    *   An array containing the facet definition.
@@ -979,24 +1201,27 @@ class FacetapiFacet implements ArrayAccess {
   }
 
   /**
-   * Returns the facet definition.
+   * Returns the base render array used as a starting point for rendering.
    *
    * @return array
-   *   An array containing the facet definition.
+   *   The base render array.
    */
   public function getBuild() {
     return $this->build;
   }
 
   /**
-   * Gets facet setting for the passed realm.
+   * Returns realm specific or global settings for a facet.
    *
    * @param string|array $realm
-   *   The machine readable name of the realm or realm definition. Pass null to
-   *   get global settings.
+   *   The machine readable name of the realm or an array containing the realm
+   *   definition. Pass NULL to return the facet's global settings.
    *
    * @return
    *   An object containing the settings.
+   *
+   * @see FacetapiAdapter::getFacetSettings()
+   * @see FacetapiAdapter::getFacetSettingsGlobal()
    */
   public function getSettings($realm = NULL) {
     if ($realm && !is_array($realm)) {
@@ -1007,23 +1232,28 @@ class FacetapiFacet implements ArrayAccess {
   }
 
   /**
-   * Returns the facet's render array.
+   * Build the facet's render array for the realm.
+   *
+   * Executes the filter plugins to modify the base render array, then passes
+   * the filtered array to the widget plugin. The widget plugin is executed to
+   * finalize the build if the filtered array contains items. Otherwise the
+   * empty behavior plugin is executed to finalize the build.
    *
    * @param array $realm
-   *   An array containing the realm definition.
+   *   The realm definition as returned by facetapi_realm_load().
    * @param FacetapiFacetProcessor $processor
    *   The processor object.
    *
-   * @return
-   *   The facet's build array.
+   * @return array
+   *   The facet's render array keyed by the FacetapiWidget::$key property.
    */
   public function build(array $realm, FacetapiFacetProcessor $processor) {
     $settings = $this->getSettings($realm);
 
-    // Gets the base render array from the facet processor.
+    // Get the base render array used as a starting point for the widget.
     $this->build = $processor->getBuild();
 
-    // Executes filter plugins.
+    // Execute the filter plugins.
     // @todo Defensive coding here for filters?
     $enabled_filters = array_filter($settings->settings['filters'], 'facetapi_filter_disabled_filters');
     uasort($enabled_filters, 'drupal_sort_weight');
@@ -1037,27 +1267,29 @@ class FacetapiFacet implements ArrayAccess {
       }
     }
 
-    // Instantiates the widget plugin and initializes.
-    // @todo Defensive coding here for widgets?
+    // Instantiate and initialize the widget plugin.
+    // @todo Add defensive coding here for widgets?
     $widget_name = $settings->settings['widget'];
-    if (!$class = ctools_plugin_load_class('facetapi', 'widgets', $widget_name, 'handler')) {
+    if ($class = ctools_plugin_load_class('facetapi', 'widgets', $widget_name, 'handler')) {
+      $widget_plugin = new $class($widget_name, $realm, $this, $settings);
+      $widget_plugin->init();
+    }
+    else {
       watchdog('facetapi', 'Widget %name not valid.', array('%name' => $widget_name), WATCHDOG_ERROR);
       return array();
     }
-    $widget_plugin = new $class($widget_name, $realm, $this, $settings);
-    $widget_plugin->init();
 
     if ($this->build) {
-      // Executes widget plugin.
+      // Execute the widget plugin and get the finalized render array.
       $widget_plugin->execute();
       $build = $widget_plugin->getBuild();
     }
     else {
-      // Instantiates empty behavior plugin.
+      // Instantiate the empty behavior plugin.
       $id = $settings->settings['empty_behavior'];
       $class = ctools_plugin_load_class('facetapi', 'empty_behaviors', $id, 'handler');
       $empty_plugin = new $class($settings);
-      // Executes empty behavior plugin.
+      // Execute the empty behavior plugin.
       $build = $widget_plugin->getBuild();
       $build[$this['field alias']] = $empty_plugin->execute();
     }
@@ -1067,24 +1299,29 @@ class FacetapiFacet implements ArrayAccess {
       unset($build[$this['field alias']]);
     }
 
-    // Adds JavaScript settings in a way that merges with others already set.
+    // Add JavaScript settings by merging with the others already set.
     $merge_settings['facetapi']['facets'][] = $widget_plugin->getJavaScriptSettings();
     drupal_add_js($merge_settings, 'setting');
 
-    // Returns array keyed by the FacetapiWidget::$key property.
+    // Return render array keyed by the FacetapiWidget::$key property.
     return array($widget_plugin->getKey() => $build);
   }
 }
 
 /**
- * Processes facets, initializes the build.
+ * Builds base render array used as a starting point for rendering.
+ *
+ * The processor constructs the base render array used by widgets across all
+ * realms. It is responsible for mapping the raw data returned by the index to
+ * human readable values, processing hierarchical data, and building the query
+ * strings for each facet item via the adapter's url processor plugin.
  */
 class FacetapiFacetProcessor {
 
   /**
-   * An array of mapped values keyed by their raw value.
+   * An array of human readable values keyed by their raw index value.
    *
-   * @var $map
+   * @var array
    */
   protected $map = array();
 
@@ -1096,32 +1333,38 @@ class FacetapiFacetProcessor {
   protected $facet;
 
   /**
-   * The facet's initialized render array.
+   * The base render array used as a starting point for rendering.
    *
    * @var array
    */
   protected $build = array();
 
   /**
-   * Arrays of children keyed by their active parent's value.
+   * Array of children keyed by their active parent's index value.
    *
    * @var array
    */
   protected $activeChildren = array();
 
   /**
-   * Constructor, initializes render array.
+   * Constructs a FacetapiAdapter object.
+   *
+   * Stores the facet being processed.
    *
    * @param FacetapiFacet $facet
    *   The facet being processed.
-   *
    */
   public function __construct(FacetapiFacet $facet) {
     $this->facet = $facet;
   }
 
   /**
-   * Processes the facet items.
+   * Builds the base render array used as a starting point for rendering.
+   *
+   * This method takes the following actions:
+   * - Maps index values to their human readable values.
+   * - Processes hierarchical data.
+   * - Builds each facet item's query string variables.
    */
   public function process() {
     $this->build = array();
@@ -1145,7 +1388,10 @@ class FacetapiFacetProcessor {
    * Helper function to get the facet's active items.
    *
    * @return array
-   *   The facet's active items.
+   *   The facet's active items. See the FacetapiAdapter::getActiveItems()
+   *   return value for the structure of the array.
+   *
+   * @see FacetapiAdapter::getActiveItems()
    */
   public function getActiveItems() {
     return $this->facet->getAdapter()->getActiveItems($this->facet->getFacet());
@@ -1155,7 +1401,7 @@ class FacetapiFacetProcessor {
    * Gets an active item's children.
    *
    * @param string $value
-   *   The value of the active item.
+   *   The index value of the item.
    *
    * @return array
    *   The active item's childen.
@@ -1172,7 +1418,7 @@ class FacetapiFacetProcessor {
   }
 
   /**
-   * Returns the human readable value associated with a raw value.
+   * Maps a facet's index value to a human readable value displayed to the user.
    *
    * @param string $value
    *   The raw value passed through the query string.
@@ -1188,7 +1434,16 @@ class FacetapiFacetProcessor {
    * Initializes the facet's render array.
    *
    * @return array
-   *   The initialized render array.
+   *   The initialized render array containing:
+   *   - #markup: The value displayed to the user.
+   *   - #path: The href of the facet link.
+   *   - #html: Whether #markup is HTML. If TRUE, it is assumed that the data
+   *     has already been properly been sanitized for display.
+   *   - #indexed_value: The raw value stored in the index.
+   *   - #count: The number of items in the result set.
+   *   - #active: An integer flagging whether the facet is active or not.
+   *   - #item_parents: An array of the parent index values.
+   *   - #item_children: References to the child render arrays.
    */
   protected function initializeBuild() {
     $build = array();
@@ -1228,18 +1483,20 @@ class FacetapiFacetProcessor {
   }
 
   /**
-   * Maps the IDs to human readable values via the mapping callback.
+   * Maps the IDs to human readable values via the facet's mapping callback.
    *
    * @param array $build
    *   The initialized render array.
    *
    * @return array
-   *   The initialized render array with mapped values.
+   *   The initialized render array with mapped values. See the return of
+   *   FacetapiFacetProcessor::initializeBuild() for the structure of the return
+   *   array.
    */
   protected function mapValues(array $build) {
     if ($this->facet['map callback']) {
-      // Gets available items and active items, runs through map callback only
-      // when there are values to map.
+      // Get available items and active items, invoke the map callback only when
+      // there are values to map.
       // NOTE: array_merge() doesn't work here when the values are numeric.
       if ($values = array_unique(array_keys($build + $this->getActiveItems()))) {
         $this->map = call_user_func($this->facet['map callback'], $values, $this->facet['map options']);
@@ -1268,6 +1525,8 @@ class FacetapiFacetProcessor {
    *
    * @return array
    *   The initialized render array with processed hierarchical relationships.
+   *   See the return of FacetapiFacetProcessor::initializeBuild() for the
+   *   structure of the return array.
    */
   protected function processHierarchy(array $build) {
 
@@ -1345,8 +1604,10 @@ class FacetapiFacetProcessor {
    * @param int $active
    *   An integer flagging whether the item is active or not.
    *
-   * @return
+   * @return string
    *   The facet path.
+   *
+   * @see FacetapiAdapter::getFacetPath()
    */
   public function getFacetPath(array $values, $active) {
     return $this->facet
@@ -1363,8 +1624,10 @@ class FacetapiFacetProcessor {
    * @param int $active
    *   An integer flagging whether the item is active or not.
    *
-   * @return
+   * @return array
    *   An array containing the query string variables.
+   *
+   * @see FacetapiAdapter::getQueryString()
    */
   public function getQueryString(array $values, $active) {
     return $this->facet
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/dependency.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/dependency.inc
index d68ccbf..09c4bc3 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/dependency.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/dependency.inc
@@ -7,52 +7,70 @@
 
 /**
  * Abstract class extended by dependency plugins.
+ *
+ * Dependencies are conditions that must be met for facets to be processed and
+ * displayed. The dependency system allows site builders to implement the
+ * "progressive disclosure" pattern, where facets are exposed only after some
+ * action has been taken. For example, a common use case is to only expose
+ * taxonomy facets when the bundle they are attached to is selected by the user
+ * as an active facet.
  */
 abstract class FacetapiDependency {
 
   /**
-   * The adapter object.
+   * The machine name of the plugin associated with this instance.
+   *
+   * @var string
+   */
+  protected $id;
+
+  /**
+   * The adapter associated with facet whose dependencies are being checked.
    *
    * @var FacetapiAdapter
    */
   protected $adapter;
 
   /**
-   * The facet definition.
+   * The facet definition as returned by facetapi_facet_load().
    *
    * @var array
    */
   protected $facet;
 
   /**
-   * An array of active items.
+   * An array of dependency settings.
+   *
+   * This is the "dependencies" key of the "settings" property of the facet's
+   * global settings returned by FacetapiAdapter::getFacetSettingsGlobal().
    *
    * @var array
    */
-  protected $activeItems;
+  protected $settings;
 
   /**
-   * An array of facet settings.
+   * The facet's active items as returned by FacetapiAdapter::getActiveItems().
    *
    * @var array
    */
-  protected $settings;
+  protected $activeItems;
 
   /**
+   * Constructs a FacetapiDependency object.
    *
+   * Sets the necessary information in order to check a facet's dependencies.
    *
+   * @param array $id
+   *   The machine name of the dependency plugin being instantiated as defined
+   *   in hook_facetapi_dependencies() implementations.
    * @param FacetapiAdapter $adapter
-   *
+   *   The adapter associated with facet whose dependencies are being checked.
    * @param array $facet
-   *
+   *   The facet definition as returned by facetapi_facet_load().
    * @param array $active_items
-   *
+   *   The facet's active items returned by FacetapiAdapter::getActiveItems().
    * @param stdClass $settings
-   *
-   * @param array $id
-   *
-   * @param array $label
-   *
+   *   The facet's global settings.
    */
   public function __construct($id, FacetapiAdapter $adapter, array $facet, stdClass $settings, array $active_items = array()) {
     $this->id = $id;
@@ -60,7 +78,7 @@ abstract class FacetapiDependency {
     $this->facet = $facet;
     $this->activeItems = $active_items;
 
-    // Captures dependency settings only, makes sure defaults are set.
+    // Capture dependency settings only, ensure defaults are set.
     if (empty($settings->settings['dependencies'])) {
       $settings->settings['dependencies'] = array();
     }
@@ -69,17 +87,17 @@ abstract class FacetapiDependency {
   }
 
   /**
-   * Gets the id of the plugin.
+   * Gets the machine name of the plugin.
    *
    * @return string
-   *   The machine readable name of the plugin.
+   *   The machine name of the plugin.
    */
   public function getId() {
     return $this->id;
   }
 
   /**
-   * Gets the facet definition.
+   * Gets the facet definition as returned by facetapi_facet_load().
    *
    * @return array
    *   The facet definition.
@@ -91,6 +109,12 @@ abstract class FacetapiDependency {
   /**
    * Performs the dependency check.
    *
+   * The dependency system works similar to hook_node_access() in that returning
+   * FASLE explicitly fails the dependency, returning NULL does not actively
+   * pass or fail the dependency, and returning TRUE explicitly passes the
+   * dependency even if other plugins already returned FALSE. Plugins will
+   * usually return either NULL or FALSE in this method.
+   *
    * @return boolean|NULL
    *   Return NULL to pass through to other dependency plugins, or return a
    *   boolean to explicitly set the result.
@@ -98,14 +122,22 @@ abstract class FacetapiDependency {
   abstract public function execute();
 
   /**
+   * Allows the plugin to add settings to the dependency form.
    *
+   * @see facetapi_facet_dependencies_form()
    */
   public function settingsForm(&$form, &$form_state) {
     // Nothing to do.
   }
 
   /**
+   * Provides default values for the plugin settings.
    *
+   * All settings added via FacetapiDependency::settingsForm() should have
+   * corresponding defaults in this method.
+   *
+   * @return array
+   *   The defaults keyed by setting name to value.
    */
   public function getDefaultSettings() {
     return array();
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/dependency_bundle.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/dependency_bundle.inc
index 8e2a0d2..9800693 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/dependency_bundle.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/dependency_bundle.inc
@@ -2,16 +2,24 @@
 
 /**
  * @file
- * Performs a dependency check against the passed bundle.
+ * The bundle dependency class.
  */
 
 /**
- * Adds a dependency on bundle.
+ * Dependency plugin adding bundle conditions.
+ *
+ * The bundle dependency plugin adds conditions based on active bundle facets.
+ * For example, the administrator can configure whether a facet is displayed
+ * based on wheter certain bundles are active. If a facet stores field data,
+ * then an option is exposed to only show the facet if a bundle the field is
+ * attached to is active. This is most commonly used with taxonomy facets.
+ *
+ * @see http://drupal.org/node/551620
  */
 class FacetapiDependencyBundle extends FacetapiDependency {
 
   /**
-   * Executes the dependency check.
+   * Implements FacetapiDependency::execute().
    */
   public function execute() {
     switch ($this->settings['bundle']) {
@@ -57,6 +65,8 @@ class FacetapiDependencyBundle extends FacetapiDependency {
    *
    * @return array
    *   An array of enabled bundle facets.
+   *
+   * @see FacetapiDependencyBundle::filterBundleFacets()
    */
   public function getEnabledBundleFacets() {
     $enabled = array_filter($this->adapter->getEnabledFacets(), array($this, 'filterBundleFacets'));
@@ -68,17 +78,19 @@ class FacetapiDependencyBundle extends FacetapiDependency {
    * Returns TRUE if the facet contains bundle information.
    *
    * @param array $facet
-   *   The facet definition beinf filtered.
+   *   The facet definition as returned by facetapi_facet_load().
    *
    * @return
    *   A boolean flagging whether the item should remain in the array.
+   *
+   * @see array_filter()
    */
   public function filterBundleFacets($facet) {
     return !empty($facet['field api bundles']);
   }
 
   /**
-   * Adds dependency settings to the form.
+   * Overrides FacetapiDependency::settingsForm().
    */
   public function settingsForm(&$form, &$form_state) {
 
@@ -112,13 +124,14 @@ class FacetapiDependencyBundle extends FacetapiDependency {
   }
 
   /**
-   * Gets bundles.
+   * Returns an array of bundles suitable for use as options in FAPI elements.
    *
    * @param array $entity_types
-   *   An array containing the machine readable name of the entities.
+   *   An array containing the machine names of entities to gather bundles for.
    *
-   * @return
-   *   An array of bundles associates with the entities.
+   * @return array
+   *   An associative array keyed by machine name of the bundles to escaped
+   *   bundle labels.
    */
   public function getBundleOptions(array $entity_types) {
     $options = array();
@@ -133,7 +146,7 @@ class FacetapiDependencyBundle extends FacetapiDependency {
   }
 
   /**
-   * Returns defaults for settings.
+   * Overrides FacetapiDependency::getDefaultSettings().
    */
   public function getDefaultSettings() {
     return array(
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/dependency_role.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/dependency_role.inc
index ed92d2a..a9c6264 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/dependency_role.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/dependency_role.inc
@@ -2,16 +2,21 @@
 
 /**
  * @file
- * Performs a dependency check against the passed content type.
+ * The role dependency class.
  */
 
 /**
- * Adds a dependency on content type.
+ * Dependency plugin adding the user role conditions.
+ *
+ * The role dependency plugin adds conditions based on the current user's role.
+ * Although the backend should handle access control, this plugin can help
+ * personalize the search interface based on the user's role by exposing facets
+ * to certain users while hiding them from others.
  */
 class FacetapiDependencyRole extends FacetapiDependency {
 
   /**
-   * Executes the dependency check.
+   * Implements FacetapiDependency::execute().
    */
   public function execute() {
     global $user;
@@ -24,7 +29,7 @@ class FacetapiDependencyRole extends FacetapiDependency {
   }
 
   /**
-   * Adds dependency settings to the form.
+   * Overrides FacetapiDependency::settingsForm().
    */
   public function settingsForm(&$form, &$form_state) {
     $form[$this->id]['roles'] = array(
@@ -37,7 +42,7 @@ class FacetapiDependencyRole extends FacetapiDependency {
   }
 
   /**
-   * Returns defaults for settings.
+   * Overrides FacetapiDependency::getDefaultSettings().
    */
   public function getDefaultSettings() {
     return array(
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/empty_behavior.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/empty_behavior.inc
index 26517a0..195596a 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/empty_behavior.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/empty_behavior.inc
@@ -2,11 +2,15 @@
 
 /**
  * @file
- * Base class for empty behaviors.
+ * Base empty behavior plugin class and default implementation.
  */
 
 /**
- * Abstract class implemented by all empty behavior plugins.
+ * Abstract class extended by empty behavior plugins.
+ *
+ * Empty behaviors allow administrators to provide alternate facet displays
+ * when a facet has no items. The most common use case is displaying a message
+ * such as "This facet has no items.".
  */
 abstract class FacetapiEmptyBehavior {
 
@@ -20,12 +24,21 @@ abstract class FacetapiEmptyBehavior {
   /**
    * An array of facet settings.
    *
+   * This is the the "settings" property of the facet's realm specific settings
+   * returned by FacetapiAdapter::getFacetSettings().
+   *
    * @var array
    */
   protected $settings;
 
   /**
-   * Initializes settings.
+   * Constructs a FacetapiEmptyBehavior object.
+   *
+   * Captures a subset of the facet's settings and applies the plugin defaults.
+   *
+   * @param stdClass $settings
+   *   The facet's realm specific settings as returned by
+   *   FacetapiAdapter::getFacetSettings().
    */
   public function __construct(stdClass $settings) {
     $this->configName = $settings->name;
@@ -34,7 +47,7 @@ abstract class FacetapiEmptyBehavior {
   }
 
   /**
-   * Executes the abstract class behavior.
+   * Returns the render array used for the facet that is empty, or has no items.
    *
    * @return
    *   The element's render array.
@@ -42,14 +55,22 @@ abstract class FacetapiEmptyBehavior {
   abstract public function execute();
 
   /**
-   * Allows for backend specific overrides to the settings form.
+   * Allows the plugin to add settings to the display form.
+   *
+   * @see facetapi_facet_display_form()
    */
   public function settingsForm(&$form, &$form_state) {
     // Nothing to do...
   }
 
   /**
-   * Returns an array of default settings.
+   * Provides default values for the plugin settings.
+   *
+   * All settings added via FacetapiEmptyBehavior::settingsForm() should have
+   * corresponding defaults in this method.
+   *
+   * @return array
+   *   The defaults keyed by setting name to value.
    */
   public function getDefaultSettings() {
     return array();
@@ -59,11 +80,12 @@ abstract class FacetapiEmptyBehavior {
    * Helper function for translating strings.
    *
    * @param string $key
-   *   The array key of the element being translated.
+   *   The array key of the form element under $form['widget']['empty'] in the
+   *   facetapi_translate_string() form containing the setting being translated.
    * @param string $string
    *   The string being translated.
    *
-   * @return
+   * @return string
    *   The translated string.
    *
    * @see facetapi_translate_string()
@@ -76,15 +98,19 @@ abstract class FacetapiEmptyBehavior {
 }
 
 /**
- * Plugin that returns an empty array, meaning
+ * Empty behavior plugin that returns an empty array.
+ *
+ * This is the default behavior for empty facets. Returning an empty array will
+ * prevent the facet from being displayed if it contains no items. For example,
+ * if facets are displayed as blocks, the empty array will prevent the block
+ * from rendering.
  */
 class FacetapiEmptyBehaviorNone extends FacetapiEmptyBehavior {
 
   /**
-   * Returns an empty array.
+   * Implements FacetapiEmptyBehavior::execute().
    */
   public function execute() {
     return array();
   }
 }
-
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/empty_behavior_text.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/empty_behavior_text.inc
index cbe7f19..7b34e6b 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/empty_behavior_text.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/empty_behavior_text.inc
@@ -2,21 +2,28 @@
 
 /**
  * @file
- * Empty behavior that returns text.
+ * The empty_text empty behavior class.
  */
 
 /**
- * Returns text.
+ * Empty behavior plugin that displays markup, usually just some text.
+ *
+ * This plugin allows administrators to display markup filtered through text
+ * formats as the contents of a facet when it has no items.
  */
 class FacetapiEmptyBehaviorText extends FacetapiEmptyBehavior {
 
   /**
    * A boolean flagging whether the input format is set, FALSE means it is
    * being pulled from FacetapiEmptyBehavior::getDefaultSettings().
+   *
+   * @var bool
    */
   protected $formatSet = FALSE;
 
   /**
+   * Overrides FacetapiEmptyBehavior::__construct().
+   *
    * Checks if a format was selected, calls parent's constructor.
    */
   public function __construct(stdClass $settings) {
@@ -27,7 +34,7 @@ class FacetapiEmptyBehaviorText extends FacetapiEmptyBehavior {
   }
 
   /**
-   * Returns an empty array.
+   * Implements FacetapiEmptyBehavior::execute().
    */
   public function execute() {
     $format_id = $this->settings['empty_text']['format'];
@@ -36,7 +43,7 @@ class FacetapiEmptyBehaviorText extends FacetapiEmptyBehavior {
   }
 
   /**
-   * Adds setting for the empty behavior.
+   * Overrides FacetapiEmptyBehavior::settingsForm().
    */
   public function settingsForm(&$form, &$form_state) {
     global $user;
@@ -60,7 +67,7 @@ class FacetapiEmptyBehaviorText extends FacetapiEmptyBehavior {
   }
 
   /**
-   * Returns an array of default settings.
+   * Overrides FacetapiEmptyBehavior::getDefaultSettings().
    */
   public function getDefaultSettings() {
     return array(
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/filter.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/filter.inc
index 7cc5db6..52d68bd 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/filter.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/filter.inc
@@ -2,21 +2,39 @@
 
 /**
  * @file
- * Base filter class and implementation.
+ * Base filter class and core implementations.
  */
 
 /**
+ * Abstract class extended by filter plugins.
  *
+ * Filter plugins are executed in FacetapiFacet::build() after the render array
+ * is initialized and before the array is passed to the widget plugin. This
+ * allows for runtime data alterations such as hiding active items or only
+ * displaying facets in the current level of a hierarchical data set.
+ *
+ * Although it is most common to remove items from the render array, it is also
+ * possible to add items to the array. However, the filter plugin is executed
+ * after FacetapiFacetProcessor::process(), so the hierarchical data has already
+ * been processed and index values have already been mapped to their human
+ * readable values. If you are looking to add items to the render array that
+ * also go through these processes, adding a callback to the facet's "alter
+ * callbacks" is probably the best route to take. See hook_facetapi_facet_info()
+ * for more information on alter callbacks.
+ *
+ * @see http://drupal.org/node/1156606
  */
 abstract class FacetapiFilter {
 
   /**
-   * The ID of this plugin.
+   * The machine name of the plugin associated with this instance.
+   *
+   * @var string
    */
   protected $id;
 
   /**
-   * The adapter object.
+   * The adapter associated with facet being filtered.
    *
    * @var FacetapiAdapter
    */
@@ -30,16 +48,18 @@ abstract class FacetapiFilter {
   protected $settings;
 
   /**
-   * Initializes the filter object.
+   * Constructs a FacetapiFilter object.
    *
-   * @param array $adapter
-   *   The adapter object
-   * @param array $realm
-   *   The realm being rendered.
-   * @param array $settings
-   *   The realm settings.
-   * @param FacetapiFacet $facet
-   *   The facet object.
+   * Sets the necessary information required to filter the facet.
+   *
+   * @param string $id
+   *   The machine name of the filter plugin being instantiated as defined in
+   *   hook_facetapi_filters() implementations.
+   * @param FacetapiAdapter $adapter
+   *   The adapter associated with facet being filtered.
+   * @param stdClass $settings
+   *   The facet's realm specific settings as returned by
+   *   FacetapiAdapter::getFacetSettings().
    */
   public function __construct($id, FacetapiAdapter $adapter, stdClass $settings) {
     $this->id = $id;
@@ -49,25 +69,33 @@ abstract class FacetapiFilter {
   }
 
   /**
-   * Filters the facet items.
+   * Executes the filter by returning an altered render array.
    *
    * @param array $build
-   *   The facet's render array.
+   *   The facet's base render array.
    *
    * @return array
-   *   The altered build array.
+   *   The altered render array that will be passed to the widget plugin.
    */
   abstract public function execute(array $build);
 
   /**
-   * Adds settings to the filter form.
+   * Allows the plugin to add settings to the dependency form.
+   *
+   * @see facetapi_facet_filters_form()
    */
   public function settingsForm(&$form, &$form_state) {
     // Nothing to do.
   }
 
   /**
-   * Returns default settings added to the settings form.
+   * Provides default values for the plugin settings.
+   *
+   * All settings added via FacetapiFilter::settingsForm() should have
+   * corresponding defaults in this method.
+   *
+   * @return array
+   *   The defaults keyed by setting name to value.
    */
   public function getDefaultSettings() {
     return array();
@@ -80,7 +108,7 @@ abstract class FacetapiFilter {
 class FacetapiFilterActiveItems extends FacetapiFilter {
 
   /**
-   * Filters active facet items.
+   * Implements FacetapiFilter::execute().
    */
   public function execute(array $build) {
     return array_filter($build, 'facetapi_filter_active');
@@ -90,10 +118,10 @@ class FacetapiFilterActiveItems extends FacetapiFilter {
 /**
  * Callback for array_filter() that strips out active items.
  *
- * @param $build
+ * @param arrat $build
  *   The facet item's render array.
  *
- * @return
+ * @return bool
  *   A boolean flagging whether the value should remain in the array.
  */
 function facetapi_filter_active(array $build) {
@@ -101,12 +129,19 @@ function facetapi_filter_active(array $build) {
 }
 
 /**
- * Plugin that filters all items not in lowest hierarchy.
+ * Plugin that filters all items not in current hierarchy.
+ *
+ * For hierarchical facets such as taxonomy, it might be adventageous to only
+ * display the current level of the hierarchy to implement the progressive
+ * disclosure pattern inside of the facet. For example, if your taxonomy tree
+ * is Make -> Model -> Year for cars, you might want to only display one level
+ * at a time. After selecting a make, users should only be presented with the
+ * available models.
  */
 class FacetapiFilterCurrentDepth extends FacetapiFilter {
 
   /**
-   * Filters active facet items.
+   * Implements FacetapiFilter::execute().
    */
   public function execute(array $build) {
     foreach ($build as $item) {
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/query_type.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/query_type.inc
index 4ddf392..e03c46f 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/query_type.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/query_type.inc
@@ -6,31 +6,88 @@
  */
 
 /**
- * Interface that must be implemented by all query type plugins.
+ * Interface implemented by all query type plugins.
+ *
+ * Facet API does not perform any facet calculations on it's own. The query type
+ * plugin system provides Facet API with a consistent way to tell backends what
+ * type of query to execute in order to return the appropriate data required
+ * for the faceted navigation display.
+ *
+ * Query type plugins are implemented by the backends and perform the
+ * alterations of their internal search engine query mechanisms to execute the
+ * filters and retrieve facet data. For example, modules that integrate with
+ * Apache Solr will set the necessary params for faceting, whereas modules that
+ * extend the core Search module will add SQL joins, filter clauses, and COUNT
+ * queries in order to implement faceting.
+ *
+ * Although the actual method of querying the search engine is vastly different
+ * per backend, Facet API operates under the assumption that the types of
+ * queries are the same. For example, a "term" query is assumed to be a straight
+ * filter, whereas a "range" query is assumed to be a search between two values.
+ * Although the common query types such as "term" and "date" should be available
+ * to all backends, it is expected that some backends will have additional query
+ * types based on capability. For example, backends integrating with the Apache
+ * Solr engine might have a "geospatial" query type that modules integrating
+ * with the core Search won't have.
  */
 interface FacetapiQueryTypeInterface {
 
   /**
    * Returns the query type associated with the plugin.
    *
+   * Query types must be standard across all backends. For example, the common
+   * "term" query type must execute the same type of query for backends that
+   * integrate with Apache Solr, the core Search module, or any other search
+   * engine that implementing modules connect to.
+   *
+   * It is recommended that the strings returned by this method contain only
+   * lowercase letters with optional underscores.
+   *
    * @return string
    *   The query type.
    */
   static public function getType();
 
   /**
-   * Adds the filter to the query object.
+   * Alters the backend's native query object to execute the facet query.
    *
-   * @param stdClass $query
-   *   An object containing the query in the backend's native API.
+   * As an example, modules that integrate with Apache Solr will set the
+   * necessary params for faceting, whereas modules that extend the core Search
+   * module will add SQL joins, filter clauses, and COUNT queries in order to
+   * implement faceting.
+   *
+   * @param mixed $query
+   *   The backend's native query object.
    */
   public function execute($query);
 
   /**
-   * Initializes the facet's render array.
+   * Gets data from the server and adds values to the facet's render array.
+   *
+   * At a minimum this method should add the index values returned by the
+   * search server as keys containing associative arrays with the "#count" key.
+   * The end result will be an array structured like the one below:
    *
-   * @return
-   *   The initialized render array.
+   * <code>
+   * $build = array(
+   *   'index-value-1' => array('#count' => 3),
+   *   'index-value-2' => array('#count' => 19),
+   *   'index-value-3' => array('#count' => 82),
+   *   ...
+   * );
+   * </code>
+   *
+   * See the return of the FacetapiFacetProcessor::initializeBuild() for all
+   * possible values that could be populated. Query type plugins such as "date"
+   * types will populte the #item_children, #item_parents, and #active keys in
+   * addition to #count.
+   *
+   * @return array
+   *   The initialized render array. For all possible values of the structure of
+   *   the array, see the FacetapiFacetProcessor::initializeBuild() docblock.
+   *   Usually only the #count key is used.
+   *
+   * @see FacetapiFacetProcessor::initializeBuild()
    */
   public function build();
 }
@@ -41,23 +98,26 @@ interface FacetapiQueryTypeInterface {
 class FacetapiQueryType {
 
   /**
-   * The adapter object.
+   * The adapter associated with facet being queried.
    *
    * @var FacetapiAdapter
    */
   protected $adapter;
 
   /**
-   * The facet definition.
+   * The facet definition as returned by facetapi_facet_load().
    *
    * @var array
    */
   protected $facet;
 
   /**
+   * Constructs a FacetapiQueryType object.
    *
    * @param FacetapiAdapter $adapter
-   *   The adapter object.
+   *   The adapter object associated with facet being queried.
+   * @param array $facet
+   *   The facet definition as returned by facetapi_facet_load().
    */
   public function __construct(FacetapiAdapter $adapter, array $facet) {
     $this->adapter = $adapter;
@@ -65,29 +125,35 @@ class FacetapiQueryType {
   }
 
   /**
-   * Allows additional information to be added to the active items.
+   * Adds additional information to the array active items.
    *
-   * A common use case is extracting the start and end values in a range facet.
+   * Active facet items are stored in the FacetapiAdapter::activeItems property
+   * as associative arrays. See the docblock for the structure. Queries such as
+   * ranges can add additional info such as the "start" and "end" values for
+   * more efficient processing of facet data.
    *
-   * @param array $value
-   *   The active item.
+   * @param array $item
+   *   The active item. See FacetapiAdapter::activeItems for the structure of
+   *   the active item array.
    *
    * @return array
-   *   An array containing the addition information to add to the item.
+   *   An associative array addition information to add to the active item.
    */
   public function extract(array $item) {
     return array();
   }
 
   /**
-   * Returns settings.
+   * Convenience method to get the facet's global and per relam settings.
    *
    * @param string|array $realm
-   *   The machine readable name of the realm or realm definition. Pass null to
-   *   get global settings.
+   *   The machine readable name of the realm or an array containing the realm
+   *   definition. Pass NULL to return the facet's global settings.
    *
-   * @return
+   * @return stdClass
    *   An object containing the settings.
+   *
+   * @see FacetapiFacet::getSettings()
    */
   public function getSettings($realm = NULL) {
     return $this->adapter->getFacet($this->facet)->getSettings($realm);
@@ -97,7 +163,10 @@ class FacetapiQueryType {
    * Returns the facet's active items.
    *
    * @return array
-   *   The facet's active items.
+   *   The facet's active items. See FacetapiAdapter::activeItems for the
+   *   structure of the active item array.
+   *
+   * @see FacetapiAdapter::activeItems
    */
   public function getActiveItems() {
     return $this->adapter->getActiveItems($this->facet);
@@ -110,7 +179,9 @@ class FacetapiQueryType {
 class FacetapiQueryTypeDate extends FacetapiQueryType {
 
   /**
-   * Loads the include file containing the date API functions.
+   * Overrides FacetapiQueryType::__construct().
+   *
+   * Lazy loads the date processing functions.
    */
   public function __construct(FacetapiAdapter $adapter, array $facet) {
     module_load_include('inc', 'facetapi', 'facetapi.date');
@@ -118,7 +189,9 @@ class FacetapiQueryTypeDate extends FacetapiQueryType {
   }
 
   /**
-   * Parses the start and end values for the date.
+   * Overrides FacetapiQueryType::extract().
+   *
+   * Adds the "start" and "end" values for the date range.
    */
   public function extract(array $item) {
     $return = array();
@@ -136,7 +209,9 @@ class FacetapiQueryTypeDate extends FacetapiQueryType {
 class FacetapiQueryTypeRange extends FacetapiQueryType {
 
   /**
-   * Parses the start and end values for the date.
+   * Overrides FacetapiQueryType::extract().
+   *
+   * Adds the "start" and "end" values for the range.
    */
   public function extract(array $item) {
     $return = array();
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/url_processor.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/url_processor.inc
index 4dca2b2..ee5eb7e 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/url_processor.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/url_processor.inc
@@ -2,76 +2,103 @@
 
 /**
  * @file
- * Adapter and standard plugin class.
+ * Base url processor plugin class.
  */
 
 /**
+ * Abstract class extended by url processor plugins.
  *
+ * Url processor plugins provide a pluggable method of retrieving facet data.
+ * Most commonly facet data is retrieved from a query string variable via $_GET,
+ * however custom plugis can be written to retrieve data from the path as well.
+ * In addition to facet data retrieval, the url processor plugin is also
+ * responsible for building facet links and setting breadcrumb trails.
+ *
+ * Each adapter instance is associated with a single url processor plugin. The
+ * plugin is associated with the adapter via hook_facetapi_searcher_info()
+ * implementations.
  */
 abstract class FacetapiUrlProcessor {
 
   /**
-   * The adapter.
+   * The adapter that the url processor plugin is associated with.
    *
    * @var FacetapiAdapter
    */
   protected $adapter;
 
   /**
-   * An array of facet params.
+   * An array of facet params, usually $_GET.
    *
    * @var array.
    */
   protected $params = array();
 
   /**
-   * The key containing the facet filters.
+   * The array key in FacetapiUrlProcessor::params containing the facet data.
    *
    * @var string
    */
   protected $filterKey = 'f';
 
   /**
+   * Constructs a FacetapiUrlProcessor object.
    *
+   * @param FacetapiAdapter $adapter
+   *   The adapter that the url processor plugin is associated with.
    */
   public function __construct(FacetapiAdapter $adapter) {
     $this->adapter = $adapter;
   }
 
   /**
-   * Automatically fetches the params when the plugin is instantiated.
+   * Fetches parameters from the source, usually $_GET.
+   *
+   * This method is invoked in FacetapiAdapter::__construct().
    *
    * @return array
-   *   An array containing the params.
+   *   An associative array containing the params, usually $_GET.
    */
   abstract public function fetchParams();
 
   /**
    * Normalizes the array returned by FacetapiAdapter::fetchParams().
    *
+   * When extracting data from a source such as $_GET, there are certain items
+   * that you might nor want, for example the "q" or "page" keys. This method is
+   * useful for filtering those out. In addition, plugins that do not get data
+   * from $_GET can use this method to normalize the data into an associative
+   * array that closely matches the data structure of $_GET.
+   *
    * @param array $params
-   *   An array of keyed params, such as $_GET.
+   *   An array of keyed params, usually as $_GET.
    * @param string $filter_key
-   *   The array key in $params corresponding to filters.
+   *   The array key in $params containing the facet data, defaults to "f".
    *
    * @return array
-   *   An array containing the normalized params.
+   *   An associative array containing the normalized params.
    */
   abstract public function normalizeParams(array $params, $filter_key = 'f');
 
   /**
    * Returns the query string variables for a facet item.
    *
+   * The return array must be able to be passed as the "query" key of the
+   * options array passed as the second argument to the url() function. See
+   * http://api.drupal.org/api/drupal/includes%21common.inc/function/url/7 for
+   * more details.
+   *
    * @param array $facet
-   *   The facet definition.
+   *   The facet definition as returned by facetapi_facet_load().
    * @param array $values
    *   An array containing the item's values being added to or removed from the
    *   query string dependent on whether or not the item is active.
    * @param int $active
-   *   An integer flagging whether the item is active or not.
+   *   An integer flagging whether the item is active or not. 1 if the item is
+   *   active, 0 if it is not.
    *
    * @return array
-   *   The query string vriables.
+   *   The query string variables.
    */
   abstract public function getQueryString(array $facet, array $values, $active);
 
@@ -94,17 +121,24 @@ abstract class FacetapiUrlProcessor {
   }
 
   /**
-   * Sets the breadcrumb trail on searches.
+   * Sets the breadcrumb trail for active searches.
+   *
+   * This method is called by FacetapiAdapter::processFacets(), which is called
+   * directly by the backend to search the chain of Facet API events.
    */
   abstract public function setBreadcrumb();
 
   /**
-   * Sets the parameters.
+   * Sets the normalized parameters.
+   *
+   * This method is usually called by FacetapiAdapter::setParams() and is very
+   * rarely called directly.
    *
    * @param array $params
-   *   An array of normalized params.
+   *   An array of normalized params hat have already been passed through
+   *   FacetapiUrlProcessor::normalizeParams().
    * @param string $filter_key
-   *   The array key in $params corresponding to filters.
+   *   The array key in $params containing the facet data, defaults to "f".
    *
    * @return FacetapiUrlParser
    *   An instance of this class.
@@ -130,6 +164,9 @@ abstract class FacetapiUrlProcessor {
 
   /**
    * Removes an item from the $this->params array.
+   *
+   * @param int $pos
+   *   The zero-based position of the value in the source data.
    */
   public function removeParam($pos) {
     unset($this->params[$this->filterKey][$pos]);
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/url_processor_standard.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/url_processor_standard.inc
index 2444c08..4cab73b 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/url_processor_standard.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/url_processor_standard.inc
@@ -2,18 +2,21 @@
 
 /**
  * @file
- * The standard URL processor.
+ * The standard url processor class.
  */
 
 /**
- * Extension of FacetapiUrlProcessor.
+ * Url processor plugin that retrieves facet data from the query string.
+ *
+ * This plugin retrieves facet data from $_GET, and stored all information in
+ * the "f" query string variable by default.
  */
 class FacetapiUrlProcessorStandard extends FacetapiUrlProcessor {
 
   /**
    * Implements FacetapiUrlProcessor::fetchParams().
    *
-   * Pulls facet params from the $_GET variable.
+   * Use $_GET as the source for facet data.
    */
   public function fetchParams() {
     return $_GET;
@@ -100,7 +103,7 @@ class FacetapiUrlProcessorStandard extends FacetapiUrlProcessor {
       }
     }
 
-    // Sets the breadcrumb trail with h keys and filters.
+    // Sets the breadcrumb trail with the keys and filters.
     drupal_set_breadcrumb($breadcrumb);
   }
 }
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/widget.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/widget.inc
index c03c4df..c84b2fa 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/widget.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/widget.inc
@@ -2,44 +2,56 @@
 
 /**
  * @file
- * Abstract widget plugin class.
+ * Base widget plugin class and helper functions for facet sorting.
  */
 
 /**
- * Base class for widget plugins.
+ * Abstract class extended by widget plugins.
+ *
+ * Widgets are responsible for altering the render arrays to achieve some user
+ * interface component. For example, the render arrays could produce a list of
+ * clickable links or even clickable charts.
  */
 abstract class FacetapiWidget {
 
   /**
-   * The machine readable name of the widget.
+   * The machine name of the plugin associated with this instance.
    *
    * @var string
    */
   protected $id;
 
   /**
-   * The realm definition.
+   * The realm definition as returned by facetapi_realm_load().
    *
    * @var array
    */
   protected $realm;
 
   /**
-   * The facet object.
+   * The facet object containing the facet definition and required contexts.
    *
    * @var FacetapiFacet
    */
   protected $facet;
 
   /**
-   * The facet settings.
+   * An array of facet settings.
    *
-   * @var stdClass
+   * This is the the "settings" property of the facet's realm specific settings
+   * returned by FacetapiAdapter::getFacetSettings().
+   *
+   * @var array
    */
   protected $settings;
 
   /**
-   * The normalized render array.
+   * The render that alterations are being applied to.
+   *
+   * The base render array is constructed via FacetapiFacetProcessor::process()
+   * and has already been passed to the enabled filter plugins. The render array
+   * is further processed by FacetapiWidget::init() prior to the plugin acting
+   * on it in the FacetapiWidget::execute() implementation.
    *
    * @var array
    */
@@ -48,51 +60,73 @@ abstract class FacetapiWidget {
   /**
    * The key of the facet's render array added to the realm's render array.
    *
+   * After the render array is acted on by FacetapiWidget::execute(), it is
+   * retrieved by FacetapiWidget::getBuild() and appended to the realm's render
+   * array using this key as the element name. The default key is the "field
+   * alias" in the facet's definition.
+   *
    * @var string
+   *
+   * @see FacetapiFacet::build()
+   * @see FacetapiAdapter::buildRealm()
    */
   protected $key;
 
   /**
-   * JavaScript settings.
+   * The widget's JavaScript settings that are passed to drupal_add_js().
+   *
+   * For widgets that need make configurations available toe JavaScript files,
+   * this is the best method for doing so. An example is the "soft limit" for
+   * facets rendered as a list of links which uses jQuery to limit the list on
+   * the client side.
    *
    * @var array
    */
   protected $jsSettings = array();
 
   /**
+   * Constructs a FacetapiWidget object.
+   *
    * @param string $id
-   *   The machine readable name of the widget.
+   *   The machine name of the plugin associated with this instance.
    * @param array $realm
-   *   The realm being rendered.
-   * @param array $settings
-   *   The realm settings.
+   *   The realm definition as returned by facetapi_realm_load() that this facet
+   *   is being rendered in.
    * @param FacetapiFacet $facet
-   *   The facet object.
+   *   The facet being rendered.
+   * @param stdClass $settings
+   *   The facet's realm specific settings as returned by
+   *   FacetapiAdapter::getFacetSettings().
    */
   public function __construct($id, array $realm, FacetapiFacet $facet, stdClass $settings) {
-    // Stores variables.
     $this->id = $id;
     $this->realm = $realm;
     $this->settings = $settings;
     $this->settings->settings += $this->getDefaultSettings();
     $this->facet = $facet;
 
-    // Sets the key of the element when appended to the realm's render array.
+    // Set the default key as the facet's alias.
     $this->key = $facet['field alias'];
   }
 
   /**
    * Initializes the build, must be invoked prior to executing this widget.
    *
+   * This method is called automatically by FacetapiFacet::build() and shoud
+   * rarely be invoked outside of that context. It is responsible for getting
+   * the base render array stored in the FacetapiFacet object and appending it
+   * to the container that will be returned, sorting the facets, and adding some
+   * common JavaScript settings common across all widgets.
+   *
    * @return FacetapiWidget
    *   An instance of this class.
    */
   public function init() {
 
-    // Captures searcher for code readability.
+    // Capture searcher for code readability.
     $searcher = $this->facet->getAdapter()->getSearcher();
 
-    // Initializes render array.
+    // Initialize the render array.
     $this->build = array(
       '#title' => $this->facet['label'],
       '#description' => $this->facet['description'],
@@ -111,10 +145,10 @@ abstract class FacetapiWidget {
       ),
     );
 
-    // Applies sorting algorithms to the render array.
+    // Apply sorting algorithms to the render array.
     $this->sortFacet($this->build);
 
-    // Initializes JavaScript settings.
+    // Initialize JavaScript settings for this facet build.
     $this->jsSettings += array(
       'id' => $this->build['#attributes']['id'],
       'searcher' => $searcher,
@@ -128,36 +162,62 @@ abstract class FacetapiWidget {
   }
 
   /**
-   * Abstract public function.
+   * Executes the widget plugin by altering FacetapiWidget::build.
+   *
+   * Implementing plugins use this method to transform the initialized render
+   * array into something that will product the desired UI component. See the
+   * documentation at http://drupal.org/node/930760 for more information on how
+   * to work with render arrays.
+   *
+   * For code readability, it is best practice to add the following snippet as
+   * the first line of the method so developers can act directly on the $element
+   * variable as opposed to a nested array.
+   *
+   * <code>
+   * public function execute() {
+   *   $element = &$this->build[$this->facet['field alias']];
+   *
+   * }
+   * </code>
+   *
+   * @see http://drupal.org/node/930760
    */
   abstract public function execute();
 
   /**
-   * Allows the widget to provide additional settings to the form.
+   * Allows the plugin to add settings to the display form.
+   *
+   * @see facetapi_facet_display_form()
    */
   public function settingsForm(&$form, &$form_state) {
     // Nothing to do ...
   }
 
   /**
-   * Returns an array of default settings
+   * Provides default values for the plugin settings.
+   *
+   * All settings added via FacetapiWidget::settingsForm() should have
+   * corresponding defaults in this method.
+   *
+   * @return array
+   *   The defaults keyed by setting name to value.
    */
   public function getDefaultSettings() {
     return array();
   }
 
   /**
-   * Returns the machine readable name of the widget.
+   * Gets the machine name of the plugin.
    *
    * @return string
-   *   The machine readable name of the widget.
+   *   The machine name of the plugin.
    */
   public function getId() {
     return $this->id;
   }
 
   /**
-   * Returns the render array.
+   * Returns the altered render array acted on by FacetapiWidget::execute().
    *
    * @return array
    *   The render array.
@@ -167,17 +227,17 @@ abstract class FacetapiWidget {
   }
 
   /**
-   * Returns the element's key value.
+   * Gets key used to append FacetapiWidget::build to the realm's render array.
    *
    * @return string
-   *   The element's key.
+   *   The key used as the element name for this facet's render array.
    */
   public function getKey() {
     return $this->key;
   }
 
   /**
-   * Returns the JavaScript settings.
+   * Returns the JavaScript settings that are passed to drupal_add_js().
    *
    * @return array
    *   The JavaScript settings.
@@ -187,10 +247,16 @@ abstract class FacetapiWidget {
   }
 
   /**
-   * Applies selected sorting algorithms to the render array.
+   * Applies sorting algorithms to the items in the facet's render array.
+   *
+   * This method applies the sorting algorithms configured via the display form
+   * to the items in the facet's initialized render array.
    *
    * @param array &$build
-   *   The facet's render array.
+   *   Reference to the facet's render array.
+   *
+   * @see FacetapiWidget::init()
+   * @see FacetapiWidget::applySorts()
    */
   function sortFacet(array &$build) {
     $settings = $build['#settings']->settings;
@@ -215,11 +281,16 @@ abstract class FacetapiWidget {
   }
 
   /**
-   * Sorts the facet's build array.
+   * Applies the sorts to the facet items recursively.
+   *
+   * The recursion in this function is useful for sorting hierarchical data sets
+   * one level at a time.
    *
    * @param array &$build
-   *   Reference to the render array, allows us to sort one hierarchical level
-   *   at a time.
+   *   Reference to the items in the facet's render array that are being sorted.
+   *
+   * @see FacetapiWidget::sortFacet()
+   * @see FacetapiWidget::sortCallback()
    */
   protected function applySorts(&$build) {
     foreach (element_children($build) as $value) {
@@ -227,13 +298,18 @@ abstract class FacetapiWidget {
         $this->applySorts($build[$value]['#item_children']);
       }
     }
+    // Uses FacetapiWidget::sortCallback() as the uasort() callback.
     uasort($build, array($this, 'sortCallback'));
   }
 
   /**
-   * Generic sort callback, useful as a callback to uasort().
+   * Applies sort information via the callback in the sort definition.
+   *
+   * Each definition in hook_facetapi_sort_info() specifices a "callback", which
+   * is the function that returns the sorting information expected by normal
+   * uasort() callbacks.
    *
-   * Applies sorts in the order they are specified in the settings.
+   * @see uasort()
    */
   protected function sortCallback(array $a, array $b) {
     $return = 0;
@@ -251,6 +327,8 @@ abstract class FacetapiWidget {
 
 /**
  * Sorts by whether or not a facet is active.
+ *
+ * @see uasort()
  */
 function facetapi_sort_active(array $a, array $b) {
   $a_active = (isset($a['#active'])) ? $a['#active'] : 0;
@@ -263,6 +341,8 @@ function facetapi_sort_active(array $a, array $b) {
 
 /**
  * Sorts by facet count.
+ *
+ * @see uasort()
  */
 function facetapi_sort_count(array $a, array $b) {
   $a_count = (isset($a['#count'])) ? $a['#count'] : 0;
@@ -275,6 +355,8 @@ function facetapi_sort_count(array $a, array $b) {
 
 /**
  * Sorts by raw indexed value.
+ *
+ * @see uasort()
  */
 function facetapi_sort_indexed(array $a, array $b) {
   $a_value = (isset($a['#indexed_value'])) ? $a['#indexed_value'] : '';
@@ -287,6 +369,8 @@ function facetapi_sort_indexed(array $a, array $b) {
 
 /**
  * Sorts by display value.
+ *
+ * @see uasort()
  */
 function facetapi_sort_display(array $a, array $b) {
   $a_count = (isset($a['#markup'])) ? $a['#markup'] : '';
diff --git a/profiles/acquia/modules/facetapi/plugins/facetapi/widget_links.inc b/profiles/acquia/modules/facetapi/plugins/facetapi/widget_links.inc
index 8c092f5..fa4862c 100644
--- a/profiles/acquia/modules/facetapi/plugins/facetapi/widget_links.inc
+++ b/profiles/acquia/modules/facetapi/plugins/facetapi/widget_links.inc
@@ -2,16 +2,24 @@
 
 /**
  * @file
- * Widgets for facets rendered as links.
+ * The facetapi_links and facetapi_checkbox_links widget plugin classes.
  */
 
 /**
  * Widget that renders facets as a list of clickable links.
+ *
+ * Links make it easy for users to narrow down their search results by clicking
+ * on them. The render arrays use theme_item_list() to generate the HTML markup.
  */
 class FacetapiWidgetLinks extends FacetapiWidget {
 
   /**
-   * Overrides constructor to reset the key.
+   * Overrides FacetapiWidget::__construct().
+   *
+   * For links, it is better to use the machine name of the facet as opposed to
+   * the alias for the key. Alias are usually, but not necessarily, unique. It
+   * doesn't make sense to group links in the same element as they are usually
+   * rendered in blocks with are separate from one another.
    */
   public function __construct($id, array $realm, FacetapiFacet $facet, stdClass $settings) {
     parent::__construct($id, $realm, $facet, $settings);
@@ -20,7 +28,13 @@ class FacetapiWidgetLinks extends FacetapiWidget {
   }
 
   /**
-   * Renders the links.
+   * Implements FacetapiWidget::execute().
+   *
+   * Transforms the render array into something that can be themed by
+   * theme_item_list().
+   *
+   * @see FacetapiWidgetLinks::setThemeHooks()
+   * @see FacetapiWidgetLinks::buildListItems()
    */
   public function execute() {
     $element = &$this->build[$this->facet['field alias']];
@@ -37,8 +51,17 @@ class FacetapiWidgetLinks extends FacetapiWidget {
   /**
    * Recursive function that sets each item's theme hook.
    *
+   * The indivual items will be rendered by different theme hooks depending on
+   * whether or not they are active.
+   *
    * @param array &$build
    *   A render array containing the facet items.
+   *
+   * @return FacetapiWidget
+   *   An instance of this class.
+   *
+   * @see theme_facetapi_link_active()
+   * @see theme_facetapi_link_inactive()
    */
   protected function setThemeHooks(array &$build) {
     foreach ($build as $value => &$item) {
@@ -51,21 +74,13 @@ class FacetapiWidgetLinks extends FacetapiWidget {
   }
 
   /**
-   * Gets the base class array for a facet item.
+   * Transforms the render array for use with theme_item_list().
    *
-   * @return array
-   *   An array of classes.
-   */
-  function getItemClasses() {
-    return array();
-  }
-
-  /**
-   * Recursive function that converts the render array into an array that can be
-   * passed to theme_item_list().
+   * The recursion allows this function to act on the various levels of a
+   * hierarchical data set.
    *
    * @param array $build
-   *   The facet's render array.
+   *   The items in the facet's render array being transformed.
    *
    * @return array
    *   The "items" parameter for theme_item_list().
@@ -128,7 +143,20 @@ class FacetapiWidgetLinks extends FacetapiWidget {
   }
 
   /**
-   * Adds the soft limit setting.
+   * Gets the base class array for a facet item.
+   *
+   * Classes that extend FacetapiWidgetLinks will often overide this method to
+   * alter the link displays via CSS without having to touch the render array.
+   *
+   * @return array
+   *   An array of classes.
+   */
+  function getItemClasses() {
+    return array();
+  }
+
+  /**
+   * Overrides FacetapiWidget::settingsForm().
    */
   function settingsForm(&$form, &$form_state) {
     // @see http://drupal.org/node/735528 for supporting multiple values in the
@@ -188,7 +216,7 @@ class FacetapiWidgetLinks extends FacetapiWidget {
   }
 
   /**
-   * Returns defaults for the settings this widget provides.
+   * Overrides FacetapiWidget::getDefaultSettings().
    */
   function getDefaultSettings() {
     return array(
@@ -201,11 +229,16 @@ class FacetapiWidgetLinks extends FacetapiWidget {
 
 /**
  * Widget that renders facets as a list of clickable checkboxes.
+ *
+ * This widget renders facets in the same way as FacetapiWidgetLinks but uses
+ * JavaScript to transform the links into checkboxes followed by the facet.
  */
 class FacetapiWidgetCheckboxLinks extends FacetapiWidgetLinks {
 
   /**
-   * Adds JavaScript settings.
+   * Overrides FacetapiWidgetLinks::init().
+   *
+   * Adds additional JavaScript settings and CSS.
    */
   public function init() {
     parent::init();
@@ -214,10 +247,9 @@ class FacetapiWidgetCheckboxLinks extends FacetapiWidgetLinks {
   }
 
   /**
-   * Sets the base class for checkbox facet items.
+   * Overrides FacetapiWidgetLinks::getItemClasses().
    *
-   * @return array
-   *   An array of classes.
+   * Sets the base class for checkbox facet items.
    */
   public function getItemClasses() {
     return array('facetapi-checkbox');
diff --git a/profiles/acquia/modules/facetapi/tests/facetapi.test b/profiles/acquia/modules/facetapi/tests/facetapi.test
index db97a74..ad7fc45 100644
--- a/profiles/acquia/modules/facetapi/tests/facetapi.test
+++ b/profiles/acquia/modules/facetapi/tests/facetapi.test
@@ -11,13 +11,16 @@
 class FacetapiTestCase extends DrupalWebTestCase {
 
   /**
-   * Overrides DrupalWebTestCase::fetchAssoc().
+   * Overrides DrupalWebTestCase::setUp().
    *
    * Enables the "block" and "facetapi_test" modules, creates an administrative
    * user with permissions to configure the Faceted Search interface.
    */
   public function setUp() {
-    parent::setUp('block', 'facetapi_test');
+    $modules = func_get_args();
+    $modules[] = 'block';
+    $modules[] = 'facetapi_test';
+    forward_static_call_array('parent::setUp', $modules);
     $this->authenticatedUser = $this->drupalCreateUser();
     $this->adminUser = $this->drupalCreateUser(array(
       'administer blocks',
@@ -27,131 +30,118 @@ class FacetapiTestCase extends DrupalWebTestCase {
   }
 
   /**
-   * Instantiates the adapter plugin associated with the searcher.
+   * Overrides DrupalWebTestCase::drupalPost()
    *
-   * The following tests are executed:
-   *   - DrupalTestCase::assertTrue(): Asserts that FALSE is not returned by
-   *     facetapi_adapter_load().
-   *
-   * @param string $searcher
-   *   The machine readable name of the searcher.
-   *
-   * @return FacetapiAdapter
-   *   The adapter object, FALSE if the object can't be loaded.
-   *
-   * @see facetapi_adapter_load().
+   * Clears static variables on settings submission. This is OK because the
+   * script execution persists when the form is submitted by the test unlike a
+   * real form post where the page has to reload.
    */
-  public function loadAdapter($searcher) {
-    $adapter = facetapi_adapter_load('facetapi_test');
-    $value = ($adapter instanceof FacetapiAdapter);
-    $this->assertTrue($value, t('FacetapiAdapter object loaded via facetapi_adapter_load().'));
-    return $adapter;
+  public function drupalPost($path, $edit, $submit, array $options = array(), array $headers = array(), $form_html_id = NULL, $extra_post = NULL) {
+    parent::drupalPost($path, $edit, $submit, $options, $headers, $form_html_id, $extra_post);
+    if (t('Save configuration') == $submit) {
+      drupal_static('facetapi_get_searcher_settings', array(), TRUE);
+      drupal_static('facetapi_get_enabled_facets', array(), TRUE);
+    }
   }
 
   /**
-   * Enables a facet in the block realm, adds it to the "sidebar_first" region.
+   * Returns adapter, realm, and facet objects and base admin path.
    *
-   * The following tests are executed:
-   *   - DrupalTestCase::getPath(): Retrieves path to the administrative
-   *     settings page for the block realm.
-   *   - DrupalTestCase::getPost(): Enables the facet in the block realm.
-   *   - DrupalTestCase::assertRaw(): Ensures the configuration options were
-   *     successful by testing for the confirmation message.
-   *   - DrupalTestCase::assertTrue(): Double checks that the facet is enabled
-   *     via the facetapi_facet_enabled() API function.
-   *   - DrupalTestCase::getPost(): Activates the facet block in the
-   *     "sidebar_first" region.
-   *   - DrupalTestCase::getPath(): Retrieves path to the search page.
-   *   - DrupalTestCase::assertRaw(): Tests if the block is displayed by
-   *     looking for it's title.
+   * Useful with the list() function.
    *
-   * @param string $facet_name
-   *   The machine readable name of the facet.
-   * @param string $label
-   *   The title of the block whose existence is being tested.
-   * @param string $realm_name
-   *   The machine readable name of the realm.
+   * @return array
+   *   An array containing:
+   *   - The facet definition as retrned by facetapi_facet_load().
+   *   - The realm definition as retrned by facetapi_realm_load().
+   *   - The FacetapiAdapter object as returned by facetapi_adapter_load().
+   *   - The base admin path for facet settings forms.
    */
-  public function enableFacet($facet_name, $label, $realm_name = 'block') {
-    $path = 'admin/config/search/facetapi_test/facets/' . $realm_name;
+  public function facetapiLoadObjects($facet_name = 'enabled', $realm_name = 'nodisplay', $searcher = 'facetapi_test') {
+    return array(
+      facetapi_facet_load($facet_name, $searcher),
+      facetapi_realm_load($realm_name),
+      facetapi_adapter_load($searcher),
+      "admin/config/search/facetapi/$searcher/$realm_name/$facet_name",
+    );
+  }
+
+  /**
+   * Enables a facet via the UI.
+   */
+  public function facetapiEnableFacet($facet_name = 'enabled', $realm_name = 'block', $searcher = 'facetapi_test') {
+    // Capture current user, switch to admin user if necessary.
+    $account = $this->loggedInUser;
+    if ($account != $this->adminUser) {
+      $this->drupalLogin($this->adminUser);
+    }
 
     // Posts the form, ensures it was successfully submitted.
+    $path = 'admin/config/search/facetapi_test/facets/' . $realm_name;
     $values = array('enabled_facets[' . $facet_name . ']' => $facet_name);
-    $this->drupalGet($path);
     $this->drupalPost($path, $values, t('Save configuration'));
-    $this->assertRaw(t('The configuration options have been saved.'), t('Facet form successfully submitted.'));
-
-    // We have to clear the static cache otherwise this test won't work. This is
-    // OK because the script execution persists when the form is submitted by
-    // the test unlike a real form post where the page has to reload.
-    drupal_static('facetapi_get_enabled_facets', array(), TRUE);
-
-    // Tests the status of the enabled facet.
-    $value = facetapi_facet_enabled('facetapi_test', $realm_name, $facet_name);
-    $this->assertTrue($value, t('Facet enabled via the interface.'));
-
-    // Adds realm to block if we are testing the block realm.
-    if ('block' == $realm_name) {
-
-      // Generates the "key" by generating and hashing the delta.
-      module_load_include('inc', 'facetapi', 'facetapi.block');
-      $detla = facetapi_build_delta('facetapi_test', $realm_name, $facet_name);
-      $key = 'facetapi_' . facetapi_hash_delta($detla);
-
-      // Enables the facet in the "sidebar_first" region.
-      $edit = array('blocks[' . $key . '][region]' => 'sidebar_first');
-      $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
-
-      // Visits search page, raw value mimics return from default theme function.
-      $this->drupalGet('facetapi_test/search');
-      $raw = t('Filter by @title:', array('@title' => drupal_strtolower($label)));
-      $this->assertRaw($raw, t('Facet block displayed on search page.'));
+    $this->assertRaw(t('The configuration options have been saved.'), t('Facet form successfully submitted.'), 'Facet API');
+
+    // Test that the facet was successfully enabled.
+    $value = facetapi_facet_enabled($searcher, $realm_name, $facet_name);
+    $this->assertTrue($value, t('Facet enabled via the interface.'), 'Facet API');
+
+    // Log back in as original user if necessary.
+    if ($account != $this->adminUser) {
+      if ($account) {
+        $this->drupalLogin($account);
+      }
+      else {
+        $this->drupalLogout();
+      }
     }
   }
-}
-
-class FacetapiAdapterTestCase extends FacetapiTestCase {
-
-  public static function getInfo() {
-    return array(
-      'name' => 'Adapter functionality',
-      'description' => 'Tests the adapter system.',
-      'group' => 'Facet API',
-    );
-  }
 
-  public function testValidAdapter() {
-    // Tests loading of a valid adapter plugin, sets a semaphore to see if
-    // singleton pattern is implemented.
-    $adapter1 = $this->loadAdapter('facetapi_test');
-    $adapter1->semaphore = 'test';
-    $adapter2 = $this->loadAdapter('facetapi_test');
-    $value = (isset($adapter2->semaphore) && 'test' == $adapter2->semaphore);
-    $this->assertTrue($value, t('Singleton pattern implemented by facetapi_adapter_load().'));
-  }
+  /**
+   * Enables a facet block via the UI.
+   */
+  public function facetapiEnableFacetBlock($facet_name = 'enabled', $realm_name = 'block', $searcher = 'facetapi_test') {
+    // Capture current user, switch to admin user if necessary.
+    $account = $this->loggedInUser;
+    if ($account != $this->adminUser) {
+      $this->drupalLogin($this->adminUser);
+    }
 
-  public function testInvalidAdapter() {
-    $adapter = facetapi_adapter_load('bad_adapter');
-    $this->assertFalse($adapter, t('Loading an invalid adapter returns FALSE.'));
+    // Generates the "key" via the facetapi_hash_delta() function.
+    module_load_include('inc', 'facetapi', 'facetapi.block');
+    $detla = facetapi_build_delta($searcher, $realm_name, $facet_name);
+    $key = 'facetapi_' . facetapi_hash_delta($detla);
+
+    // Enables the facet in the "sidebar_first" region.
+    $edit = array('blocks[' . $key . '][region]' => 'sidebar_first');
+    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
+
+    // Log back in as original user if necessary.
+    if ($account != $this->adminUser) {
+      if ($account) {
+        $this->drupalLogin($account);
+      }
+      else {
+        $this->drupalLogout();
+      }
+    }
   }
 
-  public function testSetParams() {
-    // Sets dummy parameters.
-    $adapter = facetapi_adapter_load('facetapi_test');
-    $url = drupal_parse_url('http://example.com/index.php?q=test&page=1&f[0]=bundle:page');
-    $adapter->setParams($url['query']);
-
-    // Ensures that the "q" and "page" variables are stripped.
-    $params = $adapter->getUrlProcessor()->getParams();
-    $this->assertTrue(!isset($params['q']), t('The "q" variable is stripped by FacetapiAdapter::setParams().'));
-    $this->assertTrue(!isset($params['page']), t('The "page" variable is stripped by FacetapiAdapter::setParams().'));
-
-    // Tests that the "bundle:page" variable is set.
-    $value = (isset($params['f'][0]) && 'bundle:page' == $params['f'][0]);
-    $this->assertTrue($value, t('Facet value captured via FacetapiAdapter::setParams().'));
+  /**
+   * Sets debug message flagging which issue was just tested.
+   *
+   * @param string $issue
+   *   The URL to the issue on Drupal.org.
+   */
+  public function facetapiIssueMessage($issue) {
+    $href = check_plain($issue);
+    $link = '<a href="' . $href . '">' . $href . '</a>';
+    $this->pass(t('Tested issue !link', array('!link' => $link)), 'Debug');
   }
 }
 
+/**
+ * Test cases for operations taken through the admin UI.
+ */
 class FacetapiAdminInterfaceTestCase extends FacetapiTestCase {
   protected $authenticatedUser;
   protected $adminUser;
@@ -164,49 +154,109 @@ class FacetapiAdminInterfaceTestCase extends FacetapiTestCase {
     );
   }
 
+  /**
+   * Tests access to callbacks.
+   *
+   * @todo Test invalid adapters, realms, facets. Test multiple realms.
+   */
   public function testFormAccess() {
-    $this->drupalLogin($this->authenticatedUser);
+    $paths = array(
+      'admin/config/search/facetapi_test/facets' => t('realm settings'),
+      'admin/config/search/facetapi/facetapi_test/block/enabled/edit' => t('display settings'),
+      'admin/config/search/facetapi/facetapi_test/block/enabled/dependencies' => t('dependency settings'),
+      'admin/config/search/facetapi/facetapi_test/block/enabled/filters' => t('filter settings'),
+      'admin/config/search/facetapi/facetapi_test/block/enabled/export' => t('export settings'),
+      'admin/config/search/facetapi/facetapi_test/block/enabled/revert' => t('revert settings')
+    );
 
-    $this->drupalGet('admin/config/search/facetapi_test/facet');
-    $this->assertResponse(403, t('The "administer search" permission is required to access the realm settings form.'));
+    // Test wheter unprivileged user is denied access to forms.
+    $this->drupalLogin($this->authenticatedUser);
+    foreach ($paths as $path => $form_name) {
+      $this->drupalGet($path);
+      $this->assertResponse(403, t('Unprivileged user does not have access to the @form-name form.', array('@form-name' => $form_name)), 'Facet API');
+    }
 
-    // @todo Randomize facet / realm combination?
-    $this->drupalGet('admin/config/search/facetapi/facetapi_test/block/enabled/edit');
-    $this->assertResponse(403, t('The "administer search" permission is required to access the facet settings form.'));
+    // Common message for privileged access checks.
+    $privileged_message = t('Privileged user with "@permission" permission is granted access to the @form-name form.');
 
-    $this->drupalGet('admin/config/search/facetapi/facetapi_test/block/enabled/dependencies');
-    $this->assertResponse(403, t('The "administer search" permission is required to access the facet dependencies form.'));
+    // Test whether privileged user is granted access for forms.
+    // NOTE: $this->adminUser has "administer search" permission.
+    $this->drupalLogin($this->adminUser);
+    foreach ($paths as $path => $form_name) {
+      $this->drupalGet($path);
+      $args = array('@permission' => 'administer search', '@form-name' => $form_name);
+      $this->assertResponse(200, t($privileged_message, $args));
+    }
 
-    $this->drupalGet('admin/config/search/facetapi/facetapi_test/block/enabled/export');
-    $this->assertResponse(403, t('The "administer search" permission is required to access the facet export form.'));
+    // Tests whether privileged user is granted access for forms.
+    // Create another user with the "administer facets" permission, test whether
+    $facet_admin_user = $this->drupalCreateUser(array('administer facets'));
+    $this->drupalLogin($facet_admin_user);
+    foreach ($paths as $path => $form_name) {
+      $this->drupalGet($path);
+      $args = array('@permission' => 'administer facets', '@form-name' => $form_name);
+      $this->assertResponse(200, t($privileged_message, $args));
+    }
   }
 
-  public function testRealmSettingsForms() {
-    $this->drupalLogin($this->adminUser);
+  /**
+   * Tests enabling a facet via the UI.
+   */
+  public function testEnableFacet() {
+    list($facet) = $this->facetapiLoadObjects();
 
-    // Looks for placeholder text in main settings form.
-    $this->drupalGet('admin/config/search/facetapi_test');
-    $this->assertRaw(FACETAPI_TEST_FORM_TEXT, t('Facet API test setting form exists.'));
+    // Enable the "enabled" facet and block via UI.
+    $this->drupalLogin($this->adminUser);
+    $this->facetapiEnableFacet();
+    $this->facetapiEnableFacetBlock();
 
-    // Searches for "block" link in description.
-    $description = t(
-      'The <em>Blocks</em> realm displays each facet in a separate <a href="@block-page">block</a>. Users are able to refine their searches in a drill-down fashion.',
-      array('@block-page' => url('admin/structure/block', array('query' => array('destination' => 'admin/config/search/facetapi_test/facets/block'))))
-    );
-    $this->drupalGet('admin/config/search/facetapi_test/facets/block');
-    $this->assertRaw($description, t('Facet API test facet form exists.'));
+    // Test that block is positioned on the search page.
+    $this->drupalLogin($this->authenticatedUser);
+    $this->drupalGet('facetapi_test/search');
+    $raw = t('Filter by @title:', array('@title' => drupal_strtolower($facet['label'])));
+    $this->assertRaw($raw, t('Facet block displayed on search page.'), 'Facet API');
   }
 
-  public function testEnableFacet() {
+  /**
+   * Tests display form redirects.
+   */
+  public function testDisplayFormRedirect() {
+    list($facet, $realm, $adapter, $base_path) = $this->facetapiLoadObjects();
+    $path = "$base_path/edit";
+
+    $button_text = t('Save and go back to realm settings');
     $this->drupalLogin($this->adminUser);
-    $this->enableFacet('enabled', t('Enabled facet'));
+    $this->drupalPost($path, array(), $button_text);
+    $this->assertRaw($realm['label'], t('Form is redirected to realm settings form when the "@button-text" button is submitted.', array('@button-text' => $button_text)));
   }
 
-  public function testEnableFacetWithColon() {
-    // @todo Implement API to enable facets.
-    // @see http://drupal.org/node/1208326
+  /**
+   * Tests that an admin can selet a valid widget.
+   *
+   * In addition to checking that a valid widget can be selected, it also tests
+   * that an invalid widget cannot be selected by choosing one that does not
+   * support the "term" query type.
+   */
+  public function testWidgetSelect() {
     $this->drupalLogin($this->adminUser);
-    $this->enableFacet('colon:test', t('Colon test'));
+    list($facet, $realm, $adapter, $base_path) = $this->facetapiLoadObjects();
+    $path = "$base_path/edit";
+
+    // Ensure that a valid widget can be selected.
+    $this->drupalGet($path);
+    $values = array('widget' => 'facetapi_checkbox_links');
+    $this->drupalPost($path, $values, t('Save configuration'));
+    $settings = $adapter->getFacetSettings($facet, $realm);
+    $this->assertEqual($settings->settings['widget'], 'facetapi_checkbox_links', t('The facetapi_checkbox_links widget was successfully selected.'), 'Facet API');
+
+    // Ensure that an invalid widget cannot be selected.
+    $this->drupalGet($path);
+    $values = array('widget' => 'facetapi_nonterm');
+    $this->drupalPost($path, $values, t('Save configuration'));
+    $validation_message = t('The widget does not support the %type query type', array('%type' => 'term'));
+    $this->assertRaw($validation_message, t('An invalid widget cannot be selected.'), 'Facet API');
+    $settings = $adapter->getFacetSettings($facet, $realm);
+    $this->assertNotEqual($settings->settings['widget'], 'facetapi_nonterm', t('An invalid widget does not get saved.'), 'Facet API');
   }
 }
 
@@ -223,13 +273,14 @@ class FacetapiSearchPageInterfaceTestCase extends FacetapiTestCase {
   }
 
   public function testFormAccess() {
-    // @todo Implement API to enable facets.
-    // @see http://drupal.org/node/1208326
+
+    // Enable facet and position block.
     $this->drupalLogin($this->adminUser);
-    $this->enableFacet('enabled', t('Enabled facet'));
-    $this->drupalLogin($this->authenticatedUser);
+    $this->facetapiEnableFacet();
+    $this->facetapiEnableFacetBlock();
 
-    // @todo Randomize keys.
+    // Logs in as a normal user.
+    $this->drupalLogin($this->authenticatedUser);
 
     // Tests breadcrumb trail when search keys are in the path.
     $path = 'facetapi_test/search/testkeys';
@@ -247,3 +298,421 @@ class FacetapiSearchPageInterfaceTestCase extends FacetapiTestCase {
   }
 
 }
+
+class FacetapiBugFixTestCase extends FacetapiTestCase {
+  protected $authenticatedUser;
+  protected $adminUser;
+
+  public static function getInfo() {
+    return array(
+      'name' => 'Bug Fixes',
+      'description' => 'Tests fixed bugs to prevent regressions.',
+      'group' => 'Facet API',
+    );
+  }
+
+  /**
+   * Tests bug fixed at http://drupal.org/node/1209490.
+   */
+  public function testEnableFacetWithColon() {
+    $this->facetapiEnableFacet('colon:test');
+    $this->facetapiIssueMessage('http://drupal.org/node/1209490');
+  }
+
+  /**
+   * Tests bug fixed at http://drupal.org/node/1443340.
+   */
+  public function testValidDefaults() {
+    list($facet, $realm, $adapter, $base_path) = $this->facetapiLoadObjects('defaults');
+    $this->drupalLogin($this->adminUser);
+
+    $path = "$base_path/edit";
+    $values = array('widget' => 'facetapi_nonterm');
+    $this->drupalGet($path);
+    $this->drupalPost($path, $values, t('Save configuration'));
+
+    $settings = $adapter->getFacetSettingsGlobal($facet);
+    $message = t('Defaults settings not hard coded to "term" and FACETAPI_OPERATOR_AND.');
+    $this->assertEqual($settings->settings['query_type'], 'nonterm', $message, 'Facet API');
+
+    $this->facetapiIssueMessage('http://drupal.org/node/1443340');
+  }
+}
+
+/**
+ * Test cases for low level API functions.
+ */
+class FacetapiApiFunctions extends FacetapiTestCase {
+  protected $authenticatedUser;
+  protected $adminUser;
+
+  public static function getInfo() {
+    return array(
+      'name' => 'API Functions',
+      'description' => 'Tests low level API functions.',
+      'group' => 'Facet API',
+    );
+  }
+
+  /**
+   * Tests the facetapi_facet_enabled() function.
+   *
+   * @see facetapi_facet_enabled()
+   */
+  public function testFacetEnabled() {
+    list($facet, $realm, $adapter) = $this->facetapiLoadObjects();
+
+    // Ensure the facet is disabled, which it is by default.
+    $enabled = facetapi_facet_enabled('facetapi_test', 'nodisplay', 'enabled');
+    $this->assertFalse($enabled, t('Facet flagged as disabled by facetapi_facet_enabled().'), 'Facet API');
+
+    // Enable the facet, ensure the API function flags it as enabled.
+    facetapi_save_facet_enabled($adapter, $realm, $facet);
+    $enabled = facetapi_facet_enabled('facetapi_test', 'nodisplay', 'enabled');
+    $this->assertTrue($enabled, t('Facet flagged as enabled by facetapi_facet_enabled().'), 'Facet API');
+  }
+
+  /**
+   * Tests facetapi_save_facet_status() API functions.
+   *
+   * @see facetapi_save_facet_status()
+   * @see facetapi_save_facet_enabled()
+   * @see facetapi_save_facet_disabled()
+   */
+  public function testSaveFacetStatus() {
+    list($facet, $realm, $adapter) = $this->facetapiLoadObjects();
+
+    facetapi_save_facet_enabled($adapter, $realm, $facet);
+    $enabled = facetapi_facet_enabled('facetapi_test', 'nodisplay', 'enabled');
+    $this->assertTrue($enabled, t('Facet enabled by facetapi_save_facet_enabled().'), 'Facet API');
+
+    facetapi_save_facet_disabled($adapter, $realm, $facet);
+    $enabled = facetapi_facet_enabled('facetapi_test', 'nodisplay', 'enabled');
+    $this->assertFalse($enabled, t('Facet disabled by facetapi_save_facet_disabled().'), 'Facet API');
+  }
+
+  /**
+   * Tests facetapi_set_facet_status() API functions.
+   *
+   * @see facetapi_set_facet_status()
+   * @see facetapi_set_facet_enabled()
+   * @see facetapi_set_facet_disabled()
+   */
+  public function testSetFacetStatus() {
+    list($facet, $realm, $adapter) = $this->facetapiLoadObjects();
+
+    // Facet disabled by default, tests temporarily overriding status. Although
+    // the setting is disabled, status should be TRUE.
+    facetapi_set_facet_enabled('facetapi_test', 'nodisplay', 'enabled');
+    $enabled = facetapi_facet_enabled('facetapi_test', 'nodisplay', 'enabled');
+    $this->assertTrue($enabled, t('Facet temporarily enabled by facetapi_set_facet_disabled().'), 'Facet API');
+
+    // Saves facet as enabled, tests temporarily overriding status. Although the
+    // setting is enabled, status should be FALSE.
+    facetapi_save_facet_enabled($adapter, $realm, $facet);
+    facetapi_set_facet_disabled('facetapi_test', 'nodisplay', 'enabled');
+    $enabled = facetapi_facet_enabled('facetapi_test', 'nodisplay', 'enabled');
+    $this->assertFalse($enabled, t('Facet temporarily disabled by facetapi_set_facet_disabled().'), 'Facet API');
+  }
+
+  /**
+   * Tests the facetapi_translate_string() functionality.
+   *
+   * The Facet API Test module is not set as the translator module, so we do it
+   * by setting the variable in this function. This prevetns it from interfering
+   * with other tests.
+   *
+   * @see facetapi_translate_string().
+   */
+  public function testTranslateString() {
+    // Sets Facet API Test as the translator module.
+    variable_set('facetapi:translator_module', 'facetapi_test');
+    $translated = facetapi_translate_string('name', 'untranslated');
+    $this->assertEqual($translated, 'translated', t('String translated by facetapi_translate_string().'), 'Facet API');
+  }
+
+  /**
+   * Tests the facetapi_*_active_searcher() functions.
+   *
+   * @see facetapi_add_active_searcher().
+   * @see facetapi_is_active_searcher().
+   */
+  public function testActiveSearcher() {
+    // Searcher is not active by default, test that context is FALSE.
+    $active = facetapi_is_active_searcher('facetapi_test');
+    $this->assertFalse($active, t('Searcher correctly identified as inactive.'), 'Facet API');
+
+    // Sets active searcher, test that context is TRUE.
+    facetapi_add_active_searcher('facetapi_test');
+    $active = facetapi_is_active_searcher('facetapi_test');
+    $this->assertTrue($active, t('Searcher correctly identified as active.'), 'Facet API');
+  }
+
+  /**
+   * Tests the requirements system for property existence.
+   *
+   * @see facetapi_check_requirements()
+   * @see facetapi_requirement_property_set()
+   * @see facetapi_requirement_realm_property_set()
+   * @see facetapi_requirement_facet_property_set()
+   */
+  public function testPropertySetRequirements() {
+    list($facet, $realm, $adapter) = $this->facetapiLoadObjects();
+
+    $requirements = array(
+      'facetapi_requirement_facet_property_set' => array('label' => TRUE),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertTrue($passed, t('Requirements pass when an existing facet property is required to be set.'), 'Facet API');
+
+    $requirements = array(
+      'facetapi_requirement_facet_property_set' => array('label' => FALSE),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertFalse($passed, t('Requirements fail when an existing facet property is required to not be set.'), 'Facet API');
+
+    $requirements = array(
+      'facetapi_requirement_facet_property_set' => array('nonsense' => FALSE),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertTrue($passed, t('Requirements pass when a non-existent facet property is required not to be set.'), 'Facet API');
+
+    $requirements = array(
+      'facetapi_requirement_facet_property_set' => array('nonsense' => TRUE),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertFalse($passed, t('Requirements fail when a facet property that is not set is required.'), 'Facet API');
+
+
+    $requirements = array(
+      'facetapi_requirement_realm_property_set' => array('label' => TRUE),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertTrue($passed, t('Requirements pass when an existing realm property is required to be set.'), 'Facet API');
+
+    $requirements = array(
+      'facetapi_requirement_realm_property_set' => array('label' => FALSE),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertFalse($passed, t('Requirements fail when an existing realm property is required to not be set.'), 'Facet API');
+
+    $requirements = array(
+      'facetapi_requirement_realm_property_set' => array('nonsense' => FALSE),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertTrue($passed, t('Requirements pass when a non-existent realm property is required not to be set.'), 'Facet API');
+
+    $requirements = array(
+      'facetapi_requirement_realm_property_set' => array('nonsense' => TRUE),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertFalse($passed, t('Requirements fail when a realm property that is not set is required.'), 'Facet API');
+  }
+
+  /**
+   * Tests the requirements system for property equality.
+   *
+   * @see facetapi_check_requirements()
+   * @see facetapi_requirement_property()
+   * @see facetapi_requirement_realm_property()
+   * @see facetapi_requirement_facet_property()
+   */
+  public function testPropertyRequirements() {
+    list($facet, $realm, $adapter) = $this->facetapiLoadObjects();
+
+    $requirements = array(
+      'facetapi_requirement_facet_property' => array('label' => t('Enabled facet')),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertTrue($passed, t('Requirements pass when a testing whether a facet property equals the same value.'), 'Facet API');
+
+    $requirements = array(
+      'facetapi_requirement_facet_property' => array('label' => 'Does not match'),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertFalse($passed, t('Requirements fail when a testing whether a facet property equals a different value.'), 'Facet API');
+
+
+    $requirements = array(
+      'facetapi_requirement_realm_property' => array('label' => t('No display')),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertTrue($passed, t('Requirements pass when a testing whether a realm property equals the same value.'), 'Facet API');
+
+    $requirements = array(
+      'facetapi_requirement_realm_property' => array('label' => 'Does not match'),
+    );
+    $passed = facetapi_check_requirements($requirements, $realm, $facet);
+    $this->assertFalse($passed, t('Requirements fail when a testing whether a realm property equals a different value.'), 'Facet API');
+  }
+
+  /**
+   * Tests the requirements system for hierarchies.
+   *
+   * @see facetapi_check_requirements()
+   * @see facetapi_requirement_facet_property_set()
+   * @see facetapi_requirement_facet_hierarchical()
+   */
+  public function testHierarchicalRequirements() {
+    list($e_facet, $realm, $adapter) = $this->facetapiLoadObjects();
+    $h_facet = facetapi_facet_load('hierarchical', 'facetapi_test');
+
+    // Tests facetapi_requirement_facet_hierarchical(). Builds the requirements
+    // array for the TRUE and FALSE checks.
+    $requirements_t = array('facetapi_requirement_facet_hierarchical' => TRUE);
+    $requirements_f = array('facetapi_requirement_facet_hierarchical' => FALSE);
+
+    $passed = facetapi_check_requirements($requirements_t, $realm, $h_facet);
+    $this->assertTrue($passed, t('Requirements pass when checking if a hierarchical facet is hierarchical.'), 'Facet API');
+
+    $passed = facetapi_check_requirements($requirements_f, $realm, $h_facet);
+    $this->assertFalse($passed, t('Requirements fail when checking if a hierarchical facet is not hierarchical.'), 'Facet API');
+
+    $passed = facetapi_check_requirements($requirements_f, $realm, $e_facet);
+    $this->assertTrue($passed, t('Requirements pass when checking if a non-hierarchical facet is not hierarchical.'), 'Facet API');
+
+    $passed = facetapi_check_requirements($requirements_t, $realm, $e_facet);
+    $this->assertFalse($passed, t('Requirements fail when checking if a non-hierarchical facet is hierarchical.'), 'Facet API');
+  }
+
+  /**
+   * Tests the facetapi_access_callback() access callback.
+   *
+   * @see facetapi_access_callback().
+   */
+  public function testAccessCallback() {
+    // The $this->adminUser has the "administer search" permission.
+    $this->drupalLogin($this->adminUser);
+    $access = facetapi_access_callback($this->loggedInUser);
+    $this->assertTrue($access, t('The facetapi_access_callback() function returns TRUE for users with the "administer search" permission.'), 'Facet API');
+
+    // Create another user with the "administer facets" permission.
+    $facet_admin_user = $this->drupalCreateUser(array('administer facets'));
+    $this->drupalLogin($facet_admin_user);
+    $access = facetapi_access_callback($this->loggedInUser);
+    $this->assertTrue($access, t('The facetapi_access_callback() function returns TRUE for users with the "administer facets" permission.'), 'Facet API');
+
+    // Users without either permission should be denied access.
+    $this->drupalLogin($this->authenticatedUser);
+    $access = facetapi_access_callback($this->loggedInUser);
+    $this->assertFalse($access, t('The facetapi_access_callback() function returns FALSE for users with neither the "administer search" nor "administer facets" permissions.'), 'Facet API');
+  }
+
+  /**
+   * Tests the loading of the adapter.
+   *
+   * Performs three tests:
+   * - A valid adapter can be loaded.
+   * - An invalid adapter returns FALSE.
+   * - Only one instance per searcher is loaded.
+   */
+  public function testAdapterLoad() {
+    // Loads a valid adapter.
+    $adapter1 = facetapi_adapter_load('facetapi_test');
+    $value = ($adapter1 instanceof FacetapiAdapter);
+    $this->assertTrue($value, t('FacetapiAdapter object loaded via facetapi_adapter_load().'), 'Facet API');
+
+    // Loads an invalid adapter.
+    $adapter_bad = facetapi_adapter_load('nonsense');
+    $this->assertFalse($adapter_bad, t('FacetapiAdapter object loaded via facetapi_adapter_load().'), 'Facet API');
+
+    // Sets a semaphore to see if singleton pattern is implemented.\
+    $adapter1->semaphore = 'test';
+    $adapter2 = facetapi_adapter_load('facetapi_test');
+    $value = (isset($adapter2->semaphore) && 'test' == $adapter2->semaphore);
+    $this->assertTrue($value, t('Singleton pattern implemented by facetapi_adapter_load().'), 'Facet API');
+  }
+
+  /**
+   * Test active item processing via the url processor plugin.
+   *
+   * @see FacetapiUrlProcessorStandard
+   * @see FacetapiUrlProcessorStandard::fetchParams()
+   * @see FacetapiUrlProcessorStandard::normalizeParams()
+   * @see FacetapiUrlProcessorStandard::setParams()
+   * @see FacetapiUrlProcessorStandard::getParams()
+   * @see FacetapiAdapter::initUrlProcessor()
+   * @see FacetapiAdapter::setParams()
+   * @see FacetapiAdapter::processActiveItems()
+   * @see FacetapiAdapter::getAllActiveItems()
+   */
+  public function testUrlProcessorDataProcessing() {
+    list($facet, $realm, $adapter) = $this->facetapiLoadObjects();
+    facetapi_save_facet_enabled($adapter, $realm, $facet);
+
+    // Capture real $_GET.
+    $get = $_GET;
+
+    // Fake the query string.
+    $_GET = array(
+      'q' => array(),
+      'page' => 1,
+      'f' => array('enabled:testone', 'disabled:testfour', 'enabled:testthree'),
+    );
+
+    // Ensure that the adapter loads the URL processor plugin.
+    $url_processor = $adapter->getUrlProcessor();
+    $passed = ($url_processor instanceof FacetapiUrlProcessorStandard);
+    $this->assertTrue($passed, t('An instance of FacetapiUrlProcessorStandard is returned by the adapter.'), 'Facet API');
+
+    // Test fetching params.
+    $fetched = $url_processor->fetchParams();
+    $this->assertEqual($fetched, $_GET, t('Parameters fetched from $_GET by FacetapiUrlProcessorStandard::fetchParams().'), 'Facet API');
+
+    // Test normalizing fetched params.
+    $normalized = $url_processor->normalizeParams($fetched);
+    $this->assertTrue(!isset($normalized['q']), t('The "q" variable is stripped by FacetapiUrlProcessorStandard::normalizeParams().'), 'Facet API');
+    $this->assertTrue(!isset($normalized['page']), t('The "page" variable is stripped by FacetapiUrlProcessorStandard::normalizeParams().'), 'Facet API');
+
+    // Test setting and getting params.
+    $url_processor->setParams($normalized);
+    $params = $url_processor->getParams();
+    $this->assertEqual($normalized, $params, t('Parameters are able to be set and retrieved by getter and setter methods of FacetapiUrlProcessorStandard.'), 'Facet API');
+
+    // Test processing of active items.
+    $adapter->initUrlProcessor();
+    $active_items = $adapter->getAllActiveItems();
+    $true = isset($active_items['enabled:testone']);
+    $this->assertTrue($true, t('Value for enabled facet extracted as an active item.'), 'Facet API');
+    $false = isset($active_items['disabled:testfour']);
+    $this->assertFalse($false, t('Value for disabled facet not extracted as an active item.'), 'Facet API');
+
+    // Test re-processing of active items.
+    $facet_d = facetapi_facet_load('disabled', 'facetapi_test');
+    facetapi_save_facet_enabled($adapter, $realm, $facet_d);
+    $adapter->initUrlProcessor();
+    $active_items = $adapter->getAllActiveItems();
+    $true = isset($active_items['disabled:testfour']);
+    $this->assertTrue($true, t('Reprocessed value for enabled facet extracted as an active item.'), 'Facet API');
+
+    // Reset real $_GET.
+    $_GET = $get;
+  }
+
+  /**
+   * Test query string building via the url processor plugin.
+   *
+   * @see FacetapiUrlProcessor::getQueryString()
+   */
+  public function testUrlProcessorQueryString() {
+    list($facet, $realm, $adapter) = $this->facetapiLoadObjects();
+    facetapi_save_facet_enabled($adapter, $realm, $facet);
+
+    // Send params with facet data.
+    $params = array(
+      'f' => array('enabled:testone', 'enabled:testthree'),
+    );
+    $adapter->setParams($params);
+    $url_processor = $adapter->getUrlProcessor();
+
+    // Tests activating an additional facet item.
+    $qstring = $url_processor->getQueryString($facet, array('testtwo'), 0);
+    $expected = array('f' => array('enabled:testone', 'enabled:testthree', 'enabled:testtwo'));
+    $this->assertEqual($qstring, $expected, t('Facet item is appended to the query string when activated.'), 'Facet API');
+
+    // Tests deactivating an additional facet item.
+    $qstring = $url_processor->getQueryString($facet, array('testone'), 1);
+    $expected = array('f' => array('enabled:testthree'));
+    $this->assertEqual($qstring, $expected, t('Facet item is removed from the query string when deactivated.'), 'Facet API');
+  }
+}
diff --git a/profiles/acquia/modules/facetapi/tests/facetapi_test.current_search.inc b/profiles/acquia/modules/facetapi/tests/facetapi_test.current_search.inc
new file mode 100644
index 0000000..579686f
--- /dev/null
+++ b/profiles/acquia/modules/facetapi/tests/facetapi_test.current_search.inc
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * @file
+ * Current Search default hooks.
+ */
+
+/**
+ * Implements hook_current_search_default_items().
+ */
+function facetapi_test_current_search_default_items() {
+  $items = array();
+
+  $item = new stdClass;
+  $item->disabled = FALSE;
+  $item->api_version = 1;
+  $item->name = 'second';
+  $item->label = 'Second';
+  $item->settings = array(
+    'items' => array(
+      'results' => array(
+        'id' => 'text',
+        'label' => 'Results',
+        'text' => 'Second current search block',
+        'plural' => 0,
+        'text_plural' => '',
+        'plural_condition' => 'facetapi_results:result-count',
+        'wrapper' => 1,
+        'element' => 'h3',
+        'css' => 0,
+        'classes' => '',
+        'weight' => '-50',
+      ),
+    ),
+    'advanced' => array(
+      'empty_searches' => 0,
+    ),
+  );
+  $items[$item->name] = $item;
+
+  return $items;
+}
diff --git a/profiles/acquia/modules/facetapi/tests/facetapi_test.facetapi.inc b/profiles/acquia/modules/facetapi/tests/facetapi_test.facetapi.inc
new file mode 100644
index 0000000..1c17dfd
--- /dev/null
+++ b/profiles/acquia/modules/facetapi/tests/facetapi_test.facetapi.inc
@@ -0,0 +1,70 @@
+<?php
+
+/**
+ * @file
+ * Facet API hook implementations.
+ */
+
+/**
+ * Implements hook_facetapi_realm_info().
+ */
+function facetapi_test_facetapi_realm_info() {
+  return array(
+    'nodisplay' => array(
+      'label' => t('No display'),
+      'weight' => -5,
+      'sortable' => FALSE,
+      'default widget' => 'facetapi_links',
+      'element type' => 'links',
+      'description' => t('Dummy realm that never displays facets.'),
+    ),
+  );
+}
+
+/**
+ * Implements hook_facetapi_adapters().
+ */
+function facetapi_test_facetapi_adapters() {
+  return array(
+    'facetapi_test' => array(
+      'handler' => array(
+        'class' => 'FacetapiTestAdapter',
+      ),
+    ),
+  );
+}
+
+/**
+ * Implements hook_facetapi_query_types().
+ */
+function facetapi_test_facetapi_query_types() {
+  return array(
+    'facetapi_test_term' => array(
+      'handler' => array(
+        'class' => 'FacetapiTestTerm',
+        'adapter' => 'facetapi_test',
+      ),
+    ),
+    'facetapi_test_nonterm' => array(
+      'handler' => array(
+        'class' => 'FacetapiTestNonterm',
+        'adapter' => 'facetapi_test',
+      ),
+    ),
+  );
+}
+
+/**
+ * Implements hook_facetapi_widgets().
+ */
+function facetapi_test_facetapi_widgets() {
+  return array(
+    'facetapi_nonterm' => array(
+      'handler' => array(
+        'label' => t('Nonterm Widget'),
+        'class' => 'FacetapiTestWidgetNonterm',
+        'query types' => array('nonterm'),
+      ),
+    ),
+  );
+}
diff --git a/profiles/acquia/modules/facetapi/tests/facetapi_test.info b/profiles/acquia/modules/facetapi/tests/facetapi_test.info
index 097e465..bf74063 100644
--- a/profiles/acquia/modules/facetapi/tests/facetapi_test.info
+++ b/profiles/acquia/modules/facetapi/tests/facetapi_test.info
@@ -5,11 +5,11 @@ package = Testing
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-02-24
-version = "7.x-1.0-rc4"
+; Information added by drupal.org packaging script on 2012-07-31
+version = "7.x-1.1"
 core = "7.x"
 project = "facetapi"
-datestamp = "1330124142"
+datestamp = "1343771560"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/facetapi/tests/facetapi_test.module b/profiles/acquia/modules/facetapi/tests/facetapi_test.module
index 43fd6bc..4d21685 100644
--- a/profiles/acquia/modules/facetapi/tests/facetapi_test.module
+++ b/profiles/acquia/modules/facetapi/tests/facetapi_test.module
@@ -42,30 +42,12 @@ function facetapi_test_menu() {
 }
 
 /**
- * Implements hook_facetapi_adapters().
+ * Implements hook_ctools_plugin_api().
  */
-function facetapi_test_facetapi_adapters() {
-  return array(
-    'facetapi_test' => array(
-      'handler' => array(
-        'class' => 'FacetapiTestAdapter',
-      ),
-    ),
-  );
-}
-
-/**
- * Implements hook_facetapi_query_types().
- */
-function facetapi_test_facetapi_query_types() {
-  return array(
-    'facetapi_test_term' => array(
-      'handler' => array(
-        'class' => 'FacetapiTestTerm',
-        'adapter' => 'facetapi_test',
-      ),
-    ),
-  );
+function facetapi_test_ctools_plugin_api($owner, $api) {
+  if ($owner == 'current_search' && $api == 'current_search') {
+    return array('version' => 1);
+  }
 }
 
 /**
@@ -77,15 +59,29 @@ function facetapi_test_facetapi_searcher_info() {
   $info['facetapi_test'] = array(
     'label' => t('Facet API Test'),
     'adapter' => 'facetapi_test',
-    'type' => 'test',
+    'types' => array('test'),
     'path' => 'admin/config/search/facetapi_test',
     'supports facet missing' => FALSE,
   );
 
+  $info['facetapi_test2'] = array(
+    'label' => t('Facet API Seond Searcher'),
+    'adapter' => 'facetapi_test',
+    'types' => array('test'),
+    'supports facet missing' => FALSE,
+  );
+
   return $info;
 }
 
 /**
+ * Implements hook_facetapi_translate_string().
+ */
+function facetapi_test_facetapi_translate_string($name, $string, $langcode = NULL) {
+  return 'translated';
+}
+
+/**
  * Placeholder for the admin settings form.
  */
 function facetapi_test_admin_settings($form, &$form_state) {
@@ -117,11 +113,43 @@ function facetapi_test_facetapi_facet_info($searcher_info) {
       'description' => t('Test facets names with colonss.'),
       'dependency plugins' => array('role'),
     );
+
+    $facets['defaults'] = array(
+      'label' => t('Default test'),
+      'description' => t('Tests query type and operator defaults stored in settings.'),
+      'dependency plugins' => array('role'),
+      'query types' => array('nonterm'),
+      'default widget' => 'nonterm',
+      'allowed operators' => array(
+        FACETAPI_OPERATOR_AND => FALSE,
+        FACETAPI_OPERATOR_OR => TRUE
+      ),
+    );
+
+    $facets['hierarchical'] = array(
+      'label' => t('Colon test'),
+      'description' => t('Test facets names with colonss.'),
+      'dependency plugins' => array('role'),
+      'hierarchy callback' => 'facetapi_test_process_hierarchy',
+    );
   }
   return $facets;
 }
 
 /**
+ * Hierarchy processing callback.
+ *
+ * @param array $values
+ *   An array containing the term ids.
+ *
+ * @return
+ *   An associative array keyed by term ID to parent ID.
+ */
+function facetapi_test_process_hierarchy(array $values) {
+
+}
+
+/**
  * Fake search page callback.
  */
 function facetapi_test_search_callback() {
@@ -136,6 +164,7 @@ function facetapi_test_search_callback() {
 
   $keys = isset($_GET['keys']) ? $_GET['keys'] : arg(2);
   $adapter->setSearchKeys($keys);
+  $adapter->setResultCount(10);
 
   $build['placeholder'] = array(
     '#markup' => t('Placeholder'),
diff --git a/profiles/acquia/modules/facetapi/tests/facetapi_test.plugins.inc b/profiles/acquia/modules/facetapi/tests/facetapi_test.plugins.inc
index ea8b90d..7edd4dd 100644
--- a/profiles/acquia/modules/facetapi/tests/facetapi_test.plugins.inc
+++ b/profiles/acquia/modules/facetapi/tests/facetapi_test.plugins.inc
@@ -1,11 +1,16 @@
 <?php
 
 /**
- * Test plugins for Facet API.
+ * @file
+ * Test adapter and plugins.
  */
 
 /**
- * Facet API adapter for the Apache Solr Search Integration module.
+ * Adapter for our test searcher.
+ *
+ * The test searcher does not connect to a backend, it just renders dummy data
+ * every tom a search is executed. Facet API is not responsible for calculating
+ * the facets, so for testing purposes this works just fine.
  */
 class FacetapiTestAdapter extends FacetapiAdapter {
 
@@ -15,21 +20,30 @@ class FacetapiTestAdapter extends FacetapiAdapter {
   protected $resultCount;
 
   /**
-   * Returns a boolean flagging whether $this->searcher executed a search.
+   * Implements FacetapiAdapter::searchExecuted().
    */
   public function searchExecuted() {
     return !empty($this->keys);
   }
 
   /**
-   * Returns a boolean flagging whether facets in a realm shoud be displayed.
+   * Implements FacetapiAdapter::suppressOutput().
    */
   public function suppressOutput($realm_name) {
-
+    return FALSE;
   }
 
   /**
    * Sets the result count.
+   *
+   * The test searcher does not use the core pager APIs, so we use this method
+   * to set a dummy value.
+   *
+   * @param int $count
+   *   The result count.
+   *
+   * @return FacetapiAdapter
+   *   An instance of this class.
    */
   public function setResultCount($count) {
     $this->resultCount = $count;
@@ -37,7 +51,7 @@ class FacetapiTestAdapter extends FacetapiAdapter {
   }
 
   /**
-   * Returns the nmber of total results found for the current search.
+   * Overrides FacetapiAdapter::getResultCount().
    */
   public function getResultCount() {
     return $this->resultCount;
@@ -45,26 +59,76 @@ class FacetapiTestAdapter extends FacetapiAdapter {
 }
 
 /**
- * Plugin for "term" query types.
+ * Plugin for "term" query type.
  */
 class FacetapiTestTerm extends FacetapiQueryType implements FacetapiQueryTypeInterface {
 
+  /**
+   * Implements FacetapiQueryTypeInterface::getType().
+   */
   static public function getType() {
     return 'term';
   }
 
+  /**
+   * Implements FacetapiQueryTypeInterface::execute().
+   */
   public function execute($query) {
     // Nothing to do...
   }
 
+  /**
+   * Implements FacetapiQueryTypeInterface::build().
+   */
   public function build() {
     $build = array();
 
+    $build['testthree'] = array('#count' => 3);
     $build['testone'] = array('#count' => 1);
     $build['testtwo'] = array('#count' => 2);
-    $build['testthree'] = array('#count' => 3);
 
     // Returns initialized build.
     return $build;
   }
 }
+
+/**
+ * Plugin for "nonterm" query type.
+ */
+class FacetapiTestNonterm extends FacetapiQueryType implements FacetapiQueryTypeInterface {
+
+  /**
+   * Implements FacetapiQueryTypeInterface::getType().
+   */
+  static public function getType() {
+    return 'nonterm';
+  }
+
+  /**
+   * Implements FacetapiQueryTypeInterface::execute().
+   */
+  public function execute($query) {
+    // Nothing to do...
+  }
+
+  /**
+   * Implements FacetapiQueryTypeInterface::build().
+   */
+  public function build() {
+    $build = array();
+
+    $build['testfour'] = array('#count' => 4);
+    $build['testsix'] = array('#count' => 6);
+    $build['testfive'] = array('#count' => 5);
+
+    // Returns initialized build.
+    return $build;
+  }
+}
+
+/**
+ * Plugin for dummy widget that only supports the "nonterm" query type.
+ */
+class FacetapiTestWidgetNonterm extends FacetapiWidgetLinks {
+
+}
diff --git a/profiles/acquia/modules/mollom/mollom.admin.inc b/profiles/acquia/modules/mollom/mollom.admin.inc
index aa7cfae..5946ad8 100644
--- a/profiles/acquia/modules/mollom/mollom.admin.inc
+++ b/profiles/acquia/modules/mollom/mollom.admin.inc
@@ -268,6 +268,7 @@ function mollom_admin_configure_form($form, &$form_state, $mollom_form = NULL) {
           '#title' => t('Text fields to analyze'),
           '#options' => $elements,
           '#default_value' => $enabled_fields,
+          '#description' => t('Only enable fields that accept text (not numbers). Omit fields that contain sensible data (e.g., credit card numbers) or computed/auto-generated values, as well as author information fields (e.g., name, e-mail).'),
           '#states' => array(
             'visible' => array(
               ':input[name="mollom[mode]"]' => array('value' => (string) MOLLOM_MODE_ANALYSIS),
diff --git a/profiles/acquia/modules/mollom/mollom.drupal.inc b/profiles/acquia/modules/mollom/mollom.drupal.inc
index d5ffe7d..c70ebb3 100644
--- a/profiles/acquia/modules/mollom/mollom.drupal.inc
+++ b/profiles/acquia/modules/mollom/mollom.drupal.inc
@@ -237,6 +237,7 @@ class MollomDrupalTest extends MollomDrupal {
       $this->configuration_map['privateKey'] = 'mollom_test_private_key';
     }
 
+    // Load and set publicKey and privateKey configuration values.
     parent::__construct();
 
     // Any Mollom API request requires valid API keys, or no API calls can be
@@ -258,7 +259,7 @@ class MollomDrupalTest extends MollomDrupal {
     // Verifying keys may return an authentication error, from which we will
     // automatically recover below, so do not write the request log (yet).
     $this->writeLog = FALSE;
-    if (!empty($this->publicKey)) {
+    if (!empty($this->publicKey) && !empty($this->privateKey)) {
       $result = $this->verifyKeys();
     }
     else {
@@ -268,8 +269,9 @@ class MollomDrupalTest extends MollomDrupal {
 
     // If current keys are invalid, create and save new testing API keys.
     if ($result === self::AUTH_ERROR) {
-      $this->createKeys();
-      $this->saveKeys();
+      if ($this->createKeys()) {
+        $this->saveKeys();
+      }
     }
   }
 
@@ -298,12 +300,14 @@ class MollomDrupalTest extends MollomDrupal {
     $this->oAuthStrategy = $oAuthStrategy;
 
     // Set class properties.
-    if (is_array($result) && isset($result['publicKey'])) {
+    if (is_array($result) && !empty($result['publicKey']) && !empty($result['privateKey'])) {
       $this->publicKey = $result['publicKey'];
       $this->privateKey = $result['privateKey'];
+      return TRUE;
     }
     else {
       unset($this->publicKey, $this->privateKey);
+      return FALSE;
     }
   }
 
diff --git a/profiles/acquia/modules/mollom/mollom.info b/profiles/acquia/modules/mollom/mollom.info
index 7993c69..924c2dd 100644
--- a/profiles/acquia/modules/mollom/mollom.info
+++ b/profiles/acquia/modules/mollom/mollom.info
@@ -10,11 +10,11 @@ files[] = mollom.drupal.inc
 files[] = tests/mollom.test
 files[] = tests/mollom.class.test
 
-; Information added by drupal.org packaging script on 2012-03-14
-version = "7.x-2.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-2.2"
 core = "7.x"
 project = "mollom"
-datestamp = "1331691954"
+datestamp = "1344429449"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/mollom/mollom.install b/profiles/acquia/modules/mollom/mollom.install
index e174101..7680669 100644
--- a/profiles/acquia/modules/mollom/mollom.install
+++ b/profiles/acquia/modules/mollom/mollom.install
@@ -65,7 +65,12 @@ function mollom_requirements($phase = 'runtime', $check = TRUE) {
       $requirements['mollom']['value'] = t('Network error');
       $requirements['mollom']['description'] = t('The Mollom servers could not be contacted. Please make sure that your web server can make outgoing HTTP requests.');
     }
-    // 404, Mollom::RESPONSE_ERROR, etc.
+    // Server error.
+    elseif ($status['keys valid'] === Mollom::RESPONSE_ERROR) {
+      $requirements['mollom']['value'] = t('Service error');
+      $requirements['mollom']['description'] = t('The Mollom API keys could not be verified. Please try again later.');
+    }
+    // 404, etc.
     else {
       $requirements['mollom']['value'] = t('Unknown error');
       $requirements['mollom']['description'] = t('The Mollom servers could be contacted, but Mollom API keys could not be verified.');
@@ -203,6 +208,23 @@ function mollom_schema() {
         'not null' => TRUE,
         'default' => '',
       ),
+      // Optional entity type and bundle columns are required for protected
+      // entity forms, in order to determine whether report options should
+      // appear on a delete confirmation form. Column lengths are copied from
+      // {field_config_instance}.
+      // @see field_schema()
+      'entity' => array(
+        'description' => 'Optional: Entity type of the form.',
+        'type' => 'varchar',
+        'length' => 32,
+        'not null' => FALSE,
+      ),
+      'bundle' => array(
+        'description' => 'Optional: Entity bundle of the form.',
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => FALSE,
+      ),
       'mode' => array(
         'description' => 'Protection mode for the form.',
         'type' => 'int',
@@ -601,23 +623,27 @@ function mollom_update_7005() {
   // Since some data rows are using an empty string to denote no 'quality'
   // value, we need to insert a temporary value that is converted to NULL
   // afterwards.
-  db_update('mollom')
-    ->fields(array('quality' => 9))
-    ->condition('quality', '')
-    ->execute();
-  db_change_field('mollom', 'quality', 'quality', array(
-    'description' => 'Text analysis quality check result.',
-    'type' => 'float',
-    'size' => 'tiny',
-    'not null' => FALSE,
-  ));
-  db_update('mollom')
-    ->fields(array('quality' => NULL))
-    ->condition('quality', 9)
-    ->execute();
+  // When upgrading from 6.x-2.x, this is {mollom}.qualityScore already.
+  if (db_field_exists('mollom', 'quality')) {
+    db_update('mollom')
+      ->fields(array('quality' => 9))
+      ->condition('quality', '')
+      ->execute();
+    db_change_field('mollom', 'quality', 'quality', array(
+      'description' => 'Text analysis quality check result.',
+      'type' => 'float',
+      'size' => 'tiny',
+      'not null' => FALSE,
+    ));
+    db_update('mollom')
+      ->fields(array('quality' => NULL))
+      ->condition('quality', 9)
+      ->execute();
+  }
 
   // Add {mollom}.spam.
-  if (!db_field_exists('mollom', 'spam')) {
+  // When upgrading from 6.x-2.x, this is {mollom}.spamScore already.
+  if (!db_field_exists('mollom', 'spam') && !db_field_exists('mollom', 'spamScore')) {
     db_add_field('mollom', 'spam', array(
       'description' => 'Text analysis spam check result.',
       'type' => 'int',
@@ -645,7 +671,8 @@ function mollom_update_7005() {
   }
 
   // Add {mollom}.profanity.
-  if (!db_field_exists('mollom', 'profanity')) {
+  // When upgrading from 6.x-2.x, this is {mollom}.profanityScore already.
+  if (!db_field_exists('mollom', 'profanity') && !db_field_exists('mollom', 'profanityScore')) {
     db_add_field('mollom', 'profanity', array(
       'description' => 'Text analysis profanity check result.',
       'type' => 'float',
@@ -729,7 +756,8 @@ function mollom_update_7008() {
     db_add_primary_key('mollom', array('entity', 'id'));
   }
 
-  if (!db_field_exists('mollom', 'session_id')) {
+  // When upgrading from 6.x-2.x, this is {mollom}.contentId already.
+  if (!db_field_exists('mollom', 'session_id') && !db_field_exists('mollom', 'contentId')) {
     db_drop_index('mollom', 'session');
     db_change_field('mollom', 'session', 'session_id', array(
       'description' => 'Session hash returned by Mollom.',
@@ -799,7 +827,7 @@ function mollom_update_7011() {
 }
 
 /**
- * Change {mollom}: Add 'spamResult', change 'spam', replace 'session_id' with 'contentId' and 'captchaId'.
+ * Change {mollom}: Add 'spamClassification', change 'spam', replace 'session_id' with 'contentId' and 'captchaId'.
  */
 function mollom_update_7200() {
   variable_del('mollom_servers');
@@ -829,15 +857,17 @@ function mollom_update_7200() {
     db_add_index('mollom', 'contentId', array('contentId'));
     db_add_index('mollom', 'captchaId', array('captchaId'));
   }
+  // Add 'spamClassification'.
   if (!db_field_exists('mollom', 'spamClassification')) {
-    // Add 'spamClassification'.
     db_add_field('mollom', 'spamClassification', array(
       'description' => 'Text analysis final spam classification result.',
       'type' => 'varchar',
       'length' => 16,
       'not null' => FALSE,
     ));
-    // Change 'spam' into 'spamScore' double.
+  }
+  // Change 'spam' into 'spamScore' double.
+  if (!db_field_exists('mollom', 'spamScore')) {
     db_change_field('mollom', 'spam', 'spamScore', array(
       'description' => 'Text analysis spam check result.',
       'type' => 'float',
@@ -845,8 +875,8 @@ function mollom_update_7200() {
       'not null' => FALSE,
     ));
   }
+  // Change 'profanity' into 'profanityScore' double.
   if (!db_field_exists('mollom', 'profanityScore')) {
-    // Change 'profanity' into 'profanityScore' double.
     db_change_field('mollom', 'profanity', 'profanityScore', array(
       'description' => 'Text analysis profanity check result.',
       'type' => 'float',
@@ -854,8 +884,8 @@ function mollom_update_7200() {
       'not null' => FALSE,
     ));
   }
+  // Change 'quality' into 'qualityScore' double.
   if (!db_field_exists('mollom', 'qualityScore')) {
-    // Change 'quality' into 'qualityScore' double.
     db_change_field('mollom', 'quality', 'qualityScore', array(
       'description' => 'Text analysis quality check result.',
       'type' => 'float',
@@ -863,8 +893,8 @@ function mollom_update_7200() {
       'not null' => FALSE,
     ));
   }
+  // Add 'solved'.
   if (!db_field_exists('mollom', 'solved')) {
-    // Add 'solved'.
     db_add_field('mollom', 'solved', array(
       'description' => 'Whether a CAPTCHA has been solved (1) or not (0).',
       'type' => 'int',
@@ -872,8 +902,8 @@ function mollom_update_7200() {
       'not null' => FALSE,
     ));
   }
+  // Add 'reason'.
   if (!db_field_exists('mollom', 'reason')) {
-    // Add 'reason'.
     db_add_field('mollom', 'reason', array(
       'description' => 'A special reason for why a post was blocked.',
       'type' => 'varchar',
@@ -947,3 +977,51 @@ function mollom_update_7204() {
   }
 }
 
+/**
+ * Add {mollom_form}.entity and .bundle fields.
+ */
+function mollom_update_7205() {
+  if (!db_field_exists('mollom_form', 'entity')) {
+    db_add_field('mollom_form', 'entity', array(
+      'description' => 'Optional: Entity type of the form.',
+      'type' => 'varchar',
+      'length' => 32,
+      'not null' => FALSE,
+    ));
+  }
+  if (!db_field_exists('mollom_form', 'bundle')) {
+    db_add_field('mollom_form', 'bundle', array(
+      'description' => 'Optional: Entity bundle of the form.',
+      'type' => 'varchar',
+      'length' => 128,
+      'not null' => FALSE,
+    ));
+  }
+  // Populate entity type and bundle values for core entity types.
+  // Any other values for contributed entities need to be updated manually,
+  // which is possible by simply updating the form protection through the
+  // administration interface.
+  $result = db_query('SELECT form_id, module FROM {mollom_form}');
+  foreach ($result as $mollom_form) {
+    if ($mollom_form->module == 'node') {
+      $bundle = substr($mollom_form->form_id, 0, -strlen('_node_form'));
+      db_update('mollom_form')
+        ->condition('form_id', $mollom_form->form_id)
+        ->fields(array('entity' => 'node', 'bundle' => $bundle))
+        ->execute();
+    }
+    elseif ($mollom_form->module == 'comment') {
+      $bundle = substr($mollom_form->form_id, 0, -strlen('_form'));
+      db_update('mollom_form')
+        ->condition('form_id', $mollom_form->form_id)
+        ->fields(array('entity' => 'comment', 'bundle' => $bundle))
+        ->execute();
+    }
+    elseif ($mollom_form->module == 'user') {
+      db_update('mollom_form')
+        ->condition('form_id', $mollom_form->form_id)
+        ->fields(array('entity' => 'user', 'bundle' => 'user'))
+        ->execute();
+    }
+  }
+}
diff --git a/profiles/acquia/modules/mollom/mollom.js b/profiles/acquia/modules/mollom/mollom.js
index cf9482b..8898536 100644
--- a/profiles/acquia/modules/mollom/mollom.js
+++ b/profiles/acquia/modules/mollom/mollom.js
@@ -1,13 +1,13 @@
 (function ($) {
 
 /**
- * Open Mollom privacy policy link in a new window.
+ * Open links to Mollom.com in a new window.
  *
  * Required for valid XHTML Strict markup.
  */
-Drupal.behaviors.mollomPrivacy = {
+Drupal.behaviors.mollomTarget = {
   attach: function (context) {
-    $('.mollom-privacy a', context).click(function () {
+    $(context).find('.mollom-target').click(function () {
       this.target = '_blank';
     });
   }
diff --git a/profiles/acquia/modules/mollom/mollom.module b/profiles/acquia/modules/mollom/mollom.module
index 9449b28..22ab9ce 100644
--- a/profiles/acquia/modules/mollom/mollom.module
+++ b/profiles/acquia/modules/mollom/mollom.module
@@ -300,7 +300,10 @@ function mollom_menu() {
  *   FALSE otherwise.
  */
 function _mollom_access($permission = FALSE) {
-  return variable_get('mollom_public_key', '') && variable_get('mollom_private_key', '') && (!$permission || user_access($permission));
+  $mollom = mollom();
+  $public_key = $mollom->loadConfiguration('publicKey');
+  $private_key = $mollom->loadConfiguration('privateKey');
+  return !empty($public_key) && !empty($private_key) && (!$permission || user_access($permission));
 }
 
 /**
@@ -738,8 +741,8 @@ function mollom_form_alter(&$form, &$form_state, $form_id) {
         $form['mollom']['privacy'] = array(
           '#prefix' => '<div class="description mollom-privacy">',
           '#suffix' => '</div>',
-          '#markup' => t('By submitting this form, you accept the <a href="@privacy-policy-url">Mollom privacy policy</a>.', array(
-            '@privacy-policy-url' => 'http://mollom.com/web-service-privacy-policy',
+          '#markup' => t('By submitting this form, you accept the <a href="@privacy-policy-url" class="mollom-target">Mollom privacy policy</a>.', array(
+            '@privacy-policy-url' => '//mollom.com/web-service-privacy-policy',
           )),
           '#weight' => 10,
         );
@@ -759,6 +762,24 @@ function mollom_form_alter(&$form, &$form_state, $form_id) {
     $mollom_form_id = $forms['delete'][$form_id];
     $module = $forms['protected'][$mollom_form_id];
     $form_info = mollom_form_load($mollom_form_id, $module);
+
+    // For entities, there is only one delete confirmation form per entity type.
+    // But not all of its bundles may be protected. We therefore need to figure
+    // out whether the bundle of the entity being deleted is protected - which
+    // is a reverse-mapping that does not exist in D7.
+    $is_protected = TRUE;
+    $is_entity = !empty($form_info['entity']);
+    $has_entity_argument = isset($form_state['build_info']['args'][0]) && is_object($form_state['build_info']['args'][0]);
+    if ($is_entity && $has_entity_argument) {
+      list(, , $bundle) = entity_extract_ids($form_info['entity'], $form_state['build_info']['args'][0]);
+      $is_protected = db_query_range('SELECT 1 FROM {mollom_form} WHERE entity = :entity AND bundle = :bundle', 0, 1, array(
+        ':entity' => $form_info['entity'],
+        ':bundle' => $bundle,
+      ))->fetchField();
+    }
+    if (!$is_protected) {
+      return;
+    }
     // Check access, if there is a 'report access' permission list.
     if (isset($form_info['report access'])) {
       $access = FALSE;
@@ -877,13 +898,27 @@ function mollom_form_list() {
  *   The form id to return information for.
  * @param $module
  *   The module name $form_id belongs to.
+ * @param array $form_list
+ *   (optional) The return value of hook_mollom_form_list() of $module, if
+ *   already kown. Primarily used by mollom_form_list().
  */
-function mollom_form_info($form_id, $module) {
-  $form_info = module_invoke($module, 'mollom_form_info', $form_id);
-  if (empty($form_info)) {
-    $form_info = array();
+function mollom_form_info($form_id, $module, $form_list = NULL) {
+  $form_info = array();
+
+  // Fetch the basic form information from hook_mollom_form_list() first.
+  // This makes the integrating module (needlessly) rebuild all of its available
+  // forms, but the base properties are absolutely required here, so we can
+  // apply the default properties below.
+  if (!isset($form_list)) {
+    $form_list = module_invoke($module, 'mollom_form_list');
+  }
+  if (isset($form_list[$form_id])) {
+    $form_info += $form_list[$form_id];
   }
 
+  // Any information in hook_mollom_form_info() overrides the list info.
+  $form_info = array_merge($form_info, module_invoke($module, 'mollom_form_info', $form_id));
+
   // Ensure default properties.
   $form_info += array(
     // Base properties.
@@ -891,6 +926,7 @@ function mollom_form_info($form_id, $module) {
     'title' => $form_id,
     'module' => $module,
     'entity' => NULL,
+    'bundle' => NULL,
     // Configuration properties.
     'mode' => NULL,
     'checks' => array(),
@@ -912,6 +948,43 @@ function mollom_form_info($form_id, $module) {
 }
 
 /**
+ * Helper function to add field form element mappings for fieldable entities.
+ *
+ * May be used by hook_mollom_form_info() implementations to automatically
+ * populate the 'elements' definition with attached text fields on the entity
+ * type's bundle.
+ *
+ * @param array $form_info
+ *   The basic information about the registered form. Taken by reference.
+ * @param string $entity_type
+ *   The entity type; e.g., 'node'.
+ * @param string $bundle
+ *   The entity bundle name; e.g., 'article'.
+ *
+ * @return void
+ *   $form_info is taken by reference and enhanced with any attached field
+ *   mappings; e.g.:
+ *   @code
+ *     $form_info['elements']['field_name][und][0][value'] = 'Field label';
+ *   @endcode
+ */
+function mollom_form_info_add_fields(&$form_info, $entity_type, $bundle) {
+  $entity_info = entity_get_info($entity_type);
+  $form_info['mapping']['post_id'] = $entity_info['entity keys']['id'];
+
+  if (!empty($entity_info['fieldable'])) {
+    // Add form element mappings for any text fields attached to the bundle.
+    $fields = field_info_fields();
+    foreach (field_info_instances($entity_type, $bundle) as $field_name => $field) {
+      if (in_array($fields[$field_name]['type'], array('text', 'text_long', 'text_with_summary'))) {
+        // @todo Language code must not be contained here.
+        $form_info['elements'][$field_name . '][' . LANGUAGE_NONE . '][0][value'] = check_plain(t($field['label']));
+      }
+    }
+  }
+}
+
+/**
  * Creates a bare Mollom form configuration.
  *
  * @param $form_id
@@ -923,7 +996,7 @@ function mollom_form_new($form_id) {
   if (isset($form_list[$form_id])) {
     $mollom_form += $form_list[$form_id];
   }
-  $mollom_form += mollom_form_info($form_id, $form_list[$form_id]['module']);
+  $mollom_form += mollom_form_info($form_id, $form_list[$form_id]['module'], $form_list);
 
   // Enable all fields for textual analysis by default.
   if (!empty($mollom_form['elements'])) {
@@ -949,11 +1022,22 @@ function mollom_form_load($form_id) {
       $mollom_form['enabled_fields'] = unserialize($mollom_form['enabled_fields']);
 
       // Attach form registry information.
-      $form_list = module_invoke($mollom_form['module'], 'mollom_form_list');
-      if (isset($form_list[$form_id])) {
-        $mollom_form += $form_list[$form_id];
-      }
-      $mollom_form += mollom_form_info($form_id, $mollom_form['module']);
+      $form_info = mollom_form_info($form_id, $mollom_form['module']);
+      $mollom_form += $form_info;
+
+      // Override entity type and bundle information with current values from
+      // the form registry. These properties were originally not stored in
+      // {mollom_form} and only introduced in 7.x-2.2. The update path is only
+      // able to map entity types/bundles in Drupal core. Any other form
+      // protections need to be updated manually. That is the situation in which
+      // $mollom_form has NULL values from the database, but the form registry
+      // actually contains the proper values.
+      // @todo Remove in later versions.
+      // @todo Clean up _list() + _info() hook API design and pass the base
+      //   $form_info from _list() into _info(), so that it extends that
+      //   definition instead of replacing it.
+      $mollom_form['entity'] = $form_info['entity'];
+      $mollom_form['bundle'] = $form_info['bundle'];
 
       cache_set($cid, $mollom_form);
     }
@@ -1304,6 +1388,20 @@ function _mollom_status($reset = FALSE) {
         'message' => 'API keys are valid.',
       ), WATCHDOG_INFO);
     }
+    // If the response is neither positive nor a negative authentication error,
+    // the previous status was positive, and if the Mollom service might be
+    // temporarily down. In this case, return an enforced RESPONSE_ERROR to
+    // indicate a server-side service failure.
+    // @todo Test this.
+    elseif ($status['keys valid'] !== Mollom::AUTH_ERROR && $current_status['keys valid'] === TRUE) {
+      $status['keys valid'] = Mollom::RESPONSE_ERROR;
+      // Do not update the stored configuration status with the bogus result
+      // caused by the server-side failure.
+      $reset = FALSE;
+      mollom_log(array(
+        'message' => 'API keys could not be verified.',
+      ), WATCHDOG_WARNING);
+    }
     else {
       mollom_log(array(
         'message' => 'Invalid API keys.',
@@ -1536,9 +1634,6 @@ function mollom_form_add_captcha(&$element, &$form_state) {
   // Otherwise, we have a communication or configuration error.
   else {
     $element['captcha']['#access'] = FALSE;
-    $element['captcha']['#required'] = FALSE;
-    $form_state['mollom']['require_analysis'] = FALSE;
-    $form_state['mollom']['require_captcha'] = FALSE;
     // Trigger fallback mode.
     _mollom_fallback();
   }
@@ -2309,7 +2404,7 @@ function mollom_get_captcha(&$form_state) {
         'query' => array('url' => $url),
         'external' => TRUE,
       ));
-      $output = '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="110" height="50">';
+      $output = '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="110" height="50">';
       $output .= '<param name="allowFullScreen" value="false" />';
       $output .= '<param name="movie" value="' . $source . '" />';
       $output .= '<param name="loop" value="false" />';
@@ -2326,6 +2421,7 @@ function mollom_get_captcha(&$form_state) {
 
     case 'image':
       $captcha = theme('image', array('path' => $url, 'alt' => t('Type the characters you see in this picture.'), 'getsize' => FALSE));
+      $captcha = '<a href="//mollom.com/captcha" class="mollom-target">' . $captcha . '</a>';
       $output = '<span class="mollom-captcha-content mollom-image-captcha">' . $captcha . '</span>';
       $output .= ' (<a href="#" class="mollom-switch-captcha mollom-audio-captcha">' . t('verify using audio') . '</a>)';
       break;
@@ -2542,6 +2638,9 @@ function mollom_moderate_access($data, $action) {
  * Returns whether the OAuth request signature is valid.
  */
 function mollom_moderate_validate_oauth() {
+  // For inbound moderation requests, only the production API keys are valid.
+  // The testing mode API keys cannot be trusted. Therefore, this validation
+  // is based on the the stored variables only.
   $publicKey = variable_get('mollom_public_key', '');
   $privateKey = variable_get('mollom_private_key', '');
   if ($publicKey === '' || $privateKey === '') {
@@ -2832,7 +2931,6 @@ function node_mollom_form_info($form_id) {
     'moderation callback' => 'node_mollom_form_moderation',
     'elements' => array(),
     'mapping' => array(
-      'post_id' => 'nid',
       'author_name' => 'name',
     ),
   );
@@ -2846,15 +2944,7 @@ function node_mollom_form_info($form_id) {
     $form_info['elements']['title'] = check_plain($type->title_label);
     $form_info['mapping']['post_title'] = 'title';
   }
-
-  // Add text fields.
-  $fields = field_info_fields();
-  foreach (field_info_instances('node', $type->type) as $field_name => $field) {
-    if (in_array($fields[$field_name]['type'], array('text', 'text_long', 'text_with_summary'))) {
-      $form_info['elements'][$field_name . '][' . LANGUAGE_NONE . '][0][value'] = check_plain(t($field['label']));
-    }
-  }
-
+  mollom_form_info_add_fields($form_info, 'node', $type->type);
   return $form_info;
 }
 
@@ -2928,18 +3018,17 @@ function comment_mollom_form_info($form_id) {
     'moderation callback' => 'comment_mollom_form_moderation',
     'elements' => array(
       'subject' => t('Subject'),
-      // @todo Update for Field API.
-      'comment_body][und][0][value' => t('Comment'),
     ),
     'mapping' => array(
-      'post_id' => 'cid',
       'post_title' => 'subject',
       'author_name' => 'name',
       'author_mail' => 'mail',
       'author_url' => 'homepage',
     ),
   );
-
+  // Retrieve internal type from $form_id.
+  $comment_bundle = drupal_substr($form_id, 0, -5);
+  mollom_form_info_add_fields($form_info, 'comment', $comment_bundle);
   return $form_info;
 }
 
@@ -2988,10 +3077,14 @@ function user_mollom_form_list() {
   $forms['user_register_form'] = array(
     'title' => t('User registration form'),
     'entity' => 'user',
+    'bundle' => 'user',
     'delete form' => 'user_cancel_confirm_form',
     'report access' => array('administer users'),
     'entity delete multiple callback' => 'user_delete_multiple',
   );
+  $forms['user_profile_form'] = $forms['user_register_form'];
+  $forms['user_profile_form']['title'] = t('User profile form');
+
   $forms['user_pass'] = array(
     'title' => t('User password request form'),
   );
@@ -3004,16 +3097,17 @@ function user_mollom_form_list() {
 function user_mollom_form_info($form_id) {
   switch ($form_id) {
     case 'user_register_form':
+    case 'user_profile_form':
       $form_info = array(
         'bypass access' => array('administer users'),
         'moderation callback' => 'user_mollom_form_moderation',
         'mail ids' => array('user_register_pending_approval_admin'),
         'mapping' => array(
-          'post_id' => 'uid',
           'author_name' => 'name',
           'author_mail' => 'mail',
         ),
       );
+      mollom_form_info_add_fields($form_info, 'user', 'user');
       return $form_info;
 
     case 'user_pass':
diff --git a/profiles/acquia/modules/mollom/tests/mollom.test b/profiles/acquia/modules/mollom/tests/mollom.test
index 7afd03c..a3ea09c 100644
--- a/profiles/acquia/modules/mollom/tests/mollom.test
+++ b/profiles/acquia/modules/mollom/tests/mollom.test
@@ -139,6 +139,7 @@ class MollomWebTestCase extends DrupalWebTestCase {
         'administer content types',
         'administer permissions',
         'administer users',
+        'bypass node access',
       );
       if (module_exists('comment')) {
         $permissions[] = 'access comments';
@@ -1679,6 +1680,13 @@ class MollomFallbackModeTestCase extends MollomWebTestCase {
     $this->drupalGet('user/password', array('watchdog' => WATCHDOG_EMERGENCY));
     $this->assertNoCaptchaField();
     $this->assertText($this->fallback_message);
+
+    // Verify that the form cannot be submitted.
+    $edit = array(
+      'name' => $this->admin_user->name,
+    );
+    $this->drupalPost(NULL, $edit, t('E-mail new password'), array('watchdog' => WATCHDOG_EMERGENCY));
+    $this->assertNoText(t('Further instructions have been sent to your e-mail address.'));
   }
 
   /**
@@ -2592,6 +2600,72 @@ class MollomNodeFormTestCase extends MollomWebTestCase {
     $this->assertUrl('node/' . $this->node->nid);
     $this->assertMollomData('node', $this->node->nid);
   }
+
+  /**
+   * Tests appearance of feedback options on node delete forms.
+   */
+  function testFeedback() {
+    // Create a second node type, which is not protected.
+    $this->drupalCreateContentType(array('type' => 'unprotected', 'name' => 'Unprotected'));
+    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
+      'create unprotected content',
+      'delete own unprotected content',
+      'delete own article content',
+    ));
+
+    // Protect the article node type.
+    $this->drupalLogin($this->admin_user);
+    $this->setProtection('article_node_form', MOLLOM_MODE_ANALYSIS);
+    $this->drupalLogout();
+
+    // Login and submit a protected article node.
+    $this->drupalLogin($this->web_user);
+    $this->drupalGet('node/add/article');
+    $edit = array(
+      'title' => 'protected ham',
+      'body[und][0][value]' => 'ham',
+    );
+    $this->drupalPost(NULL, $edit, t('Save'));
+    $this->node = $this->drupalGetNodeByTitle($edit['title']);
+    $this->assertUrl('node/' . $this->node->nid);
+    $this->assertMollomData('node', $this->node->nid);
+
+    // Verify that no feedback options appear on the delete confirmation form
+    // for the node author.
+    $this->drupalGet('node/' . $this->node->nid . '/delete');
+    $this->assertResponse(200);
+    $this->assertNoText(t('Report as inappropriate'));
+
+    // Verify that feedback options appear for the admin user.
+    $this->drupalLogin($this->admin_user);
+    $this->drupalGet('node/' . $this->node->nid . '/delete');
+    $this->assertResponse(200);
+    $this->assertText(t('Report as inappropriate'));
+
+    // Login and submit an unprotected node.
+    $this->drupalLogin($this->web_user);
+    $this->drupalGet('node/add/unprotected');
+    $edit = array(
+      'title' => 'unprotected spam',
+      'body[und][0][value]' => 'spam',
+    );
+    $this->drupalPost(NULL, $edit, t('Save'));
+    $this->node = $this->drupalGetNodeByTitle($edit['title']);
+    $this->assertUrl('node/' . $this->node->nid);
+    $this->assertNoMollomData('node', $this->node->nid);
+
+    // Verify that no feedback options appear on the delete confirmation form
+    // for the node author.
+    $this->drupalGet('node/' . $this->node->nid . '/delete');
+    $this->assertResponse(200);
+    $this->assertNoText(t('Report as inappropriate'));
+
+    // Verify that no feedback options appear for the admin user.
+    $this->drupalLogin($this->admin_user);
+    $this->drupalGet('node/' . $this->node->nid . '/delete');
+    $this->assertResponse(200);
+    $this->assertNoText(t('Report as inappropriate'));
+  }
 }
 
 class MollomCommentFormTestCase extends MollomWebTestCase {
diff --git a/profiles/acquia/modules/mollom/tests/mollom_test.info b/profiles/acquia/modules/mollom/tests/mollom_test.info
index bfcf432..aba10d7 100644
--- a/profiles/acquia/modules/mollom/tests/mollom_test.info
+++ b/profiles/acquia/modules/mollom/tests/mollom_test.info
@@ -4,11 +4,11 @@ core = 7.x
 package = Testing
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-03-14
-version = "7.x-2.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-2.2"
 core = "7.x"
 project = "mollom"
-datestamp = "1331691954"
+datestamp = "1344429449"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/mollom/tests/mollom_test_server.info b/profiles/acquia/modules/mollom/tests/mollom_test_server.info
index 03ced65..1d6fa76 100644
--- a/profiles/acquia/modules/mollom/tests/mollom_test_server.info
+++ b/profiles/acquia/modules/mollom/tests/mollom_test_server.info
@@ -4,11 +4,11 @@ core = 7.x
 package = Testing
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-03-14
-version = "7.x-2.0"
+; Information added by drupal.org packaging script on 2012-08-08
+version = "7.x-2.2"
 core = "7.x"
 project = "mollom"
-datestamp = "1331691954"
+datestamp = "1344429449"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/pathauto/pathauto.info b/profiles/acquia/modules/pathauto/pathauto.info
index 63aed0e..fd09300 100644
--- a/profiles/acquia/modules/pathauto/pathauto.info
+++ b/profiles/acquia/modules/pathauto/pathauto.info
@@ -7,11 +7,11 @@ files[] = pathauto.test
 configure = admin/config/search/path/patterns
 recommends[] = redirect
 
-; Information added by drupal.org packaging script on 2011-10-31
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-05-13
+version = "7.x-1.1"
 core = "7.x"
 project = "pathauto"
-datestamp = "1320072936"
+datestamp = "1336950382"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/pathauto/pathauto.module b/profiles/acquia/modules/pathauto/pathauto.module
index b827bc3..1875caa 100644
--- a/profiles/acquia/modules/pathauto/pathauto.module
+++ b/profiles/acquia/modules/pathauto/pathauto.module
@@ -287,7 +287,7 @@ function pathauto_field_attach_form($entity_type, $entity, &$form, &$form_state,
   }
 
   $pattern = pathauto_pattern_load_by_entity($entity_type, $bundle, $langcode);
-  if (!$pattern) {
+  if (empty($pattern)) {
     return;
   }
 
@@ -356,6 +356,37 @@ function pathauto_entity_presave($entity, $type) {
      */
     $entity->path['alias'] = $entity->path['old_alias'];
   }
+
+  // Help prevent errors with progromatically creating entities by defining
+  // path['alias'] as an empty string.
+  // @see http://drupal.org/node/1328180
+  // @see http://drupal.org/node/1576552
+  if (isset($entity->path['pathauto']) && !isset($entity->path['alias'])) {
+    $entity->path['alias'] = '';
+  }
+}
+
+/**
+ * Implements hook_action_info().
+ */
+function pathauto_action_info() {
+  $info['pathauto_node_update_action'] = array(
+    'type' => 'node',
+    'label' => t('Update node alias'),
+    'configurable' => FALSE,
+  );
+  $info['pathauto_taxonomy_term_update_action'] = array(
+    'type' => 'taxonomy_term',
+    'label' => t('Update taxonomy term alias'),
+    'configurable' => FALSE,
+  );
+  $info['pathauto_user_update_action'] = array(
+    'type' => 'user',
+    'label' => t('Update user alias'),
+    'configurable' => FALSE,
+  );
+
+  return $info;
 }
 
 if (!function_exists('path_field_extra_fields')) {
@@ -462,7 +493,7 @@ function pathauto_node_update_alias(stdClass $node, $op, array $options = array(
   }
 
   $options += array(
-    'language' => isset($node->language) ? $node->language : LANGUAGE_NONE,
+    'language' => !empty($node->language) ? $node->language : LANGUAGE_NONE,
   );
 
   // Skip processing if the node has no pattern.
@@ -500,6 +531,13 @@ function pathauto_node_update_alias_multiple(array $nids, $op, array $options =
 }
 
 /**
+ * Update action wrapper for pathauto_node_update_alias().
+ */
+function pathauto_node_update_action($node, $context = array()) {
+  pathauto_node_update_alias($node, 'bulkupdate', array('message' => TRUE));
+}
+
+/**
  * @} End of "name pathauto_node".
  */
 
@@ -536,7 +574,7 @@ function pathauto_taxonomy_term_delete($term) {
  */
 function pathauto_form_taxonomy_form_term_alter(&$form, $form_state) {
   $term = $form_state['term'];
-  $langcode = isset($term->language) ? $term->language : LANGUAGE_NONE;
+  $langcode = !empty($term->language) ? $term->language : LANGUAGE_NONE;
   pathauto_field_attach_form('taxonomy_term', $term, $form, $form_state, $langcode);
 }
 
@@ -558,7 +596,7 @@ function pathauto_taxonomy_term_update_alias(stdClass $term, $op, array $options
 
   $options += array(
     'alias children' => FALSE,
-    'language' => isset($term->language) ? $term->language : LANGUAGE_NONE,
+    'language' => !empty($term->language) ? $term->language : LANGUAGE_NONE,
   );
 
   $module = 'taxonomy_term';
@@ -621,6 +659,13 @@ function pathauto_taxonomy_term_update_alias_multiple(array $tids, $op, array $o
 }
 
 /**
+ * Update action wrapper for pathauto_taxonomy_term_update_alias().
+ */
+function pathauto_taxonomy_term_update_action($term, $context = array()) {
+  pathauto_taxonomy_term_update_alias($term, 'bulkupdate', array('message' => TRUE));
+}
+
+/**
  * @} End of "name pathauto_taxonomy".
  */
 
@@ -725,6 +770,13 @@ function pathauto_user_update_alias_multiple(array $uids, $op, array $options =
 }
 
 /**
+ * Update action wrapper for pathauto_user_update_alias().
+ */
+function pathauto_user_update_action($user, $context = array()) {
+  pathauto_user_update_alias($user, 'bulkupdate', array('message' => TRUE));
+}
+
+/**
  * Update the blog URL aliases for an individual user account.
  *
  * @param $account
diff --git a/profiles/acquia/modules/pathauto/pathauto.test b/profiles/acquia/modules/pathauto/pathauto.test
index 988b0d2..6fa096e 100644
--- a/profiles/acquia/modules/pathauto/pathauto.test
+++ b/profiles/acquia/modules/pathauto/pathauto.test
@@ -275,7 +275,7 @@ class PathautoUnitTestCase extends PathautoTestHelper {
    * Test the handling of path vs non-path tokens in pathauto_clean_token_values().
    */
   function testPathTokens() {
-    variable_set('pathauto_taxonomy_term_pattern', '[term:parent:url:alias]/[term:name]');
+    variable_set('pathauto_taxonomy_term_pattern', '[term:parent:url:path]/[term:name]');
     $vocab = $this->addVocabulary();
 
     $term1 = $this->addTerm($vocab, array('name' => 'Parent term'));
@@ -385,10 +385,17 @@ class PathautoFunctionalTestCase extends PathautoFunctionalTestHelper {
    * Basic functional testing of Pathauto.
    */
   function testNodeEditing() {
+    // Delete the default node pattern. Only the page content type will have a pattern.
+    variable_del('pathauto_node_pattern');
+
+    // Ensure that the Pathauto checkbox is checked by default on the node add form.
+    $this->drupalGet('node/add/page');
+    $this->assertFieldChecked('edit-path-pathauto');
+
     // Create node for testing by previewing and saving the node form.
     $title = ' Testing: node title [';
     $automatic_alias = 'content/testing-node-title';
-    $this->drupalPost('node/add/page', array('title' => $title), 'Preview');
+    $this->drupalPost(NULL, array('title' => $title), 'Preview');
     $this->drupalPost(NULL, array(), 'Save');
     $node = $this->drupalGetNodeByTitle($title);
 
@@ -425,6 +432,23 @@ class PathautoFunctionalTestCase extends PathautoFunctionalTestHelper {
     $this->assertResponse(404, 'Node not accessible through automatic alias.');
     $this->drupalGet($manual_alias);
     $this->assertText($title, 'Node accessible through manual alias.');
+
+    // Now attempt to create a node that has no pattern (article content type).
+    // The Pathauto checkbox should not exist.
+    $this->drupalGet('node/add/article');
+    $this->assertNoFieldById('edit-path-pathauto');
+    $this->assertFieldByName('path[alias]', '');
+
+    $edit = array();
+    $edit['title'] = 'My test article';
+    $this->drupalPost(NULL, $edit, t('Save'));
+    $node = $this->drupalGetNodeByTitle($edit['title']);
+
+    // Pathauto checkbox should still not exist.
+    $this->drupalGet('node/' . $node->nid . '/edit');
+    $this->assertNoFieldById('edit-path-pathauto');
+    $this->assertFieldByName('path[alias]', '');
+    $this->assertNoEntityAlias('node', $node);
   }
 
   /**
@@ -499,6 +523,15 @@ class PathautoFunctionalTestCase extends PathautoFunctionalTestHelper {
   }
 
   /**
+   * Basic functional testing of Pathauto with users.
+   */
+  function testUserEditing() {
+    // There should be no Pathauto checkbox on user forms.
+    $this->drupalGet('user/' . $this->admin_user->uid . '/edit');
+    $this->assertNoFieldById('edit-path-pathauto');
+  }
+
+  /**
    * Test user operations.
    */
   function testUserOperations() {
@@ -562,6 +595,26 @@ class PathautoFunctionalTestCase extends PathautoFunctionalTestHelper {
     $this->drupalPost('admin/config/search/path/patterns', $edit, 'Save configuration');
     $this->assertText('The configuration options have been saved.');
   }
+
+  /**
+   * Test programmatic entity creation for aliases.
+   */
+  function testProgrammaticEntityCreation() {
+    $node = $this->drupalCreateNode(array('title' => 'Test node', 'path' => array('pathauto' => TRUE)));
+    $this->assertEntityAlias('node', $node, 'content/test-node');
+
+    $vocabulary = $this->addVocabulary(array('name' => 'Tags'));
+    $term = $this->addTerm($vocabulary, array('name' => 'Test term', 'path' => array('pathauto' => TRUE)));
+    $this->assertEntityAlias('taxonomy_term', $term, 'tags/test-term');
+
+    $edit['name'] = 'Test user';
+    $edit['mail'] = 'test-user@example.com';
+    $edit['pass']   = user_password();
+    $edit['path'] = array('pathauto' => TRUE);
+    $edit['status'] = 1;
+    $account = user_save(drupal_anonymous_user(), $edit);
+    $this->assertEntityAlias('user', $account, 'users/test-user');
+  }
 }
 
 class PathautoLocaleTestCase extends PathautoFunctionalTestHelper {
@@ -672,3 +725,69 @@ class PathautoBulkUpdateTestCase extends PathautoFunctionalTestHelper {
     $this->assertEntityAliasExists('node', $new_node);
   }
 }
+
+/**
+ * Token functionality tests.
+ */
+class PathautoTokenTestCase extends PathautoFunctionalTestHelper {
+  public static function getInfo() {
+    return array(
+      'name' => 'Pathauto tokens',
+      'description' => 'Tests tokens provided by Pathauto.',
+      'group' => 'Pathauto',
+      'dependencies' => array('token'),
+    );
+  }
+
+  function testPathautoTokens() {
+    $array = array(
+      'test first arg',
+      'The Array / value',
+    );
+
+    $tokens = array(
+      'join-path' => 'test-first-arg/array-value',
+    );
+    $data['array'] = $array;
+    $replacements = $this->assertTokens('array', $data, $tokens);
+
+    // Ensure that the pathauto_clean_token_values() function does not alter
+    // this token value.
+    module_load_include('inc', 'pathauto');
+    pathauto_clean_token_values($replacements, $data, array());
+    $this->assertEqual($replacements['[array:join-path]'], 'test-first-arg/array-value');
+  }
+
+  /**
+   * Function copied from TokenTestHelper::assertTokens().
+   */
+  function assertTokens($type, array $data, array $tokens, array $options = array()) {
+    $input = $this->mapTokenNames($type, array_keys($tokens));
+    $replacements = token_generate($type, $input, $data, $options);
+    foreach ($tokens as $name => $expected) {
+      $token = $input[$name];
+      if (!isset($expected)) {
+        $this->assertTrue(!isset($values[$token]), t("Token value for @token was not generated.", array('@type' => $type, '@token' => $token)));
+      }
+      elseif (!isset($replacements[$token])) {
+        $this->fail(t("Token value for @token was not generated.", array('@type' => $type, '@token' => $token)));
+      }
+      elseif (!empty($options['regex'])) {
+        $this->assertTrue(preg_match('/^' . $expected . '$/', $replacements[$token]), t("Token value for @token was '@actual', matching regular expression pattern '@expected'.", array('@type' => $type, '@token' => $token, '@actual' => $replacements[$token], '@expected' => $expected)));
+      }
+      else {
+        $this->assertIdentical($replacements[$token], $expected, t("Token value for @token was '@actual', expected value '@expected'.", array('@type' => $type, '@token' => $token, '@actual' => $replacements[$token], '@expected' => $expected)));
+      }
+    }
+
+    return $replacements;
+  }
+
+  function mapTokenNames($type, array $tokens = array()) {
+    $return = array();
+    foreach ($tokens as $token) {
+      $return[$token] = "[$type:$token]";
+    }
+    return $return;
+  }
+}
diff --git a/profiles/acquia/modules/pathauto/pathauto.tokens.inc b/profiles/acquia/modules/pathauto/pathauto.tokens.inc
index 716b1bf..a0f0b49 100644
--- a/profiles/acquia/modules/pathauto/pathauto.tokens.inc
+++ b/profiles/acquia/modules/pathauto/pathauto.tokens.inc
@@ -1,17 +1,48 @@
 <?php
 
 /**
+ * @file
+ * Token integration for the Pathauto module.
+ */
+
+/**
  * Implements hook_token_info().
  */
 function pathauto_token_info() {
-  // This file was committed prematurely, so return an empty array for now.
-  return array();
+  $info = array();
+
+  $info['tokens']['array']['join-path'] = array(
+    'name' => t('Joined path'),
+    'description' => t('The array values each cleaned by Pathauto and then joined with the slash into a string that resembles an URL.'),
+  );
+
+  return $info;
 }
 
 /**
  * Implements hook_tokens().
  */
 function pathauto_tokens($type, $tokens, array $data = array(), array $options = array()) {
-  // This file was committed prematurely, so return an empty array for now.
-  return array();
+  $replacements = array();
+
+  if ($type == 'array' && !empty($data['array'])) {
+    $array = $data['array'];
+
+    foreach ($tokens as $name => $original) {
+      switch ($name) {
+        case 'join-path':
+          module_load_include('inc', 'pathauto');
+          $values = array();
+          foreach (element_children($array) as $key) {
+            $value = is_array($array[$key]) ? render($array[$key]) : (string) $array[$key];
+            $value = pathauto_cleanstring($value);
+            $values[] = $value;
+          }
+          $replacements[$original] = implode('/', $values);
+          break;
+      }
+    }
+  }
+
+  return $replacements;
 }
diff --git a/profiles/acquia/modules/token/tests/token_test.info b/profiles/acquia/modules/token/tests/token_test.info
index 11ce9ba..f022f44 100644
--- a/profiles/acquia/modules/token/tests/token_test.info
+++ b/profiles/acquia/modules/token/tests/token_test.info
@@ -5,11 +5,11 @@ core = 7.x
 files[] = token_test.module
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-04-06
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-05-15
+version = "7.x-1.1"
 core = "7.x"
 project = "token"
-datestamp = "1333672577"
+datestamp = "1337115392"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/token/tests/token_test.module b/profiles/acquia/modules/token/tests/token_test.module
index 5c8bab0..3174cb6 100644
--- a/profiles/acquia/modules/token/tests/token_test.module
+++ b/profiles/acquia/modules/token/tests/token_test.module
@@ -1,6 +1,11 @@
 <?php
 
 /**
+ * @file
+ * Helper module for token tests.
+ */
+
+/**
  * Implements hook_exit().
  */
 function token_test_exit() {
diff --git a/profiles/acquia/modules/token/token.info b/profiles/acquia/modules/token/token.info
index 429ce3c..26bb7a0 100644
--- a/profiles/acquia/modules/token/token.info
+++ b/profiles/acquia/modules/token/token.info
@@ -7,11 +7,11 @@ files[] = token.tokens.inc
 files[] = token.pages.inc
 files[] = token.test
 
-; Information added by drupal.org packaging script on 2012-04-06
-version = "7.x-1.0"
+; Information added by drupal.org packaging script on 2012-05-15
+version = "7.x-1.1"
 core = "7.x"
 project = "token"
-datestamp = "1333672577"
+datestamp = "1337115392"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/acquia/modules/token/token.module b/profiles/acquia/modules/token/token.module
index 4047f6f..56e3ceb 100644
--- a/profiles/acquia/modules/token/token.module
+++ b/profiles/acquia/modules/token/token.module
@@ -1,6 +1,11 @@
 <?php
 
 /**
+ * @file
+ * Enhances the token API in core: adds a browseable UI, missing tokens, etc.
+ */
+
+/**
  * The maximum depth for token tree recursion.
  */
 define('TOKEN_MAX_DEPTH', 9);
@@ -225,6 +230,15 @@ function token_form_block_admin_configure_alter(&$form, $form_state) {
 }
 
 /**
+ * Implements hook_widget_form_alter().
+ */
+function token_field_widget_form_alter(&$element, &$form_state, $context) {
+  if (!empty($element['#description']) && is_string($element['#description'])) {
+    $element['#description'] = filter_xss_admin(token_replace($element['#description']));
+  }
+}
+
+/**
  * Implements hook_field_info_alter().
  */
 function token_field_info_alter(&$info) {
@@ -238,6 +252,10 @@ function token_field_info_alter(&$info) {
     'text' => 'text_default',
     'text_long' => 'text_default',
     'text_with_summary' => 'text_default',
+    'list_integer' => 'list_default',
+    'list_float' => 'list_default',
+    'list_text' => 'list_default',
+    'list_boolean' => 'list_default',
   );
   foreach ($defaults as $field_type => $default_token_formatter) {
     if (isset($info[$field_type])) {
@@ -480,8 +498,16 @@ function token_get_info($token_type = NULL, $token = NULL) {
 }
 
 /**
- * Return the module responsible for a token if defined in
- * $info['tokens']['type']['module'].
+ * Return the module responsible for a token.
+ *
+ * @param string $type
+ *   The token type.
+ * @param string $name
+ *   The token name.
+ *
+ * @return mixed
+ *   The value of $info['tokens'][$type][$name]['module'] from token_get_info(),
+ *   or NULL if the value does not exist.
  */
 function _token_module($type, $name) {
   $token_info = token_get_info($type, $name);
@@ -669,6 +695,10 @@ function token_element_validate_token_context(&$element, &$form_state) {
  * Implements hook_form_FORM_ID_alter().
  */
 function token_form_field_ui_field_edit_form_alter(&$form, $form_state) {
+  if (!isset($form['instance'])) {
+    return;
+  }
+
   if (($form['#field']['type'] == 'file' || $form['#field']['type'] == 'image') && isset($form['instance']['settings']['file_directory']) && !module_exists('filefield_paths')) {
     // GAH! We can only support global tokens in the upload file directory path.
     $form['instance']['settings']['file_directory']['#element_validate'][] = 'token_element_validate';
@@ -678,7 +708,11 @@ function token_form_field_ui_field_edit_form_alter(&$form, $form_state) {
       '#token_types' => array(),
       '#weight' => $form['instance']['settings']['file_directory']['#weight'] + 0.5,
     );
+    $form['instance']['settings']['file_directory']['#description'] .= ' ' . t('This field supports tokens.');
   }
+
+  // Note that the description is tokenized via token_field_widget_form_alter().
+  $form['instance']['description']['#description'] .= '<br />' . t('This field supports tokens.');
 }
 
 /**
@@ -857,7 +891,7 @@ function token_flatten_tree($tree) {
     $result[$token] = $token_info;
     if (isset($token_info['children']) && is_array($token_info['children'])) {
       $result += token_flatten_tree($token_info['children']);
-      //unset($result[$token]['children']);
+      // unset($result[$token]['children']);
     }
   }
   return $result;
diff --git a/profiles/acquia/modules/token/token.pages.inc b/profiles/acquia/modules/token/token.pages.inc
index c111519..d2f06e9 100644
--- a/profiles/acquia/modules/token/token.pages.inc
+++ b/profiles/acquia/modules/token/token.pages.inc
@@ -163,7 +163,7 @@ function _token_token_tree_format_row($token, array $token_info, $is_group = FAL
  * @see drupal_clean_css_identifier()
  */
 function _token_clean_css_identifier($id) {
-  static $replacements = array(' ' => '-', '_' => '-', '/' => '-', '[' => '-', ']' => '', ':' => '--', '?' => '');
+  static $replacements = array(' ' => '-', '_' => '-', '/' => '-', '[' => '-', ']' => '', ':' => '--', '?' => '', '<' => '-', '>' => '-');
   return 'token-' . rtrim(strtr(trim($id, '[]'), $replacements), '-');
 }
 
diff --git a/profiles/acquia/modules/token/token.test b/profiles/acquia/modules/token/token.test
index ee3db9f..9482ecf 100644
--- a/profiles/acquia/modules/token/token.test
+++ b/profiles/acquia/modules/token/token.test
@@ -583,7 +583,7 @@ class TokenUserTestCase extends TokenTestHelper {
 
     // Enable user pictures.
     variable_set('user_pictures', 1);
-    variable_set('user_picture_file_size', 0);
+    variable_set('user_picture_file_size', '');
 
     // Set up the pictures directory.
     $picture_path = file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
@@ -1052,8 +1052,6 @@ class TokenFileTestCase extends TokenTestHelper {
 }
 
 class TokenBlockTestCase extends TokenTestHelper {
-  //protected $profile = 'standard';
-
   public static function getInfo() {
     return array(
       'name' => 'Block token tests',
diff --git a/profiles/acquia/modules/token/token.tokens.inc b/profiles/acquia/modules/token/token.tokens.inc
index c1cd4ad..3dc2d3b 100644
--- a/profiles/acquia/modules/token/token.tokens.inc
+++ b/profiles/acquia/modules/token/token.tokens.inc
@@ -133,7 +133,7 @@ function token_token_info() {
   $info['tokens']['content-type']['edit-url'] = array(
     'name' => t('Edit URL'),
     'description' => t("The URL of the content type's edit page."),
-    //'type' => 'url',
+    // 'type' => 'url',
   );
 
   // Taxonomy term and vocabulary tokens.
@@ -141,7 +141,7 @@ function token_token_info() {
     $info['tokens']['term']['edit-url'] = array(
       'name' => t('Edit URL'),
       'description' => t("The URL of the taxonomy term's edit page."),
-      //'type' => 'url',
+      // 'type' => 'url',
     );
     $info['tokens']['term']['parents'] = array(
       'name' => t('Parents'),
@@ -161,7 +161,7 @@ function token_token_info() {
     $info['tokens']['vocabulary']['edit-url'] = array(
       'name' => t('Edit URL'),
       'description' => t("The URL of the vocabulary's edit page."),
-      //'type' => 'url',
+      // 'type' => 'url',
     );
   }
 
@@ -185,13 +185,13 @@ function token_token_info() {
     'name' => t('Account cancellation URL'),
     'description' => t('The URL of the confirm delete page for the user account.'),
     'restricted' => TRUE,
-    //'type' => 'url',
+    // 'type' => 'url',
   );
   $info['tokens']['user']['one-time-login-url'] = array(
     'name' => t('One-time login URL'),
     'description' => t('The URL of the one-time login page for the user account.'),
     'restricted' => TRUE,
-    //'type' => 'url',
+    // 'type' => 'url',
   );
   if (variable_get('user_pictures', 0)) {
     $info['tokens']['user']['picture'] = array(
@@ -1415,16 +1415,11 @@ function field_tokens($type, $tokens, array $data = array(), array $options = ar
         continue;
       }
 
-      // Replace the [entity:field-name] token.
-      if (isset($tokens[$field_name])) {
+      // Replace the [entity:field-name] token only if token module added this
+      // token.
+      if (isset($tokens[$field_name]) && _token_module($data['token_type'], $field_name) == 'token') {
         $original = $tokens[$field_name];
 
-        // Assert that this field was added by token.module.
-        $token_info = token_get_info($data['token_type'], $field_name);
-        if (!isset($token_info['module']) || $token_info['module'] != 'token') {
-          continue;
-        }
-
         $field_output = field_view_field($entity_type, $entity, $field_name, 'token', $langcode);
         $field_output['#token_options'] = $options;
         $field_output['#pre_render'][] = 'token_pre_render_field_token';
diff --git a/profiles/minimal/minimal.info b/profiles/minimal/minimal.info
index c242ed2..13e7f45 100644
--- a/profiles/minimal/minimal.info
+++ b/profiles/minimal/minimal.info
@@ -5,10 +5,10 @@ core = 7.x
 dependencies[] = block
 dependencies[] = dblog
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/minimal/minimal.install b/profiles/minimal/minimal.install
index 58a0f12..6099da1 100644
--- a/profiles/minimal/minimal.install
+++ b/profiles/minimal/minimal.install
@@ -1,7 +1,7 @@
 <?php
 /**
  * @file
- * Install, update and uninstall functions for the the minimal install profile.
+ * Install, update and uninstall functions for the minimal install profile.
  */
 
 /**
diff --git a/profiles/standard/standard.info b/profiles/standard/standard.info
index e04d673..6fec9eb 100644
--- a/profiles/standard/standard.info
+++ b/profiles/standard/standard.info
@@ -24,10 +24,10 @@ dependencies[] = field_ui
 dependencies[] = file
 dependencies[] = rdf
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/testing/modules/drupal_system_listing_compatible_test/drupal_system_listing_compatible_test.info b/profiles/testing/modules/drupal_system_listing_compatible_test/drupal_system_listing_compatible_test.info
index 56a555a..6cc9866 100644
--- a/profiles/testing/modules/drupal_system_listing_compatible_test/drupal_system_listing_compatible_test.info
+++ b/profiles/testing/modules/drupal_system_listing_compatible_test/drupal_system_listing_compatible_test.info
@@ -6,10 +6,10 @@ core = 7.x
 hidden = TRUE
 files[] = drupal_system_listing_compatible_test.test
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/testing/modules/drupal_system_listing_incompatible_test/drupal_system_listing_incompatible_test.info b/profiles/testing/modules/drupal_system_listing_incompatible_test/drupal_system_listing_incompatible_test.info
index bf0bf13..56a80e9 100644
--- a/profiles/testing/modules/drupal_system_listing_incompatible_test/drupal_system_listing_incompatible_test.info
+++ b/profiles/testing/modules/drupal_system_listing_incompatible_test/drupal_system_listing_incompatible_test.info
@@ -8,10 +8,10 @@ version = VERSION
 core = 6.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/profiles/testing/testing.info b/profiles/testing/testing.info
index 1441064..13d7f18 100644
--- a/profiles/testing/testing.info
+++ b/profiles/testing/testing.info
@@ -4,10 +4,10 @@ version = VERSION
 core = 7.x
 hidden = TRUE
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/robots.standard.txt b/robots.standard.txt
new file mode 100644
index 0000000..7de8435
--- /dev/null
+++ b/robots.standard.txt
@@ -0,0 +1,60 @@
+#
+# robots.txt
+#
+# This file is to prevent the crawling and indexing of certain parts
+# of your site by web crawlers and spiders run by sites like Yahoo!
+# and Google. By telling these "robots" where not to go on your site,
+# you save bandwidth and server resources.
+#
+# This file will be ignored unless it is at the root of your host:
+# Used:    http://example.com/robots.txt
+# Ignored: http://example.com/site/robots.txt
+#
+# For more information about the robots.txt standard, see:
+# http://www.robotstxt.org/wc/robots.html
+#
+# For syntax checking, see:
+# http://www.sxw.org.uk/computing/robots/check.html
+
+User-agent: *
+Crawl-delay: 10
+# Directories
+Disallow: /includes/
+Disallow: /misc/
+Disallow: /modules/
+Disallow: /profiles/
+Disallow: /scripts/
+Disallow: /themes/
+# Files
+Disallow: /CHANGELOG.txt
+Disallow: /cron.php
+Disallow: /INSTALL.mysql.txt
+Disallow: /INSTALL.pgsql.txt
+Disallow: /INSTALL.sqlite.txt
+Disallow: /install.php
+Disallow: /INSTALL.txt
+Disallow: /LICENSE.txt
+Disallow: /MAINTAINERS.txt
+Disallow: /update.php
+Disallow: /UPGRADE.txt
+Disallow: /xmlrpc.php
+# Paths (clean URLs)
+Disallow: /admin/
+Disallow: /comment/reply/
+Disallow: /filter/tips/
+Disallow: /node/add/
+Disallow: /search/
+Disallow: /user/register/
+Disallow: /user/password/
+Disallow: /user/login/
+Disallow: /user/logout/
+# Paths (no clean URLs)
+Disallow: /?q=admin/
+Disallow: /?q=comment/reply/
+Disallow: /?q=filter/tips/
+Disallow: /?q=node/add/
+Disallow: /?q=search/
+Disallow: /?q=user/password/
+Disallow: /?q=user/register/
+Disallow: /?q=user/login/
+Disallow: /?q=user/logout/
diff --git a/robots.txt b/robots.txt
deleted file mode 100644
index 7de8435..0000000
--- a/robots.txt
+++ /dev/null
@@ -1,60 +0,0 @@
-#
-# robots.txt
-#
-# This file is to prevent the crawling and indexing of certain parts
-# of your site by web crawlers and spiders run by sites like Yahoo!
-# and Google. By telling these "robots" where not to go on your site,
-# you save bandwidth and server resources.
-#
-# This file will be ignored unless it is at the root of your host:
-# Used:    http://example.com/robots.txt
-# Ignored: http://example.com/site/robots.txt
-#
-# For more information about the robots.txt standard, see:
-# http://www.robotstxt.org/wc/robots.html
-#
-# For syntax checking, see:
-# http://www.sxw.org.uk/computing/robots/check.html
-
-User-agent: *
-Crawl-delay: 10
-# Directories
-Disallow: /includes/
-Disallow: /misc/
-Disallow: /modules/
-Disallow: /profiles/
-Disallow: /scripts/
-Disallow: /themes/
-# Files
-Disallow: /CHANGELOG.txt
-Disallow: /cron.php
-Disallow: /INSTALL.mysql.txt
-Disallow: /INSTALL.pgsql.txt
-Disallow: /INSTALL.sqlite.txt
-Disallow: /install.php
-Disallow: /INSTALL.txt
-Disallow: /LICENSE.txt
-Disallow: /MAINTAINERS.txt
-Disallow: /update.php
-Disallow: /UPGRADE.txt
-Disallow: /xmlrpc.php
-# Paths (clean URLs)
-Disallow: /admin/
-Disallow: /comment/reply/
-Disallow: /filter/tips/
-Disallow: /node/add/
-Disallow: /search/
-Disallow: /user/register/
-Disallow: /user/password/
-Disallow: /user/login/
-Disallow: /user/logout/
-# Paths (no clean URLs)
-Disallow: /?q=admin/
-Disallow: /?q=comment/reply/
-Disallow: /?q=filter/tips/
-Disallow: /?q=node/add/
-Disallow: /?q=search/
-Disallow: /?q=user/password/
-Disallow: /?q=user/register/
-Disallow: /?q=user/login/
-Disallow: /?q=user/logout/
diff --git a/sites/all/README.txt b/sites/all/README.txt
deleted file mode 100644
index c897088..0000000
--- a/sites/all/README.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-
-This directory should be used to place downloaded and custom modules
-and themes which are common to all sites. Keeping contributed and
-custom modules and themes in the sites directory will aid in upgrading
-Drupal core files. Place contributed and custom modules and themes in
-the sites/all/modules and sites/all/themes directories respectively.
-
diff --git a/sites/default/default.settings.php b/sites/default/default.settings.php
deleted file mode 100644
index 87eaabb..0000000
--- a/sites/default/default.settings.php
+++ /dev/null
@@ -1,512 +0,0 @@
-<?php
-
-/**
- * @file
- * Drupal site-specific configuration file.
- *
- * IMPORTANT NOTE:
- * This file may have been set to read-only by the Drupal installation
- * program. If you make changes to this file, be sure to protect it again
- * after making your modifications. Failure to remove write permissions
- * to this file is a security risk.
- *
- * The configuration file to be loaded is based upon the rules below.
- *
- * The configuration directory will be discovered by stripping the
- * website's hostname from left to right and pathname from right to
- * left. The first configuration file found will be used and any
- * others will be ignored. If no other configuration file is found
- * then the default configuration file at 'sites/default' will be used.
- *
- * For example, for a fictitious site installed at
- * http://www.drupal.org/mysite/test/, the 'settings.php'
- * is searched in the following directories:
- *
- * - sites/www.drupal.org.mysite.test
- * - sites/drupal.org.mysite.test
- * - sites/org.mysite.test
- *
- * - sites/www.drupal.org.mysite
- * - sites/drupal.org.mysite
- * - sites/org.mysite
- *
- * - sites/www.drupal.org
- * - sites/drupal.org
- * - sites/org
- *
- * - sites/default
- *
- * If you are installing on a non-standard port number, prefix the
- * hostname with that number. For example,
- * http://www.drupal.org:8080/mysite/test/ could be loaded from
- * sites/8080.www.drupal.org.mysite.test/.
- */
-
-/**
- * Database settings:
- *
- * The $databases array specifies the database connection or
- * connections that Drupal may use.  Drupal is able to connect
- * to multiple databases, including multiple types of databases,
- * during the same request.
- *
- * Each database connection is specified as an array of settings,
- * similar to the following:
- * @code
- * array(
- *   'driver' => 'mysql',
- *   'database' => 'databasename',
- *   'username' => 'username',
- *   'password' => 'password',
- *   'host' => 'localhost',
- *   'port' => 3306,
- *   'prefix' => 'myprefix_',
- *   'collation' => 'utf8_general_ci',
- * );
- * @endcode
- *
- * The "driver" property indicates what Drupal database driver the
- * connection should use.  This is usually the same as the name of the
- * database type, such as mysql or sqlite, but not always.  The other
- * properties will vary depending on the driver.  For SQLite, you must
- * specify a database file name in a directory that is writable by the
- * webserver.  For most other drivers, you must specify a
- * username, password, host, and database name.
- *
- * Some database engines support transactions.  In order to enable
- * transaction support for a given database, set the 'transactions' key
- * to TRUE.  To disable it, set it to FALSE.  Note that the default value
- * varies by driver.  For MySQL, the default is FALSE since MyISAM tables
- * do not support transactions.
- *
- * For each database, you may optionally specify multiple "target" databases.
- * A target database allows Drupal to try to send certain queries to a
- * different database if it can but fall back to the default connection if not.
- * That is useful for master/slave replication, as Drupal may try to connect
- * to a slave server when appropriate and if one is not available will simply
- * fall back to the single master server.
- *
- * The general format for the $databases array is as follows:
- * @code
- * $databases['default']['default'] = $info_array;
- * $databases['default']['slave'][] = $info_array;
- * $databases['default']['slave'][] = $info_array;
- * $databases['extra']['default'] = $info_array;
- * @endcode
- *
- * In the above example, $info_array is an array of settings described above.
- * The first line sets a "default" database that has one master database
- * (the second level default).  The second and third lines create an array
- * of potential slave databases.  Drupal will select one at random for a given
- * request as needed.  The fourth line creates a new database with a name of
- * "extra".
- *
- * For a single database configuration, the following is sufficient:
- * @code
- * $databases['default']['default'] = array(
- *   'driver' => 'mysql',
- *   'database' => 'databasename',
- *   'username' => 'username',
- *   'password' => 'password',
- *   'host' => 'localhost',
- *   'prefix' => 'main_',
- *   'collation' => 'utf8_general_ci',
- * );
- * @endcode
- *
- * You can optionally set prefixes for some or all database table names
- * by using the 'prefix' setting. If a prefix is specified, the table
- * name will be prepended with its value. Be sure to use valid database
- * characters only, usually alphanumeric and underscore. If no prefixes
- * are desired, leave it as an empty string ''.
- *
- * To have all database names prefixed, set 'prefix' as a string:
- * @code
- *   'prefix' => 'main_',
- * @endcode
- * To provide prefixes for specific tables, set 'prefix' as an array.
- * The array's keys are the table names and the values are the prefixes.
- * The 'default' element is mandatory and holds the prefix for any tables
- * not specified elsewhere in the array. Example:
- * @code
- *   'prefix' => array(
- *     'default'   => 'main_',
- *     'users'     => 'shared_',
- *     'sessions'  => 'shared_',
- *     'role'      => 'shared_',
- *     'authmap'   => 'shared_',
- *   ),
- * @endcode
- * You can also use a reference to a schema/database as a prefix. This maybe
- * useful if your Drupal installation exists in a schema that is not the default
- * or you want to access several databases from the same code base at the same
- * time.
- * Example:
- * @code
- *   'prefix' => array(
- *     'default'   => 'main.',
- *     'users'     => 'shared.',
- *     'sessions'  => 'shared.',
- *     'role'      => 'shared.',
- *     'authmap'   => 'shared.',
- *   );
- * @endcode
- * NOTE: MySQL and SQLite's definition of a schema is a database.
- *
- * Advanced users can add or override initial commands to execute when
- * connecting to the database server, as well as PDO connection settings. For
- * example, to enable MySQL SELECT queries to exceed the max_join_size system
- * variable, and to reduce the database connection timeout to 5 seconds:
- *
- * @code
- * $databases['default']['default'] = array(
- *   'init_commands' => array(
- *     'big_selects' => 'SET SQL_BIG_SELECTS=1',
- *   ),
- *   'pdo' => array(
- *     PDO::ATTR_TIMEOUT => 5,
- *   ),
- * );
- * @endcode
- *
- * WARNING: These defaults are designed for database portability. Changing them
- * may cause unexpected behavior, including potential data loss.
- *
- * @see DatabaseConnection_mysql::__construct
- * @see DatabaseConnection_pgsql::__construct
- * @see DatabaseConnection_sqlite::__construct
- *
- * Database configuration format:
- * @code
- *   $databases['default']['default'] = array(
- *     'driver' => 'mysql',
- *     'database' => 'databasename',
- *     'username' => 'username',
- *     'password' => 'password',
- *     'host' => 'localhost',
- *     'prefix' => '',
- *   );
- *   $databases['default']['default'] = array(
- *     'driver' => 'pgsql',
- *     'database' => 'databasename',
- *     'username' => 'username',
- *     'password' => 'password',
- *     'host' => 'localhost',
- *     'prefix' => '',
- *   );
- *   $databases['default']['default'] = array(
- *     'driver' => 'sqlite',
- *     'database' => '/path/to/databasefilename',
- *   );
- * @endcode
- */
-$databases = array();
-
-/**
- * Access control for update.php script.
- *
- * If you are updating your Drupal installation using the update.php script but
- * are not logged in using either an account with the "Administer software
- * updates" permission or the site maintenance account (the account that was
- * created during installation), you will need to modify the access check
- * statement below. Change the FALSE to a TRUE to disable the access check.
- * After finishing the upgrade, be sure to open this file again and change the
- * TRUE back to a FALSE!
- */
-$update_free_access = FALSE;
-
-/**
- * Salt for one-time login links and cancel links, form tokens, etc.
- *
- * This variable will be set to a random value by the installer. All one-time
- * login links will be invalidated if the value is changed. Note that if your
- * site is deployed on a cluster of web servers, you must ensure that this
- * variable has the same value on each server. If this variable is empty, a hash
- * of the serialized database credentials will be used as a fallback salt.
- *
- * For enhanced security, you may set this variable to a value using the
- * contents of a file outside your docroot that is never saved together
- * with any backups of your Drupal files and database.
- *
- * Example:
- *   $drupal_hash_salt = file_get_contents('/home/example/salt.txt');
- *
- */
-$drupal_hash_salt = '';
-
-/**
- * Base URL (optional).
- *
- * If Drupal is generating incorrect URLs on your site, which could
- * be in HTML headers (links to CSS and JS files) or visible links on pages
- * (such as in menus), uncomment the Base URL statement below (remove the
- * leading hash sign) and fill in the absolute URL to your Drupal installation.
- *
- * You might also want to force users to use a given domain.
- * See the .htaccess file for more information.
- *
- * Examples:
- *   $base_url = 'http://www.example.com';
- *   $base_url = 'http://www.example.com:8888';
- *   $base_url = 'http://www.example.com/drupal';
- *   $base_url = 'https://www.example.com:8888/drupal';
- *
- * It is not allowed to have a trailing slash; Drupal will add it
- * for you.
- */
-# $base_url = 'http://www.example.com';  // NO trailing slash!
-
-/**
- * PHP settings:
- *
- * To see what PHP settings are possible, including whether they can be set at
- * runtime (by using ini_set()), read the PHP documentation:
- * http://www.php.net/manual/en/ini.list.php
- * See drupal_initialize_variables() in includes/bootstrap.inc for required
- * runtime settings and the .htaccess file for non-runtime settings. Settings
- * defined there should not be duplicated here so as to avoid conflict issues.
- */
-
-/**
- * Some distributions of Linux (most notably Debian) ship their PHP
- * installations with garbage collection (gc) disabled. Since Drupal depends on
- * PHP's garbage collection for clearing sessions, ensure that garbage
- * collection occurs by using the most common settings.
- */
-ini_set('session.gc_probability', 1);
-ini_set('session.gc_divisor', 100);
-
-/**
- * Set session lifetime (in seconds), i.e. the time from the user's last visit
- * to the active session may be deleted by the session garbage collector. When
- * a session is deleted, authenticated users are logged out, and the contents
- * of the user's $_SESSION variable is discarded.
- */
-ini_set('session.gc_maxlifetime', 200000);
-
-/**
- * Set session cookie lifetime (in seconds), i.e. the time from the session is
- * created to the cookie expires, i.e. when the browser is expected to discard
- * the cookie. The value 0 means "until the browser is closed".
- */
-ini_set('session.cookie_lifetime', 2000000);
-
-/**
- * If you encounter a situation where users post a large amount of text, and
- * the result is stripped out upon viewing but can still be edited, Drupal's
- * output filter may not have sufficient memory to process it.  If you
- * experience this issue, you may wish to uncomment the following two lines
- * and increase the limits of these variables.  For more information, see
- * http://php.net/manual/en/pcre.configuration.php.
- */
-# ini_set('pcre.backtrack_limit', 200000);
-# ini_set('pcre.recursion_limit', 200000);
-
-/**
- * Drupal automatically generates a unique session cookie name for each site
- * based on its full domain name. If you have multiple domains pointing at the
- * same Drupal site, you can either redirect them all to a single domain (see
- * comment in .htaccess), or uncomment the line below and specify their shared
- * base domain. Doing so assures that users remain logged in as they cross
- * between your various domains. Make sure to always start the $cookie_domain
- * with a leading dot, as per RFC 2109.
- */
-# $cookie_domain = '.example.com';
-
-/**
- * Variable overrides:
- *
- * To override specific entries in the 'variable' table for this site,
- * set them here. You usually don't need to use this feature. This is
- * useful in a configuration file for a vhost or directory, rather than
- * the default settings.php. Any configuration setting from the 'variable'
- * table can be given a new value. Note that any values you provide in
- * these variable overrides will not be modifiable from the Drupal
- * administration interface.
- *
- * The following overrides are examples:
- * - site_name: Defines the site's name.
- * - theme_default: Defines the default theme for this site.
- * - anonymous: Defines the human-readable name of anonymous users.
- * Remove the leading hash signs to enable.
- */
-# $conf['site_name'] = 'My Drupal site';
-# $conf['theme_default'] = 'garland';
-# $conf['anonymous'] = 'Visitor';
-
-/**
- * A custom theme can be set for the offline page. This applies when the site
- * is explicitly set to maintenance mode through the administration page or when
- * the database is inactive due to an error. It can be set through the
- * 'maintenance_theme' key. The template file should also be copied into the
- * theme. It is located inside 'modules/system/maintenance-page.tpl.php'.
- * Note: This setting does not apply to installation and update pages.
- */
-# $conf['maintenance_theme'] = 'bartik';
-
-/**
- * Reverse Proxy Configuration:
- *
- * Reverse proxy servers are often used to enhance the performance
- * of heavily visited sites and may also provide other site caching,
- * security, or encryption benefits. In an environment where Drupal
- * is behind a reverse proxy, the real IP address of the client should
- * be determined such that the correct client IP address is available
- * to Drupal's logging, statistics, and access management systems. In
- * the most simple scenario, the proxy server will add an
- * X-Forwarded-For header to the request that contains the client IP
- * address. However, HTTP headers are vulnerable to spoofing, where a
- * malicious client could bypass restrictions by setting the
- * X-Forwarded-For header directly. Therefore, Drupal's proxy
- * configuration requires the IP addresses of all remote proxies to be
- * specified in $conf['reverse_proxy_addresses'] to work correctly.
- *
- * Enable this setting to get Drupal to determine the client IP from
- * the X-Forwarded-For header (or $conf['reverse_proxy_header'] if set).
- * If you are unsure about this setting, do not have a reverse proxy,
- * or Drupal operates in a shared hosting environment, this setting
- * should remain commented out.
- *
- * In order for this setting to be used you must specify every possible
- * reverse proxy IP address in $conf['reverse_proxy_addresses'].
- * If a complete list of reverse proxies is not available in your
- * environment (for example, if you use a CDN) you may set the
- * $_SERVER['REMOTE_ADDR'] variable directly in settings.php.
- * Be aware, however, that it is likely that this would allow IP
- * address spoofing unless more advanced precautions are taken.
- */
-# $conf['reverse_proxy'] = TRUE;
-
-/**
- * Specify every reverse proxy IP address in your environment.
- * This setting is required if $conf['reverse_proxy'] is TRUE.
- */
-# $conf['reverse_proxy_addresses'] = array('a.b.c.d', ...);
-
-/**
- * Set this value if your proxy server sends the client IP in a header
- * other than X-Forwarded-For.
- */
-# $conf['reverse_proxy_header'] = 'HTTP_X_CLUSTER_CLIENT_IP';
-
-/**
- * Page caching:
- *
- * By default, Drupal sends a "Vary: Cookie" HTTP header for anonymous page
- * views. This tells a HTTP proxy that it may return a page from its local
- * cache without contacting the web server, if the user sends the same Cookie
- * header as the user who originally requested the cached page. Without "Vary:
- * Cookie", authenticated users would also be served the anonymous page from
- * the cache. If the site has mostly anonymous users except a few known
- * editors/administrators, the Vary header can be omitted. This allows for
- * better caching in HTTP proxies (including reverse proxies), i.e. even if
- * clients send different cookies, they still get content served from the cache.
- * However, authenticated users should access the site directly (i.e. not use an
- * HTTP proxy, and bypass the reverse proxy if one is used) in order to avoid
- * getting cached pages from the proxy.
- */
-# $conf['omit_vary_cookie'] = TRUE;
-
-/**
- * CSS/JS aggregated file gzip compression:
- *
- * By default, when CSS or JS aggregation and clean URLs are enabled Drupal will
- * store a gzip compressed (.gz) copy of the aggregated files. If this file is
- * available then rewrite rules in the default .htaccess file will serve these
- * files to browsers that accept gzip encoded content. This allows pages to load
- * faster for these users and has minimal impact on server load. If you are
- * using a webserver other than Apache httpd, or a caching reverse proxy that is
- * configured to cache and compress these files itself you may want to uncomment
- * one or both of the below lines, which will prevent gzip files being stored.
- */
-# $conf['css_gzip_compression'] = FALSE;
-# $conf['js_gzip_compression'] = FALSE;
-
-/**
- * String overrides:
- *
- * To override specific strings on your site with or without enabling locale
- * module, add an entry to this list. This functionality allows you to change
- * a small number of your site's default English language interface strings.
- *
- * Remove the leading hash signs to enable.
- */
-# $conf['locale_custom_strings_en'][''] = array(
-#   'forum'      => 'Discussion board',
-#   '@count min' => '@count minutes',
-# );
-
-/**
- *
- * IP blocking:
- *
- * To bypass database queries for denied IP addresses, use this setting.
- * Drupal queries the {blocked_ips} table by default on every page request
- * for both authenticated and anonymous users. This allows the system to
- * block IP addresses from within the administrative interface and before any
- * modules are loaded. However on high traffic websites you may want to avoid
- * this query, allowing you to bypass database access altogether for anonymous
- * users under certain caching configurations.
- *
- * If using this setting, you will need to add back any IP addresses which
- * you may have blocked via the administrative interface. Each element of this
- * array represents a blocked IP address. Uncommenting the array and leaving it
- * empty will have the effect of disabling IP blocking on your site.
- *
- * Remove the leading hash signs to enable.
- */
-# $conf['blocked_ips'] = array(
-#   'a.b.c.d',
-# );
-
-/**
- * Fast 404 pages:
- *
- * Drupal can generate fully themed 404 pages. However, some of these responses
- * are for images or other resource files that are not displayed to the user.
- * This can waste bandwidth, and also generate server load.
- *
- * The options below return a simple, fast 404 page for URLs matching a
- * specific pattern:
- * - 404_fast_paths_exclude: A regular expression to match paths to exclude,
- *   such as images generated by image styles, or dynamically-resized images.
- *   If you need to add more paths, you can add '|path' to the expression.
- * - 404_fast_paths: A regular expression to match paths that should return a
- *   simple 404 page, rather than the fully themed 404 page. If you don't have
- *   any aliases ending in htm or html you can add '|s?html?' to the expression.
- * - 404_fast_html: The html to return for simple 404 pages.
- *
- * Add leading hash signs if you would like to disable this functionality.
- */
-$conf['404_fast_paths_exclude'] = '/\/(?:styles)\//';
-$conf['404_fast_paths'] = '/\.(?:txt|png|gif|jpe?g|css|js|ico|swf|flv|cgi|bat|pl|dll|exe|asp)$/i';
-$conf['404_fast_html'] = '<html xmlns="http://www.w3.org/1999/xhtml"><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL "@path" was not found on this server.</p></body></html>';
-
-/**
- * By default, fast 404s are returned as part of the normal page request
- * process, which will properly serve valid pages that happen to match and will
- * also log actual 404s to the Drupal log. Alternatively you can choose to
- * return a 404 now by uncommenting the following line. This will reduce server
- * load, but will cause even valid pages that happen to match the pattern to
- * return 404s, rather than the actual page. It will also prevent the Drupal
- * system log entry. Ensure you understand the effects of this before enabling.
- *
- * To enable this functionality, remove the leading hash sign below.
- */
-# drupal_fast_404();
-
-/**
- * Authorized file system operations:
- *
- * The Update manager module included with Drupal provides a mechanism for
- * site administrators to securely install missing updates for the site
- * directly through the web user interface by providing either SSH or FTP
- * credentials. This allows the site to update the new files as the user who
- * owns all the Drupal files, instead of as the user the webserver is running
- * as. However, some sites might wish to disable this functionality, and only
- * update the code directly via SSH or FTP themselves. This setting completely
- * disables all functionality related to these authorized file operations.
- *
- * Remove the leading hash signs to disable.
- */
-# $conf['allow_authorize_operations'] = FALSE;
diff --git a/sites/example.sites.php b/sites/example.sites.php
deleted file mode 100644
index 08c1020..0000000
--- a/sites/example.sites.php
+++ /dev/null
@@ -1,43 +0,0 @@
-<?php
-
-/**
- * @file
- * Configuration file for Drupal's multi-site directory aliasing feature.
- *
- * Drupal searches for an appropriate configuration directory based on the
- * website's hostname and pathname. A detailed description of the rules for
- * discovering the configuration directory can be found in the comment
- * documentation in 'sites/default/default.settings.php'.
- *
- * This file allows you to define a set of aliases that map hostnames and
- * pathnames to configuration directories. These aliases are loaded prior to
- * scanning for directories, and they are exempt from the normal discovery
- * rules. The aliases are defined in an associative array named $sites, which
- * should look similar to the following:
- *
- * $sites = array(
- *   'devexample.com' => 'example.com',
- *   'localhost.example' => 'example.com',
- * );
- *
- * The above array will cause Drupal to look for a directory named
- * "example.com" in the sites directory whenever a request comes from
- * "example.com", "devexample.com", or "localhost/example". That is useful
- * on development servers, where the domain name may not be the same as the
- * domain of the live server. Since Drupal stores file paths into the database
- * (files, system table, etc.) this will ensure the paths are correct while
- * accessed on development servers.
- *
- * To use this file, copy and rename it such that its path plus filename is
- * 'sites/sites.php'. If you don't need to use multi-site directory aliasing,
- * then you can safely ignore this file, and Drupal will ignore it too.
- */
-
-/**
- * Multi-site directory aliasing:
- *
- * Edit the lines below to define directory aliases. Remove the leading hash
- * signs to enable.
- */
-# $sites['devexample.com'] = 'example.com';
-# $sites['localhost.example'] = 'example.com';
diff --git a/themes/bartik/bartik.info b/themes/bartik/bartik.info
index cadeef2..fdbd260 100644
--- a/themes/bartik/bartik.info
+++ b/themes/bartik/bartik.info
@@ -34,10 +34,10 @@ regions[footer] = Footer
 settings[shortcut_module_link] = 0
 
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/themes/bartik/css/style.css b/themes/bartik/css/style.css
index 4fb8210..8e95202 100644
--- a/themes/bartik/css/style.css
+++ b/themes/bartik/css/style.css
@@ -1488,7 +1488,7 @@ ol.search-results {
 }
 .search-results li:last-child {
   border-bottom: none;
-  padding-bottom: none;
+  padding-bottom: 0;
   margin-bottom: 1em;
 }
 .search-results .search-snippet-info {
diff --git a/themes/bartik/template.php b/themes/bartik/template.php
index bdad570..7466e05 100644
--- a/themes/bartik/template.php
+++ b/themes/bartik/template.php
@@ -150,7 +150,7 @@ function bartik_field__taxonomy_term_reference($variables) {
   $output .= '</ul>';
 
   // Render the top-level DIV.
-  $output = '<div class="' . $variables['classes'] . (!in_array('clearfix', $variables['classes_array']) ? ' clearfix' : '') . '">' . $output . '</div>';
+  $output = '<div class="' . $variables['classes'] . (!in_array('clearfix', $variables['classes_array']) ? ' clearfix' : '') . '"' . $variables['attributes'] .'>' . $output . '</div>';
 
   return $output;
 }
diff --git a/themes/garland/garland.info b/themes/garland/garland.info
index 8e6f82f..9c39fca 100644
--- a/themes/garland/garland.info
+++ b/themes/garland/garland.info
@@ -7,10 +7,10 @@ stylesheets[all][] = style.css
 stylesheets[print][] = print.css
 settings[garland_width] = fluid
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/themes/seven/seven.info b/themes/seven/seven.info
index 9fd84bb..b467825 100644
--- a/themes/seven/seven.info
+++ b/themes/seven/seven.info
@@ -13,10 +13,10 @@ regions[page_bottom] = Page bottom
 regions[sidebar_first] = First sidebar
 regions_hidden[] = sidebar_first
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
diff --git a/themes/stark/stark.info b/themes/stark/stark.info
index aab3094..bb9394c 100644
--- a/themes/stark/stark.info
+++ b/themes/stark/stark.info
@@ -5,10 +5,10 @@ version = VERSION
 core = 7.x
 stylesheets[all][] = layout.css
 
-; Information added by drupal.org packaging script on 2012-05-02
-version = "7.14"
+; Information added by drupal.org packaging script on 2012-08-01
+version = "7.15"
 project = "drupal"
-datestamp = "1335997555"
+datestamp = "1343839327"
 
 
 ; Information added by Acquia.com packaging script
